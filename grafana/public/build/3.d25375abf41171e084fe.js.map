{"version":3,"sources":["webpack:///./public/vendor/flot/jquery.flot.gauge.js","webpack:///./public/vendor/flot/jquery.flot.dashes.js","webpack:///./public/vendor/flot/jquery.flot.crosshair.js","webpack:///./public/vendor/flot/jquery.flot.fillbelow.js","webpack:///./public/vendor/flot/jquery.flot.stackpercent.js","webpack:///./public/vendor/flot/jquery.flot.stack.js","webpack:///./public/vendor/flot/jquery.flot.selection.js","webpack:///./public/vendor/flot/jquery.flot.pie.js","webpack:///./public/app/plugins/datasource/prometheus/snippets/prometheus.js","webpack:///./public/app/plugins/datasource/prometheus/mode-prometheus.js","webpack:///./public/app/features/panellinks/link_srv.ts","webpack:///./public/app/features/panellinks/module.ts","webpack:///./public/app/features/dashlinks/editor.ts","webpack:///./public/app/features/dashlinks/module.ts","webpack:///./public/app/features/annotations/editor_ctrl.ts","webpack:///./public/app/features/annotations/events_processing.ts","webpack:///./public/app/features/annotations/annotations_srv.ts","webpack:///./public/app/features/annotations/event_editor.ts","webpack:///./public/app/features/annotations/event.ts","webpack:///./public/app/features/annotations/event_manager.ts","webpack:///./public/app/features/annotations/annotation_tooltip.ts","webpack:///./public/app/features/annotations/all.ts","webpack:///./public/app/features/templating/variable.ts","webpack:///./public/app/features/templating/editor_ctrl.ts","webpack:///./public/app/features/templating/template_srv.ts","webpack:///./public/app/core/utils/dag.ts","webpack:///./public/app/features/templating/variable_srv.ts","webpack:///./public/app/features/templating/interval_variable.ts","webpack:///./public/app/features/templating/query_variable.ts","webpack:///./public/app/features/templating/datasource_variable.ts","webpack:///./public/app/features/templating/custom_variable.ts","webpack:///./public/app/features/templating/constant_variable.ts","webpack:///./public/app/features/templating/adhoc_variable.ts","webpack:///./public/app/features/templating/all.ts","webpack:///./public/app/features/plugins/plugin_edit_ctrl.ts","webpack:///./public/app/features/plugins/plugin_page_ctrl.ts","webpack:///./public/app/features/plugins/plugin_list_ctrl.ts","webpack:///./public/app/features/plugins/import_list/import_list.ts","webpack:///./public/app/features/plugins/ds_edit_ctrl.ts","webpack:///./public/app/features/plugins/ds_dashboards_ctrl.ts","webpack:///./public/app/features/plugins/ds_list_ctrl.ts","webpack:///./public/app/features/panel/panel_ctrl.ts","webpack:///./public/app/features/panel/metrics_tab.ts","webpack:///./public/app/features/panel/metrics_panel_ctrl.ts","webpack:///./public/app/features/panel/query_ctrl.ts","webpack:///./public/app/features/alerting/threshold_mapper.ts","webpack:///./public/app/features/alerting/alert_tab_ctrl.ts","webpack:///./public/app/plugins/sdk.ts","webpack:///./public/app/core/utils/file_export.ts","webpack:///./public/app/core/utils/flatten.ts","webpack:///./public/app/core/utils/version.ts","webpack:///./public/app/plugins/datasource/graphite/gfunc.ts","webpack:///./public/app/plugins/datasource/graphite/datasource.ts","webpack:///./public/app/plugins/datasource/graphite/add_graphite_func.ts","webpack:///./public/app/plugins/datasource/graphite/func_editor.ts","webpack:///./public/app/plugins/datasource/graphite/lexer.ts","webpack:///./public/app/plugins/datasource/graphite/parser.ts","webpack:///./public/app/plugins/datasource/graphite/graphite_query.ts","webpack:///./public/app/plugins/datasource/graphite/query_ctrl.ts","webpack:///./public/app/plugins/datasource/graphite/module.ts","webpack:///./public/app/plugins/datasource/graphite/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_parameter_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/datasource.ts","webpack:///./public/app/plugins/datasource/cloudwatch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/cloudwatch/module.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_def.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_builder.ts","webpack:///./public/app/plugins/datasource/elasticsearch/elastic_response.ts","webpack:///./public/app/plugins/datasource/elasticsearch/index_pattern.ts","webpack:///./public/app/plugins/datasource/elasticsearch/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/bucket_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/metric_agg.ts","webpack:///./public/app/plugins/datasource/elasticsearch/query_ctrl.ts","webpack:///./public/app/plugins/datasource/elasticsearch/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/datasource.ts","webpack:///./public/app/plugins/datasource/elasticsearch/module.ts","webpack:///./public/app/plugins/datasource/opentsdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/config_ctrl.ts","webpack:///./public/app/plugins/datasource/opentsdb/module.ts","webpack:///./public/app/plugins/datasource/grafana/datasource.ts","webpack:///./public/app/plugins/datasource/grafana/module.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_series.ts","webpack:///./public/app/plugins/datasource/influxdb/query_part.ts","webpack:///./public/app/plugins/datasource/influxdb/influx_query.ts","webpack:///./public/app/plugins/datasource/influxdb/query_builder.ts","webpack:///./public/app/plugins/datasource/influxdb/response_parser.ts","webpack:///./public/app/plugins/datasource/influxdb/datasource.ts","webpack:///./public/app/plugins/datasource/influxdb/query_ctrl.ts","webpack:///./public/app/plugins/datasource/influxdb/module.ts","webpack:///./public/app/core/logs_model.ts","webpack:///./public/app/plugins/datasource/logging/result_transformer.ts","webpack:///./public/app/plugins/datasource/logging/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/response_parser.ts","webpack:///./public/app/plugins/datasource/logging/module.ts","webpack:///./public/app/plugins/datasource/mixed/datasource.ts","webpack:///./public/app/plugins/datasource/mixed/module.ts","webpack:///./public/app/plugins/datasource/mysql/datasource.ts","webpack:///./public/app/plugins/datasource/mysql/module.ts","webpack:///./public/app/plugins/datasource/mysql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/postgres/response_parser.ts","webpack:///./public/app/plugins/datasource/postgres/datasource.ts","webpack:///./public/app/plugins/datasource/postgres/module.ts","webpack:///./public/app/plugins/datasource/postgres/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/metric_find_query.ts","webpack:///./public/app/plugins/datasource/prometheus/result_transformer.ts","webpack:///./public/app/plugins/datasource/prometheus/datasource.ts","webpack:///./public/app/plugins/datasource/prometheus/completer.ts","webpack:///./public/app/plugins/datasource/prometheus/query_ctrl.ts","webpack:///./public/app/plugins/datasource/prometheus/config_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/response_parser.ts","webpack:///./public/app/plugins/datasource/prometheus/module.ts","webpack:///./public/app/plugins/datasource/mssql/datasource.ts","webpack:///./public/app/plugins/datasource/testdata/datasource.ts","webpack:///./public/app/plugins/datasource/mssql/query_ctrl.ts","webpack:///./public/app/plugins/datasource/mssql/module.ts","webpack:///./public/app/plugins/datasource/testdata/query_ctrl.ts","webpack:///./public/app/plugins/datasource/testdata/module.ts","webpack:///./public/app/plugins/panel/text/module.ts","webpack:///./public/app/plugins/panel/graph/jquery.flot.events.ts","webpack:///./public/app/plugins/panel/graph/graph_tooltip.ts","webpack:///./public/app/plugins/panel/graph/threshold_manager.ts","webpack:///./public/app/plugins/panel/graph/align_yaxes.ts","webpack:///./public/app/plugins/panel/graph/histogram.ts","webpack:///./public/app/plugins/panel/graph/graph.ts","webpack:///./public/app/plugins/panel/graph/legend.ts","webpack:///./public/app/plugins/panel/graph/series_overrides_ctrl.ts","webpack:///./public/app/plugins/panel/graph/thresholds_form.ts","webpack:///./public/app/plugins/panel/graph/template.ts","webpack:///./public/app/plugins/panel/graph/data_processor.ts","webpack:///./public/app/plugins/panel/graph/module.ts","webpack:///./public/app/plugins/panel/graph/axes_editor.ts","webpack:///./public/app/plugins/panel/dashlist/module.ts","webpack:///./public/app/plugins/panel/pluginlist/module.ts","webpack:///./public/app/plugins/panel/alertlist/module.ts","webpack:///./public/app/plugins/panel/heatmap/color_scale.ts","webpack:///./public/app/plugins/panel/heatmap/color_legend.ts","webpack:///./public/app/plugins/panel/heatmap/display_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_data_converter.ts","webpack:///./public/app/plugins/panel/heatmap/axes_editor.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_tooltip.ts","webpack:///./public/app/plugins/panel/heatmap/rendering.ts","webpack:///./public/app/plugins/panel/heatmap/heatmap_ctrl.ts","webpack:///./public/app/plugins/panel/heatmap/module.ts","webpack:///./public/app/plugins/panel/table/transformers.ts","webpack:///./public/app/plugins/panel/table/editor.ts","webpack:///./public/app/plugins/panel/table/column_options.ts","webpack:///./public/app/plugins/panel/table/renderer.ts","webpack:///./public/app/plugins/panel/table/module.ts","webpack:///./public/app/plugins/panel/singlestat/module.ts","webpack:///./public/app/plugins/panel/gettingstarted/module.ts","webpack:///./public/app/features/plugins/built_in_plugins.ts","webpack:///./public/app/features/plugins/plugin_loader.ts","webpack:///./public/app/features/plugins/datasource_srv.ts","webpack:///./public/app/plugins/panel/unknown/module.ts","webpack:///./public/app/features/plugins/plugin_component.ts","webpack:///./public/app/features/dashboard/dashboard_ctrl.ts","webpack:///./public/app/features/plugins/all.ts","webpack:///./public/app/features/dashboard/alerting_srv.ts","webpack:///./public/app/features/dashboard/history/history_srv.ts","webpack:///./public/app/features/dashboard/history/history.ts","webpack:///./public/app/features/dashboard/dashboard_loader_srv.ts","webpack:///./public/app/features/dashboard/dashnav/dashnav.ts","webpack:///./public/app/features/dashboard/submenu/submenu.ts","webpack:///./public/app/features/dashboard/save_as_modal.ts","webpack:///./public/app/features/dashboard/save_modal.ts","webpack:///./public/app/features/dashboard/save_provisioned_modal.ts","webpack:///./public/app/features/dashboard/shareModalCtrl.ts","webpack:///./public/app/features/dashboard/share_snapshot_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_srv.ts","webpack:///./public/app/features/dashboard/view_state_srv.ts","webpack:///./public/app/features/dashboard/validation_srv.ts","webpack:///./public/app/features/dashboard/time_srv.ts","webpack:///./public/app/features/dashboard/change_tracker.ts","webpack:///./public/app/features/dashboard/unsaved_changes_srv.ts","webpack:///./public/app/features/dashboard/unsaved_changes_modal.ts","webpack:///./public/app/features/dashboard/timepicker/input_date.ts","webpack:///./public/app/features/dashboard/timepicker/timepicker.ts","webpack:///./public/app/features/dashboard/upload.ts","webpack:///./public/app/features/dashboard/export/exporter.ts","webpack:///./public/app/features/dashboard/export/export_modal.ts","webpack:///./public/app/features/dashboard/export_data/export_data_modal.ts","webpack:///./public/app/features/dashboard/ad_hoc_filters.ts","webpack:///./public/app/features/dashboard/repeat_option/repeat_option.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardRow.tsx","webpack:///./public/app/core/components/ScrollBar/ScrollBar.tsx","webpack:///./public/app/features/dashboard/dashgrid/AddPanelPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardPanel.tsx","webpack:///./public/app/features/dashboard/dashgrid/DashboardGrid.tsx","webpack:///./public/app/features/dashboard/dashgrid/PanelLoader.ts","webpack:///./public/app/features/dashboard/dashgrid/DashboardGridDirective.ts","webpack:///./public/app/features/dashboard/dashgrid/RowOptions.ts","webpack:///./public/app/features/dashboard/folder_picker/folder_picker.ts","webpack:///./public/app/features/dashboard/move_to_folder_modal/move_to_folder.ts","webpack:///./public/app/features/dashboard/settings/settings.ts","webpack:///./public/app/features/dashboard/dashboard_list_ctrl.ts","webpack:///./public/app/features/dashboard/folder_page_loader.ts","webpack:///./public/app/features/dashboard/folder_dashboards_ctrl.ts","webpack:///./public/app/features/dashboard/folder_settings_ctrl.ts","webpack:///./public/app/features/dashboard/dashboard_import_ctrl.ts","webpack:///./public/app/features/playlist/playlists_ctrl.ts","webpack:///./public/app/features/dashboard/create_folder_ctrl.ts","webpack:///./public/app/features/dashboard/all.ts","webpack:///./public/app/features/playlist/playlist_search.ts","webpack:///./public/app/features/playlist/playlist_srv.ts","webpack:///./public/app/features/playlist/playlist_edit_ctrl.ts","webpack:///./public/app/features/playlist/playlist_routes.ts","webpack:///./public/app/features/playlist/all.ts","webpack:///./public/app/features/snapshot/snapshot_ctrl.ts","webpack:///./public/app/features/panel/panel_header.ts","webpack:///./public/app/features/snapshot/all.ts","webpack:///./public/app/features/panel/panel_directive.ts","webpack:///./public/app/features/panel/solo_panel_ctrl.ts","webpack:///./public/app/features/panel/panel_editor_tab.ts","webpack:///./public/app/features/panel/query_editor_row.ts","webpack:///./public/app/features/panel/query_troubleshooter.ts","webpack:///./public/app/features/panel/all.ts","webpack:///./public/app/features/org/org_users_ctrl.ts","webpack:///./public/app/features/org/profile_ctrl.ts","webpack:///./public/app/features/org/select_org_ctrl.ts","webpack:///./public/app/features/org/new_org_ctrl.ts","webpack:///./public/app/features/org/change_password_ctrl.ts","webpack:///./public/app/features/org/user_invite_ctrl.ts","webpack:///./public/app/features/org/create_team_ctrl.ts","webpack:///./public/app/features/org/org_api_keys_ctrl.ts","webpack:///./public/app/features/org/org_details_ctrl.ts","webpack:///./public/app/features/org/prefs_control.ts","webpack:///./public/app/features/org/all.ts","webpack:///./public/app/features/admin/admin_list_users_ctrl.ts","webpack:///./public/app/features/admin/admin_list_orgs_ctrl.ts","webpack:///./public/app/features/admin/admin_edit_org_ctrl.ts","webpack:///./public/app/features/admin/admin_edit_user_ctrl.ts","webpack:///./public/app/features/admin/admin.ts","webpack:///./public/app/features/alerting/notifications_list_ctrl.ts","webpack:///./public/app/features/alerting/notification_edit_ctrl.ts","webpack:///./public/app/features/alerting/all.ts","webpack:///./public/app/features/styleguide/styleguide.ts","webpack:///./public/app/features/all.ts"],"names":["$","Gauge","context","placeholder","options","gaugeOptions","series","plot","ctx","getPlaceholder","getOptions","gauges","getData","getLogger","debug","calculateAutoValues","gaugeOptionsi","cellWidth","gauge","width","Math","max","label","margin","font","size","value","threshold","calculateAngle","layout","data","a","startAngle","endAngle","min","drawArcWithShadow","cx","cy","r","w","rd1","rd2","lc","lw","fc","blur","save","drawArc","clip","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","restore","drawThresholdValue","cellLayout","i","drawText","thresholdLabelMargin","thresholdLabelFontSize","radius","cos","toRad","sin","formatter","x","y","id","text","textOptions","span","exists","length","attr","css","family","color","background","opacity","append","parseInt","height","prototype","calculateLayout","canvasWidth","canvasHeight","columns","rows","ceil","hMargin","vMargin","cellHeight","square","cell","cellMargin","labelMargin","labelFontSize","show","valueMargin","valueFontSize","thresholdWidth","maxRadiusH","dAngle","heightRatioV","outerRadiusV","maxRadiusV","outerRadius","gaugeOuterHeight","calculateCellLayout","c","col","floor","row","blank","offsetY","vAlign","drawBackground","frame","strokeStyle","grid","borderColor","lineWidth","borderWidth","strokeRect","backgroundColor","fillStyle","fillRect","drawCellBackground","border","drawGauge","shadow","c1","values","getColor","a2","drawThreshold","a1","drawLable","item","drawValue","drawThresholdValues","j","debugOptions","Logger","PI","beginPath","arc","lineTo","closePath","stroke","fill","defaults","log","alert","plugins","push","init","hooks","processOptions","legend","sort","b","draw","extend","name","version","jQuery","processDatapoints","datapoints","dashes","plotOffset","getPlotOffset","axisx","xaxis","axisy","yaxis","plotDashes","xoffset","yoffset","dashOnLength","dashOffLength","points","ps","pointsize","prevx","prevy","dashRemainder","dashOn","dashLength","x1","y1","x2","y2","moveTo","p2c","dashOffset","ax1","ay1","ax2","ay2","lineSegmentOffset","deltaX","deltaY","remainder","distance","segmentLength","sqrt","pow","ysign","translate","left","top","lineJoin","sw","shadowSize","angle","crosshair","locked","onMouseOut","e","triggerRedrawOverlay","onMouseMove","getSelection","offset","pageX","pageY","setCrosshair","pos","o","clearCrosshair","lockCrosshair","unlockCrosshair","bindEvents","eventHolder","mode","mouseout","mousemove","drawOverlay","adj","indexOf","drawX","drawY","shutdown","unbind","segmentIntersection","top_left_x","top_left_y","top_right_x","top_right_y","bottom_left_x","bottom_left_y","bottom_right_x","bottom_right_y","top_delta_x","top_delta_y","bottom_delta_x","bottom_delta_y","s","t","drawSeries","otherseries","otherps","otherpoints","openPolygon","findNextStart","start_i","end_i","console","assert","intersect","start","equal","intersectionPoint","topTraversal","right_i","error","bottomTraversal","fillBelowTo","allseries","findBelowSeries","validateInput","parse","normalize","toString","stackBases","processed","stackSums","getStackSums","_data","data_len","sums","stackpercent","key_idx","value_idx","bars","horizontal","num","processRawData","percents","sum","newPoints","stack","other","res","findMatchingSeries","px","py","intery","qx","qy","bottom","l","m","newpoints","withlines","lines","withbottom","format","withsteps","steps","keyOffset","accumulateOffset","fromgap","selection","first","second","active","savedhandlers","mouseUpHandler","updateSelection","trigger","onMouseDown","which","document","body","focus","undefined","onselectstart","ondrag","setSelectionPos","selectionIsSane","triggerSelectedEvent","setTimeout","isSelecting","onMouseUp","one","c2","axes","getAxes","each","axis","used","anyUsed","p1","c2p","direction","p2","from","to","event","ctrlKey","metaKey","clamp","clearSelection","preventEvent","extractRange","ranges","coord","key","k","n","getXAxes","getYAxes","tmp","minSize","abs","setSelection","range","mousedown","scale","shape","h","REDRAW_ATTEMPTS","REDRAW_SHRINK","pie","innerRadius","tilt","alpha","slice","round","percent","combine","highlight","canvas","target","maxRadius","centerLeft","centerTop","highlights","getCanvas","parent","setData","total","combined","numCombined","newdata","isArray","isNaN","parseFloat","isFinite","newCtx","legendWidth","children","filter","position","match","slices","attempts","clear","drawShadow","drawPie","prepend","setSeries","insertLegend","clearRect","remove","shadowLeft","shadowTop","globalAlpha","currentAngle","drawSlice","drawDonutHole","drawLabel","index","lf","labelFormatter","plf","halfAngle","html","labelTop","labelLeft","insertBefore","drawLabels","layer","globalCompositeOperation","isPointInPoly","poly","pt","triggerClickHoverEvent","onClick","eventname","mouseX","mouseY","isPointInPath","datapoint","dataIndex","seriesIndex","findNearbySlice","autoHighlight","auto","unhighlight","indexOfHighlight","splice","hoverable","clickable","click","octx","drawHighlight","ace","define","require","exports","module","snippets","content","scope","tabTrigger","oop","TextHighlightRules","PrometheusHighlightRules","keywordMapper","this","createKeywordMapper","support.function","keyword","constant.language","$rules","token","regex","next","start-label-matcher","start-label-list-matcher","normalizeRules","inherits","lang","keyWordsCompletions","map","word","caption","meta","score","Number","MAX_VALUE","functionsCompletions","def","docText","docHTML","escapeHTML","replace","convertMarkDownTags","str","len","space_index","line_start","next_line_end","line","join","wrapText","convertToHTML","PrometheusCompletions","getCompletions","state","session","prefix","callback","getTokenAt","column","type","concat","call","CstyleBehaviour","Behaviour","TokenIterator","PrometheusBehaviour","inherit","add","action","editor","getSelectionRange","selected","doc","getTextRange","getWrapBehavioursEnabled","opening","closing","rowDiff","end","getWrapped","isSaneInsertion","cursor","getCursorPosition","getLine","substring","$findOpeningBracket","isAutoInsertedClosing","isMultiLine","TextMode","Mode","HighlightRules","$behaviour","$completer","completer","$id","__webpack_require__","singlestat_module_namespaceObject","d","module_SingleStatCtrl","getColorForValue","gettingstarted_module_namespaceObject","module_GettingStartedPanelCtrl","angular","lodash","LinkSrv","templateSrv","timeSrv","getLinkUrl","link","url","keepTime","timeRangeForUrl","includeVars","fillVariableValuesForUrl","params","addParamsToUrl","paramsArray","lodash_default","instance","encodeURIComponent","appendToQueryString","stringToAppend","isUndefined","getAnchorInfo","href","title","info","getPanelLinkAnchorInfo","scopedVars","targetBlank","dashUri","service","link_srv_LinkSrv","$scope","backendSrv","panel","links","searchDashboards","queryStr","search","query","then","hits","dashboards","dash","dashboardChanged","dashboard","find","uri","deleteLink","without","$inject","PanelLinksEditorCtrl","restrict","controller","module_PanelLinksEditorCtrl","question","cloud","DashLinkEditorCtrl","$rootScope","iconMap","$on","appEvent","backToList","setupNew","icon","addLink","editLink","saveLink","move","dir","updateSubmenuVisibility","$compile","$sanitize","linkSrv","elem","asDropdown","update","linkInfo","anchor","anchorSanitized","sanitizeAnchor","tooltip","container","template","contents","$last","addClass","directive","editor_DashLinkEditorCtrl","templateUrl","bindToController","controllerAs","$q","dashboardSrv","getCurrent","linkDef","tags","when","updateDashLinks","promises","buildLinks","results","generatedLinks","flatten","limit","tag","reduce","memo","currentDashId","hit","searchHits","onAppEvent","dashLink","module_DashLinksContainerCtrl","jquery_js_exposed","editor_ctrl_AnnotationsEditorCtrl","AnnotationsEditorCtrl","datasourceSrv","annotationDefaults","datasource","iconColor","enable","showIn","hide","showOptions","ctrl","datasources","getAnnotationSources","annotations","list","reset","onColorChange","bind","datasourceChanged","_this","get","currentAnnotation","ds","currentDatasource","edit","annotation","currentIsNew","jquery_js_exposed_default","angular_default","copy","removeAnnotation","newColor","partition","regionEvents","_a","singleEvents","events","regionId","regions","groupBy","compact","regionObj","head","timeEnd","time","isRegion","isStartOfRegion","valueOf","isPanelAlert","eventType","AnnotationsSrv","clearCache","globalAnnotationsPromise","alertStatesPromise","getAnnotations","all","getGlobalAnnotations","getAlertStates","flattenDeep","makeRegions","dedup","eventsById","eventGroup","every","dedupAnnotations","panelId","source","alertState","catch","err","message","raw","timeRange","this_1","annotationQuery","rangeRaw","snapshot","snapshotData","translateQueryResult","_i","state_1","_loop_1","saveAnnotationEvent","post","results_1","annotations_srv_AnnotationsSrv","moment","annotationsSrv","panelCtrl","dashboardId","tryEpochToMoment","timeFormated","formatDate","form","$valid","saveModel","cloneDeep","updateAnnotationEvent","refresh","close","delete","deleteAnnotationEvent","epoch","timestamp","moment_default","tinycolor","tinycolor_default","AnnotationEvent","EventManager","editorClosed","editorOpen","render","editorOpened","updateTime","editEvent","addFlotEvents","flotOptions","colors","markerSize","editModel","newState","types","fillColor","colorString","isValid","setAlpha","toRgbString","addAlphaToRGB","region","defaultColor","markings","event_manager_getRegions","eventSectionHeight","levels","keys","manager","contextSrv","escape","onEdit","element","titleStateClass","alertId","stateModel","alert_def","getStateDisplayModel","stateClass","iconClass","getAlertAnnotationInfo","isString","header","login","sanitizeString","canEdit","appendTo","annotationTooltipDirective","model_utils","variableTypes","containsVariable","args","arguments","kbn","regexEscape","variableName","RegExp","exec","VariableEditorCtrl","variableSrv","namePattern","_","optionsLimit","refreshOptions","sortOptions","hideOptions","variables","$watch","val","setMode","addVariable","current","app_events","emit","sameName","validate","infoText","getTagKeys","runQuery","updateOptions","variable","duplicate","clone","getSaveModel","createVariableFromModel","updateTemplateData","getMetricSources","mixed","datasourceTypes","typeChanged","old","oldIndex","removeVariable","showMoreOptions","editor_ctrl_VariableEditorCtrl","template_srv","TemplateSrv","grafanaVariables","builtIns","isNone","variableInitialized","getAdhocFilters","datasourceName","filters","luceneFormat","luceneEscape","Array","formatValue","escapedValues","distributeVariable","setGrafanaVariable","getVariableName","expression","lastIndex","variableExists","highlightVariablesAsHtml","var1","var2","fmt2","var3","getAllValue","allValue","systemValue","fmt","fmt3","isAllValue","replaceWithText","option","skipUrlSync","getValueForUrl","Edge","_linkTo","node","inputEdges","outputEdges","edges","inputNode","outputNode","unlink","inode","onode","Node","getEdgeFrom","getEdgeTo","getOptimizedInputEdges","toBeRemoved","forEach","edgeToRemove","Graph","nodes","createNode","createNodes","names","input","output","inputArr","outputArr","inputNodes","getNode","outputNodes","createEdge","VariableSrv","$location","$injector","onDashboardRefresh","updateUrlParamsWithCurrentVariables","templating","initLock","defer","processVariable","queryParams","evt","payload","fromVariableValueUpdated","Promise","resolve","previousOptions","toJson","$emit","dependencies","otherVariable","dependsOn","promise","urlValue","setValueFromUrl","finally","model","ctor","instantiate","variableUpdated","emitChangeEvents","createGraph","v","$broadcast","selectOptionsForCurrentValue","validateVariableSelectionState","setValue","currentOption","setOptionFromUrl","op","defaultText","defaultValue","setOptionAsCurrent","setAdhocFilter","operator","g","v1","v2","variable_srv_VariableSrv","IntervalVariable","auto_min","auto_count","Object","updateAutoValue","calculateInterval","interval","trim","query_variable_QueryVariable","QueryVariable","multi","includeAll","updateOptionsFromMetricFindQuery","updateTags","useTags","metricFindQuery","tagsQuery","getValuesForTag","tagKey","tagValuesQuery","metricNamesToVariableValues","addAllOption","unshift","metricNames","matches","stringToJsRegex","isNumber","uniqBy","sortVariableValues","sortOrder","sortType","reverseSort","sortBy","opt","toLower","reverse","DatasourceVariable","sources","skipVariables","datasource_variable_DatasourceVariable","description","CustomVariable","split","custom_variable_CustomVariable","supportsMulti","constant_variable_ConstantVariable","ConstantVariable","AdhocVariable","unescapeDelimiter","escapeDelimiter","setFilters","adhoc_variable_AdhocVariable","factory","remarkable","PluginEditCtrl","$sce","$routeParams","navModelSrv","pluginId","postUpdateHook","setNavModel","defaultTab","navModel","main","img","logos","large","subTitle","author","breadcrumbs","includes","tab","result","pluginIcon","getPluginIcon","plug","initReadme","md","remarkable_default","linkify","readmeHtml","trustAsHtml","preUpdateHook","updateCmd","enabled","pinned","jsonData","secureJsonData","window","location","importDashboards","setPreUpdateHook","setPostUpdateHook","updateAvailable","$new","plugin","src","modalScope","disable","plugin_edit_ctrl_PluginEditCtrl","AppPageCtrl","initPage","pluginInfoCache","loadPluginInfo","app","appModel","page","slug","getNotFoundNav","pluginNav","getNav","plugin_page_ctrl_AppPageCtrl","plugin_list_ctrl_PluginListCtrl","PluginListCtrl","tabIndex","embedded","allPlugins","onQueryUpdated","searchQuery","test","DashImportListCtrl","on","importAll","importNext","reject","import","overwrite","installCmd","path","importedUri","imported","import_list_DashImportListCtrl","DataSourceEditCtrl","nav","load","mobx_module","store","loadDatasourceTypes","getDatasourceById","initNewDatasourceModel","isNew","ds_edit_ctrl_defaults","gettingstarted","gettingStarted","isDefault","datasourceCreated","testDatasource","userChangedType","updateNav","initDatasourceEditNav","datasourceMeta","pluginInfo","updateFrontendSettings","settings","config","defaultDatasource","testing","done","status","withNoBackendCache","statusText","saveChanges","editForm","put","confirmDelete","core","yesText","onConfirm","ds_edit_ctrl_DataSourceEditCtrl","noDirectAccess","pre","attrs","showAccessOption","showAccessHelp","toggleAccessHelp","getSuggestUrls","suggestUrl","ds_dashboards_ctrl_DataSourceDashboardsCtrl","DataSourceDashboardsCtrl","getPluginInfo","DataSourcesCtrl","unfiltered","removeDataSource","removeDataSourceConfirmed","ds_list_ctrl_DataSourcesCtrl","system_default","system","PanelCtrl","$timeout","editorTabIndex","timing","panels","pluginName","panelDidMount","removeAllListeners","publishAppEvent","renderingCompleted","evtName","$root","changeView","fullscreen","viewPanel","editPanel","exitFullscreen","initEditMode","toLowerCase","editorTabs","urlTab","changeTab","newIndex","route","updateParams","addEditorTab","directiveFn","editorTab","getMenu","menu","role","shortcut","apply","getAdditionalMenuItems","extendedMenu","getExtendedMenu","submenu","divider","otherPanelInFullscreenMode","calculatePanelHeight","docHeight","editHeight","fullscreenHeight","containerHeight","editMode","gridPos","constants","soloMode","renderStart","Date","getTime","duplicatePanel","removePanel","editPanelJson","editScope","object","updateHandler","replacePanel","enableCopy","copyPanel","core_store","set","JSON","stringify","newPanel","oldPanel","findIndex","deletedPanel","panel_model","sharePanel","shareScope","getInfoMode","sanitize","openInspector","panelInfoHtml","getInfoContent","inspector","datemath","MetricsTabCtrl","panelDsValue","datasourceInstance","addQueryDropdown","fake","nextRefId","getNextQueryLetter","updateDatasourceOptions","hasQueryHelp","queryOptions","includeBuiltin","builtIn","setDatasource","addMixedQuery","addQuery","toggleHelp","optionsOpen","queryTroubleshooterOpen","helpOpen","helpHtml","toggleOptions","toggleQueryTroubleshooter","metrics_tab_MetricsTabCtrl","_super","MetricsPanelCtrl","targets","onMetricsPanelRefresh","onInitMetricsPanelEditMode","onPanelTearDown","dataSubscription","unsubscribe","metricsTabDirective","updateTimeRange","data_1","dataStream","loading","setTimeQueryStart","issueQueries","handleQueryResult","cancelled","queryStart","setTimeQueryEnd","queryEnd","applyPanelTimeOverrides","maxDataPoints","resolution","intervalOverride","intervalMs","timeInfo","timeFrom","timeFromInterpolated","timeFromInfo","rangeutil","invalid","timeFromDate","display","timeShift","timeShiftInterpolated","hideTimeOverride","assign","__interval","getTimezone","cacheTimeout","metricsQuery","subscribe","handleDataStream","stream","complete","items","exploreEnabled","isEditor","supportsExplore","explore","tslib_es6","getExploreState","exploreState","location_util","refId","removeQuery","moveQuery","alertToGraphThresholds","conditions","condition","evaluator","thresholds","value2","value1","colorMode","AlertTabCtrl","uiSegmentSrv","subTabIndex","evalFunctions","evalOperators","conditionTypes","noDataModes","executionErrorModes","appSubUrl","$onInit","addNotificationSegment","newPlusButton","thresholdChangedEventHandler","graphThresholdChanged","off","editingThresholds","notifications","alertNotifications","alertHistory","initModel","validateModel","getAlertHistory","ah","getNotificationIcon","getNotifications","newSegment","changeTabIndex","newTabIndex","notificationAdded","removeNotification","buildDefaultCondition","noDataState","executionErrorState","frequency","handler","defaultName","conditionModels","buildConditionModel","ThresholdMapper","addedNotification","_c","_b","notification","bgColor","handleIndex","evaluatorParamsChanged","firstTarget","foundTarget","alerting","targetContainsTemplate","cm","queryPart","query_part","alertQueryDef","reducerPart","createReducerPart","reducer","handleQueryPartEvent","conditionModel","handleReducerPartEvent","reducerTypes","addCondition","removeCondition","text2","evaluatorTypeChanged","clearHistory","prism","slate_es","slate_react_es","slate_plain_serializer_es","react_default","react","react_dom","react_dom_default","time_series2","DEFAULT_DATETIME_FORMAT","POINT_TIME_INDEX","POINT_VALUE_INDEX","END_COLUMN","END_ROW","QUOTE","EXPORT_FILENAME","csvEscaped","DOMParser","htmlDecoded","regexp","domParser","parseFromString","textContent","formatSpecialHeader","useExcelHeader","formatRow","addEndRowDelimiter","util","toLocaleString","dateTimeFormat","excel","seriesList","alias","exportSeriesListToCsv","convertSeriesListToCsv","timestamps","seriesPoints","seriesTimestamps","p","extendedSeries","pointIndex","mergeSeriesByTime","table","saveSaveBlob","fname","blob","Blob","FileSaver","opts","delimiter","maxDepth","currentDepth","step","prev","isarray","safe","isobject","newKey","utils_ticks","impression_srv","versionPattern","version_SemVersion","SemVersion","major","minor","patch","isGtOrEq","compared","isVersionGtOrEq","gfunc_index","addFuncDef","funcDef","defaultParams","shortName","optionalSeriesRefArgs","optional","multiple","isVersionRelatedFunction","obj","graphiteVersion","category","FuncInstance","withDefaultParams","updateText","metricExp","paramType","last","parameters","pop","_hasMultipleParamsInString","strValue","updateParam","partVal","idx","gfunc","getFuncDef","gfunc_FuncInstance","funcs","param","rawDefs","funcName","group","required","shift","rawParam","default","func","suggestions","GraphiteDatasource","instanceSettings","basicAuth","supportsTags","withCredentials","render_method","funcDefsPromise","getQueryOptionsInfo","graphOptions","translateTime","until","buildGraphiteParams","httpOptions","method","headers","Content-Type","requestId","doGraphiteRequest","convertDataPointsToMs","tagString","graphiteQuery","target_1","tags_1","parseTags","what","date","roundUp","subtract","unix","optionalOptions","interpolatedQuery","expressions","exprRegex","getTagValuesAutoComplete","getTagsAutoComplete","metric","expandable","getTags","tagPrefix","expr","valuePrefix","createFuncInstance","funcDefs","waitForFuncDefsLoaded","getFuncDefs","supportsFunctionIndex","parseFuncDefs","Authorization","inspect","datasourceRequest","targetValue","graphiteOptions","cleanOptions","intervalFormatFixRegex","hasTargets","fixIntervalFormat","g1","nestedSeriesRegexReplacer","rst2html_min","js_drop","drop","allFunctions","functionMenu","categories","createFunctionDropDownMenu","$input","typeahead","minLength","updater","$apply","addFunction","$button","removeClass","cleanUpDrop","destroy","shortDesc","contentElement","createElement","innerHTML","rst2html_min_default","drop_default","classes","openOn","tetherOptions","attachment","targetAttachment","popoverSrv","$funcLink","$funcControls","scheduledRelink","paramCountAtLink","cancelBlur","clickFuncParam","paramIndex","$link","$comma","select","lookup","paramDef","switchToLink","inputElem","clearTimeout","newValue","relink","targetChanged","hasClass","inputBlur","inputKeyPress","inputKeyDown","style","toggleFuncControls","targetDiv","closest","addElementsAndCompile","defParams","lastParam","paramValue","$paramLink","paramTemplate","partial","keypress","$element","process","addTypeahead","added","$target","removeFunction","queryModel","functions","$index","classNames","open","graphiteAddFunc","graphiteFuncEditor","unicodeLetterTable","lexer_i","identifierStartTable","Lexer","char","Parser","lexer","tokens","tokenize","charAt","peek","skip","scanStringLiteral","scanPunctuator","scanNumericLiteral","scanIdentifier","scanTemplateSequence","isUnicodeLetter","code","isHexDigit","readUnicodeEscapeSequence","ch1","ch2","ch3","ch4","getIdentifierStart","chr","charCodeAt","getIdentifierPart","ch","isDecimalDigit","isMalformed","isIdentifierStart","base","isOctalDigit","bad","isPunctuator","quote","isUnclosed","functionCall","metricExpression","curlySegment","consumeToken","errorMark","curly","curlyBraceSegment","parts","segments","metricSegment","segment","functionParameters","numericLiteral","seriesRefExpression","boolExpression","stringLiteral","currentToken","token1","token2","matchToken","graphite_query","GraphiteQuery","parseTarget","removeTagValue","textEditor","getAst","astNode","checkForSeriesByTag","checkOtherSegmentsIndex","hidden","splitSeriesByTagParams","seriesByTagFunc","getSegmentPathUpTo","arr","parseTargetRecursive","innerFunc_1","addFunctionParameter","updateSegmentValue","addSelectMetricSegment","newFunc","moveAliasFuncLast","startsWith","aliasFunc","updateModelTarget","metricPath","wrapFunction","updateRenderedTarget","targetsByRefId","keyBy","nestedSeriesRefRegex","count","refCount","countTargetRefs","targetWithNestedQueries","updated","targetFull","tagPattern","getSeriesByTagFuncIndex","seriesByTagFuncIndex","addTag","newTagParam","renderTagString","getSeriesByTagFunc","removeTag","updateTag","tagIndex","renderTagExpressions","excludeIndex","tagExpr","GraphiteQueryCtrl","paused","toggleEditorMode","buildSegments","checkOtherSegments","seriesByTagUsed","fixTagSegments","newSelectMetric","fromIndex","setSegmentFocus","segmentIndex","getAltSegments","altSegments","eachRight","removeTaggedEntry","addAltTagSegments","getTagsAsSegments","tagSegments","TAG_PREFIX","segmentValueChanged","removeTagPrefix","pause","addSeriesByTagFunc","spliceSegments","emptySegments","targetTextChanged","oldTarget","smartlyHandleNewAliasByNode","tagParam","getAllTags","altTags","mapToDropdownOptions","tagExpressions","getTagOperators","GRAPHITE_TAG_OPERATORS","getAllTagValues","getTagValues","altValues","tagChanged","addNewTag","newTag","addTagSegments","showDelimiter","unpause","query_ctrl_QueryCtrl","GraphiteConfigCtrl","graphiteVersions","autoDetectGraphiteVersion","loadDatasource","getVersion","onChange","CloudWatchQueryParameterCtrl","namespace","metricName","statistics","dimensions","period","returnData","highResolution","regionSegment","getSegmentForValue","namespaceSegment","dimSegments","newOperator","newKeyValue","statSegments","stat","ensurePlusButton","removeDimSegment","removeStatSegment","isEmpty","standardStatistics","seg","lastSegment","getDimensionKeys","dimensionKey","getDimensionValues","transformToSegments","dimSegmentChanged","newFake","cssClass","dims","keySegment","valueSegment","getRegions","getNamespaces","getMetrics","regionChanged","namespaceChanged","metricChanged","addTemplateVars","CloudWatchQueryParameter","query_parameter_ctrl_CloudWatchQueryParameterCtrl","cloudwatch_datasource","CloudWatchDatasource","supportMetrics","proxyUrl","defaultRegion","expandTemplateVariable","queries","getActualRegion","convertDimensionFormat","String","getPeriod","some","datasourceId","request","performTimeSeriesQuery","now","convertToCloudWatchTime","periodUnit","interval_to_seconds","daySec","awsRequest","queryRes","transformSuggestDataFromTable","suggestData","tables","doMetricQueryRequest","subtype","filterDimensions","getEbsVolumeIds","instanceId","getEc2InstanceAttribute","attributeName","filterJson","metricNameQuery","dimensionKeysQuery","dimensionValuesQuery","ebsVolumeIdsQuery","ec2InstanceAttributeQuery","targetAttributeName","defaultPeriod","prefixMatching","actionPrefix","alarmNamePrefix","getDefaultRegion","getExpandedVariables","currentVariables","selectedVariables","scopedVar","chain","findKey","has","multiVariable","convertedDimensions","query_ctrl_CloudWatchQueryCtrl","CloudWatchQueryCtrl","aliasSyntax","CloudWatchConfigCtrl","accessKeyExist","secretKeyExist","authTypes","indexPatternTypes","example","timeField","authType","secureJsonFields","accessKey","secretKey","resetAccessKey","resetSecretKey","CloudWatchAnnotationsQueryCtrl","requiresField","supportsInlineScript","supportsMissing","isPipelineAgg","minVersion","orderByOptions","orderOptions","movingAvgModelOptions","query_def_pipelineOptions","moving_avg","ewma","holt","holt_winters","isCheckbox","getMetricAggTypes","esVersion","query_def_metricAggTypes","f","metricType","po","getMovingAvgSettings","filtered","movingAvgModelSettings","setting","filteredResult","field","ElasticQueryBuilder","getRangeFilter","gte","lte","buildTermsAgg","aggDef","queryNode","metricRef","terms","orderBy","order","metrics","aggs","min_doc_count","missing","getDateHistogramAgg","esAgg","extended_bounds","getHistogramAgg","getFiltersAgg","analyze_wildcard","documentQuery","unmapped_type","fields","script_fields","fielddata_fields","docvalue_fields","addAdhocFilters","adhocFilters","queryCondition","bool","must","match_phrase","must_not","lt","gt","build","queryString","bucketAggs","query_string","precision","nestedAggs","metricAgg","pipelineAgg","buckets_path","prop","hasOwnProperty","aggField","getTermsQuery","queryDef","1","_term","Hourly","startOf","amount","Daily","IndexPattern","pattern","getIndexForToday","utc","getIndexList","intervalMap","endEpoch","response","processMetrics","props","bucket","newSeries","buckets","doc_count","percentileName","percentiles","statName","stats","std_deviation_bounds_upper","std_deviation_bounds","upper","std_deviation_bounds_lower","lower","normalized_value","processAggregationDocs","propKey","addColumn","filterable","addMetricValue","_d","_e","propValues","_f","_g","getMetricName","processBuckets","depth","aggId","nameIndex","key_as_string","ElasticResponse","metricDef","extendedStats","getSeriesName","metricTypeCount","g2","appliedAgg","describeMetric","propName","nameSeries","uniq","processHits","_id","_type","_index","_source","trimDatapoints","aggregations","histogram","trimEdges","getErrorFromElasticResponse","root_cause","reason","$$config","getTimeSeries","responses","tmpSeriesList","table_model","ElasticDatasource","indexPattern","index_pattern_IndexPattern","timeInterval","maxConcurrentShardRequests","queryBuilder","query_builder_ElasticQueryBuilder","indexList","tagsField","textField","fieldName","fieldNames","fieldValue","getFieldFromSource","titleField","setTime","getFields","dateFields","getQueryHeader","searchType","timeTo","queryHeader","sentTargets","queryObj","elastic_response_ElasticResponse","string","scaled_float","nested","shouldAddField","typeMap","fieldNameParts","getFieldsRecursively","subObj","isObject","properties","indexName","mappings","typeName","getTerms","esQuery","fromJson","objectContainsTemplate","isPrimitive","agg","settingsLinkText","describeOrder","describeOrderBy","substr","defaultTo","addFiltersQuery","removeFiltersQuery","getOrderByOptions","metricRefs","getFieldsInternal","$fieldType","getIntervalOptions","intervalOptions","addBucketAgg","lastBucket","addIndex","removeBucketAgg","bucket_agg_ElasticBucketAggCtrl","metricAggs","updatePipelineAggOptions","getPipelineAggOptions","isSingle","metricAggTypes","pipelineOptions","getPipelineOptions","precisionThreshold","precision_threshold","movingAvgModelTypes","modelSettings","updateMovingAvgModelSettings","inlineScript","script","inline","modelSettingsKeys","onChangeClearInternal","minimize","onTypeChange","addMetricAgg","removeMetricAgg","toggleShowMetric","metric_agg_ElasticMetricAggCtrl","ElasticQueryCtrl","queryUpdated","jsonStr","handleQueryError","newJson","rawQueryOld","getCollapsedText","bucketAggTypes","query_def_bucketAggTypes","bucketAgg","ElasticConfigCtrl","esVersions","indexPatternTypeChanged","database","opentsdb_datasource","tsdbVersion","tsdbResolution","tagKeys","aggregatorsPromise","filterTypesPromise","convertToTSDBTime","convertTargetToQuery","qs","groupByTags","tagk","metricToTargetMapping","mapMetricsToTargets","metricData","_saveTagKeys","transformMetricData","eventList","aggregator","annotationObject","isGlobal","globalAnnotations","startTime","OpenTsDatasource","msResolution","reqBody","showQuery","_addCredentialOptions","suggestTagKeys","aggregateTags","_performSuggestQuery","_get","q","_performMetricKeyValueLookup","keysArray","keysQuery","tagvs","_performMetricKeyLookup","tagks","tagv","relativeUrl","interpolated","responseTransform","tagNamesQuery","tagNamesSuggestQuery","tagValuesSuggestQuery","getAggregators","getFilterTypes","metricLabel","createMetricLabel","dps","scopedVars_1","toPairs","tagData","isCounter","counterMax","counterResetValue","rateOptions","resetValue","dropResets","ResetValue","disableDownsampling","downsampleInterval","downsample","downsampleAggregator","filterKey","explicitTags","interpolatedTagValue","arrTagV","tagV","tagK","query_ctrl_OpenTsQueryCtrl","OpenTsQueryCtrl","errors","validateTarget","aggregators","fillPolicies","filterTypes","downsampleFillPolicy","suggestMetrics","getTextValues","suggestTagValues","targetBlur","metricFindResult","addTagMode","currentTagKey","currentTagValue","editTag","closeAddTagMode","addFilter","addFilterMode","currentFilterType","currentFilterGroupBy","currentFilter","currentFilterKey","currentFilterValue","removeFilter","editFilter","fil","closeAddFilterMode","errs","shouldDownsample","describe_interval","OpenTsConfigCtrl","tsdbVersions","tsdbResolutions","AnnotationsQueryCtrl","datasource_GrafanaDatasource","GrafanaDatasource","GrafanaQueryCtrl","influx_series","InfluxSeries","seriesName","columnName","_getSeriesName","segIndex","tagsCol","titleCol","titleColumn","tagsColumn","textColumn","textCol","timeCol","getTable","reordered","Aliasing","Fields","createPart","part","query_part_index","register","groupByTimeFunctions","innerExpr","replaceAggregationAddStrategy","selectParts","partModel","query_part_categories","Aggregations","morePartsAvailable","Selectors","addTransformationStrategy","addStrategy","selectModels","dynamicLookup","renderer","fieldRenderer","Transformations","Predictors","partCount","influxdb_query_part","influx_query","InfluxQuery","policy","resultFormat","orderByTime","updateProjection","create","groupByParts","updatePersistedParts","hasGroupByTime","hasFill","addGroupBy","stringParts","typePart","arg","removeGroupByPart","getCategories","removeSelect","removeSelectPart","modelsIndex","partIndex","addSelectPart","renderTagCondition","interpolate","getMeasurementAndPolicy","measurement","interpolateQueryStr","defaultFormatFn","rawQuery","selectText","groupBySection","slimit","response_parser","ResponseParser","influxResults","normalizedQuery","isValueFirst","serie","addUnique","InfluxQueryBuilder","buildExploreQuery","withKey","withMeasurementFilter","whereConditions","influxdb_datasource","username","password","getTimeFilter","queryTargets","allQueries","acc","timeFilter","renderAdhocFilters","_seriesQuery","influxSeries","timeSeries","curry","responseParser","query_builder_InfluxQueryBuilder","_influxRequest","serializeParams","InfluxDatasource","currentUrl","urls","u","db","paramSerializer","req","getInfluxTime","fromIsAbsolute","InfluxQueryCtrl","groupBySegment","policySegment","measurementSegment","newSelectMeasurement","newCondition","removeOrderByTime","buildSelectMenu","selectMenu","cat","getGroupByOptions","groupByAction","plusButton","subitem","handleSelectPartEvent","fieldsQuery","handleGroupByPartEvent","measurementChanged","getPolicySegments","policiesQuery","policyChanged","getMeasurements","measurementFilter","getTagsOrValues","nextValue","newOperators","removeTagFilterSegment","getFieldSegments","tagSegmentUpdated","rebuildTargetTagConditions","tagOperator","segment2","getTagValueOperator","tagValue","InfluxConfigCtrl","InfluxAnnotationsQueryCtrl","processEntry","entry","labels","timeFromNow","fromNow","timeLocal","searchMatches","getSearchMatches","logLevel","level","LogLevel","getLogLevel","logging_datasource","_request","apiUrl","LoggingDatasource","prepareQueryTarget","DEFAULT_QUERY_PARAMS","QUERY_REGEXP","parseQuery","streams","combinedEntries","entries","processStreams","metadataRequest","silent","MixedDatasource","sets","dsName","mysql_response_parser","processQueryResult","parseMetricFindQueryResult","rowCount","findColIndex","textColIndex","valueColIndex","transformToKeyValueList","transformToSimpleList","containsKey","colName","transformAnnotationResponse","timeColumnIndex","textColumnIndex","tagsColumnIndex","MysqlDatasource","interpolateVariable","rawSql","defaultQuery","query_ctrl_MysqlQueryCtrl","MysqlQueryCtrl","formats","onDataReceived","onDataError","dataList","lastQueryMeta","anySeriesFromQuery","lastQueryError","MysqlConfigCtrl","MysqlAnnotationsQueryCtrl","module_defaultQuery","postgres_response_parser","PostgresDatasource","query_ctrl_defaultQuery","query_ctrl_PostgresQueryCtrl","PostgresQueryCtrl","sslmode","PostgresAnnotationsQueryCtrl","postgres_module_defaultQuery","metric_find_query","PrometheusMetricFindQuery","labelValuesQuery","metricNamesQuery","queryResultQuery","metricNameAndLabelsQuery","_labels","metricFilterPattern","matchedMetricName","getPrometheusTime","performInstantQuery","__name__","self","getOriginalMetricName","ResultTransformer","transform","prometheusResult","transformMetricDataToTable","responseListLength","sortSeriesByLabel","prometheusResult_1","transformToHistogramOverTime","prometheusResult_2","resultType","transformInstantMetricData","Error","dpValue","baseTimestamp","stepMs","endTimestamp","responseIndex","resultCount","metricLabels","sortedLabels","labelIndex","valueText","labelData","legendFormat","renderTemplate","aliasPattern","aliasData","topSeries","bottomSeries","bottomPoint","s1","s2","le2","le1","parseHistogramLabel","le","Infinity","prometheusRegularEscape","prometheusSpecialRegexEscape","PrometheusDatasource","editorSrc","directUrl","queryTimeout","httpMethod","resultTransformer","result_transformer_ResultTransformer","ruleMappings","loadRules","transformRequest","interpolateQueryExpr","activeTargets","createQuery","allQueryPromise","instant","responseList","hints","transformerOptions","hinting","queryHints","fix","increasing_1","monotonic","dp","mapping_1","mappingForQuery","ruleName","mapping","determineQueryHints","minInterval","intervalFactor","adjustedInterval","adjustInterval","getRangeScopedVars","__interval_ms","adjusted","alignRange","performSuggestQuery","cache","metricsNameCache","expire","interval_to_ms","msRange","diff","sRange","regularRange","secondsToHms","__range_ms","titleFormat","textFormat","json","groups","rules","rule","extractRuleMappingFromGroups","modifyQuery","previousWord","nextSelectorEnd","nextSelectorStart","keywords","insideSelector","previousWordIsKeyWord","builtInWords","labelParts","selector","selectorRegexp","addLabelToQuery","mapping_2","ruleNames","rulesRegex","labelValueCache","templateVariableCompletions","wrappedCallback","completions","getCompletionsForLabelMatcherName","getCompletionsForLabelMatcherValue","getCompletionsForBinaryOperator","vectors","unit","findMetricName","labelNameCache","transformToCompletions","labelNames","findToken","labelName","labelNameToken","getLabelNameAndValueForExpression","labelValues","rparenToken","keywordOperatorToken","findExpressionMatchedParen","binaryOperatorToken","metricName_1","labelQueryCache","words","nameLabelValueToken","getTokens","nameLabelNameToken","metricNameToken","PromCompleter","guard","nc","deep","query_ctrl_PrometheusQueryCtrl","PrometheusQueryCtrl","getDefaultFormat","resolutions","factor","getCompleter","completer_PromCompleter","refreshMetricData","isEqual","updateLink","rangeDiff","endTime","g0.step_input","g0.stacked","g0.tab","linkToPrometheus","PrometheusConfigCtrl","PrometheusAnnotationsQueryCtrl","mssql_response_parser","MssqlDatasource","mssql_query_ctrl_defaultQuery","MssqlQueryCtrl","MssqlConfigCtrl","mssql_module_defaultQuery","MssqlAnnotationsQueryCtrl","datasource_TestDataDatasource","TestDataDatasource","scenarioId","stringInput","TestDataQueryCtrl","scenarioList","newPointTime","selectedPoint","getPoints","point","pointSelected","deletePoint","addPoint","newPointValue","scenario","scenarioChanged","TestDataAnnotationsQueryCtrl","TextPanelCtrl","onInitEditMode","onRefresh","onRender","renderMarkdown","updateContent","renderText","$applyAsync","scrollable","injector","tmpScope","eventManager","createEditPopover","markerElementToAttachTo","invoke","constraints","pin","$destroy","DrawableEvent","drawFunc","clearFunc","moveFunc","_object","_drawFunc","_moveFunc","_position","_width","_height","_clearFunc","getObject","drawableEvent","visual","_drawableEvent","VisualEvent","getParent","_parent","isHidden","_hidden","unhide","EventMarkers","_types","_plot","eventsEnabled","getEvents","_events","setTypes","setupEvents","ve","_buildDiv","vre","_buildRegDiv","ao","bo","drawEvents","_insidePlot","updateEvents","_clearEvents","markerShow","lineStyle","eventTypeId","markerTooltip","topOffset","border-left-width","border-left-style","marker_1","font-size","line-height","border-left","border-right","toUpperCase","border-top","border-bottom","that","hover","createAnnotationToolip","regionWidth","right","border-left-color","background-color","xc","jquery_flot_events_EventMarkers","eventMarkers","hideEvents","getHandleHtml","valueStr","initDragging","posTop","handleElem","currentTarget","parents","lastY","dragging","clientY","stopped","graphValue","toFixed","cleanUp","renderHandle","defaultHandleTopPos","valueCanvasPos","toggleClass","handleTopPos","shouldDrawHandles","hasSecondYAxis","prepare","thresholdMargin","needsCleanup","addFlotOptions","ltLimit","gtLimit","lineColor","y2axis","ThresholdManager","convertToHistogramData","bucketSize","hiddenSeries","getSeriesValues","getBucketBound","maxBound","bound","minBound","bound_1","histogamSeries","convertValuesToHistogram","alignYLevel","yAxes","checkCorrectAxes","checkCorrectAxis","yLeft","yRight","moveLevelToZero","expandStuckValues","zero","oneSide","checkOneSide","checkOppositeSides","rate","rateLeft","rateRight","checkTwoCross","absLeftMin","absLeftMax","absRightMin","absRightMax","upLeft","downLeft","upRight","downRight","getRate","GraphElement","panelWidth","event_manager_EventManager","thresholdManager","threshold_manager_ThresholdManager","getSeriesFn","posX","initial","middle","renderAndShow","absoluteTime","innerHtml","xMode","place_tt","hoverIndex","hoverDistance","pointTime","minDistance","minTime","lastValue","hideEmpty","allIsNull","hideZero","allIsZero","hideTooltip","findHoverIndexFromData","value_type","findHoverIndexFromDataPoints","aliasEscaped","shared","$tooltip","detach","hoverInfo","seriesHtml","tooltipFormat","allSeriesMode","panelRelY","pointOffset","sharedCrosshairModeOnly","hasMsResolution","seriesHoverInfo","getMultiSeriesPlotHoverInfo","plotData","highlightClass","sortedSeries","onPanelteardown","onLegendRenderingComplete","onGraphHover","onGraphHoverClear","onPlotSelected","onPlotClick","onScopeDestroy","renderData","buildFlotPairs","graphHeight","sharedTooltipModeEnabled","render_panel","canMakeEditable","shouldAbortRender","drawHook","yaxes","dataWarning","processOffsetHook","gridMargin","panelOptions","processRangeHook","align","alignLevel","getMinTimeStepOfSeries","timeStep","buildFlotOptions","prepareXAxis","configureYAxisOptions","sortSeries","getFlotPairs","nullPointMode","barWidth","addXSeriesAxis","histMin","histMax","ticks","addXHistogramAxis","addXTableAxis","addTimeAxis","callPlot","incrementRenderCounter","renderError","gridColor","bootData","user","lightTheme","processOffset","processRange","percentage","translateFillOption","linewidth","steppedLine","spaceLength","pointradius","minBorderMargin","labelMarginX","sortDesc","haveSortBy","haveSortOrder","shouldSortBy","zindex","timezone","timeformat","time_format","defaultTicks","tickValues","tickStep_1","ticksNum","configureAxisMode","logBase","parseNumber","decimals","secondY","tickDecimals","applyLogScale","toNumber","MIN_VALUE","logmin","inverseTransform","generateTicksForLogScaleYAxis","minSetToZero","nextTick","maxNumTicks","numTicks","valueFormats","scaledDecimals","graph_GraphElement","graphDirective","src_core","SeriesOverridesCtrl","overrideMenu","currentOverrides","override","addOverrideOption","propertyName","lenght","setOverride","subItem","addSeriesOverride","updateCurrentOverrides","openColorSelector","colorSelected","fakeSeries","autoClose","onClose","removeOverride","getSeriesNames","legendScrollbar","getSeriesIndexForElement","el","toggleAxis","changeSeriesColor","toggleSeries","seriesInfo","scrollPosition","scroller","scrollTop","sortLegend","getTableHeaderHtml","renderLegendElement","tableHeaderElem","seriesElements","hideFromLegend","avg","renderSeriesLegendElements","alignAsTable","tbodyElem","wrap","rightSide","legendRightDefaultWidth","scrollRoot","scrollbarParams","root","bar","track","barOnCls","scrollingCls","destroyScrollbar","core_default","marginRight","offsetWidth","clientWidth","scroll","addScrollbar","dispose","legendElem","empty","sideWidth","ieWidth","ThresholdFormCtrl","disabled","unbindDestroy","addThreshold","removeThreshold","onFillColorChange","onLineColorChange","getSeriesList","firstItem","autoDetectMode","getAutoDetectXAxisMode","setPanelDefaultsForNewXAxisMode","timeSeriesHandler","customHandler","seriesData","colorIndex","aliasColors","isOutsideRange","DataProcessor","dataItem","validateXAxisSeriesValue","validOptions","getXAxisValueOptions","getDataFieldNames","onlyNumbers","fieldParts","getPropertiesRecursive","pluckDeep","property","propertyParts","axes_editor_AxesEditorCtrl","AxesEditorCtrl","unitFormats","getUnitFormats","logScales","linear","log (base 2)","log (base 10)","log (base 32)","log (base 1024)","setUnitFormat","xAxisModeChanged","processor","xAxisValueChanged","GraphCtrl","panelDefaults","seriesOverrides","data_processor_DataProcessor","onDataSnapshotLoad","onInitPanelActions","axesEditorComponent","alertingEnabled","alertTab","actions","zoomOut","annotationsPromise","tip","applySeriesOverrides","shiftKey","toggleSeriesExclusiveMode","removeSeriesOverride","toggleLegend","legendValuesOptionChanged","exportCsv","templateHtml","modalClass","DashListCtrl","recent","starred","headings","folderId","modes","getRecentDashboards","getStarred","getSearch","folderIds","starDashboard","isStarred","dashIds","take","getDashboardOpened","dashboardIds","onFolderChange","folder","pluginList","viewModel","gotoPlugin","stopPropagation","$event","preventDefault","hasUpdate","sortOrderOptions","stateFilter","currentAlerts","onlyAlertsOnDashboard","dashboardFilter","nameFilter","AlertListPanel","sortResult","alerts","alertStateSortScore","updateStateFilter","getAlertsPromise","getCurrentAlertState","getStateChanges","al","noAlertsMessage","dashboardQuery","dashboardTags","dashboardTag","newStateDate","locale","colorScheme","maxValue","minValue","d3_scale_chromatic","invert","colorInterpolator","domain","d3","colorScale","legendOpacityScale","exponent","drawLegendValues","rangeFrom","rangeTo","childNodes","legendValueScale","tickStepSize","isValueCloseTo","buildLegendTicks","xAxis","tickSize","LEGEND_TICK_SIZE","colorRect","posY","svgElem","baseVal","getSvgElemHeight","LEGEND_VALUE_MARGIN","getSvgElemX","clearLegend","valueTo","outerWidth","getColorScale","colorSchemes","valuesNumber","rangeStep","valuesRange","legendRects","selectAll","enter","legendHeight","drawSimpleColorLegend","colorOptions","legendOpacityScale_1","cardColor","drawSimpleOpacityLegend","cards","cardStats","widthFactor","drawColorLegend","getOpacityScale","opacityScale","drawOpacityLegend","dataFormats","Time series","Time series buckets","Auto","Upper","Lower","yAxis","axesEditor","heatmap_axes_editor_AxesEditorCtrl","HeatmapDisplayEditorCtrl","heatmapDisplayEditor","label2","label1","heatmap_data_converter_parseHistogramLabel","yBounds","yBucket","bounds","convertToHeatMap","yBucketSize","xBucketSize","heatmap","bucketBound","heatmap_data_converter_getBucketBound","TIME_INDEX","bucketNum","VALUE_INDEX","pointExt","pushToXBuckets","seriesList_1","xBucket","yBucketSplitFactor","getLogScaleBucketBounds","convertToLogScaleValueBuckets","getBucketBounds","pushToYBuckets","convertToValueBuckets","getValueBucketBound","getLogScaleBucketBound","logp","valueLog","additionalLog","additionalBucketSize","powTop","getDistance","originalFillColor","onMouseLeave","HeatmapTooltip","getBucketIndexes","xBucketIndex","yBucketIndex","boundBottom","boundTop","countValueFormatter","bucketBoundFormatter","xData","yData","bucketIndex","tooltipDecimals","tickValueFormatter","tooltipHtml","tsBuckets","tickFormatter","valIndex","tsBucketsFormatted","showHistogram","addHistogram","getXBucketIndex","getYBucketIndex","heatmapPanel","chartHeight","histogramData","histXScale","yScale","barNumberFactor","histogramDomain","histYScale","tooltipWidth","tooltipHeight","clientHeight","innerWidth","pageYOffset","innerHeight","DATA_RANGE_WIDING_FACTOR","HeatmapRenderer","$heatmap","heatmap_tooltip_HeatmapTooltip","padding","dataRangeWidingFactor","drawSharedCrosshair","setElementHeight","getYAxisWidth","axisText","getBBox","getXAxisHeight","axisLinePosition","addXAxis","xScale","chartWidth","timeFormat","grafanaTimeFormatter","tickFormat","tickPadding","yAxisWidth","addYAxis","tickInterval","heatmapStats","wideYAxisRange","yMin","yMax","decimalsAuto","flotTickSize","tickSizeInner","tickSizeOuter","yWiding","addLogYAxis","adjustLogRange","minLog","adjustLogMin","adjustLogMax","logScaleTickValues","addYAxisFromBuckets","valueFormatted","domainMin","domainMax","tickValue","fixYAxisTickSize","addAxes","chartTop","chartBottom","dataFormat","xAxisHeight","addHeatmapCanvas","heatmapElem","cardPadding","cardRound","addHeatmap","yBuckets","emptyBucket","nullBucket","minBucket","newBucket","mergeZeroBuckets","cardsData","maxValueAuto","setCardSize","getCardX","getCardWidth","getCardY","getCardHeight","getCardColor","getCardOpacity","mouseOverBucket","highlightCard","resetCardHighLight","highlightColor","darker","strokeColor","brighter","currentCard","xGridSize","yGridSize","splitFactor","cardWidth","cardHeight","cuttedWidth","getEventOffset","clientX","elemOffset","selectionRange","limitSelection","drawSelection","getEventPos","drawCrosshair","emitGraphHoverEvent","posX1","posX2","selectionX","selectionWidth","graphTooltip","yBucketBound","HeatmapCtrl","opacityScales","colorModes","selectionActivated","defaultsDeep","onCardColorChange","convertHistogramToHeatmapData","convertTimeSeriesToHeatmapData","bucketsData","xBucketNumber","xBucketSizeByNumber","interval_regex","parseSeries","yBucketNumber","convertToCards","getPanelDataSourceType","dsSupportHistogramSort","panelDatasource","heatmap_data_converter_sortSeriesByLabel","histogramToHeatmap","calculateBucketSize","seriesHandler","flotpairs","parseHistogramSeries","rendering_HeatmapRenderer","timeKey","cells","noTableIndex","fromCharCode","columnsUnion","columnNames","columnIndexMapper","flattenedRows","mapper","alteredRow","mergedRows","compactedRows","rowIndex","otherRow","areRowsMatching","matchedRow","columnIndex","foundFieldToMatch","maxDocs","flattened","z","tableCol","TablePanelEditorCtrl","transformers","fontSizes","addColumnSegment","updateTransformHints","canSetColumns","columnsHelpMessage","getColumnOptions","dataRaw","getColumns","transformChanged","removeColumn","tablePanelEditor","editor_TablePanelEditorCtrl","ColumnOptionsCtrl","activeStyleIndex","columnTypes","dateFormats","mappingTypes","getColumnNames","addColumnStyle","styles","stylesCount","indexToInsert","dateFormat","removeColumnStyle","invertColorOrder","ref","styleIndex","addValueMap","valueMaps","removeValueMap","addRangeMap","rangeMaps","removeRangeMap","column_options_ColumnOptionsCtrl","isUtc","setTable","initColumns","colIndex","formatters","createColumnFormatter","defaultCellFormatter","mappingType","setColorState","valueFormatter_1","NaN","colorState","numericValue","renderRowVariables","formatColumnValue","renderCell","addWidthHack","cellClasses","cellClass","columnHtml","preserveFormat","cellLink","linkUrl","linkTooltip","linkTargetBlank","cellTarget","cellLinkTooltip","pageSize","startPos","endPos","rowClasses","rowClass","cellHtml","rowStyle","render_values","newRow","TableRenderer","TablePanelCtrl","showHeader","fontSize","desc","pageIndex","columnOptionsTab","transformer","transformDataToTable","renderer_TableRenderer","isTimezoneUtc","toggleColumnSort","pageCount","renderPanel","panelElem","rootElem","footerElem","appendTableRows","startPage","endPage","paginationList","activeClass","pageLinkElem","appendPaginationControls","max-height","panelHeight","getTableHeight","filterData","SingleStatCtrl","dataType","valueNameOptions","postfix","nullText","valueName","prefixFontSize","postfixFontSize","colorBackground","colorValue","sparkline","full","thresholdMarkers","thresholdLabels","tableColumn","onSparklineColorChange","onSparklineFillChange","tableData","tableHandler","setTableValues","setValues","tableColumnOptions","setTableColumnToSensibleDefault","valueRounded","decimalInfo","getDecimalsForValue","formatFunc","roundValue","canModifyText","setColoring","panelColorIndex","delta","LN10","magn","dec","norm","lastPoint","setValueMapping","rangeMap","valueString","className","addGauge","dimension","invalidGaugeRange","plotCanvas","plotCss","colorMap","fontScale","gaugeWidthReduceRatio","gaugeWidth","thresholdMarkersWidth","getValueText","plotSeries","addSparkline","dynamicHeightMargin","strVale","applyColoringThresholds","getSpan","colorPostfix","$panelContainer","drilldownTooltip","mouseleave","hookupDrilldownLinkTooltip","GettingStartedPanelCtrl","note","check","cta","passed","currentStep","nextStep","dismiss","showSuccessAlert","helpFlags1","panel_ctrl_PanelCtrl","built_in_plugins","graphite_module_namespaceObject","cloudwatch_module_namespaceObject","app/plugins/datasource/elasticsearch/module","elasticsearch_module_namespaceObject","opentsdb_module_namespaceObject","grafana_module_namespaceObject","influxdb_module_namespaceObject","logging_module_namespaceObject","mixed_module_namespaceObject","mysql_module_namespaceObject","app/plugins/datasource/postgres/module","postgres_module_namespaceObject","app/plugins/datasource/mssql/module","mssql_module_namespaceObject","app/plugins/datasource/prometheus/module","prometheus_module_namespaceObject","testdata_module_namespaceObject","app/plugins/panel/text/module","text_module_namespaceObject","app/plugins/panel/graph/module","graph_module_namespaceObject","app/plugins/panel/dashlist/module","dashlist_module_namespaceObject","app/plugins/panel/pluginlist/module","pluginlist_module_namespaceObject","app/plugins/panel/alertlist/module","alertlist_module_namespaceObject","app/plugins/panel/heatmap/module","heatmap_module_namespaceObject","app/plugins/panel/table/module","table_module_namespaceObject","app/plugins/panel/singlestat/module","app/plugins/panel/gettingstarted/module","Observable","Subject","bust","exposeToPlugin","component","registerDynamic","registry","newModule","locate","address","baseURL","defaultExtension","packages","/*","esModule","authorization","loader","prism_default","sdk_namespaceObject","file_export_namespaceObject","flatten_namespaceObject","flotDeps_1","plugin_loader_i","fakeDep","importPluginModule","light","dark","pluginDef","dsConfig","deferred","Datasource","DatasourceSrv","getAll","addDataSourceVariables","getExploreSources","es","metricSources","metricSource","datasource_srv_DatasourceSrv","UnknownPanelCtrl","$http","$templateCache","baseUrl","class","module_UnknownPanelCtrl","panelInfo","panelModule","Component","registered","componentInfo","templatePromise","relativeTemplateUrlToAbs","cached","getTemplate","registerPluginComponent","notFound","directiveName","$normalize","bindings","getPluginComponentDirective","core_module","child","dsModule","panel-ctrl","QueryCtrl","dsMeta_1","ConfigCtrl","model_1","appModule","appEditCtrl","app-model","app-edit-ctrl","appModel_1","loadPanelComponentInfo","getModule","pluginDirectiveLoader","dashboard_ctrl_DashboardCtrl","DashboardCtrl","keybindingSrv","alertingSrv","unsavedChangesSrv","dashboardViewStateSrv","playlistSrv","panelLoader","editTab","getPanelContainer","setupDashboard","setupDashboardInternal","setCurrent","processRepeats","autoFitPanels","dashboardViewState","setupDashboardBindings","setWindowTitleAndTheme","onInitFailed","msg","fatal","loadedFallbackDashboard","templateVariableUpdated","windowTitlePrefix","showJsonEditor","getDashboard","getPanelLoader","timezoneChanged","onRemovingPanel","getPanelInfoById","ask","confirmText","AlertingSrv","HistorySrv","getHistoryList","calculateDiff","restoreDashboard","history_srv_HistorySrv","HistoryListCtrl","$route","historySrv","appending","canCompare","onDashboardSaved","resetFromSource","switchMode","addToLog","getLog","revisionSelectionChanged","revisions","checked","formatBasicDate","getDiff","newInfo","baseInfo","isNewLatest","new","revisions_1","rev","createdDateString","created","ageString","isLastPage","basic","restoreConfirm","stripBaseFromUrl","reload","history_HistoryListCtrl","DashboardLoaderSrv","_dashboardLoadFailed","canStar","isSnapshot","canDelete","canSave","dashboardNotFound","loadDashboard","uid","_loadScriptedDashboard","getDashboardByUid","isFolder","addDashboardImpression","file","_executeScript","fromScript","services","scriptResult","Function","scriptFunc","isFunction","deferred_1","dashnav_DashNavCtrl","DashNavCtrl","saveDashboard","titleTooltip","calendar","expires","toggleSettings","editview","toggleViewMode","shareDashboard","showSearch","addPanel","animate","navItemClicked","navItem","clickHandler","transclude","SubmenuCtrl","annotationStateChanged","openEditView","submenu_SubmenuCtrl","save_as_modal_template","SaveDashboardAsModalCtrl","isValidFolderSelection","getSaveModelClone","editable","hideControls","autoUpdate","keyDown","keyCode","onEnterFolderCreation","onExitFolderCreation","SaveDashboardModalCtrl","saveVariables","saveTimerange","originalCurrent","timeChange","variableValueChange","isSaving","hasTimeChanged","hasVariableValuesChanged","saveForm","postSave","resetOriginalVariables","resetOriginalTime","save_modal_template","SaveProvisionedDashboardModalCtrl","dashboardJson","getJsonForClipboard","ShareModalCtrl","modeSharePanel","modalTitle","tabs","buildUrl","absUrl","orgId","includeTemplateVars","forCurrent","theme","soloUrl","iframeHtml","imageUrl","getLocalTimeZone","Intl","utcOffset","DateTimeFormat","resolvedOptions","timeZone","shareUrl","save_provisioned_modal_template","save_provisioned_modal_SaveProvisionedDashboardModalCtrl","ShareSnapshotCtrl","expireOptions","accessOptions","externalUrl","sharingButtonText","externalEnabled","createSnapshot","external","originalUrl","saveSnapshot","scrubDashboard","cmdData","postUrl","deleteUrl","snapshotUrl","saveExternalSnapshotRef","deleteKey","singlePanel","forEachPanel","deleteSnapshot","share_snapshot_ctrl_ShareSnapshotCtrl","dashboard_srv_DashboardSrv","DashboardSrv","dashboard_model","handleSaveDashboardError","isHandled","altActionText","onAltAction","showSaveAsModal","newUrl","provisioned","showDashboardProvisionedModal","makeEditable","showSaveModal","saveJSONDashboard","panelScopes","urlState","getQueryStringState","needsSync","registerPanel","serializeToUrl","fromRouteUpdated","toggle","editStateChanged","toggleCollapsedPanelRow","syncState","DashboardViewState","collapsed","toggleRow","panelScope","getPanelScope","fullscreenPanel","leaveFullscreen","editModeInitiated","enterFullscreen","oldTimeRange","setViewMode","view_state_srv_DashboardViewState","hitTypes","ValidationSrv","rootName","validateNewDashboardName","validateNewFolderName","existingErrorMessage","nameLowerCased","hits_1","time_srv_TimeSrv","TimeSrv","timer","routeUpdated","addEventListener","autoRefreshBlocked","visibilityState","refreshDashboard","cancelAll","initTimeFromUrl","parseTime","timeAtLoad","setAutoRefresh","parseUrlParam","urlRange","timeHasChangedSinceLoad","cancelNextRefresh","intervalMs_1","refreshTimer","startNextRefreshTimer","afterMs","isGrafanaVisible","cancel","fromRouteUpdate","isMoment","oldRefresh","urlParams","timespan","center","ChangeTracker","originalCopyDelay","$window","originalPath","original","onbeforeunload","ignoreChanges","hasChanges","open_modal","fromFile","cleanDashboardFromIgnoredChanges","dashData","schemaVersion","iteration","repeatPanelId","currentTimepicker","originalTimepicker","discardChanges","gotoNext","baseLen","nextUrl","tracker","change_tracker_ChangeTracker","UnsavedChangesModalCtrl","discard","unsaved_changes_modal_template","timepicker_TimePickerCtrl","TimePickerCtrl","openDropdown","timepicker","firstDayOfWeek","localeData","timeRaw","local","absolute","fromJs","toDate","toJs","isAbsolute","zoom","closeDropdown","editTimeRaw","rangeString","refresh_intervals","isOpen","applyCustom","absoluteFromChanged","getAbsoluteMomentForTimezone","absoluteToChanged","jsDate","setRelativeFilter","nowDelay","$elem","ngModel","$parsers","$setValidity","parsed","$formatters","currentValue","alertSrv","wnd","File","FileReader","FileList","getElementById","files","reader","onload","onUpload","readAsText","uploadDashboardDirective","makeExportable","variableLookup","templateizeDatasourceUsage","refName","requires","processPanel","panelDef","_h","_j","annotationDef","buildInfo","inputs","newObj","DashboardExporter","DashExportCtrl","exporter","exporter_DashboardExporter","saveJson","export_modal_DashExportCtrl","export","asRows","exportSeriesListToCsvColumns","ExportDataModalCtrl","export_data_modal_ExportDataModalCtrl","buildSegmentModel","AdHocFiltersCtrl","segmentChanged","updateVariableModel","filterIndex","hasFakes","ad_hoc_filters_template","ad_hoc_filters_AdHocFiltersCtrl","dashRepeatOptionDirective","repeat_option_template","repeat","repeatDirection","react2angular","react_grid_layout","classnames","DashboardRow_DashboardRow","DashboardRow","panelContainer","openSettings","setState","prevState","forceUpdate","removeRow","classnames_default","fa-chevron-right","chevronClass","components_ScrollBar_ScrollBar","ScrollBar","handleRef","componentDidMount","scrollbar","parentElement","componentDidUpdate","componentWillUnmount","setScrollTop","setScrollLeft","scrollLeft","AddPanelPanel_AddPanelPanel","AddPanelPanel","onAddPanel","panelPluginInfo","handleCloseAddPanel","renderPanelItem","panelSizeChanged","panelPlugins","getPanelPlugins","copiedPanelPlugins","getCopiedPanelPlugins","small","hideFromList","copiedPanelJson","copiedPanel","pluginCopy","copiedPanels","filterPanels","searchWords","main_default","highlightClassName","textToHighlight","noCopiedPanelPlugins","filterChange","openCopy","openAdd","panelTab","active active--panel","","copyClass","autoFocus","onKeyPress","filterKeyPress","DashboardPanel_DashboardPanel","DashboardPanel","attachedPanel","lastGridWidth","SizedReactLayoutGrid","react_sizeme","react_sizeme_default","monitorWidth","onWidthChange","react_grid_layout_default","isDraggable","isResizable","measureBeforeMount","containerPadding","useCSSTransforms","cols","rowHeight","draggableHandle","onResize","onResizeStop","onDragStop","onLayoutChange","DashboardGrid_DashboardGrid","DashboardGrid","animated","triggerForceUpdate","buildLayout","panelMap","stringId","panelPos","newLayout","newLayout_1","newPos","updateGridPos","sortPanelsByGridPos","resizeDone","oldItem","newItem","renderPanels","panelClasses","panel--fullscreen","panelElements","watchDepth","wrapApply","PanelLoader_PanelLoader","PanelLoader","compiledElem","RowOptionsCtrl","onUpdated","FolderPickerCtrl","validationSrv","labelClass","loadInitialValue","permission","enableCreateNew","enableReset","initialTitle","createNewFolder","enterFolderCreation","$folder","newFolderNameChanged","newFolderNameTouched","newFolderName","hasValidationError","validationError","createFolder","closeCreateFolder","cancelCreateFolder","exitFolderCreation","resetFolder","rootFolder","initialFolderId","folder_picker_FolderPickerCtrl","MoveToFolderCtrl","moveDashboards","successCount","totalCount","alreadyInFolderCount","afterSave","move_to_folder_MoveToFolderCtrl","settings_SettingsCtrl","SettingsCtrl","canSaveAs","hasEditPermissionInFolders","buildSectionList","onRouteUpdated","onPostSave","sections","canAdmin","section","sectionParams","viewId","openSaveAsModal","saveDashboardJson","hideSettings","currentSection","deleteDashboard","sumBy","deleteDashboardConfirmed","hasUnsavedFolderChange","getFolder","folderTitle","folderUrl","DashboardListCtrl","FolderPageLoader","activeChildId","getFolderByUid","dashTab","FolderDashboardsCtrl","folderPageLoader","titleChanged","hasChanged","handleSaveFolderError","deleteFolder","updateFolder","FolderSettingsCtrl","nameExists","uidExists","autoGenerateUid","autoGenerateUidValue","initialFolderTitle","gnetId","gnetUrl","checkGnetDashboard","__inputs","inputModel","setDatasourceOptions","inputsValid","uidChanged","DashboardImportCtrl","inputValueChanged","titleTouched","hasNameValidationError","nameValidationError","hasUidValidationError","uidValidationError","importedUrl","loadJsonText","parseError","jsonText","gnetError","gnetInfo","back","create_folder_ctrl_CreateFolderCtrl","CreateFolderCtrl","folder_dashboards_ctrl_FolderDashboardsCtrl","folder_settings_ctrl_FolderSettingsCtrl","dashboard_import_ctrl_DashboardImportCtrl","PlaylistsCtrl","playlists","startUrl","removePlaylistConfirmed","playlist","removePlaylist","playlists_ctrl_PlaylistsCtrl","PlaylistSearchCtrl","tagsMode","prom","dashboardResult","tagResult","searchStarted","showStarred","queryHasNoFilters","filterByTag","PlaylistSrv","cancelPromise","filteredParams","pickBy","utils_url","playlistId","stop","isPlaying","exit","playlist_srv_PlaylistSrv","PlaylistEditCtrl","filteredTags","dashboardresult","tagresult","playlistItems","filterFoundPlaylistItems","filteredDashboards","playlistItem","listPlaylistItem","term","addPlaylistItem","addTagPlaylistItem","listedPlaylistItem","savePlaylist","isPlaylistEmpty","movePlaylistItem","currentPosition","newPosition","movePlaylistItemUp","movePlaylistItemDown","$routeProvider","playlist_edit_ctrl_PlaylistEditCtrl","snapshots","removeSnapshotConfirmed","removeSnapshot","SnapshotsCtrl","snapshot_ctrl_SnapshotsCtrl","listItemClass","renderMenuItem","menuScope","isDragged","togglePanelStackPosition","parentsUntil","menuElem","targetClass","menuHtml","createMenuTemplate","dropdown","togglePanelMenu","panelHeader","$document","infoDrop","panelScrollbar","lastAlertState","hasAlertRule","panelContent","transparentLastState","lastHasAlertRule","panelHeightUpdated","updatePanelCornerInfo","cornerMode","cornerInfoElem","hoverOpenDelay","transparent","__proto__","constructor","$watchGroup","$watchCollection","setPanelFocus","solo_panel_ctrl_SoloPanelCtrl","SoloPanelCtrl","dashboardLoaderSrv","sidemenu","initDashboard","getDashboardBySlug","initPanelScope","panelEditorTab","dynamicDirectiveSrv","fn","QueryRowCtrl","queryCtrl","toggleCollapse","toggleHideQuery","canCollapse","__collapsedQueryCache","collapsedText","duplicateQuery","query_editor_row_module","query_editor_row_QueryRowCtrl","query_troubleshooter_template","query_troubleshooter_QueryTroubleshooterCtrl","QueryTroubleshooterCtrl","onRequestResponseEventListener","onRequestResponse","onRequestErrorEventListener","removeEventsListeners","stateChanged","toggleMocking","isMocking","onRequestError","hasError","isLoading","getClipboardText","jsonExplorer","handleMocking","mockedData","mockedResponse","transformResponse","jsonpCallbackParam","renderJsonExplorer","toggleExpand","allNodesExpanded","openAtDepth","jsonElem","animateOpen","org_users_ctrl_OrgUsersCtrl","OrgUsersCtrl","externalUserMngLinkUrl","externalUserMngLinkName","canInvite","disableLoginForm","externalUserMngInfo","linkTarget","users","pendingInvites","email","updateOrgUser","userId","removeUser","removeUserConfirmed","revokeInvite","invite","getInviteUrl","ProfileCtrl","showTeamsList","showOrgsList","readonlyLoginFields","getUser","getUserTeams","getUserOrgs","teams","orgs","setUsingOrg","org","userForm","oldTheme","profile_ctrl_ProfileCtrl","SelectOrgCtrl","select_org_ctrl_SelectOrgCtrl","command","authProxyEnabled","ldapEnabled","changePassword","newPassword","confirmNew","change_password_ctrl_ChangePasswordCtrl","NewOrgCtrl","newOrg","createOrg","new_org_ctrl_NewOrgCtrl","UserInviteCtrl","sendEmail","sendInvite","inviteForm","CreateTeamCtrl","teamId","OrgApiKeysCtrl","roleTypes","removeToken","addToken","rootPath","origin","getOrgInfo","orgForm","updateAddress","addressForm","OrgDetailsCtrl","PrefsControlCtrl","themes","prefs","updatePrefs","prefsForm","cmd","homeDashboardId","prefs_control_PrefsControlCtrl","prefs_control_template","admin_list_users_ctrl","AdminListUsersCtrl","showPaging","getUsers","perPage","totalPages","pages","navigateToPage","deleteUser","AdminListOrgsCtrl","getOrgs","deleteOrg","AdminEditOrgCtrl","getOrg","getOrgUsers","orgUsers","orgDetailsForm","orgUser","removeOrgUser","AdminEditUserCtrl","permissions","user_id","passwordForm","updatePermissions","orgsSearchCache","searchOrgs","addOrgForm","orgInfo","loginOrEmail","admin_edit_user_ctrl_AdminEditUserCtrl","AdminSettingsCtrl","AdminHomeCtrl","AdminStatsCtrl","AlertNotificationsListCtrl","loadNotifications","deleteNotification"],"mappings":"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","file":"3.d25375abf41171e084fe.js","sourcesContent":["/*!\r\n * jquery.flot.gauge v1.1.0 *\r\n *\r\n * Flot plugin for rendering gauge charts.\r\n *\r\n * Copyright (c) 2015 @toyoty99.\r\n * Licensed under the MIT license.\r\n */\r\n\r\n/**\r\n * @module flot.gauge\r\n */\r\n(function($) {\r\n\r\n\r\n    /**\r\n     * Gauge class\r\n     *\r\n     * @class Gauge\r\n     */\r\n    var Gauge = (function() {\r\n        /**\r\n         * context of canvas\r\n         *\r\n         * @property context\r\n         * @type Object\r\n         */\r\n        var context;\r\n        /**\r\n         * placeholder of canvas\r\n         *\r\n         * @property placeholder\r\n         * @type Object\r\n         */\r\n        var placeholder;\r\n        /**\r\n         * options of plot\r\n         *\r\n         * @property options\r\n         * @type Object\r\n         */\r\n        var options;\r\n        /**\r\n         * options of gauge\r\n         *\r\n         * @property gaugeOptions\r\n         * @type Object\r\n         */\r\n        var gaugeOptions;\r\n        /**\r\n         * data series\r\n         *\r\n         * @property series\r\n         * @type Array\r\n         */\r\n        var series;\r\n        /**\r\n         * logger\r\n         *\r\n         * @property logger\r\n         * @type Object\r\n         */\r\n        var logger;\r\n\r\n        /**\r\n         * constructor\r\n         *\r\n         * @class Gauge\r\n         * @constructor\r\n         * @param  {Object} gaugeOptions gauge options\r\n         */\r\n        var Gauge = function(plot, ctx) {\r\n            context = ctx;\r\n            placeholder = plot.getPlaceholder();\r\n            options = plot.getOptions();\r\n            gaugeOptions = options.series.gauges;\r\n            series = plot.getData();\r\n            logger = getLogger(gaugeOptions.debug);\r\n        }\r\n\r\n        /**\r\n         * calculate layout\r\n         *\r\n         * @method calculateLayout\r\n         * @return the calculated layout properties\r\n         */\r\n        Gauge.prototype.calculateLayout = function() {\r\n\r\n            var canvasWidth = placeholder.width();\r\n            var canvasHeight = placeholder.height();\r\n\r\n\r\n\r\n            // calculate cell size\r\n            var columns = Math.min(series.length, gaugeOptions.layout.columns);\r\n            var rows = Math.ceil(series.length / columns);\r\n\r\n\r\n\r\n            var margin = gaugeOptions.layout.margin;\r\n            var hMargin = gaugeOptions.layout.hMargin;\r\n            var vMargin = gaugeOptions.layout.vMargin;\r\n            var cellWidth = (canvasWidth - (margin * 2) - (hMargin * (columns - 1))) / columns;\r\n            var cellHeight = (canvasHeight - (margin * 2) - (vMargin * (rows - 1))) / rows;\r\n            if (gaugeOptions.layout.square) {\r\n                var cell = Math.min(cellWidth, cellHeight);\r\n                cellWidth = cell;\r\n                cellHeight = cell;\r\n            }\r\n\r\n\r\n\r\n            // calculate 'auto' values\r\n            calculateAutoValues(gaugeOptions, cellWidth);\r\n\r\n            // calculate maximum radius\r\n            var cellMargin = gaugeOptions.cell.margin;\r\n            var labelMargin = 0;\r\n            var labelFontSize = 0;\r\n            if (gaugeOptions.label.show) {\r\n                labelMargin = gaugeOptions.label.margin;\r\n                labelFontSize = gaugeOptions.label.font.size;\r\n            }\r\n            var valueMargin = 0;\r\n            var valueFontSize = 0;\r\n            if (gaugeOptions.value.show) {\r\n                valueMargin = gaugeOptions.value.margin;\r\n                valueFontSize = gaugeOptions.value.font.size;\r\n            }\r\n            var thresholdWidth = 0;\r\n            if (gaugeOptions.threshold.show) {\r\n                thresholdWidth = gaugeOptions.threshold.width;\r\n            }\r\n            var thresholdLabelMargin = 0;\r\n            var thresholdLabelFontSize = 0;\r\n            if (gaugeOptions.threshold.label.show) {\r\n                thresholdLabelMargin = gaugeOptions.threshold.label.margin;\r\n                thresholdLabelFontSize = gaugeOptions.threshold.label.font.size;\r\n            }\r\n\r\n            var maxRadiusH = (cellWidth / 2) - cellMargin - thresholdWidth - (thresholdLabelMargin * 2) - thresholdLabelFontSize;\r\n\r\n            var startAngle = gaugeOptions.gauge.startAngle;\r\n            var endAngle = gaugeOptions.gauge.endAngle;\r\n            var dAngle = (endAngle - startAngle) / 100;\r\n            var heightRatioV = -1;\r\n            for (var a = startAngle; a < endAngle; a += dAngle) {\r\n                heightRatioV = Math.max(heightRatioV, Math.sin(toRad(a)));\r\n            }\r\n            heightRatioV = Math.max(heightRatioV, Math.sin(toRad(endAngle)));\r\n            var outerRadiusV = (cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize) / (1 + heightRatioV);\r\n            if (outerRadiusV * heightRatioV < valueMargin + (valueFontSize / 2)) {\r\n                outerRadiusV = cellHeight - (cellMargin * 2) - (labelMargin * 2) - labelFontSize - valueMargin - (valueFontSize / 2);\r\n            }\r\n            var maxRadiusV = outerRadiusV - (thresholdLabelMargin * 2) - thresholdLabelFontSize - thresholdWidth;\r\n\r\n            var radius = Math.min(maxRadiusH, maxRadiusV);\r\n\r\n\r\n            var width = gaugeOptions.gauge.width;\r\n            if (width >= radius) {\r\n                width = Math.max(3, radius / 3);\r\n            }\r\n\r\n\r\n            var outerRadius = (thresholdLabelMargin * 2) + thresholdLabelFontSize + thresholdWidth + radius;\r\n            var gaugeOuterHeight = Math.max(outerRadius * (1 + heightRatioV), outerRadius + valueMargin + (valueFontSize / 2));\r\n\r\n            return {\r\n                canvasWidth: canvasWidth,\r\n                canvasHeight: canvasHeight,\r\n                margin: margin,\r\n                hMargin: hMargin,\r\n                vMargin: vMargin,\r\n                columns: columns,\r\n                rows: rows,\r\n                cellWidth: cellWidth,\r\n                cellHeight: cellHeight,\r\n                cellMargin: cellMargin,\r\n                labelMargin: labelMargin,\r\n                labelFontSize: labelFontSize,\r\n                valueMargin: valueMargin,\r\n                valueFontSize: valueFontSize,\r\n                width: width,\r\n                radius: radius,\r\n                thresholdWidth: thresholdWidth,\r\n                thresholdLabelMargin: thresholdLabelMargin,\r\n                thresholdLabelFontSize: thresholdLabelFontSize,\r\n                gaugeOuterHeight: gaugeOuterHeight\r\n            };\r\n        }\r\n\r\n        /**\r\n         * calculate the values which are set as 'auto'\r\n         *\r\n         * @method calculateAutoValues\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Number} cellWidth the width of cell\r\n         */\r\n        function calculateAutoValues(gaugeOptionsi, cellWidth) {\r\n\r\n            if (gaugeOptionsi.gauge.width === \"auto\") {\r\n                gaugeOptionsi.gauge.width = Math.max(5, cellWidth / 8);\r\n            }\r\n            if (gaugeOptionsi.label.margin === \"auto\") {\r\n                gaugeOptionsi.label.margin = Math.max(1, cellWidth / 20);\r\n            }\r\n            if (gaugeOptionsi.label.font.size === \"auto\") {\r\n                gaugeOptionsi.label.font.size = Math.max(5, cellWidth / 8);\r\n            }\r\n            if (gaugeOptionsi.value.margin === \"auto\") {\r\n                gaugeOptionsi.value.margin = Math.max(1, cellWidth / 30);\r\n            }\r\n            if (gaugeOptionsi.value.font.size === \"auto\") {\r\n                gaugeOptionsi.value.font.size = Math.max(5, cellWidth / 9);\r\n            }\r\n            if (gaugeOptionsi.threshold.width === \"auto\") {\r\n                gaugeOptionsi.threshold.width = Math.max(3, cellWidth / 100);\r\n            }\r\n            if (gaugeOptionsi.threshold.label.margin === \"auto\") {\r\n                gaugeOptionsi.threshold.label.margin = Math.max(3, cellWidth / 40);\r\n            }\r\n            if (gaugeOptionsi.threshold.label.font.size === \"auto\") {\r\n                gaugeOptionsi.threshold.label.font.size = Math.max(5, cellWidth / 15);\r\n            }\r\n\r\n        }\r\n        Gauge.prototype.calculateAutoValues = calculateAutoValues;\r\n\r\n        /**\r\n         * calculate the layout of the cell inside\r\n         *\r\n         * @method calculateCellLayout\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Number} cellWidth the width of cell\r\n         * @param  {Number} i the index of the series\r\n         * @return the calculated cell layout properties\r\n         */\r\n        Gauge.prototype.calculateCellLayout = function(gaugeOptionsi, layout, i) {\r\n\r\n            // calculate top, left and center\r\n            var c = col(layout.columns, i);\r\n            var r = row(layout.columns, i);\r\n            var x = layout.margin + (layout.cellWidth + layout.hMargin) * c;\r\n            var y = layout.margin + (layout.cellHeight + layout.vMargin) * r;\r\n            var cx = x + (layout.cellWidth / 2);\r\n            var cy = y + layout.cellMargin + (layout.labelMargin * 2) + layout.labelFontSize + layout.thresholdWidth\r\n                        + layout.thresholdLabelFontSize + (layout.thresholdLabelMargin * 2) + layout.radius;\r\n            var blank = layout.cellHeight - (layout.cellMargin * 2) - (layout.labelMargin * 2) - layout.labelFontSize - layout.gaugeOuterHeight;\r\n            var offsetY = 0;\r\n            if (gaugeOptionsi.cell.vAlign === \"middle\") {\r\n                offsetY = (blank / 2);\r\n            } else if (gaugeOptionsi.cell.vAlign === \"bottom\") {\r\n                offsetY = blank;\r\n            }\r\n            cy += offsetY;\r\n\r\n            return {\r\n                col: c,\r\n                row: r,\r\n                x: x,\r\n                y: y,\r\n                offsetY: offsetY,\r\n                cellWidth: layout.cellWidth,\r\n                cellHeight: layout.cellHeight,\r\n                cellMargin: layout.cellMargin,\r\n                cx: cx,\r\n                cy: cy\r\n            }\r\n        }\r\n\r\n        /**\r\n         * draw the background of chart\r\n         *\r\n         * @method drawBackground\r\n         * @param  {Object} layout the layout properties\r\n         */\r\n        Gauge.prototype.drawBackground = function(layout) {\r\n\r\n            if (!gaugeOptions.frame.show) {\r\n                return;\r\n            }\r\n            context.save();\r\n            context.strokeStyle = options.grid.borderColor;\r\n            context.lineWidth = options.grid.borderWidth;\r\n            context.strokeRect(0, 0, layout.canvasWidth, layout.canvasHeight);\r\n            if (options.grid.backgroundColor) {\r\n                context.fillStyle = options.grid.backgroundColor;\r\n                context.fillRect(0, 0, layout.canvasWidth, layout.canvasHeight);\r\n            }\r\n            context.restore();\r\n        }\r\n\r\n        /**\r\n         * draw the background of cell\r\n         *\r\n         * @method drawCellBackground\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         */\r\n        Gauge.prototype.drawCellBackground = function(gaugeOptionsi, cellLayout) {\r\n\r\n            context.save();\r\n            if (gaugeOptionsi.cell.border && gaugeOptionsi.cell.border.show && gaugeOptionsi.cell.border.color && gaugeOptionsi.cell.border.width) {\r\n                context.strokeStyle = gaugeOptionsi.cell.border.color;\r\n                context.lineWidth = gaugeOptionsi.cell.border.width;\r\n                context.strokeRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\r\n            }\r\n            if (gaugeOptionsi.cell.background && gaugeOptionsi.cell.background.color) {\r\n                context.fillStyle = gaugeOptionsi.cell.background.color;\r\n                context.fillRect(cellLayout.x, cellLayout.y, cellLayout.cellWidth, cellLayout.cellHeight);\r\n            }\r\n            context.restore();\r\n        }\r\n\r\n        /**\r\n         * draw the gauge\r\n         *\r\n         * @method drawGauge\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         * @param  {String} label the label of data\r\n         * @param  {Number} data the value of the gauge\r\n         */\r\n        Gauge.prototype.drawGauge = function(gaugeOptionsi, layout, cellLayout, label, data) {\r\n\r\n\r\n            var blur = gaugeOptionsi.gauge.shadow.show ? gaugeOptionsi.gauge.shadow.blur : 0;\r\n\r\n\r\n            // draw gauge frame\r\n            drawArcWithShadow(\r\n                cellLayout.cx, // center x\r\n                cellLayout.cy, // center y\r\n                layout.radius,\r\n                layout.width,\r\n                toRad(gaugeOptionsi.gauge.startAngle),\r\n                toRad(gaugeOptionsi.gauge.endAngle),\r\n                gaugeOptionsi.gauge.border.color,      // line color\r\n                gaugeOptionsi.gauge.border.width,      // line width\r\n                gaugeOptionsi.gauge.background.color,  // fill color\r\n                blur);\r\n\r\n            // draw gauge\r\n            var c1 = getColor(gaugeOptionsi, data);\r\n            var a2 = calculateAngle(gaugeOptionsi, layout, data);\r\n            drawArcWithShadow(\r\n                cellLayout.cx, // center x\r\n                cellLayout.cy, // center y\r\n                layout.radius - 1,\r\n                layout.width - 2,\r\n                toRad(gaugeOptionsi.gauge.startAngle),\r\n                toRad(a2),\r\n                c1,           // line color\r\n                1,            // line width\r\n                c1,           // fill color\r\n                blur);\r\n        }\r\n\r\n        /**\r\n         * decide the color of the data from the threshold options\r\n         *\r\n         * @method getColor\r\n         * @private\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Number} data the value of the gauge\r\n         */\r\n        function getColor(gaugeOptionsi, data) {\r\n            var color;\r\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\r\n                var threshold = gaugeOptionsi.threshold.values[i];\r\n                color = threshold.color;\r\n                if (data < threshold.value) {\r\n                    break;\r\n                }\r\n            }\r\n            return color;\r\n        }\r\n\r\n        /**\r\n         * calculate the angle of the data\r\n         *\r\n         * @method calculateAngle\r\n         * @private\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Number} data the value of the gauge\r\n         */\r\n        function calculateAngle(gaugeOptionsi, layout, data) {\r\n            var a =\r\n                gaugeOptionsi.gauge.startAngle\r\n                    + (gaugeOptionsi.gauge.endAngle - gaugeOptionsi.gauge.startAngle)\r\n                        * ((data - gaugeOptionsi.gauge.min) / (gaugeOptionsi.gauge.max - gaugeOptionsi.gauge.min));\r\n\r\n            if (a < gaugeOptionsi.gauge.startAngle) {\r\n                a = gaugeOptionsi.gauge.startAngle;\r\n            } else if (a > gaugeOptionsi.gauge.endAngle) {\r\n                a = gaugeOptionsi.gauge.endAngle;\r\n            }\r\n            return a;\r\n        }\r\n\r\n        /**\r\n         * draw the arc of the threshold\r\n         *\r\n         * @method drawThreshold\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         */\r\n        Gauge.prototype.drawThreshold = function(gaugeOptionsi, layout, cellLayout) {\r\n\r\n            var a1 = gaugeOptionsi.gauge.startAngle;\r\n            for (var i = 0; i < gaugeOptionsi.threshold.values.length; i++) {\r\n                var threshold = gaugeOptionsi.threshold.values[i];\r\n                c1 = threshold.color;\r\n                a2 = calculateAngle(gaugeOptionsi, layout, threshold.value);\r\n                drawArc(\r\n                    context,\r\n                    cellLayout.cx, // center x\r\n                    cellLayout.cy, // center y\r\n                    layout.radius + layout.thresholdWidth,\r\n                    layout.thresholdWidth - 2,\r\n                    toRad(a1),\r\n                    toRad(a2),\r\n                    c1,           // line color\r\n                    1,            // line width\r\n                    c1);          // fill color\r\n                a1 = a2;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * draw an arc with a shadow\r\n         *\r\n         * @method drawArcWithShadow\r\n         * @private\r\n         * @param  {Number} cx the x position of the center\r\n         * @param  {Number} cy the y position of the center\r\n         * @param  {Number} r the radius of an arc\r\n         * @param  {Number} w the width of an arc\r\n         * @param  {Number} rd1 the start angle of an arc in radians\r\n         * @param  {Number} rd2 the end angle of an arc in radians\r\n         * @param  {String} lc the color of a line\r\n         * @param  {Number} lw the widht of a line\r\n         * @param  {String} fc the fill color  of an arc\r\n         * @param  {Number} blur the shdow blur\r\n         */\r\n        function drawArcWithShadow(cx, cy, r, w, rd1, rd2, lc, lw, fc, blur) {\r\n            if (rd1 === rd2) {\r\n                return;\r\n            }\r\n            context.save();\r\n\r\n            drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc);\r\n\r\n            if (blur) {\r\n                drawArc(context, cx, cy, r, w, rd1, rd2);\r\n                context.clip();\r\n                context.shadowOffsetX = 0;\r\n                context.shadowOffsetY = 0;\r\n                context.shadowBlur = 10;\r\n                context.shadowColor = \"gray\";\r\n                drawArc(context, cx, cy, r + 1, w + 2, rd1, rd2, lc, 1);\r\n            }\r\n            context.restore();\r\n        }\r\n\r\n        /**\r\n         * draw the label of the gauge\r\n         *\r\n         * @method drawLable\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         * @param  {Number} i the index of the series\r\n         * @param  {Object} item the item of the series\r\n         */\r\n        Gauge.prototype.drawLable = function(gaugeOptionsi, layout, cellLayout, i, item) {\r\n\r\n            drawText(\r\n                cellLayout.cx,\r\n                cellLayout.y + cellLayout.cellMargin + layout.labelMargin + cellLayout.offsetY,\r\n                \"flotGagueLabel\" + i,\r\n                gaugeOptionsi.label.formatter ? gaugeOptionsi.label.formatter(item.label, item.data[0][1]) : text,\r\n                gaugeOptionsi.label);\r\n        }\r\n\r\n        /**\r\n         * draw the value of the gauge\r\n         *\r\n         * @method drawValue\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         * @param  {Number} i the index of the series\r\n         * @param  {Object} item the item of the series\r\n         */\r\n        Gauge.prototype.drawValue = function(gaugeOptionsi, layout, cellLayout, i, item) {\r\n\r\n            drawText(\r\n                cellLayout.cx,\r\n                cellLayout.cy - (gaugeOptionsi.value.font.size / 2),\r\n                \"flotGagueValue\" + i,\r\n                gaugeOptionsi.value.formatter ? gaugeOptionsi.value.formatter(item.label, item.data[0][1]) : text,\r\n                gaugeOptionsi.value);\r\n        }\r\n\r\n        /**\r\n         * draw the values of the threshold\r\n         *\r\n         * @method drawThresholdValues\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         * @param  {Number} i the index of the series\r\n         */\r\n        Gauge.prototype.drawThresholdValues = function(gaugeOptionsi, layout, cellLayout, i) {\r\n\r\n            // min, max\r\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Min\" + i, gaugeOptionsi.gauge.min, gaugeOptionsi.gauge.startAngle);\r\n            drawThresholdValue(gaugeOptionsi, layout, cellLayout, \"Max\" + i, gaugeOptionsi.gauge.max, gaugeOptionsi.gauge.endAngle);\r\n            // threshold values\r\n            for (var j = 0; j < gaugeOptionsi.threshold.values.length; j++) {\r\n                var threshold = gaugeOptionsi.threshold.values[j];\r\n                if (threshold.value > gaugeOptionsi.gauge.min && threshold.value < gaugeOptionsi.gauge.max) {\r\n                    var a = calculateAngle(gaugeOptionsi, layout, threshold.value);\r\n                    drawThresholdValue(gaugeOptionsi, layout, cellLayout, i + \"_\" + j, threshold.value, a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * draw the value of the threshold\r\n         *\r\n         * @method drawThresholdValue\r\n         * @param  {Object} gaugeOptionsi the options of the gauge\r\n         * @param  {Object} layout the layout properties\r\n         * @param  {Object} cellLayout the cell layout properties\r\n         * @param  {Number} i the index of the series\r\n         * @param  {Number} value the value of the threshold\r\n         * @param  {Number} a the angle of the value drawn\r\n         */\r\n        function drawThresholdValue(gaugeOptionsi, layout, cellLayout, i, value, a) {\r\n            drawText(\r\n                cellLayout.cx\r\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\r\n                        * Math.cos(toRad(a))),\r\n                cellLayout.cy\r\n                    + ((layout.thresholdLabelMargin + (layout.thresholdLabelFontSize / 2) + layout.radius)\r\n                        * Math.sin(toRad(a))),\r\n                \"flotGagueThresholdValue\" + i,\r\n                gaugeOptionsi.threshold.label.formatter ? gaugeOptionsi.threshold.label.formatter(value) : value,\r\n                gaugeOptionsi.threshold.label,\r\n                a);\r\n        }\r\n\r\n        /**\r\n         * draw a text\r\n         *\r\n         * the textOptions is assumed as follows:\r\n         *\r\n         *   textOptions: {\r\n         *       background: {\r\n         *           color: null,\r\n         *           opacity: 0\r\n         *       },\r\n         *       font: {\r\n         *           size: \"auto\"\r\n         *           family: \"\\\"ＭＳ ゴシック\\\",sans-serif\"\r\n         *       },\r\n         *       color: null\r\n         *   }\r\n         *\r\n         * @method drawText\r\n         * @private\r\n         * @param  {Number} x the x position of the text drawn (left top)\r\n         * @param  {Number} y the y position of the text drawn (left top)\r\n         * @param  {String} id the id of the dom element\r\n         * @param  {String} text the text drawn\r\n         * @param  {Object} textOptions the option of the text\r\n         * @param  {Number} [a] the angle of the value drawn\r\n         */\r\n        function drawText(x, y, id, text, textOptions, a) {\r\n            var span = $(\".\" + id, placeholder);\r\n            var exists = span.length;\r\n            if (!exists) {\r\n                span = $(\"<span></span>\")\r\n                span.attr(\"id\", id);\r\n                span.css(\"position\", \"absolute\");\r\n                span.css(\"top\", y + \"px\");\r\n                if (textOptions.font.size) {\r\n                    span.css(\"font-size\", textOptions.font.size + \"px\");\r\n                }\r\n                if (textOptions.font.family) {\r\n                    span.css(\"font-family\", textOptions.font.family);\r\n                }\r\n                if (textOptions.color) {\r\n                    span.css(\"color\", textOptions.color);\r\n                }\r\n                if (textOptions.background.color) {\r\n                    span.css(\"background-color\", textOptions.background.color);\r\n                }\r\n                if (textOptions.background.opacity) {\r\n                    span.css(\"opacity\", textOptions.background.opacity);\r\n                }\r\n                placeholder.append(span);\r\n            }\r\n            span.text(text);\r\n            // after append, readjust the left position\r\n            span.css(\"left\", x + \"px\"); // for redraw, resetting the left position is needed here\r\n            span.css(\"left\", (parseInt(span.css(\"left\")) - (span.width()/ 2)) + \"px\");\r\n\r\n            // at last, set angle\r\n            if (!exists && a) {\r\n                span.css(\"top\", (parseInt(span.css(\"top\")) - (span.height()/ 2)) + \"px\");\r\n                span.css(\"transform\", \"rotate(\" + ((180 * a) + 90) + \"deg)\"); // not supported for ie8\r\n            }\r\n        }\r\n\r\n        return Gauge;\r\n    })();\r\n    /**\r\n     * get a instance of Logger\r\n     *\r\n     * @method  getLogger\r\n     * @for flot.gauge\r\n     * @private\r\n     * @param  {Object} debugOptions the options of debug\r\n     */\r\n    function getLogger(debugOptions) {\r\n        return typeof Logger !== \"undefined\" ? new Logger(debugOptions) : null;\r\n    }\r\n\r\n    /**\r\n     * calculate the index of columns for the specified data\r\n     *\r\n     * @method col\r\n     * @for flot.gauge\r\n     * @param  {Number} columns the number of columns\r\n     * @param  {Number} i       the index of the series\r\n     * @return the index of columns\r\n     */\r\n    function col(columns, i) {\r\n        return i % columns;\r\n    }\r\n\r\n    /**\r\n     * calculate the index of rows for the specified data\r\n     *\r\n     * @method row\r\n     * @for flot.gauge\r\n     * @param  {Number} columns the number of rows\r\n     * @param  {Number} i       the index of the series\r\n     * @return the index of rows\r\n     */\r\n    function row(columns, i) {\r\n        return Math.floor(i / columns);\r\n    }\r\n\r\n    /**\r\n     * calculate the angle in radians\r\n     *\r\n     * internally, use a number without PI (0 - 2).\r\n     * so, in this function, multiply PI\r\n     *\r\n     * @method toRad\r\n     * @for flot.gauge\r\n     * @param  {Number} a the number of angle without PI\r\n     * @return the angle in radians\r\n     */\r\n    function toRad(a) {\r\n        return a * Math.PI;\r\n    }\r\n\r\n    /**\r\n     * draw an arc\r\n     *\r\n     * @method drawArc\r\n     * @for flot.gauge\r\n     * @param  {Object} context the context of canvas\r\n     * @param  {Number} cx the x position of the center\r\n     * @param  {Number} cy the y position of the center\r\n     * @param  {Number} r the radius of an arc\r\n     * @param  {Number} w the width of an arc\r\n     * @param  {Number} rd1 the start angle of an arc in radians\r\n     * @param  {Number} rd2 the end angle of an arc in radians\r\n     * @param  {String} lc the color of a line\r\n     * @param  {Number} lw the widht of a line\r\n     * @param  {String} fc the fill color  of an arc\r\n     */\r\n    function drawArc(context, cx, cy, r, w, rd1, rd2, lc, lw, fc) {\r\n        if (rd1 === rd2) {\r\n            return;\r\n        }\r\n        var counterClockwise = false;\r\n        context.save();\r\n        context.beginPath();\r\n        context.arc(cx, cy, r, rd1, rd2, counterClockwise);\r\n        context.lineTo(cx + (r - w) * Math.cos(rd2),\r\n                       cy + (r - w) * Math.sin(rd2));\r\n        context.arc(cx, cy, r - w, rd2, rd1, !counterClockwise);\r\n        context.closePath();\r\n        if (lw) {\r\n            context.lineWidth = lw;\r\n        }\r\n        if (lc) {\r\n            context.strokeStyle = lc;\r\n            context.stroke();\r\n        }\r\n        if (fc) {\r\n            context.fillStyle = fc;\r\n            context.fill();\r\n        }\r\n        context.restore();\r\n    }\r\n\r\n    /**\r\n     * initialize plugin\r\n     *\r\n     * @method init\r\n     * @for flot.gauge\r\n     * @private\r\n     * @param  {Object} plot a instance of plot\r\n     */\r\n    function init (plot) {\r\n        // add processOptions hook\r\n        plot.hooks.processOptions.push(function(plot, options) {\r\n            var logger = getLogger(options.series.gauges.debug);\r\n\r\n\r\n\r\n\r\n            // turn 'grid' and 'legend' off\r\n            if (options.series.gauges.show) {\r\n                options.grid.show = false;\r\n                options.legend.show = false;\r\n            }\r\n\r\n            // sort threshold\r\n            var thresholds = options.series.gauges.threshold.values;\r\n\r\n            thresholds.sort(function(a, b) {\r\n                if (a.value < b.value) {\r\n                    return -1;\r\n                } else if (a.value > b.value) {\r\n                    return 1;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n\r\n\r\n        });\r\n\r\n        // add draw hook\r\n        plot.hooks.draw.push(function(plot, context) {\r\n            var options = plot.getOptions();\r\n            var gaugeOptions = options.series.gauges;\r\n\r\n            var logger = getLogger(gaugeOptions.debug);\r\n\r\n\r\n            if (!gaugeOptions.show) {\r\n                return;\r\n            }\r\n\r\n            var series = plot.getData();\r\n\r\n            if (!series || !series.length) {\r\n                return; // if no series were passed\r\n            }\r\n\r\n            var gauge = new Gauge(plot, context);\r\n\r\n            // calculate layout\r\n            var layout = gauge.calculateLayout();\r\n\r\n            // debug layout\r\n            if (gaugeOptions.debug.layout) {\r\n\r\n            }\r\n\r\n            // draw background\r\n            gauge.drawBackground(layout)\r\n\r\n            // draw cells (label, gauge, value, threshold)\r\n            for (var i = 0; i < series.length; i++) {\r\n                var item = series[i];\r\n\r\n                var gaugeOptionsi = $.extend({}, gaugeOptions, item.gauges);\r\n                if (item.gauges) {\r\n                    // re-calculate 'auto' values\r\n                    gauge.calculateAutoValues(gaugeOptionsi, layout.cellWidth);\r\n                }\r\n\r\n                // calculate cell layout\r\n                var cellLayout = gauge.calculateCellLayout(gaugeOptionsi, layout, i);\r\n\r\n                // draw cell background\r\n                gauge.drawCellBackground(gaugeOptionsi, cellLayout)\r\n                // debug layout\r\n                if (gaugeOptionsi.debug.layout) {\r\n\r\n                }\r\n                // draw label\r\n                if (gaugeOptionsi.label.show) {\r\n                    gauge.drawLable(gaugeOptionsi, layout, cellLayout, i, item);\r\n                }\r\n                // draw gauge\r\n                gauge.drawGauge(gaugeOptionsi, layout, cellLayout, item.label, item.data[0][1]);\r\n                // draw threshold\r\n                if (gaugeOptionsi.threshold.show) {\r\n                    gauge.drawThreshold(gaugeOptionsi, layout, cellLayout);\r\n                }\r\n                if (gaugeOptionsi.threshold.label.show) {\r\n                    gauge.drawThresholdValues(gaugeOptionsi, layout, cellLayout, i)\r\n                }\r\n                // draw value\r\n                if (gaugeOptionsi.value.show) {\r\n                    gauge.drawValue(gaugeOptionsi, layout, cellLayout, i, item);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * [defaults description]\r\n     *\r\n     * @property defaults\r\n     * @type {Object}\r\n     */\r\n    var defaults = {\r\n        series: {\r\n            gauges: {\r\n                debug: {\r\n                    log: false,\r\n                    layout: false,\r\n                    alert: false\r\n                },\r\n                show: false,\r\n                layout: {\r\n                    margin: 5,\r\n                    columns: 3,\r\n                    hMargin: 5,\r\n                    vMargin: 5,\r\n                    square: false\r\n                },\r\n                frame: {\r\n                    show: true\r\n                },\r\n                cell: {\r\n                    background: {\r\n                        color: null\r\n                    },\r\n                    border: {\r\n                        show: true,\r\n                        color: \"black\",\r\n                        width: 1\r\n                    },\r\n                    margin: 5,\r\n                    vAlign: \"middle\" // 'top' or 'middle' or 'bottom'\r\n                },\r\n                gauge: {\r\n                    width: \"auto\", // a specified number, or 'auto'\r\n                    startAngle: 0.9, // 0 - 2 factor of the radians\r\n                    endAngle: 2.1, // 0 - 2 factor of the radians\r\n                    min: 0,\r\n                    max: 100,\r\n                    background: {\r\n                        color: \"white\"\r\n                    },\r\n                    border: {\r\n                        color: \"lightgray\",\r\n                        width: 2\r\n                    },\r\n                    shadow: {\r\n                        show: true,\r\n                        blur: 5\r\n                    }\r\n                },\r\n                label: {\r\n                    show: true,\r\n                    margin: \"auto\", // a specified number, or 'auto'\r\n                    background: {\r\n                        color: null,\r\n                        opacity: 0\r\n                    },\r\n                    font: {\r\n                        size: \"auto\", // a specified number, or 'auto'\r\n                        family: \"sans-serif\"\r\n                    },\r\n                    color: null,\r\n                    formatter: function(label, value) {\r\n                        return label;\r\n                    }\r\n                },\r\n                value: {\r\n                    show: true,\r\n                    margin: \"auto\", // a specified number, or 'auto'\r\n                    background: {\r\n                        color: null,\r\n                        opacity: 0\r\n                    },\r\n                    font: {\r\n                        size: \"auto\", // a specified number, or 'auto'\r\n                        family: \"sans-serif\"\r\n                    },\r\n                    color: null,\r\n                    formatter: function(label, value) {\r\n                        return parseInt(value);\r\n                    }\r\n                },\r\n                threshold: {\r\n                    show: true,\r\n                    width: \"auto\", // a specified number, or 'auto'\r\n                    label: {\r\n                        show: true,\r\n                        margin: \"auto\", // a specified number, or 'auto'\r\n                        background: {\r\n                            color: null,\r\n                            opacity: 0\r\n                        },\r\n                        font: {\r\n                            size: \"auto\", // a specified number, or 'auto'\r\n                            family: \",sans-serif\"\r\n                        },\r\n                        color: null,\r\n                        formatter: function(value) {\r\n                            return value;\r\n                        }\r\n                    },\r\n                    values: [\r\n                        {\r\n                            value: 50,\r\n                            color: \"lightgreen\"\r\n                        }, {\r\n                            value: 80,\r\n                            color: \"yellow\"\r\n                        }, {\r\n                            value: 100,\r\n                            color: \"red\"\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    // register the gauge plugin\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: defaults,\r\n        name: \"gauge\",\r\n        version: \"1.1.0\"\r\n    });\r\n\r\n})(jQuery);\r\n","/*\r\n * jQuery.flot.dashes\r\n *\r\n * options = {\r\n *   series: {\r\n *     dashes: {\r\n *\r\n *       // show\r\n *       // default: false\r\n *       // Whether to show dashes for the series.\r\n *       show: <boolean>,\r\n *\r\n *       // lineWidth\r\n *       // default: 2\r\n *       // The width of the dashed line in pixels.\r\n *       lineWidth: <number>,\r\n *\r\n *       // dashLength\r\n *       // default: 10\r\n *       // Controls the length of the individual dashes and the amount of\r\n *       // space between them.\r\n *       // If this is a number, the dashes and spaces will have that length.\r\n *       // If this is an array, it is read as [ dashLength, spaceLength ]\r\n *       dashLength: <number> or <array[2]>\r\n *     }\r\n *   }\r\n * }\r\n */\r\n(function($){\r\n\r\n  function init(plot) {\r\n\r\n    plot.hooks.processDatapoints.push(function(plot, series, datapoints) {\r\n\r\n      if (!series.dashes.show) return;\r\n\r\n      plot.hooks.draw.push(function(plot, ctx) {\r\n\r\n        var plotOffset = plot.getPlotOffset(),\r\n          axisx = series.xaxis,\r\n          axisy = series.yaxis;\r\n\r\n        function plotDashes(xoffset, yoffset) {\r\n\r\n          var points = datapoints.points,\r\n            ps = datapoints.pointsize,\r\n            prevx = null,\r\n            prevy = null,\r\n            dashRemainder = 0,\r\n            dashOn = true,\r\n            dashOnLength,\r\n            dashOffLength;\r\n\r\n          if (series.dashes.dashLength[0]) {\r\n            dashOnLength = series.dashes.dashLength[0];\r\n            if (series.dashes.dashLength[1]) {\r\n              dashOffLength = series.dashes.dashLength[1];\r\n            } else {\r\n              dashOffLength = dashOnLength;\r\n            }\r\n          } else {\r\n            dashOffLength = dashOnLength = series.dashes.dashLength;\r\n          }\r\n\r\n          ctx.beginPath();\r\n\r\n          for (var i = ps; i < points.length; i += ps) {\r\n\r\n            var x1 = points[i - ps],\r\n              y1 = points[i - ps + 1],\r\n              x2 = points[i],\r\n              y2 = points[i + 1];\r\n\r\n            if (x1 == null || x2 == null) continue;\r\n\r\n            // clip with ymin\r\n            if (y1 <= y2 && y1 < axisy.min) {\r\n              if (y2 < axisy.min) continue;   // line segment is outside\r\n              // compute new intersection point\r\n              x1 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n              y1 = axisy.min;\r\n            } else if (y2 <= y1 && y2 < axisy.min) {\r\n              if (y1 < axisy.min) continue;\r\n              x2 = (axisy.min - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n              y2 = axisy.min;\r\n            }\r\n\r\n            // clip with ymax\r\n            if (y1 >= y2 && y1 > axisy.max) {\r\n              if (y2 > axisy.max) continue;\r\n              x1 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n              y1 = axisy.max;\r\n            } else if (y2 >= y1 && y2 > axisy.max) {\r\n              if (y1 > axisy.max) continue;\r\n              x2 = (axisy.max - y1) / (y2 - y1) * (x2 - x1) + x1;\r\n              y2 = axisy.max;\r\n            }\r\n\r\n            // clip with xmin\r\n            if (x1 <= x2 && x1 < axisx.min) {\r\n              if (x2 < axisx.min) continue;\r\n              y1 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n              x1 = axisx.min;\r\n            } else if (x2 <= x1 && x2 < axisx.min) {\r\n              if (x1 < axisx.min) continue;\r\n              y2 = (axisx.min - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n              x2 = axisx.min;\r\n            }\r\n\r\n            // clip with xmax\r\n            if (x1 >= x2 && x1 > axisx.max) {\r\n              if (x2 > axisx.max) continue;\r\n              y1 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n              x1 = axisx.max;\r\n            } else if (x2 >= x1 && x2 > axisx.max) {\r\n              if (x1 > axisx.max) continue;\r\n              y2 = (axisx.max - x1) / (x2 - x1) * (y2 - y1) + y1;\r\n              x2 = axisx.max;\r\n            }\r\n\r\n            if (x1 != prevx || y1 != prevy) {\r\n              ctx.moveTo(axisx.p2c(x1) + xoffset, axisy.p2c(y1) + yoffset);\r\n            }\r\n\r\n            var ax1 = axisx.p2c(x1) + xoffset,\r\n              ay1 = axisy.p2c(y1) + yoffset,\r\n              ax2 = axisx.p2c(x2) + xoffset,\r\n              ay2 = axisy.p2c(y2) + yoffset,\r\n              dashOffset;\r\n\r\n            function lineSegmentOffset(segmentLength) {\r\n\r\n              var c = Math.sqrt(Math.pow(ax2 - ax1, 2) + Math.pow(ay2 - ay1, 2));\r\n\r\n              if (c <= segmentLength) {\r\n                return {\r\n                  deltaX: ax2 - ax1,\r\n                  deltaY: ay2 - ay1,\r\n                  distance: c,\r\n                  remainder: segmentLength - c\r\n                }\r\n              } else {\r\n                var xsign = ax2 > ax1 ? 1 : -1,\r\n                  ysign = ay2 > ay1 ? 1 : -1;\r\n                return {\r\n                  deltaX: xsign * Math.sqrt(Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                  deltaY: ysign * Math.sqrt(Math.pow(segmentLength, 2) - Math.pow(segmentLength, 2) / (1 + Math.pow((ay2 - ay1)/(ax2 - ax1), 2))),\r\n                  distance: segmentLength,\r\n                  remainder: 0\r\n                };\r\n              }\r\n            }\r\n            //-end lineSegmentOffset\r\n\r\n            do {\r\n\r\n              dashOffset = lineSegmentOffset(\r\n                dashRemainder > 0 ? dashRemainder :\r\n                  dashOn ? dashOnLength : dashOffLength);\r\n\r\n              if (dashOffset.deltaX != 0 || dashOffset.deltaY != 0) {\r\n                if (dashOn) {\r\n                  ctx.lineTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n                } else {\r\n                  ctx.moveTo(ax1 + dashOffset.deltaX, ay1 + dashOffset.deltaY);\r\n                }\r\n              }\r\n\r\n              dashOn = !dashOn;\r\n              dashRemainder = dashOffset.remainder;\r\n              ax1 += dashOffset.deltaX;\r\n              ay1 += dashOffset.deltaY;\r\n\r\n            } while (dashOffset.distance > 0);\r\n\r\n            prevx = x2;\r\n            prevy = y2;\r\n          }\r\n\r\n          ctx.stroke();\r\n        }\r\n        //-end plotDashes\r\n\r\n        ctx.save();\r\n        ctx.translate(plotOffset.left, plotOffset.top);\r\n        ctx.lineJoin = 'round';\r\n\r\n        var lw = series.dashes.lineWidth,\r\n          sw = series.shadowSize;\r\n\r\n        // FIXME: consider another form of shadow when filling is turned on\r\n        if (lw > 0 && sw > 0) {\r\n          // draw shadow as a thick and thin line with transparency\r\n          ctx.lineWidth = sw;\r\n          ctx.strokeStyle = \"rgba(0,0,0,0.1)\";\r\n          // position shadow at angle from the mid of line\r\n          var angle = Math.PI/18;\r\n          plotDashes(Math.sin(angle) * (lw/2 + sw/2), Math.cos(angle) * (lw/2 + sw/2));\r\n          ctx.lineWidth = sw/2;\r\n          plotDashes(Math.sin(angle) * (lw/2 + sw/4), Math.cos(angle) * (lw/2 + sw/4));\r\n        }\r\n\r\n        ctx.lineWidth = lw;\r\n        ctx.strokeStyle = series.color;\r\n\r\n        if (lw > 0) {\r\n          plotDashes(0, 0);\r\n        }\r\n\r\n        ctx.restore();\r\n\r\n      });\r\n      //-end draw hook\r\n\r\n    });\r\n    //-end processDatapoints hook\r\n\r\n  }\r\n  //-end init\r\n\r\n  $.plot.plugins.push({\r\n    init: init,\r\n    options: {\r\n      series: {\r\n        dashes: {\r\n          show: false,\r\n          lineWidth: 2,\r\n          dashLength: 10\r\n        }\r\n      }\r\n    },\r\n    name: 'dashes',\r\n    version: '0.1'\r\n  });\r\n\r\n})(jQuery)\r\n","/* Flot plugin for showing crosshairs when the mouse hovers over the plot.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe plugin supports these options:\r\n\r\n\tcrosshair: {\r\n\t\tmode: null or \"x\" or \"y\" or \"xy\"\r\n\t\tcolor: color\r\n\t\tlineWidth: number\r\n\t}\r\n\r\nSet the mode to one of \"x\", \"y\" or \"xy\". The \"x\" mode enables a vertical\r\ncrosshair that lets you trace the values on the x axis, \"y\" enables a\r\nhorizontal crosshair and \"xy\" enables them both. \"color\" is the color of the\r\ncrosshair (default is \"rgba(170, 0, 0, 0.80)\"), \"lineWidth\" is the width of\r\nthe drawn lines (default is 1).\r\n\r\nThe plugin also adds four public methods:\r\n\r\n  - setCrosshair( pos )\r\n\r\n    Set the position of the crosshair. Note that this is cleared if the user\r\n    moves the mouse. \"pos\" is in coordinates of the plot and should be on the\r\n    form { x: xpos, y: ypos } (you can use x2/x3/... if you're using multiple\r\n    axes), which is coincidentally the same format as what you get from a\r\n    \"plothover\" event. If \"pos\" is null, the crosshair is cleared.\r\n\r\n  - clearCrosshair()\r\n\r\n    Clear the crosshair.\r\n\r\n  - lockCrosshair(pos)\r\n\r\n    Cause the crosshair to lock to the current location, no longer updating if\r\n    the user moves the mouse. Optionally supply a position (passed on to\r\n    setCrosshair()) to move it to.\r\n\r\n    Example usage:\r\n\r\n\tvar myFlot = $.plot( $(\"#graph\"), ..., { crosshair: { mode: \"x\" } } };\r\n\t$(\"#graph\").bind( \"plothover\", function ( evt, position, item ) {\r\n\t\tif ( item ) {\r\n\t\t\t// Lock the crosshair to the data point being hovered\r\n\t\t\tmyFlot.lockCrosshair({\r\n\t\t\t\tx: item.datapoint[ 0 ],\r\n\t\t\t\ty: item.datapoint[ 1 ]\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t// Return normal crosshair operation\r\n\t\t\tmyFlot.unlockCrosshair();\r\n\t\t}\r\n\t});\r\n\r\n  - unlockCrosshair()\r\n\r\n    Free the crosshair to move again after locking it.\r\n*/\r\n\r\n(function ($) {\r\n    var options = {\r\n        crosshair: {\r\n            mode: null, // one of null, \"x\", \"y\" or \"xy\",\r\n            color: \"rgba(170, 0, 0, 0.80)\",\r\n            lineWidth: 1\r\n        }\r\n    };\r\n    \r\n    function init(plot) {\r\n        // position of crosshair in pixels\r\n        var crosshair = { x: -1, y: -1, locked: false };\r\n\r\n        plot.setCrosshair = function setCrosshair(pos) {\r\n            if (!pos)\r\n                crosshair.x = -1;\r\n            else {\r\n                var o = plot.p2c(pos);\r\n                crosshair.x = Math.max(0, Math.min(o.left, plot.width()));\r\n                crosshair.y = Math.max(0, Math.min(o.top, plot.height()));\r\n            }\r\n            \r\n            plot.triggerRedrawOverlay();\r\n        };\r\n        \r\n        plot.clearCrosshair = plot.setCrosshair; // passes null for pos\r\n        \r\n        plot.lockCrosshair = function lockCrosshair(pos) {\r\n            if (pos)\r\n                plot.setCrosshair(pos);\r\n            crosshair.locked = true;\r\n        };\r\n\r\n        plot.unlockCrosshair = function unlockCrosshair() {\r\n            crosshair.locked = false;\r\n        };\r\n\r\n        function onMouseOut(e) {\r\n            if (crosshair.locked)\r\n                return;\r\n\r\n            if (crosshair.x != -1) {\r\n                crosshair.x = -1;\r\n                plot.triggerRedrawOverlay();\r\n            }\r\n        }\r\n\r\n        function onMouseMove(e) {\r\n            if (crosshair.locked)\r\n                return;\r\n                \r\n            if (plot.getSelection && plot.getSelection()) {\r\n                crosshair.x = -1; // hide the crosshair while selecting\r\n                return;\r\n            }\r\n                \r\n            var offset = plot.offset();\r\n            crosshair.x = Math.max(0, Math.min(e.pageX - offset.left, plot.width()));\r\n            crosshair.y = Math.max(0, Math.min(e.pageY - offset.top, plot.height()));\r\n            plot.triggerRedrawOverlay();\r\n        }\r\n        \r\n        plot.hooks.bindEvents.push(function (plot, eventHolder) {\r\n            if (!plot.getOptions().crosshair.mode)\r\n                return;\r\n\r\n            eventHolder.mouseout(onMouseOut);\r\n            eventHolder.mousemove(onMouseMove);\r\n        });\r\n\r\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\r\n            var c = plot.getOptions().crosshair;\r\n            if (!c.mode)\r\n                return;\r\n\r\n            var plotOffset = plot.getPlotOffset();\r\n            \r\n            ctx.save();\r\n            ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n            if (crosshair.x != -1) {\r\n                var adj = plot.getOptions().crosshair.lineWidth % 2 ? 0.5 : 0;\r\n\r\n                ctx.strokeStyle = c.color;\r\n                ctx.lineWidth = c.lineWidth;\r\n                ctx.lineJoin = \"round\";\r\n\r\n                ctx.beginPath();\r\n                if (c.mode.indexOf(\"x\") != -1) {\r\n                    var drawX = Math.floor(crosshair.x) + adj;\r\n                    ctx.moveTo(drawX, 0);\r\n                    ctx.lineTo(drawX, plot.height());\r\n                }\r\n                if (c.mode.indexOf(\"y\") != -1) {\r\n                    var drawY = Math.floor(crosshair.y) + adj;\r\n                    ctx.moveTo(0, drawY);\r\n                    ctx.lineTo(plot.width(), drawY);\r\n                }\r\n                ctx.stroke();\r\n            }\r\n            ctx.restore();\r\n        });\r\n\r\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\r\n            eventHolder.unbind(\"mouseout\", onMouseOut);\r\n            eventHolder.unbind(\"mousemove\", onMouseMove);\r\n        });\r\n    }\r\n    \r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'crosshair',\r\n        version: '1.0'\r\n    });\r\n})(jQuery);\r\n","(function($) {\r\n    \"use strict\";\r\n\r\n    var options = {\r\n        series: {\r\n            fillBelowTo: null\r\n        }\r\n    };\r\n\r\n    function init(plot) {\r\n        function findBelowSeries( series, allseries ) {\r\n\r\n            var i;\r\n\r\n            for ( i = 0; i < allseries.length; ++i ) {\r\n                if ( allseries[ i ].id === series.fillBelowTo ) {\r\n                    return allseries[ i ];\r\n                }\r\n            }\r\n\r\n            return null;\r\n        }\r\n\r\n        /* top and bottom doesn't actually matter for this, we're just using it to help make this easier to think about */\r\n        /* this is a vector cross product operation */\r\n        function segmentIntersection(top_left_x, top_left_y, top_right_x, top_right_y, bottom_left_x, bottom_left_y, bottom_right_x, bottom_right_y) {\r\n            var top_delta_x, top_delta_y, bottom_delta_x, bottom_delta_y,\r\n                s, t;\r\n\r\n            top_delta_x = top_right_x - top_left_x;\r\n            top_delta_y = top_right_y - top_left_y;\r\n            bottom_delta_x = bottom_right_x - bottom_left_x;\r\n            bottom_delta_y = bottom_right_y - bottom_left_y;\r\n\r\n            s = (\r\n                (-top_delta_y * (top_left_x - bottom_left_x)) + (top_delta_x * (top_left_y - bottom_left_y))\r\n            ) / (\r\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\r\n            );\r\n\r\n            t = (\r\n                (bottom_delta_x * (top_left_y - bottom_left_y)) - (bottom_delta_y * (top_left_x - bottom_left_x))\r\n            ) / (\r\n                -bottom_delta_x * top_delta_y + top_delta_x * bottom_delta_y\r\n            );\r\n\r\n            // Collision detected\r\n            if (s >= 0 && s <= 1 && t >= 0 && t <= 1) {\r\n                return [\r\n                    top_left_x + (t * top_delta_x), // X\r\n                    top_left_y + (t * top_delta_y) // Y\r\n                ];\r\n            }\r\n\r\n            // No collision\r\n            return null;\r\n        }\r\n\r\n        function plotDifferenceArea(plot, ctx, series) {\r\n            if ( series.fillBelowTo === null ) {\r\n                return;\r\n            }\r\n\r\n            var otherseries,\r\n\r\n                ps,\r\n                points,\r\n\r\n                otherps,\r\n                otherpoints,\r\n\r\n                plotOffset,\r\n                fillStyle;\r\n\r\n            function openPolygon(x, y) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(\r\n                    series.xaxis.p2c(x) + plotOffset.left,\r\n                    series.yaxis.p2c(y) + plotOffset.top\r\n                );\r\n\r\n            }\r\n\r\n            function closePolygon() {\r\n                ctx.closePath();\r\n                ctx.fill();\r\n            }\r\n\r\n            function validateInput() {\r\n                if (points.length/ps !== otherpoints.length/otherps) {\r\n                    console.error(\"Refusing to graph inconsistent number of points\");\r\n                    return false;\r\n                }\r\n\r\n                var i;\r\n                for (i = 0; i < (points.length / ps); i++) {\r\n                    if (\r\n                        points[i * ps] !== null &&\r\n                        otherpoints[i * otherps] !== null &&\r\n                        points[i * ps] !== otherpoints[i * otherps]\r\n                    ) {\r\n                        console.error(\"Refusing to graph points without matching value\");\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                return true;\r\n            }\r\n\r\n            function findNextStart(start_i, end_i) {\r\n                console.assert(end_i > start_i, \"expects the end index to be greater than the start index\");\r\n\r\n                var start = (\r\n                        start_i === 0 ||\r\n                        points[start_i - 1] === null ||\r\n                        otherpoints[start_i - 1] === null\r\n                    ),\r\n                    equal = false,\r\n                    i,\r\n                    intersect;\r\n\r\n                for (i = start_i; i < end_i; i++) {\r\n                    // Take note of null points\r\n                    if (\r\n                        points[(i * ps) + 1] === null ||\r\n                        otherpoints[(i * ps) + 1] === null\r\n                    ) {\r\n                        equal = false;\r\n                        start = true;\r\n                    }\r\n\r\n                    // Take note of equal points\r\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\r\n                        equal = true;\r\n                        start = false;\r\n                    }\r\n\r\n\r\n                    else if (points[(i * ps) + 1] > otherpoints[(i * otherps) + 1]) {\r\n                        // If we begin above the desired point\r\n                        if (start) {\r\n                            openPolygon(points[i * ps], points[(i * ps) + 1]);\r\n                        }\r\n\r\n                        // If an equal point preceeds this, start the polygon at that equal point\r\n                        else if (equal) {\r\n                            openPolygon(points[(i - 1) * ps], points[((i - 1) * ps) + 1]);\r\n                        }\r\n\r\n                        // Otherwise, find the intersection point, and start it there\r\n                        else {\r\n                            intersect = intersectionPoint(i);\r\n                            openPolygon(intersect[0], intersect[1]);\r\n                        }\r\n\r\n                        topTraversal(i, end_i);\r\n                        return;\r\n                    }\r\n\r\n                    // If we go below equal, equal at any preceeding point is irrelevant\r\n                    else {\r\n                        start = false;\r\n                        equal = false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function intersectionPoint(right_i) {\r\n                console.assert(right_i > 0, \"expects the second point in the series line segment\");\r\n\r\n                var i, intersect;\r\n\r\n                for (i = 1; i < (otherpoints.length/otherps); i++) {\r\n                    intersect = segmentIntersection(\r\n                        points[(right_i - 1) * ps], points[((right_i - 1) * ps) + 1],\r\n                        points[right_i * ps], points[(right_i * ps) + 1],\r\n\r\n                        otherpoints[(i - 1) * otherps], otherpoints[((i - 1) * otherps) + 1],\r\n                        otherpoints[i * otherps], otherpoints[(i * otherps) + 1]\r\n                    );\r\n\r\n                    if (intersect !== null) {\r\n                        return intersect;\r\n                    }\r\n                }\r\n\r\n                console.error(\"intersectionPoint() should only be called when an intersection happens\");\r\n            }\r\n\r\n            function bottomTraversal(start_i, end_i) {\r\n                console.assert(start_i >= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\r\n\r\n                var i;\r\n\r\n                for (i = start_i; i >= end_i; i--) {\r\n                    ctx.lineTo(\r\n                        otherseries.xaxis.p2c(otherpoints[i * otherps]) + plotOffset.left,\r\n                        otherseries.yaxis.p2c(otherpoints[(i * otherps) + 1]) + plotOffset.top\r\n                    );\r\n                }\r\n\r\n                closePolygon();\r\n            }\r\n\r\n            function topTraversal(start_i, end_i) {\r\n                console.assert(start_i <= end_i, \"the start should be the rightmost point, and the end should be the leftmost (excluding the equal or intersecting point)\");\r\n\r\n                var i,\r\n                    intersect;\r\n\r\n                for (i = start_i; i < end_i; i++) {\r\n                    if (points[(i * ps) + 1] === null && i > start_i) {\r\n                        bottomTraversal(i - 1, start_i);\r\n                        findNextStart(i, end_i);\r\n                        return;\r\n                    }\r\n\r\n                    else if (points[(i * ps) + 1] === otherpoints[(i * otherps) + 1]) {\r\n                        bottomTraversal(i, start_i);\r\n                        findNextStart(i, end_i);\r\n                        return;\r\n                    }\r\n\r\n                    else if (points[(i * ps) + 1] < otherpoints[(i * otherps) + 1]) {\r\n                        intersect = intersectionPoint(i);\r\n                        ctx.lineTo(\r\n                            series.xaxis.p2c(intersect[0]) + plotOffset.left,\r\n                            series.yaxis.p2c(intersect[1]) + plotOffset.top\r\n                        );\r\n                        bottomTraversal(i, start_i);\r\n                        findNextStart(i, end_i);\r\n                        return;\r\n\r\n                    }\r\n\r\n                    else {\r\n                        ctx.lineTo(\r\n                            series.xaxis.p2c(points[i * ps]) + plotOffset.left,\r\n                            series.yaxis.p2c(points[(i * ps) + 1]) + plotOffset.top\r\n                        );\r\n                    }\r\n                }\r\n\r\n                bottomTraversal(end_i, start_i);\r\n            }\r\n\r\n\r\n            // Begin processing\r\n\r\n            otherseries = findBelowSeries( series, plot.getData() );\r\n\r\n            if ( !otherseries ) {\r\n                return;\r\n            }\r\n\r\n            ps = series.datapoints.pointsize;\r\n            points = series.datapoints.points;\r\n            otherps = otherseries.datapoints.pointsize;\r\n            otherpoints = otherseries.datapoints.points;\r\n            plotOffset = plot.getPlotOffset();\r\n\r\n            if (!validateInput()) {\r\n                return;\r\n            }\r\n\r\n\r\n            // Flot's getFillStyle() should probably be exposed somewhere\r\n            fillStyle = $.color.parse(series.color);\r\n            fillStyle.a = 0.4;\r\n            fillStyle.normalize();\r\n            ctx.fillStyle = fillStyle.toString();\r\n\r\n\r\n            // Begin recursive bi-directional traversal\r\n            findNextStart(0, points.length/ps);\r\n        }\r\n\r\n        plot.hooks.drawSeries.push(plotDifferenceArea);\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: \"fillbelow\",\r\n        version: \"0.1.0\"\r\n    });\r\n\r\n})(jQuery);\r\n","(function ($) {\r\n    var options = {\r\n        series: {\r\n            stackpercent: null\r\n        } // or number/string\r\n    };\r\n\r\n    function init(plot) {\r\n\r\n        // will be built up dynamically as a hash from x-value, or y-value if horizontal\r\n        var stackBases = {};\r\n        var processed = false;\r\n        var stackSums = {};\r\n\r\n        //set percentage for stacked chart\r\n        function processRawData(plot, series, data, datapoints) {\r\n            if (!processed) {\r\n                processed = true;\r\n                stackSums = getStackSums(plot.getData());\r\n            }\r\n\t\t\tif (series.stackpercent == true) {\r\n\t\t\t\tvar num = data.length;\r\n\t\t\t\tseries.percents = [];\r\n\t\t\t\tvar key_idx = 0;\r\n\t\t\t\tvar value_idx = 1;\r\n\t\t\t\tif (series.bars && series.bars.horizontal && series.bars.horizontal === true) {\r\n\t\t\t\t\tkey_idx = 1;\r\n\t\t\t\t\tvalue_idx = 0;\r\n\t\t\t\t}\r\n\t\t\t\tfor (var j = 0; j < num; j++) {\r\n\t\t\t\t\tvar sum = stackSums[data[j][key_idx] + \"\"];\r\n\t\t\t\t\tif (sum > 0) {\r\n\t\t\t\t\t\tseries.percents.push(data[j][value_idx] * 100 / sum);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tseries.percents.push(0);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n        }\r\n\r\n        //calculate summary\r\n        function getStackSums(_data) {\r\n            var data_len = _data.length;\r\n            var sums = {};\r\n            if (data_len > 0) {\r\n                //caculate summary\r\n                for (var i = 0; i < data_len; i++) {\r\n                    if (_data[i].stackpercent) {\r\n\t\t\t\t\t\tvar key_idx = 0;\r\n\t\t\t\t\t\tvar value_idx = 1;\r\n\t\t\t\t\t\tif (_data[i].bars && _data[i].bars.horizontal && _data[i].bars.horizontal === true) {\r\n\t\t\t\t\t\t\tkey_idx = 1;\r\n\t\t\t\t\t\t\tvalue_idx = 0;\r\n\t\t\t\t\t\t}\r\n                        var num = _data[i].data.length;\r\n                        for (var j = 0; j < num; j++) {\r\n                            var value = 0;\r\n                            if (_data[i].data[j][1] != null) {\r\n                                value = _data[i].data[j][value_idx];\r\n                            }\r\n                            if (sums[_data[i].data[j][key_idx] + \"\"]) {\r\n                                sums[_data[i].data[j][key_idx] + \"\"] += value;\r\n                            } else {\r\n                                sums[_data[i].data[j][key_idx] + \"\"] = value;\r\n                            }\r\n\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            return sums;\r\n        }\r\n\r\n        function stackData(plot, s, datapoints) {\r\n            if (!s.stackpercent) return;\r\n            if (!processed) {\r\n                stackSums = getStackSums(plot.getData());\r\n            }\r\n            var newPoints = [];\r\n\r\n\r\n\t\t\tvar key_idx = 0;\r\n\t\t\tvar value_idx = 1;\r\n\t\t\tif (s.bars && s.bars.horizontal && s.bars.horizontal === true) {\r\n\t\t\t\tkey_idx = 1;\r\n\t\t\t\tvalue_idx = 0;\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0; i < datapoints.points.length; i += 3) {\r\n\t\t\t\t// note that the values need to be turned into absolute y-values.\r\n\t\t\t\t// in other words, if you were to stack (x, y1), (x, y2), and (x, y3),\r\n\t\t\t\t// (each from different series, which is where stackBases comes in),\r\n\t\t\t\t// you'd want the new points to be (x, y1, 0), (x, y1+y2, y1), (x, y1+y2+y3, y1+y2)\r\n\t\t\t\t// generally, (x, thisValue + (base up to this point), + (base up to this point))\r\n\t\t\t\tif (!stackBases[datapoints.points[i + key_idx]]) {\r\n\t\t\t\t\tstackBases[datapoints.points[i + key_idx]] = 0;\r\n\t\t\t\t}\r\n\t\t\t\tnewPoints[i + key_idx] = datapoints.points[i + key_idx];\r\n\t\t\t\tnewPoints[i + value_idx] = datapoints.points[i + value_idx] + stackBases[datapoints.points[i + key_idx]];\r\n\t\t\t\tnewPoints[i + 2] = stackBases[datapoints.points[i + key_idx]];\r\n\t\t\t\tstackBases[datapoints.points[i + key_idx]] += datapoints.points[i + value_idx];\r\n\t\t\t\t// change points to percentage values\r\n\t\t\t\t// you may need to set yaxis:{ max = 100 }\r\n\t\t\t\tif ( stackSums[newPoints[i+key_idx]+\"\"] > 0 ){\r\n\t\t\t\t\tnewPoints[i + value_idx] = newPoints[i + value_idx] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\r\n\t\t\t\t\tnewPoints[i + 2] = newPoints[i + 2] * 100 / stackSums[newPoints[i + key_idx] + \"\"];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewPoints[i + value_idx] = 0;\r\n\t\t\t\t\tnewPoints[i + 2] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            datapoints.points = newPoints;\r\n        }\r\n\r\n\t\tplot.hooks.processRawData.push(processRawData);\r\n        plot.hooks.processDatapoints.push(stackData);\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'stackpercent',\r\n        version: '0.1'\r\n    });\r\n})(jQuery);\r\n","/* Flot plugin for stacking data sets rather than overlyaing them.\r\n\r\nCopyright (c) 2007-2014 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe plugin assumes the data is sorted on x (or y if stacking horizontally).\r\nFor line charts, it is assumed that if a line has an undefined gap (from a\r\nnull point), then the line above it should have the same gap - insert zeros\r\ninstead of \"null\" if you want another behaviour. This also holds for the start\r\nand end of the chart. Note that stacking a mix of positive and negative values\r\nin most instances doesn't make sense (so it looks weird).\r\n\r\nTwo or more series are stacked when their \"stack\" attribute is set to the same\r\nkey (which can be any number or string or just \"true\"). To specify the default\r\nstack, you can set the stack option like this:\r\n\r\n    series: {\r\n        stack: null/false, true, or a key (number/string)\r\n    }\r\n\r\nYou can also specify it for a single series, like this:\r\n\r\n    $.plot( $(\"#placeholder\"), [{\r\n        data: [ ... ],\r\n        stack: true\r\n    }])\r\n\r\nThe stacking order is determined by the order of the data series in the array\r\n(later series end up on top of the previous).\r\n\r\nInternally, the plugin modifies the datapoints in each series, adding an\r\noffset to the y value. For line series, extra data points are inserted through\r\ninterpolation. If there's a second y value, it's also adjusted (e.g for bar\r\ncharts or filled areas).\r\n\r\n*/\r\n\r\n(function ($) {\r\n    var options = {\r\n        series: { stack: null } // or number/string\r\n    };\r\n\r\n    function init(plot) {\r\n        function findMatchingSeries(s, allseries) {\r\n            var res = null;\r\n            for (var i = 0; i < allseries.length; ++i) {\r\n                if (s == allseries[i])\r\n                    break;\r\n\r\n                if (allseries[i].stack == s.stack)\r\n                    res = allseries[i];\r\n            }\r\n\r\n            return res;\r\n        }\r\n\r\n        function stackData(plot, s, datapoints) {\r\n            if (s.stack == null || s.stack === false)\r\n                return;\r\n\r\n            var other = findMatchingSeries(s, plot.getData());\r\n            if (!other)\r\n                return;\r\n\r\n            var ps = datapoints.pointsize,\r\n                points = datapoints.points,\r\n                otherps = other.datapoints.pointsize,\r\n                otherpoints = other.datapoints.points,\r\n                newpoints = [],\r\n                px, py, intery, qx, qy, bottom,\r\n                withlines = s.lines.show,\r\n                horizontal = s.bars.horizontal,\r\n                withbottom = ps > 2 && (horizontal ? datapoints.format[2].x : datapoints.format[2].y),\r\n                withsteps = withlines && s.lines.steps,\r\n                keyOffset = horizontal ? 1 : 0,\r\n                accumulateOffset = horizontal ? 0 : 1,\r\n                i = 0, j = 0, l, m;\r\n\r\n            while (true) {\r\n                if (i >= points.length && j >= otherpoints.length)\r\n                    break;\r\n\r\n                l = newpoints.length;\r\n\r\n                if (i < points.length && points[i] == null) {\r\n                    // copy gaps\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints.push(points[i + m]);\r\n                    i += ps;\r\n                }\r\n                else if (i >= points.length) {\r\n                    // take the remaining points from the previous series\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints.push(otherpoints[j + m]);\r\n                    if (withbottom)\r\n                        newpoints[l + 2] = otherpoints[j + accumulateOffset];\r\n                    j += otherps;\r\n                }\r\n                else if (j >= otherpoints.length) {\r\n                    // take the remaining points from the current series\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints.push(points[i + m]);\r\n                    i += ps;\r\n                }\r\n                else if (j < otherpoints.length && otherpoints[j] == null) {\r\n                    // ignore point\r\n                    j += otherps;\r\n                }\r\n                else {\r\n                    // cases where we actually got two points\r\n                    px = points[i + keyOffset];\r\n                    py = points[i + accumulateOffset];\r\n                    qx = otherpoints[j + keyOffset];\r\n                    qy = otherpoints[j + accumulateOffset];\r\n                    bottom = 0;\r\n\r\n                    if (px == qx) {\r\n                        for (m = 0; m < ps; ++m)\r\n                            newpoints.push(points[i + m]);\r\n\r\n                        newpoints[l + accumulateOffset] += qy;\r\n                        bottom = qy;\r\n\r\n                        i += ps;\r\n                        j += otherps;\r\n                    }\r\n                    else if (px > qx) {\r\n                        // take the point from the previous series so that next series will correctly stack\r\n                        if (i == 0) {\r\n                            for (m = 0; m < ps; ++m)\r\n                                newpoints.push(otherpoints[j + m]);\r\n                            bottom = qy;\r\n                        }\r\n                        // we got past point below, might need to\r\n                        // insert interpolated extra point\r\n                        if (i > 0 && points[i - ps] != null) {\r\n                            intery = py + (points[i - ps + accumulateOffset] - py) * (qx - px) / (points[i - ps + keyOffset] - px);\r\n                            newpoints.push(qx);\r\n                            newpoints.push(intery + qy);\r\n                            for (m = 2; m < ps; ++m)\r\n                                newpoints.push(points[i + m]);\r\n                            bottom = qy;\r\n                        }\r\n\r\n                        j += otherps;\r\n                    }\r\n                    else { // px < qx\r\n                        for (m = 0; m < ps; ++m)\r\n                            newpoints.push(points[i + m]);\r\n\r\n                        // we might be able to interpolate a point below,\r\n                        // this can give us a better y\r\n                        if (j > 0 && otherpoints[j - otherps] != null)\r\n                            bottom = qy + (otherpoints[j - otherps + accumulateOffset] - qy) * (px - qx) / (otherpoints[j - otherps + keyOffset] - qx);\r\n\r\n                        newpoints[l + accumulateOffset] += bottom;\r\n\r\n                        i += ps;\r\n                    }\r\n\r\n                    fromgap = false;\r\n\r\n                    if (l != newpoints.length && withbottom)\r\n                        newpoints[l + 2] = bottom;\r\n                }\r\n\r\n                // maintain the line steps invariant\r\n                if (withsteps && l != newpoints.length && l > 0\r\n                    && newpoints[l] != null\r\n                    && newpoints[l] != newpoints[l - ps]\r\n                    && newpoints[l + 1] != newpoints[l - ps + 1]) {\r\n                    for (m = 0; m < ps; ++m)\r\n                        newpoints[l + ps + m] = newpoints[l + m];\r\n                    newpoints[l + 1] = newpoints[l - ps + 1];\r\n                }\r\n            }\r\n\r\n            datapoints.points = newpoints;\r\n        }\r\n\r\n        plot.hooks.processDatapoints.push(stackData);\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: 'stack',\r\n        version: '1.2'\r\n    });\r\n})(jQuery);\r\n","/* Flot plugin for selecting regions of a plot.\r\n\r\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe plugin supports these options:\r\n\r\nselection: {\r\n\tmode: null or \"x\" or \"y\" or \"xy\",\r\n\tcolor: color,\r\n\tshape: \"round\" or \"miter\" or \"bevel\",\r\n\tminSize: number of pixels\r\n}\r\n\r\nSelection support is enabled by setting the mode to one of \"x\", \"y\" or \"xy\".\r\nIn \"x\" mode, the user will only be able to specify the x range, similarly for\r\n\"y\" mode. For \"xy\", the selection becomes a rectangle where both ranges can be\r\nspecified. \"color\" is color of the selection (if you need to change the color\r\nlater on, you can get to it with plot.getOptions().selection.color). \"shape\"\r\nis the shape of the corners of the selection.\r\n\r\n\"minSize\" is the minimum size a selection can be in pixels. This value can\r\nbe customized to determine the smallest size a selection can be and still\r\nhave the selection rectangle be displayed. When customizing this value, the\r\nfact that it refers to pixels, not axis units must be taken into account.\r\nThus, for example, if there is a bar graph in time mode with BarWidth set to 1\r\nminute, setting \"minSize\" to 1 will not make the minimum selection size 1\r\nminute, but rather 1 pixel. Note also that setting \"minSize\" to 0 will prevent\r\n\"plotunselected\" events from being fired when the user clicks the mouse without\r\ndragging.\r\n\r\nWhen selection support is enabled, a \"plotselected\" event will be emitted on\r\nthe DOM element you passed into the plot function. The event handler gets a\r\nparameter with the ranges selected on the axes, like this:\r\n\r\n\tplaceholder.bind( \"plotselected\", function( event, ranges ) {\r\n\t\talert(\"You selected \" + ranges.xaxis.from + \" to \" + ranges.xaxis.to)\r\n\t\t// similar for yaxis - with multiple axes, the extra ones are in\r\n\t\t// x2axis, x3axis, ...\r\n\t});\r\n\r\nThe \"plotselected\" event is only fired when the user has finished making the\r\nselection. A \"plotselecting\" event is fired during the process with the same\r\nparameters as the \"plotselected\" event, in case you want to know what's\r\nhappening while it's happening,\r\n\r\nA \"plotunselected\" event with no arguments is emitted when the user clicks the\r\nmouse to remove the selection. As stated above, setting \"minSize\" to 0 will\r\ndestroy this behavior.\r\n\r\nThe plugin allso adds the following methods to the plot object:\r\n\r\n- setSelection( ranges, preventEvent )\r\n\r\n  Set the selection rectangle. The passed in ranges is on the same form as\r\n  returned in the \"plotselected\" event. If the selection mode is \"x\", you\r\n  should put in either an xaxis range, if the mode is \"y\" you need to put in\r\n  an yaxis range and both xaxis and yaxis if the selection mode is \"xy\", like\r\n  this:\r\n\r\n\tsetSelection({ xaxis: { from: 0, to: 10 }, yaxis: { from: 40, to: 60 } });\r\n\r\n  setSelection will trigger the \"plotselected\" event when called. If you don't\r\n  want that to happen, e.g. if you're inside a \"plotselected\" handler, pass\r\n  true as the second parameter. If you are using multiple axes, you can\r\n  specify the ranges on any of those, e.g. as x2axis/x3axis/... instead of\r\n  xaxis, the plugin picks the first one it sees.\r\n\r\n- clearSelection( preventEvent )\r\n\r\n  Clear the selection rectangle. Pass in true to avoid getting a\r\n  \"plotunselected\" event.\r\n\r\n- getSelection()\r\n\r\n  Returns the current selection in the same format as the \"plotselected\"\r\n  event. If there's currently no selection, the function returns null.\r\n\r\n*/\r\n\r\n(function ($) {\r\n    function init(plot) {\r\n        var selection = {\r\n                first: { x: -1, y: -1}, second: { x: -1, y: -1},\r\n                show: false,\r\n                active: false\r\n            };\r\n\r\n        // FIXME: The drag handling implemented here should be\r\n        // abstracted out, there's some similar code from a library in\r\n        // the navigation plugin, this should be massaged a bit to fit\r\n        // the Flot cases here better and reused. Doing this would\r\n        // make this plugin much slimmer.\r\n        var savedhandlers = {};\r\n\r\n        var mouseUpHandler = null;\r\n\r\n        function onMouseMove(e) {\r\n            if (selection.active) {\r\n                updateSelection(e);\r\n\r\n                plot.getPlaceholder().trigger(\"plotselecting\", [ getSelection() ]);\r\n            }\r\n        }\r\n\r\n        function onMouseDown(e) {\r\n            if (e.which != 1)  // only accept left-click\r\n                return;\r\n\r\n            // cancel out any text selections\r\n            document.body.focus();\r\n\r\n            // prevent text selection and drag in old-school browsers\r\n            if (document.onselectstart !== undefined && savedhandlers.onselectstart == null) {\r\n                savedhandlers.onselectstart = document.onselectstart;\r\n                document.onselectstart = function () { return false; };\r\n            }\r\n            if (document.ondrag !== undefined && savedhandlers.ondrag == null) {\r\n                savedhandlers.ondrag = document.ondrag;\r\n                document.ondrag = function () { return false; };\r\n            }\r\n\r\n            setSelectionPos(selection.first, e);\r\n\r\n            selection.active = true;\r\n\r\n            // this is a bit silly, but we have to use a closure to be\r\n            // able to whack the same handler again\r\n            mouseUpHandler = function (e) { onMouseUp(e); };\r\n\r\n            $(document).one(\"mouseup\", mouseUpHandler);\r\n        }\r\n\r\n        function onMouseUp(e) {\r\n            mouseUpHandler = null;\r\n\r\n            // revert drag stuff for old-school browsers\r\n            if (document.onselectstart !== undefined)\r\n                document.onselectstart = savedhandlers.onselectstart;\r\n            if (document.ondrag !== undefined)\r\n                document.ondrag = savedhandlers.ondrag;\r\n\r\n            // no more dragging\r\n            selection.active = false;\r\n            updateSelection(e);\r\n\r\n            if (selectionIsSane())\r\n                triggerSelectedEvent(e);\r\n            else {\r\n                // this counts as a clear\r\n                plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\r\n                plot.getPlaceholder().trigger(\"plotselecting\", [ null ]);\r\n            }\r\n\r\n            setTimeout(function() {\r\n              plot.isSelecting = false;\r\n            }, 10);\r\n\r\n            return false;\r\n        }\r\n\r\n        function getSelection() {\r\n            if (!selectionIsSane())\r\n                return null;\r\n\r\n            if (!selection.show) return null;\r\n\r\n            var r = {}, c1 = selection.first, c2 = selection.second;\r\n            var axes = plot.getAxes();\r\n            // look if no axis is used\r\n            var noAxisInUse = true;\r\n            $.each(axes, function (name, axis) {\r\n              if (axis.used) {\r\n                anyUsed = false;\r\n              }\r\n            })\r\n\r\n            $.each(axes, function (name, axis) {\r\n                if (axis.used || noAxisInUse) {\r\n                    var p1 = axis.c2p(c1[axis.direction]), p2 = axis.c2p(c2[axis.direction]);\r\n                    r[name] = { from: Math.min(p1, p2), to: Math.max(p1, p2) };\r\n                }\r\n            });\r\n            return r;\r\n        }\r\n\r\n        function triggerSelectedEvent(event) {\r\n            var r = getSelection();\r\n\r\n            // Add ctrlKey and metaKey to event\r\n            r.ctrlKey = event.ctrlKey;\r\n            r.metaKey = event.metaKey;\r\n\r\n            plot.getPlaceholder().trigger(\"plotselected\", [ r ]);\r\n\r\n            // backwards-compat stuff, to be removed in future\r\n            if (r.xaxis && r.yaxis)\r\n                plot.getPlaceholder().trigger(\"selected\", [ { x1: r.xaxis.from, y1: r.yaxis.from, x2: r.xaxis.to, y2: r.yaxis.to } ]);\r\n        }\r\n\r\n        function clamp(min, value, max) {\r\n            return value < min ? min: (value > max ? max: value);\r\n        }\r\n\r\n        function setSelectionPos(pos, e) {\r\n            var o = plot.getOptions();\r\n            var offset = plot.getPlaceholder().offset();\r\n            var plotOffset = plot.getPlotOffset();\r\n            pos.x = clamp(0, e.pageX - offset.left - plotOffset.left, plot.width());\r\n            pos.y = clamp(0, e.pageY - offset.top - plotOffset.top, plot.height());\r\n\r\n            if (o.selection.mode == \"y\")\r\n                pos.x = pos == selection.first ? 0 : plot.width();\r\n\r\n            if (o.selection.mode == \"x\")\r\n                pos.y = pos == selection.first ? 0 : plot.height();\r\n        }\r\n\r\n        function updateSelection(pos) {\r\n            if (pos.pageX == null)\r\n                return;\r\n\r\n            setSelectionPos(selection.second, pos);\r\n            if (selectionIsSane()) {\r\n                plot.isSelecting = true;\r\n                selection.show = true;\r\n                plot.triggerRedrawOverlay();\r\n            }\r\n            else\r\n                clearSelection(true);\r\n        }\r\n\r\n        function clearSelection(preventEvent) {\r\n            if (selection.show) {\r\n                selection.show = false;\r\n                plot.triggerRedrawOverlay();\r\n                if (!preventEvent)\r\n                    plot.getPlaceholder().trigger(\"plotunselected\", [ ]);\r\n            }\r\n        }\r\n\r\n        // function taken from markings support in Flot\r\n        function extractRange(ranges, coord) {\r\n            var axis, from, to, key, axes = plot.getAxes();\r\n\r\n            for (var k in axes) {\r\n                axis = axes[k];\r\n                if (axis.direction == coord) {\r\n                    key = coord + axis.n + \"axis\";\r\n                    if (!ranges[key] && axis.n == 1)\r\n                        key = coord + \"axis\"; // support x1axis as xaxis\r\n                    if (ranges[key]) {\r\n                        from = ranges[key].from;\r\n                        to = ranges[key].to;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // backwards-compat stuff - to be removed in future\r\n            if (!ranges[key]) {\r\n                axis = coord == \"x\" ? plot.getXAxes()[0] : plot.getYAxes()[0];\r\n                from = ranges[coord + \"1\"];\r\n                to = ranges[coord + \"2\"];\r\n            }\r\n\r\n            // auto-reverse as an added bonus\r\n            if (from != null && to != null && from > to) {\r\n                var tmp = from;\r\n                from = to;\r\n                to = tmp;\r\n            }\r\n\r\n            return { from: from, to: to, axis: axis };\r\n        }\r\n\r\n        function setSelection(ranges, preventEvent) {\r\n            var axis, range, o = plot.getOptions();\r\n\r\n            if (o.selection.mode == \"y\") {\r\n                selection.first.x = 0;\r\n                selection.second.x = plot.width();\r\n            }\r\n            else {\r\n                range = extractRange(ranges, \"x\");\r\n\r\n                selection.first.x = range.axis.p2c(range.from);\r\n                selection.second.x = range.axis.p2c(range.to);\r\n            }\r\n\r\n            if (o.selection.mode == \"x\") {\r\n                selection.first.y = 0;\r\n                selection.second.y = plot.height();\r\n            }\r\n            else {\r\n                range = extractRange(ranges, \"y\");\r\n\r\n                selection.first.y = range.axis.p2c(range.from);\r\n                selection.second.y = range.axis.p2c(range.to);\r\n            }\r\n\r\n            selection.show = true;\r\n            plot.triggerRedrawOverlay();\r\n            if (!preventEvent && selectionIsSane())\r\n                triggerSelectedEvent();\r\n        }\r\n\r\n        function selectionIsSane() {\r\n            var minSize = plot.getOptions().selection.minSize;\r\n            return Math.abs(selection.second.x - selection.first.x) >= minSize &&\r\n                Math.abs(selection.second.y - selection.first.y) >= minSize;\r\n        }\r\n\r\n        plot.clearSelection = clearSelection;\r\n        plot.setSelection = setSelection;\r\n        plot.getSelection = getSelection;\r\n\r\n        plot.hooks.bindEvents.push(function(plot, eventHolder) {\r\n            var o = plot.getOptions();\r\n            if (o.selection.mode != null) {\r\n                eventHolder.mousemove(onMouseMove);\r\n                eventHolder.mousedown(onMouseDown);\r\n            }\r\n        });\r\n\r\n\r\n        plot.hooks.drawOverlay.push(function (plot, ctx) {\r\n            // draw selection\r\n            if (selection.show && selectionIsSane()) {\r\n                var plotOffset = plot.getPlotOffset();\r\n                var o = plot.getOptions();\r\n\r\n                ctx.save();\r\n                ctx.translate(plotOffset.left, plotOffset.top);\r\n\r\n                var c = $.color.parse(o.selection.color);\r\n\r\n                ctx.strokeStyle = c.scale('a', 0.8).toString();\r\n                ctx.lineWidth = 1;\r\n                ctx.lineJoin = o.selection.shape;\r\n                ctx.fillStyle = c.scale('a', 0.4).toString();\r\n\r\n                var x = Math.min(selection.first.x, selection.second.x) + 0.5,\r\n                    y = Math.min(selection.first.y, selection.second.y) + 0.5,\r\n                    w = Math.abs(selection.second.x - selection.first.x) - 1,\r\n                    h = Math.abs(selection.second.y - selection.first.y) - 1;\r\n\r\n                ctx.fillRect(x, y, w, h);\r\n                ctx.strokeRect(x, y, w, h);\r\n\r\n                ctx.restore();\r\n            }\r\n        });\r\n\r\n        plot.hooks.shutdown.push(function (plot, eventHolder) {\r\n            eventHolder.unbind(\"mousemove\", onMouseMove);\r\n            eventHolder.unbind(\"mousedown\", onMouseDown);\r\n\r\n            if (mouseUpHandler)\r\n                $(document).unbind(\"mouseup\", mouseUpHandler);\r\n        });\r\n\r\n    }\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: {\r\n            selection: {\r\n                mode: null, // one of null, \"x\", \"y\" or \"xy\"\r\n                color: \"#e8cfac\",\r\n                shape: \"round\", // one of \"round\", \"miter\", or \"bevel\"\r\n                minSize: 5 // minimum number of pixels\r\n            }\r\n        },\r\n        name: 'selection',\r\n        version: '1.1'\r\n    });\r\n})(jQuery);\r\n","/* Flot plugin for rendering pie charts.\r\n\r\nCopyright (c) 2007-2013 IOLA and Ole Laursen.\r\nLicensed under the MIT license.\r\n\r\nThe plugin assumes that each series has a single data value, and that each\r\nvalue is a positive integer or zero.  Negative numbers don't make sense for a\r\npie chart, and have unpredictable results.  The values do NOT need to be\r\npassed in as percentages; the plugin will calculate the total and per-slice\r\npercentages internally.\r\n\r\n* Created by Brian Medendorp\r\n\r\n* Updated with contributions from btburnett3, Anthony Aragues and Xavi Ivars\r\n\r\nThe plugin supports these options:\r\n\r\n\tseries: {\r\n\t\tpie: {\r\n\t\t\tshow: true/false\r\n\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length, or 'auto'\r\n\t\t\tinnerRadius: 0-1 for percentage of fullsize or a specified pixel length, for creating a donut effect\r\n\t\t\tstartAngle: 0-2 factor of PI used for starting angle (in radians) i.e 3/2 starts at the top, 0 and 2 have the same result\r\n\t\t\ttilt: 0-1 for percentage to tilt the pie, where 1 is no tilt, and 0 is completely flat (nothing will show)\r\n\t\t\toffset: {\r\n\t\t\t\ttop: integer value to move the pie up or down\r\n\t\t\t\tleft: integer value to move the pie left or right, or 'auto'\r\n\t\t\t},\r\n\t\t\tstroke: {\r\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#FFF')\r\n\t\t\t\twidth: integer pixel width of the stroke\r\n\t\t\t},\r\n\t\t\tlabel: {\r\n\t\t\t\tshow: true/false, or 'auto'\r\n\t\t\t\tformatter:  a user-defined function that modifies the text/style of the label text\r\n\t\t\t\tradius: 0-1 for percentage of fullsize, or a specified pixel length\r\n\t\t\t\tbackground: {\r\n\t\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#000')\r\n\t\t\t\t\topacity: 0-1\r\n\t\t\t\t},\r\n\t\t\t\tthreshold: 0-1 for the percentage value at which to hide labels (if they're too small)\r\n\t\t\t},\r\n\t\t\tcombine: {\r\n\t\t\t\tthreshold: 0-1 for the percentage value at which to combine slices (if they're too small)\r\n\t\t\t\tcolor: any hexidecimal color value (other formats may or may not work, so best to stick with something like '#CCC'), if null, the plugin will automatically use the color of the first slice to be combined\r\n\t\t\t\tlabel: any text value of what the combined slice should be labeled\r\n\t\t\t}\r\n\t\t\thighlight: {\r\n\t\t\t\topacity: 0-1\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\nMore detail and specific examples can be found in the included HTML file.\r\n\r\n*/\r\n\r\n(function($) {\r\n\r\n\t// Maximum redraw attempts when fitting labels within the plot\r\n\r\n\tvar REDRAW_ATTEMPTS = 10;\r\n\r\n\t// Factor by which to shrink the pie when fitting labels within the plot\r\n\r\n\tvar REDRAW_SHRINK = 0.95;\r\n\r\n\tfunction init(plot) {\r\n\r\n\t\tvar canvas = null,\r\n\t\t\ttarget = null,\r\n\t\t\tmaxRadius = null,\r\n\t\t\tcenterLeft = null,\r\n\t\t\tcenterTop = null,\r\n\t\t\tprocessed = false,\r\n\t\t\tctx = null;\r\n\r\n\t\t// interactive variables\r\n\r\n\t\tvar highlights = [];\r\n\r\n\t\t// add hook to determine if pie plugin in enabled, and then perform necessary operations\r\n\r\n\t\tplot.hooks.processOptions.push(function(plot, options) {\r\n\t\t\tif (options.series.pie.show) {\r\n\r\n\t\t\t\toptions.grid.show = false;\r\n\r\n\t\t\t\t// set labels.show\r\n\r\n\t\t\t\tif (options.series.pie.label.show == \"auto\") {\r\n\t\t\t\t\tif (options.legend.show) {\r\n\t\t\t\t\t\toptions.series.pie.label.show = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toptions.series.pie.label.show = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// set radius\r\n\r\n\t\t\t\tif (options.series.pie.radius == \"auto\") {\r\n\t\t\t\t\tif (options.series.pie.label.show) {\r\n\t\t\t\t\t\toptions.series.pie.radius = 3/4;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\toptions.series.pie.radius = 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// ensure sane tilt\r\n\r\n\t\t\t\tif (options.series.pie.tilt > 1) {\r\n\t\t\t\t\toptions.series.pie.tilt = 1;\r\n\t\t\t\t} else if (options.series.pie.tilt < 0) {\r\n\t\t\t\t\toptions.series.pie.tilt = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplot.hooks.bindEvents.push(function(plot, eventHolder) {\r\n\t\t\tvar options = plot.getOptions();\r\n\t\t\tif (options.series.pie.show) {\r\n\t\t\t\tif (options.grid.hoverable) {\r\n\t\t\t\t\teventHolder.unbind(\"mousemove\").mousemove(onMouseMove);\r\n\t\t\t\t}\r\n\t\t\t\tif (options.grid.clickable) {\r\n\t\t\t\t\teventHolder.unbind(\"click\").click(onClick);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplot.hooks.processDatapoints.push(function(plot, series, data, datapoints) {\r\n\t\t\tvar options = plot.getOptions();\r\n\t\t\tif (options.series.pie.show) {\r\n\t\t\t\tprocessDatapoints(plot, series, data, datapoints);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplot.hooks.drawOverlay.push(function(plot, octx) {\r\n\t\t\tvar options = plot.getOptions();\r\n\t\t\tif (options.series.pie.show) {\r\n\t\t\t\tdrawOverlay(plot, octx);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tplot.hooks.draw.push(function(plot, newCtx) {\r\n\t\t\tvar options = plot.getOptions();\r\n\t\t\tif (options.series.pie.show) {\r\n\t\t\t\tdraw(plot, newCtx);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tfunction processDatapoints(plot, series, datapoints) {\r\n\t\t\tif (!processed)\t{\r\n\t\t\t\tprocessed = true;\r\n\t\t\t\tcanvas = plot.getCanvas();\r\n\t\t\t\ttarget = $(canvas).parent();\r\n\t\t\t\toptions = plot.getOptions();\r\n\t\t\t\tplot.setData(combine(plot.getData()));\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction combine(data) {\r\n\r\n\t\t\tvar total = 0,\r\n\t\t\t\tcombined = 0,\r\n\t\t\t\tnumCombined = 0,\r\n\t\t\t\tcolor = options.series.pie.combine.color,\r\n\t\t\t\tnewdata = [];\r\n\r\n\t\t\t// Fix up the raw data from Flot, ensuring the data is numeric\r\n\r\n\t\t\tfor (var i = 0; i < data.length; ++i) {\r\n\r\n\t\t\t\tvar value = data[i].data;\r\n\r\n\t\t\t\t// If the data is an array, we'll assume that it's a standard\r\n\t\t\t\t// Flot x-y pair, and are concerned only with the second value.\r\n\r\n\t\t\t\t// Note how we use the original array, rather than creating a\r\n\t\t\t\t// new one; this is more efficient and preserves any extra data\r\n\t\t\t\t// that the user may have stored in higher indexes.\r\n\r\n\t\t\t\tif ($.isArray(value) && value.length == 1) {\r\n    \t\t\t\tvalue = value[0];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ($.isArray(value)) {\r\n\t\t\t\t\t// Equivalent to $.isNumeric() but compatible with jQuery < 1.7\r\n\t\t\t\t\tif (!isNaN(parseFloat(value[1])) && isFinite(value[1])) {\r\n\t\t\t\t\t\tvalue[1] = +value[1];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tvalue[1] = 0;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else if (!isNaN(parseFloat(value)) && isFinite(value)) {\r\n\t\t\t\t\tvalue = [1, +value];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tvalue = [1, 0];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tdata[i].data = [value];\r\n\t\t\t}\r\n\r\n\t\t\t// Sum up all the slices, so we can calculate percentages for each\r\n\r\n\t\t\tfor (var i = 0; i < data.length; ++i) {\r\n\t\t\t\ttotal += data[i].data[0][1];\r\n\t\t\t}\r\n\r\n\t\t\t// Count the number of slices with percentages below the combine\r\n\t\t\t// threshold; if it turns out to be just one, we won't combine.\r\n\r\n\t\t\tfor (var i = 0; i < data.length; ++i) {\r\n\t\t\t\tvar value = data[i].data[0][1];\r\n\t\t\t\tif (value / total <= options.series.pie.combine.threshold) {\r\n\t\t\t\t\tcombined += value;\r\n\t\t\t\t\tnumCombined++;\r\n\t\t\t\t\tif (!color) {\r\n\t\t\t\t\t\tcolor = data[i].color;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var i = 0; i < data.length; ++i) {\r\n\t\t\t\tvar value = data[i].data[0][1];\r\n\t\t\t\tif (numCombined < 2 || value / total > options.series.pie.combine.threshold) {\r\n\t\t\t\t\tnewdata.push({\r\n\t\t\t\t\t\tdata: [[1, value]],\r\n\t\t\t\t\t\tcolor: data[i].color,\r\n\t\t\t\t\t\tlabel: data[i].label,\r\n\t\t\t\t\t\tangle: value * Math.PI * 2 / total,\r\n\t\t\t\t\t\tpercent: value / (total / 100)\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (numCombined > 1) {\r\n\t\t\t\tnewdata.push({\r\n\t\t\t\t\tdata: [[1, combined]],\r\n\t\t\t\t\tcolor: color,\r\n\t\t\t\t\tlabel: options.series.pie.combine.label,\r\n\t\t\t\t\tangle: combined * Math.PI * 2 / total,\r\n\t\t\t\t\tpercent: combined / (total / 100)\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn newdata;\r\n\t\t}\r\n\r\n\t\tfunction draw(plot, newCtx) {\r\n\r\n\t\t\tif (!target) {\r\n\t\t\t\treturn; // if no series were passed\r\n\t\t\t}\r\n\r\n\t\t\tvar canvasWidth = plot.getPlaceholder().width(),\r\n\t\t\t\tcanvasHeight = plot.getPlaceholder().height(),\r\n\t\t\t\tlegendWidth = target.children().filter(\".legend\").children().width() || 0;\r\n\r\n\t\t\tctx = newCtx;\r\n\r\n\t\t\t// WARNING: HACK! REWRITE THIS CODE AS SOON AS POSSIBLE!\r\n\r\n\t\t\t// When combining smaller slices into an 'other' slice, we need to\r\n\t\t\t// add a new series.  Since Flot gives plugins no way to modify the\r\n\t\t\t// list of series, the pie plugin uses a hack where the first call\r\n\t\t\t// to processDatapoints results in a call to setData with the new\r\n\t\t\t// list of series, then subsequent processDatapoints do nothing.\r\n\r\n\t\t\t// The plugin-global 'processed' flag is used to control this hack;\r\n\t\t\t// it starts out false, and is set to true after the first call to\r\n\t\t\t// processDatapoints.\r\n\r\n\t\t\t// Unfortunately this turns future setData calls into no-ops; they\r\n\t\t\t// call processDatapoints, the flag is true, and nothing happens.\r\n\r\n\t\t\t// To fix this we'll set the flag back to false here in draw, when\r\n\t\t\t// all series have been processed, so the next sequence of calls to\r\n\t\t\t// processDatapoints once again starts out with a slice-combine.\r\n\t\t\t// This is really a hack; in 0.9 we need to give plugins a proper\r\n\t\t\t// way to modify series before any processing begins.\r\n\r\n\t\t\tprocessed = false;\r\n\r\n\t\t\t// calculate maximum radius and center point\r\n\r\n\t\t\tmaxRadius =  Math.min(canvasWidth, canvasHeight / options.series.pie.tilt) / 2;\r\n\t\t\tcenterTop = canvasHeight / 2 + options.series.pie.offset.top;\r\n\t\t\tcenterLeft = canvasWidth / 2;\r\n\r\n\t\t\tif (options.series.pie.offset.left == \"auto\") {\r\n\t\t\t\tif (options.legend.position.match(\"w\")) {\r\n\t\t\t\t\tcenterLeft += legendWidth / 2;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tcenterLeft -= legendWidth / 2;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tcenterLeft += options.series.pie.offset.left;\r\n\t\t\t}\r\n\r\n\t\t\tif (centerLeft < maxRadius) {\r\n\t\t\t\tcenterLeft = maxRadius;\r\n\t\t\t} else if (centerLeft > canvasWidth - maxRadius) {\r\n\t\t\t\tcenterLeft = canvasWidth - maxRadius;\r\n\t\t\t}\r\n\r\n\t\t\tvar slices = plot.getData(),\r\n\t\t\t\tattempts = 0;\r\n\r\n\t\t\t// Keep shrinking the pie's radius until drawPie returns true,\r\n\t\t\t// indicating that all the labels fit, or we try too many times.\r\n\r\n\t\t\tdo {\r\n\t\t\t\tif (attempts > 0) {\r\n\t\t\t\t\tmaxRadius *= REDRAW_SHRINK;\r\n\t\t\t\t}\r\n\t\t\t\tattempts += 1;\r\n\t\t\t\tclear();\r\n\t\t\t\tif (options.series.pie.tilt <= 0.8) {\r\n\t\t\t\t\tdrawShadow();\r\n\t\t\t\t}\r\n\t\t\t} while (!drawPie() && attempts < REDRAW_ATTEMPTS)\r\n\r\n\t\t\tif (attempts >= REDRAW_ATTEMPTS) {\r\n\t\t\t\tclear();\r\n\t\t\t\ttarget.prepend(\"<div class='error'>Could not draw pie with labels contained inside canvas</div>\");\r\n\t\t\t}\r\n\r\n\t\t\tif (plot.setSeries && plot.insertLegend) {\r\n\t\t\t\tplot.setSeries(slices);\r\n\t\t\t\tplot.insertLegend();\r\n\t\t\t}\r\n\r\n\t\t\t// we're actually done at this point, just defining internal functions at this point\r\n\r\n\t\t\tfunction clear() {\r\n\t\t\t\tctx.clearRect(0, 0, canvasWidth, canvasHeight);\r\n\t\t\t\ttarget.children().filter(\".pieLabel, .pieLabelBackground\").remove();\r\n\t\t\t}\r\n\r\n\t\t\tfunction drawShadow() {\r\n\r\n\t\t\t\tvar shadowLeft = options.series.pie.shadow.left;\r\n\t\t\t\tvar shadowTop = options.series.pie.shadow.top;\r\n\t\t\t\tvar edge = 10;\r\n\t\t\t\tvar alpha = options.series.pie.shadow.alpha;\r\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n\t\t\t\tif (radius >= canvasWidth / 2 - shadowLeft || radius * options.series.pie.tilt >= canvasHeight / 2 - shadowTop || radius <= edge) {\r\n\t\t\t\t\treturn;\t// shadow would be outside canvas, so don't draw it\r\n\t\t\t\t}\r\n\r\n\t\t\t\tctx.save();\r\n\t\t\t\tctx.translate(shadowLeft,shadowTop);\r\n\t\t\t\tctx.globalAlpha = alpha;\r\n\t\t\t\tctx.fillStyle = \"#000\";\r\n\r\n\t\t\t\t// center and rotate to starting position\r\n\r\n\t\t\t\tctx.translate(centerLeft,centerTop);\r\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\r\n\r\n\t\t\t\t//radius -= edge;\r\n\r\n\t\t\t\tfor (var i = 1; i <= edge; i++) {\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.arc(0, 0, radius, 0, Math.PI * 2, false);\r\n\t\t\t\t\tctx.fill();\r\n\t\t\t\t\tradius -= i;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tctx.restore();\r\n\t\t\t}\r\n\r\n\t\t\tfunction drawPie() {\r\n\r\n\t\t\t\tvar startAngle = Math.PI * options.series.pie.startAngle;\r\n\t\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n\t\t\t\t// center and rotate to starting position\r\n\r\n\t\t\t\tctx.save();\r\n\t\t\t\tctx.translate(centerLeft,centerTop);\r\n\t\t\t\tctx.scale(1, options.series.pie.tilt);\r\n\t\t\t\t//ctx.rotate(startAngle); // start at top; -- This doesn't work properly in Opera\r\n\r\n\t\t\t\t// draw slices\r\n\r\n\t\t\t\tctx.save();\r\n\t\t\t\tvar currentAngle = startAngle;\r\n\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\r\n\t\t\t\t\tslices[i].startAngle = currentAngle;\r\n\t\t\t\t\tdrawSlice(slices[i].angle, slices[i].color, true);\r\n\t\t\t\t}\r\n\t\t\t\tctx.restore();\r\n\r\n\t\t\t\t// draw slice outlines\r\n\r\n\t\t\t\tif (options.series.pie.stroke.width > 0) {\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.lineWidth = options.series.pie.stroke.width;\r\n\t\t\t\t\tcurrentAngle = startAngle;\r\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\r\n\t\t\t\t\t\tdrawSlice(slices[i].angle, options.series.pie.stroke.color, false);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// draw donut hole\r\n\r\n\t\t\t\tdrawDonutHole(ctx);\r\n\r\n\t\t\t\tctx.restore();\r\n\r\n\t\t\t\t// Draw the labels, returning true if they fit within the plot\r\n\r\n\t\t\t\tif (options.series.pie.label.show) {\r\n\t\t\t\t\treturn drawLabels();\r\n\t\t\t\t} else return true;\r\n\r\n\t\t\t\tfunction drawSlice(angle, color, fill) {\r\n\r\n\t\t\t\t\tif (angle <= 0 || isNaN(angle)) {\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (fill) {\r\n\t\t\t\t\t\tctx.fillStyle = color;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tctx.strokeStyle = color;\r\n\t\t\t\t\t\tctx.lineJoin = \"round\";\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tif (Math.abs(angle - Math.PI * 2) > 0.000000001) {\r\n\t\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//ctx.arc(0, 0, radius, 0, angle, false); // This doesn't work properly in Opera\r\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle, currentAngle + angle / 2, false);\r\n\t\t\t\t\tctx.arc(0, 0, radius,currentAngle + angle / 2, currentAngle + angle, false);\r\n\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\t//ctx.rotate(angle); // This doesn't work properly in Opera\r\n\t\t\t\t\tcurrentAngle += angle;\r\n\r\n\t\t\t\t\tif (fill) {\r\n\t\t\t\t\t\tctx.fill();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tctx.stroke();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction drawLabels() {\r\n\r\n\t\t\t\t\tvar currentAngle = startAngle;\r\n\t\t\t\t\tvar radius = options.series.pie.label.radius > 1 ? options.series.pie.label.radius : maxRadius * options.series.pie.label.radius;\r\n\r\n\t\t\t\t\tfor (var i = 0; i < slices.length; ++i) {\r\n\t\t\t\t\t\tif (slices[i].percent >= options.series.pie.label.threshold * 100) {\r\n\t\t\t\t\t\t\tif (!drawLabel(slices[i], currentAngle, i)) {\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcurrentAngle += slices[i].angle;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn true;\r\n\r\n\t\t\t\t\tfunction drawLabel(slice, startAngle, index) {\r\n\r\n\t\t\t\t\t\tif (slice.data[0][1] == 0) {\r\n\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// format label text\r\n\r\n\t\t\t\t\t\tvar lf = options.legend.labelFormatter, text, plf = options.series.pie.label.formatter;\r\n\r\n\t\t\t\t\t\tif (lf) {\r\n\t\t\t\t\t\t\ttext = lf(slice.label, slice);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\ttext = slice.label;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (plf) {\r\n\t\t\t\t\t\t\ttext = plf(text, slice);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar halfAngle = ((startAngle + slice.angle) + startAngle) / 2;\r\n\t\t\t\t\t\tvar x = centerLeft + Math.round(Math.cos(halfAngle) * radius);\r\n\t\t\t\t\t\tvar y = centerTop + Math.round(Math.sin(halfAngle) * radius) * options.series.pie.tilt;\r\n\r\n\t\t\t\t\t\tvar html = \"<span class='pieLabel' id='pieLabel\" + index + \"' style='position:absolute;top:\" + y + \"px;left:\" + x + \"px;'>\" + text + \"</span>\";\r\n\t\t\t\t\t\ttarget.append(html);\r\n\r\n\t\t\t\t\t\tvar label = target.children(\"#pieLabel\" + index);\r\n\t\t\t\t\t\tvar labelTop = (y - label.height() / 2);\r\n\t\t\t\t\t\tvar labelLeft = (x - label.width() / 2);\r\n\r\n\t\t\t\t\t\tlabel.css(\"top\", labelTop);\r\n\t\t\t\t\t\tlabel.css(\"left\", labelLeft);\r\n\r\n\t\t\t\t\t\t// check to make sure that the label is not outside the canvas\r\n\r\n\t\t\t\t\t\tif (0 - labelTop > 0 || 0 - labelLeft > 0 || canvasHeight - (labelTop + label.height()) < 0 || canvasWidth - (labelLeft + label.width()) < 0) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif (options.series.pie.label.background.opacity != 0) {\r\n\r\n\t\t\t\t\t\t\t// put in the transparent background separately to avoid blended labels and label boxes\r\n\r\n\t\t\t\t\t\t\tvar c = options.series.pie.label.background.color;\r\n\r\n\t\t\t\t\t\t\tif (c == null) {\r\n\t\t\t\t\t\t\t\tc = slice.color;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\tvar pos = \"top:\" + labelTop + \"px;left:\" + labelLeft + \"px;\";\r\n\t\t\t\t\t\t\t$(\"<div class='pieLabelBackground' style='position:absolute;width:\" + label.width() + \"px;height:\" + label.height() + \"px;\" + pos + \"background-color:\" + c + \";'></div>\")\r\n\t\t\t\t\t\t\t\t.css(\"opacity\", options.series.pie.label.background.opacity)\r\n\t\t\t\t\t\t\t\t.insertBefore(label);\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t} // end individual label function\r\n\t\t\t\t} // end drawLabels function\r\n\t\t\t} // end drawPie function\r\n\t\t} // end draw function\r\n\r\n\t\t// Placed here because it needs to be accessed from multiple locations\r\n\r\n\t\tfunction drawDonutHole(layer) {\r\n\t\t\tif (options.series.pie.innerRadius > 0) {\r\n\r\n\t\t\t\t// subtract the center\r\n\r\n\t\t\t\tlayer.save();\r\n\t\t\t\tvar innerRadius = options.series.pie.innerRadius > 1 ? options.series.pie.innerRadius : maxRadius * options.series.pie.innerRadius;\r\n\t\t\t\tlayer.globalCompositeOperation = \"destination-out\"; // this does not work with excanvas, but it will fall back to using the stroke color\r\n\t\t\t\tlayer.beginPath();\r\n\t\t\t\tlayer.fillStyle = options.series.pie.stroke.color;\r\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\r\n\t\t\t\tlayer.fill();\r\n\t\t\t\tlayer.closePath();\r\n\t\t\t\tlayer.restore();\r\n\r\n\t\t\t\t// add inner stroke\r\n\r\n\t\t\t\tlayer.save();\r\n\t\t\t\tlayer.beginPath();\r\n\t\t\t\tlayer.strokeStyle = options.series.pie.stroke.color;\r\n\t\t\t\tlayer.arc(0, 0, innerRadius, 0, Math.PI * 2, false);\r\n\t\t\t\tlayer.stroke();\r\n\t\t\t\tlayer.closePath();\r\n\t\t\t\tlayer.restore();\r\n\r\n\t\t\t\t// TODO: add extra shadow inside hole (with a mask) if the pie is tilted.\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t//-- Additional Interactive related functions --\r\n\r\n\t\tfunction isPointInPoly(poly, pt) {\r\n\t\t\tfor(var c = false, i = -1, l = poly.length, j = l - 1; ++i < l; j = i)\r\n\t\t\t\t((poly[i][1] <= pt[1] && pt[1] < poly[j][1]) || (poly[j][1] <= pt[1] && pt[1]< poly[i][1]))\r\n\t\t\t\t&& (pt[0] < (poly[j][0] - poly[i][0]) * (pt[1] - poly[i][1]) / (poly[j][1] - poly[i][1]) + poly[i][0])\r\n\t\t\t\t&& (c = !c);\r\n\t\t\treturn c;\r\n\t\t}\r\n\r\n\t\tfunction findNearbySlice(mouseX, mouseY) {\r\n\r\n\t\t\tvar slices = plot.getData(),\r\n\t\t\t\toptions = plot.getOptions(),\r\n\t\t\t\tradius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius,\r\n\t\t\t\tx, y;\r\n\r\n\t\t\tfor (var i = 0; i < slices.length; ++i) {\r\n\r\n\t\t\t\tvar s = slices[i];\r\n\r\n\t\t\t\tif (s.pie.show) {\r\n\r\n\t\t\t\t\tctx.save();\r\n\t\t\t\t\tctx.beginPath();\r\n\t\t\t\t\tctx.moveTo(0, 0); // Center of the pie\r\n\t\t\t\t\t//ctx.scale(1, options.series.pie.tilt);\t// this actually seems to break everything when here.\r\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle, s.startAngle + s.angle / 2, false);\r\n\t\t\t\t\tctx.arc(0, 0, radius, s.startAngle + s.angle / 2, s.startAngle + s.angle, false);\r\n\t\t\t\t\tctx.closePath();\r\n\t\t\t\t\tx = mouseX - centerLeft;\r\n\t\t\t\t\ty = mouseY - centerTop;\r\n\r\n\t\t\t\t\tif (ctx.isPointInPath) {\r\n\t\t\t\t\t\tif (ctx.isPointInPath(mouseX - centerLeft, mouseY - centerTop)) {\r\n\t\t\t\t\t\t\tctx.restore();\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\r\n\t\t\t\t\t\t\t\tdataIndex: 0,\r\n\t\t\t\t\t\t\t\tseries: s,\r\n\t\t\t\t\t\t\t\tseriesIndex: i\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// excanvas for IE doesn;t support isPointInPath, this is a workaround.\r\n\r\n\t\t\t\t\t\tvar p1X = radius * Math.cos(s.startAngle),\r\n\t\t\t\t\t\t\tp1Y = radius * Math.sin(s.startAngle),\r\n\t\t\t\t\t\t\tp2X = radius * Math.cos(s.startAngle + s.angle / 4),\r\n\t\t\t\t\t\t\tp2Y = radius * Math.sin(s.startAngle + s.angle / 4),\r\n\t\t\t\t\t\t\tp3X = radius * Math.cos(s.startAngle + s.angle / 2),\r\n\t\t\t\t\t\t\tp3Y = radius * Math.sin(s.startAngle + s.angle / 2),\r\n\t\t\t\t\t\t\tp4X = radius * Math.cos(s.startAngle + s.angle / 1.5),\r\n\t\t\t\t\t\t\tp4Y = radius * Math.sin(s.startAngle + s.angle / 1.5),\r\n\t\t\t\t\t\t\tp5X = radius * Math.cos(s.startAngle + s.angle),\r\n\t\t\t\t\t\t\tp5Y = radius * Math.sin(s.startAngle + s.angle),\r\n\t\t\t\t\t\t\tarrPoly = [[0, 0], [p1X, p1Y], [p2X, p2Y], [p3X, p3Y], [p4X, p4Y], [p5X, p5Y]],\r\n\t\t\t\t\t\t\tarrPoint = [x, y];\r\n\r\n\t\t\t\t\t\t// TODO: perhaps do some mathmatical trickery here with the Y-coordinate to compensate for pie tilt?\r\n\r\n\t\t\t\t\t\tif (isPointInPoly(arrPoly, arrPoint)) {\r\n\t\t\t\t\t\t\tctx.restore();\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tdatapoint: [s.percent, s.data],\r\n\t\t\t\t\t\t\t\tdataIndex: 0,\r\n\t\t\t\t\t\t\t\tseries: s,\r\n\t\t\t\t\t\t\t\tseriesIndex: i\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tctx.restore();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\tfunction onMouseMove(e) {\r\n\t\t\ttriggerClickHoverEvent(\"plothover\", e);\r\n\t\t}\r\n\r\n\t\tfunction onClick(e) {\r\n\t\t\ttriggerClickHoverEvent(\"plotclick\", e);\r\n\t\t}\r\n\r\n\t\t// trigger click or hover event (they send the same parameters so we share their code)\r\n\r\n\t\tfunction triggerClickHoverEvent(eventname, e) {\r\n\r\n\t\t\tvar offset = plot.offset();\r\n\t\t\tvar canvasX = parseInt(e.pageX - offset.left);\r\n\t\t\tvar canvasY =  parseInt(e.pageY - offset.top);\r\n\t\t\tvar item = findNearbySlice(canvasX, canvasY);\r\n\r\n\t\t\tif (options.grid.autoHighlight) {\r\n\r\n\t\t\t\t// clear auto-highlights\r\n\r\n\t\t\t\tfor (var i = 0; i < highlights.length; ++i) {\r\n\t\t\t\t\tvar h = highlights[i];\r\n\t\t\t\t\tif (h.auto == eventname && !(item && h.series == item.series)) {\r\n\t\t\t\t\t\tunhighlight(h.series);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// highlight the slice\r\n\r\n\t\t\tif (item) {\r\n\t\t\t\thighlight(item.series, eventname);\r\n\t\t\t}\r\n\r\n\t\t\t// trigger any hover bind events\r\n\r\n\t\t\tvar pos = { pageX: e.pageX, pageY: e.pageY };\r\n\t\t\ttarget.trigger(eventname, [pos, item]);\r\n\t\t}\r\n\r\n\t\tfunction highlight(s, auto) {\r\n\t\t\t//if (typeof s == \"number\") {\r\n\t\t\t//\ts = series[s];\r\n\t\t\t//}\r\n\r\n\t\t\tvar i = indexOfHighlight(s);\r\n\r\n\t\t\tif (i == -1) {\r\n\t\t\t\thighlights.push({ series: s, auto: auto });\r\n\t\t\t\tplot.triggerRedrawOverlay();\r\n\t\t\t} else if (!auto) {\r\n\t\t\t\thighlights[i].auto = false;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction unhighlight(s) {\r\n\t\t\tif (s == null) {\r\n\t\t\t\thighlights = [];\r\n\t\t\t\tplot.triggerRedrawOverlay();\r\n\t\t\t}\r\n\r\n\t\t\t//if (typeof s == \"number\") {\r\n\t\t\t//\ts = series[s];\r\n\t\t\t//}\r\n\r\n\t\t\tvar i = indexOfHighlight(s);\r\n\r\n\t\t\tif (i != -1) {\r\n\t\t\t\thighlights.splice(i, 1);\r\n\t\t\t\tplot.triggerRedrawOverlay();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfunction indexOfHighlight(s) {\r\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\r\n\t\t\t\tvar h = highlights[i];\r\n\t\t\t\tif (h.series == s)\r\n\t\t\t\t\treturn i;\r\n\t\t\t}\r\n\t\t\treturn -1;\r\n\t\t}\r\n\r\n\t\tfunction drawOverlay(plot, octx) {\r\n\r\n\t\t\tvar options = plot.getOptions();\r\n\r\n\t\t\tvar radius = options.series.pie.radius > 1 ? options.series.pie.radius : maxRadius * options.series.pie.radius;\r\n\r\n\t\t\toctx.save();\r\n\t\t\toctx.translate(centerLeft, centerTop);\r\n\t\t\toctx.scale(1, options.series.pie.tilt);\r\n\r\n\t\t\tfor (var i = 0; i < highlights.length; ++i) {\r\n\t\t\t\tdrawHighlight(highlights[i].series);\r\n\t\t\t}\r\n\r\n\t\t\tdrawDonutHole(octx);\r\n\r\n\t\t\toctx.restore();\r\n\r\n\t\t\tfunction drawHighlight(series) {\r\n\r\n\t\t\t\tif (series.angle <= 0 || isNaN(series.angle)) {\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//octx.fillStyle = parseColor(options.series.pie.highlight.color).scale(null, null, null, options.series.pie.highlight.opacity).toString();\r\n\t\t\t\toctx.fillStyle = \"rgba(255, 255, 255, \" + options.series.pie.highlight.opacity + \")\"; // this is temporary until we have access to parseColor\r\n\t\t\t\toctx.beginPath();\r\n\t\t\t\tif (Math.abs(series.angle - Math.PI * 2) > 0.000000001) {\r\n\t\t\t\t\toctx.moveTo(0, 0); // Center of the pie\r\n\t\t\t\t}\r\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle, series.startAngle + series.angle / 2, false);\r\n\t\t\t\toctx.arc(0, 0, radius, series.startAngle + series.angle / 2, series.startAngle + series.angle, false);\r\n\t\t\t\toctx.closePath();\r\n\t\t\t\toctx.fill();\r\n\t\t\t}\r\n\t\t}\r\n\t} // end init (plugin body)\r\n\r\n\t// define pie specific options and their default values\r\n\r\n\tvar options = {\r\n\t\tseries: {\r\n\t\t\tpie: {\r\n\t\t\t\tshow: false,\r\n\t\t\t\tradius: \"auto\",\t// actual radius of the visible pie (based on full calculated radius if <=1, or hard pixel value)\r\n\t\t\t\tinnerRadius: 0, /* for donut */\r\n\t\t\t\tstartAngle: 3/2,\r\n\t\t\t\ttilt: 1,\r\n\t\t\t\tshadow: {\r\n\t\t\t\t\tleft: 5,\t// shadow left offset\r\n\t\t\t\t\ttop: 15,\t// shadow top offset\r\n\t\t\t\t\talpha: 0.02\t// shadow alpha\r\n\t\t\t\t},\r\n\t\t\t\toffset: {\r\n\t\t\t\t\ttop: 0,\r\n\t\t\t\t\tleft: \"auto\"\r\n\t\t\t\t},\r\n\t\t\t\tstroke: {\r\n\t\t\t\t\tcolor: \"#fff\",\r\n\t\t\t\t\twidth: 1\r\n\t\t\t\t},\r\n\t\t\t\tlabel: {\r\n\t\t\t\t\tshow: \"auto\",\r\n\t\t\t\t\tformatter: function(label, slice) {\r\n\t\t\t\t\t\treturn \"<div style='font-size:x-small;text-align:center;padding:2px;color:\" + slice.color + \";'>\" + label + \"<br/>\" + Math.round(slice.percent) + \"%</div>\";\r\n\t\t\t\t\t},\t// formatter function\r\n\t\t\t\t\tradius: 1,\t// radius at which to place the labels (based on full calculated radius if <=1, or hard pixel value)\r\n\t\t\t\t\tbackground: {\r\n\t\t\t\t\t\tcolor: null,\r\n\t\t\t\t\t\topacity: 0\r\n\t\t\t\t\t},\r\n\t\t\t\t\tthreshold: 0\t// percentage at which to hide the label (i.e. the slice is too narrow)\r\n\t\t\t\t},\r\n\t\t\t\tcombine: {\r\n\t\t\t\t\tthreshold: -1,\t// percentage at which to combine little slices into one larger slice\r\n\t\t\t\t\tcolor: null,\t// color to give the new slice (auto-generated if null)\r\n\t\t\t\t\tlabel: \"Other\"\t// label to give the new slice\r\n\t\t\t\t},\r\n\t\t\t\thighlight: {\r\n\t\t\t\t\t//color: \"#fff\",\t\t// will add this functionality once parseColor is available\r\n\t\t\t\t\topacity: 0.5\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t$.plot.plugins.push({\r\n\t\tinit: init,\r\n\t\toptions: options,\r\n\t\tname: \"pie\",\r\n\t\tversion: \"1.1\"\r\n\t});\r\n\r\n})(jQuery);\r\n","// jshint ignore: start\r\n// jscs: disable\r\nace.define(\"ace/snippets/prometheus\",[\"require\",\"exports\",\"module\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\n// exports.snippetText = \"# rate\\n\\\r\n// snippet r\\n\\\r\n//   rate(${1:metric}[${2:range}])\\n\\\r\n// \";\r\n\r\nexports.snippets = [\r\n  {\r\n    \"content\": \"rate(${1:metric}[${2:range}])\",\r\n    \"name\": \"rate()\",\r\n    \"scope\": \"prometheus\",\r\n    \"tabTrigger\": \"r\"\r\n  }\r\n];\r\n\r\nexports.scope = \"prometheus\";\r\n});\r\n","// jshint ignore: start\r\n// jscs: disable\r\nace.define(\"ace/mode/prometheus_highlight_rules\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextHighlightRules = require(\"./text_highlight_rules\").TextHighlightRules;\r\n\r\nvar PrometheusHighlightRules = function() {\r\n  var keywords = (\r\n    \"count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile\"\r\n  );\r\n\r\n  var builtinConstants = (\r\n    \"true|false|null|__name__|job\"\r\n  );\r\n\r\n  var builtinFunctions = (\r\n    \"abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv|\" + \"drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2|\" +\r\n    \"log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time|\" +\r\n    \"min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time\"\r\n  );\r\n\r\n  var keywordMapper = this.createKeywordMapper({\r\n    \"support.function\": builtinFunctions,\r\n    \"keyword\": keywords,\r\n    \"constant.language\": builtinConstants\r\n  }, \"identifier\", true);\r\n\r\n  this.$rules = {\r\n    \"start\" : [ {\r\n      token : \"string\", // single line\r\n      regex : /\"(?:[^\"\\\\]|\\\\.)*?\"/\r\n    }, {\r\n      token : \"string\", // string\r\n      regex : \"'.*?'\"\r\n    }, {\r\n      token : \"constant.numeric\", // float\r\n      regex : \"[-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\"\r\n    }, {\r\n      token : \"constant.language\", // time\r\n      regex : \"\\\\d+[smhdwy]\"\r\n    }, {\r\n      token : \"keyword.operator.binary\",\r\n      regex : \"\\\\+|\\\\-|\\\\*|\\\\/|%|\\\\^|==|!=|<=|>=|<|>|and|or|unless\"\r\n    }, {\r\n      token : \"keyword.other\",\r\n      regex : \"keep_common|offset|bool\"\r\n    }, {\r\n      token : \"keyword.control\",\r\n      regex : \"by|without|on|ignoring|group_left|group_right\",\r\n      next  : \"start-label-list-matcher\"\r\n    }, {\r\n      token : \"variable\",\r\n      regex : \"\\\\$[A-Za-z0-9_]+\"\r\n    }, {\r\n      token : keywordMapper,\r\n      regex : \"[a-zA-Z_:][a-zA-Z0-9_:]*\"\r\n    }, {\r\n      token : \"paren.lparen\",\r\n      regex : \"[[(]\"\r\n    }, {\r\n      token : \"paren.lparen.label-matcher\",\r\n      regex : \"{\",\r\n      next  : \"start-label-matcher\"\r\n    }, {\r\n      token : \"paren.rparen\",\r\n      regex : \"[\\\\])]\"\r\n    }, {\r\n      token : \"paren.rparen.label-matcher\",\r\n      regex : \"}\"\r\n    }, {\r\n      token : \"text\",\r\n      regex : \"\\\\s+\"\r\n    } ],\r\n    \"start-label-matcher\" : [ {\r\n      token : \"entity.name.tag.label-matcher\",\r\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\r\n    }, {\r\n      token : \"keyword.operator.label-matcher\",\r\n      regex : '=~|=|!~|!='\r\n    }, {\r\n      token : \"string.quoted.label-matcher\",\r\n      regex : '\"[^\"]*\"|\\'[^\\']*\\''\r\n    }, {\r\n      token : \"punctuation.operator.label-matcher\",\r\n      regex : \",\"\r\n    }, {\r\n      token : \"paren.rparen.label-matcher\",\r\n      regex : \"}\",\r\n      next  : \"start\"\r\n    } ],\r\n    \"start-label-list-matcher\" : [ {\r\n      token : \"paren.lparen.label-list-matcher\",\r\n      regex : \"[(]\"\r\n    }, {\r\n      token : \"entity.name.tag.label-list-matcher\",\r\n      regex : '[a-zA-Z_][a-zA-Z0-9_]*'\r\n    }, {\r\n      token : \"punctuation.operator.label-list-matcher\",\r\n      regex : \",\"\r\n    }, {\r\n      token : \"paren.rparen.label-list-matcher\",\r\n      regex : \"[)]\",\r\n      next  : \"start\"\r\n    } ]\r\n  };\r\n\r\n  this.normalizeRules();\r\n};\r\n\r\noop.inherits(PrometheusHighlightRules, TextHighlightRules);\r\n\r\nexports.PrometheusHighlightRules = PrometheusHighlightRules;\r\n});\r\n\r\nace.define(\"ace/mode/prometheus_completions\",[\"require\",\"exports\",\"module\",\"ace/token_iterator\", \"ace/lib/lang\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar lang = require(\"../lib/lang\");\r\n\r\nvar prometheusKeyWords = [\r\n  \"by\", \"without\", \"keep_common\", \"offset\", \"bool\", \"and\", \"or\", \"unless\", \"ignoring\", \"on\", \"group_left\",\r\n  \"group_right\", \"count\", \"count_values\", \"min\", \"max\", \"avg\", \"sum\", \"stddev\", \"stdvar\", \"bottomk\", \"topk\", \"quantile\"\r\n];\r\n\r\nvar keyWordsCompletions = prometheusKeyWords.map(function(word) {\r\n  return {\r\n    caption: word,\r\n    value: word,\r\n    meta: \"keyword\",\r\n    score: Number.MAX_VALUE\r\n  }\r\n});\r\n\r\nvar prometheusFunctions = [\r\n  {\r\n    name: 'abs()', value: 'abs',\r\n    def: 'abs(v instant-vector)',\r\n    docText: 'Returns the input vector with all sample values converted to their absolute value.'\r\n  },\r\n  {\r\n    name: 'absent()', value: 'absent',\r\n    def: 'absent(v instant-vector)',\r\n    docText: 'Returns an empty vector if the vector passed to it has any elements and a 1-element vector with the value 1 if the vector passed to it has no elements. This is useful for alerting on when no time series exist for a given metric name and label combination.'\r\n  },\r\n  {\r\n    name: 'ceil()', value: 'ceil',\r\n    def: 'ceil(v instant-vector)',\r\n    docText: 'Rounds the sample values of all elements in `v` up to the nearest integer.'\r\n  },\r\n  {\r\n    name: 'changes()', value: 'changes',\r\n    def: 'changes(v range-vector)',\r\n    docText: 'For each input time series, `changes(v range-vector)` returns the number of times its value has changed within the provided time range as an instant vector.'\r\n  },\r\n  {\r\n    name: 'clamp_max()', value: 'clamp_max',\r\n    def: 'clamp_max(v instant-vector, max scalar)',\r\n    docText: 'Clamps the sample values of all elements in `v` to have an upper limit of `max`.'\r\n  },\r\n  {\r\n    name: 'clamp_min()', value: 'clamp_min',\r\n    def: 'clamp_min(v instant-vector, min scalar)',\r\n    docText: 'Clamps the sample values of all elements in `v` to have a lower limit of `min`.'\r\n  },\r\n  {\r\n    name: 'count_scalar()', value: 'count_scalar',\r\n    def: 'count_scalar(v instant-vector)',\r\n    docText: 'Returns the number of elements in a time series vector as a scalar. This is in contrast to the `count()` aggregation operator, which always returns a vector (an empty one if the input vector is empty) and allows grouping by labels via a `by` clause.'\r\n  },\r\n  {\r\n    name: 'day_of_month()', value: 'day_of_month',\r\n    def: 'day_of_month(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the day of the month for each of the given times in UTC. Returned values are from 1 to 31.'\r\n  },\r\n  {\r\n    name: 'day_of_week()', value: 'day_of_week',\r\n    def: 'day_of_week(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the day of the week for each of the given times in UTC. Returned values are from 0 to 6, where 0 means Sunday etc.'\r\n  },\r\n  {\r\n    name: 'days_in_month()', value: 'days_in_month',\r\n    def: 'days_in_month(v=vector(time()) instant-vector)',\r\n    docText: 'Returns number of days in the month for each of the given times in UTC. Returned values are from 28 to 31.'\r\n  },\r\n  {\r\n    name: 'delta()', value: 'delta',\r\n    def: 'delta(v range-vector)',\r\n    docText: 'Calculates the difference between the first and last value of each time series element in a range vector `v`, returning an instant vector with the given deltas and equivalent labels. The delta is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if the sample values are all integers.'\r\n  },\r\n  {\r\n    name: 'deriv()', value: 'deriv',\r\n    def: 'deriv(v range-vector)',\r\n    docText: 'Calculates the per-second derivative of the time series in a range vector `v`, using simple linear regression.'\r\n  },\r\n  {\r\n    name: 'drop_common_labels()', value: 'drop_common_labels',\r\n    def: 'drop_common_labels(instant-vector)',\r\n    docText: 'Drops all labels that have the same name and value across all series in the input vector.'\r\n  },\r\n  {\r\n    name: 'exp()', value: 'exp',\r\n    def: 'exp(v instant-vector)',\r\n    docText: 'Calculates the exponential function for all elements in `v`.\\nSpecial cases are:\\n* `Exp(+Inf) = +Inf` \\n* `Exp(NaN) = NaN`'\r\n  },\r\n  {\r\n    name: 'floor()', value: 'floor',\r\n    def: 'floor(v instant-vector)',\r\n    docText: 'Rounds the sample values of all elements in `v` down to the nearest integer.'\r\n  },\r\n  {\r\n    name: 'histogram_quantile()', value: 'histogram_quantile',\r\n    def: 'histogram_quantile(φ float, b instant-vector)',\r\n    docText: 'Calculates the φ-quantile (0 ≤ φ ≤ 1) from the buckets `b` of a histogram. The samples in `b` are the counts of observations in each bucket. Each sample must have a label `le` where the label value denotes the inclusive upper bound of the bucket. (Samples without such a label are silently ignored.) The histogram metric type automatically provides time series with the `_bucket` suffix and the appropriate labels.'\r\n  },\r\n  {\r\n    name: 'holt_winters()', value: 'holt_winters',\r\n    def: 'holt_winters(v range-vector, sf scalar, tf scalar)',\r\n    docText: 'Produces a smoothed value for time series based on the range in `v`. The lower the smoothing factor `sf`, the more importance is given to old data. The higher the trend factor `tf`, the more trends in the data is considered. Both `sf` and `tf` must be between 0 and 1.'\r\n  },\r\n  {\r\n    name: 'hour()', value: 'hour',\r\n    def: 'hour(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the hour of the day for each of the given times in UTC. Returned values are from 0 to 23.'\r\n  },\r\n  {\r\n    name: 'idelta()', value: 'idelta',\r\n    def: 'idelta(v range-vector)',\r\n    docText: 'Calculates the difference between the last two samples in the range vector `v`, returning an instant vector with the given deltas and equivalent labels.'\r\n  },\r\n  {\r\n    name: 'increase()', value: 'increase',\r\n    def: 'increase(v range-vector)',\r\n    docText: 'Calculates the increase in the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. The increase is extrapolated to cover the full time range as specified in the range vector selector, so that it is possible to get a non-integer result even if a counter increases only by integer increments.'\r\n  },\r\n  {\r\n    name: 'irate()', value: 'irate',\r\n    def: 'irate(v range-vector)',\r\n    docText: 'Calculates the per-second instant rate of increase of the time series in the range vector. This is based on the last two data points. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for.'\r\n  },\r\n  {\r\n    name: 'label_replace()', value: 'label_replace',\r\n    def: 'label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)',\r\n    docText: 'For each timeseries in `v`, `label_replace(v instant-vector, dst_label string, replacement string, src_label string, regex string)`  matches the regular expression `regex` against the label `src_label`.  If it matches, then the timeseries is returned with the label `dst_label` replaced by the expansion of `replacement`. `$1` is replaced with the first matching subgroup, `$2` with the second etc. If the regular expression doesn\\'t match then the timeseries is returned unchanged.'\r\n  },\r\n  {\r\n    name: 'ln()', value: 'ln',\r\n    def: 'ln(v instant-vector)',\r\n    docText: 'calculates the natural logarithm for all elements in `v`.\\nSpecial cases are:\\n * `ln(+Inf) = +Inf`\\n * `ln(0) = -Inf`\\n * `ln(x < 0) = NaN`\\n * `ln(NaN) = NaN`'\r\n  },\r\n  {\r\n    name: 'log2()', value: 'log2',\r\n    def: 'log2(v instant-vector)',\r\n    docText: 'Calculates the binary logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\r\n  },\r\n  {\r\n    name: 'log10()', value: 'log10',\r\n    def: 'log10(v instant-vector)',\r\n    docText: 'Calculates the decimal logarithm for all elements in `v`. The special cases are equivalent to those in `ln`.'\r\n  },\r\n  {\r\n    name: 'minute()', value: 'minute',\r\n    def: 'minute(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the minute of the hour for each of the given times in UTC. Returned values are from 0 to 59.'\r\n  },\r\n  {\r\n    name: 'month()', value: 'month',\r\n    def: 'month(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the month of the year for each of the given times in UTC. Returned values are from 1 to 12, where 1 means January etc.'\r\n  },\r\n  {\r\n    name: 'predict_linear()', value: 'predict_linear',\r\n    def: 'predict_linear(v range-vector, t scalar)',\r\n    docText: 'Predicts the value of time series `t` seconds from now, based on the range vector `v`, using simple linear regression.'\r\n  },\r\n  {\r\n    name: 'rate()', value: 'rate',\r\n    def: 'rate(v range-vector)',\r\n    docText: \"Calculates the per-second average rate of increase of the time series in the range vector. Breaks in monotonicity (such as counter resets due to target restarts) are automatically adjusted for. Also, the calculation extrapolates to the ends of the time range, allowing for missed scrapes or imperfect alignment of scrape cycles with the range's time period.\"\r\n  },\r\n  {\r\n    name: 'resets()', value: 'resets',\r\n    def: 'resets(v range-vector)',\r\n    docText: 'For each input time series, `resets(v range-vector)` returns the number of counter resets within the provided time range as an instant vector. Any decrease in the value between two consecutive samples is interpreted as a counter reset.'\r\n  },\r\n  {\r\n    name: 'round()', value: 'round',\r\n    def: 'round(v instant-vector, to_nearest=1 scalar)',\r\n    docText: 'Rounds the sample values of all elements in `v` to the nearest integer. Ties are resolved by rounding up. The optional `to_nearest` argument allows specifying the nearest multiple to which the sample values should be rounded. This multiple may also be a fraction.'\r\n  },\r\n  {\r\n    name: 'scalar()', value: 'scalar',\r\n    def: 'scalar(v instant-vector)',\r\n    docText: 'Given a single-element input vector, `scalar(v instant-vector)` returns the sample value of that single element as a scalar. If the input vector does not have exactly one element, `scalar` will return `NaN`.'\r\n  },\r\n  {\r\n    name: 'sort()', value: 'sort',\r\n    def: 'sort(v instant-vector)',\r\n    docText: 'Returns vector elements sorted by their sample values, in ascending order.'\r\n  },\r\n  {\r\n    name: 'sort_desc()', value: 'sort_desc',\r\n    def: 'sort_desc(v instant-vector)',\r\n    docText: 'Returns vector elements sorted by their sample values, in descending order.'\r\n  },\r\n  {\r\n    name: 'sqrt()', value: 'sqrt',\r\n    def: 'sqrt(v instant-vector)',\r\n    docText: 'Calculates the square root of all elements in `v`.'\r\n  },\r\n  {\r\n    name: 'time()', value: 'time',\r\n    def: 'time()',\r\n    docText: 'Returns the number of seconds since January 1, 1970 UTC. Note that this does not actually return the current time, but the time at which the expression is to be evaluated.'\r\n  },\r\n  {\r\n    name: 'vector()', value: 'vector',\r\n    def: 'vector(s scalar)',\r\n    docText: 'Returns the scalar `s` as a vector with no labels.'\r\n  },\r\n  {\r\n    name: 'year()', value: 'year',\r\n    def: 'year(v=vector(time()) instant-vector)',\r\n    docText: 'Returns the year for each of the given times in UTC.'\r\n  },\r\n  {\r\n    name: 'avg_over_time()', value: 'avg_over_time',\r\n    def: 'avg_over_time(range-vector)',\r\n    docText: 'The average value of all points in the specified interval.'\r\n  },\r\n  {\r\n    name: 'min_over_time()', value: 'min_over_time',\r\n    def: 'min_over_time(range-vector)',\r\n    docText: 'The minimum value of all points in the specified interval.'\r\n  },\r\n  {\r\n    name: 'max_over_time()', value: 'max_over_time',\r\n    def: 'max_over_time(range-vector)',\r\n    docText: 'The maximum value of all points in the specified interval.'\r\n  },\r\n  {\r\n    name: 'sum_over_time()', value: 'sum_over_time',\r\n    def: 'sum_over_time(range-vector)',\r\n    docText: 'The sum of all values in the specified interval.'\r\n  },\r\n  {\r\n    name: 'count_over_time()', value: 'count_over_time',\r\n    def: 'count_over_time(range-vector)',\r\n    docText: 'The count of all values in the specified interval.'\r\n  },\r\n  {\r\n    name: 'quantile_over_time()', value: 'quantile_over_time',\r\n    def: 'quantile_over_time(scalar, range-vector)',\r\n    docText: 'The φ-quantile (0 ≤ φ ≤ 1) of the values in the specified interval.'\r\n  },\r\n  {\r\n    name: 'stddev_over_time()', value: 'stddev_over_time',\r\n    def: 'stddev_over_time(range-vector)',\r\n    docText: 'The population standard deviation of the values in the specified interval.'\r\n  },\r\n  {\r\n    name: 'stdvar_over_time()', value: 'stdvar_over_time',\r\n    def: 'stdvar_over_time(range-vector)',\r\n    docText: 'The population standard variance of the values in the specified interval.'\r\n  },\r\n];\r\n\r\nfunction wrapText(str, len) {\r\n  len = len || 60;\r\n  var lines = [];\r\n  var space_index = 0;\r\n  var line_start = 0;\r\n  var next_line_end = len;\r\n  var line = \"\";\r\n  for (var i = 0; i < str.length; i++) {\r\n    if (str[i] === ' ') {\r\n      space_index = i;\r\n    } else if (i >= next_line_end  && space_index != 0) {\r\n      line = str.slice(line_start, space_index);\r\n      lines.push(line);\r\n      line_start = space_index + 1;\r\n      next_line_end = i + len;\r\n      space_index = 0;\r\n    }\r\n  }\r\n  line = str.slice(line_start);\r\n  lines.push(line);\r\n  return lines.join(\"&nbsp<br>\");\r\n}\r\n\r\nfunction convertMarkDownTags(text) {\r\n  text = text.replace(/```(.+)```/, \"<pre>$1</pre>\");\r\n  text = text.replace(/`([^`]+)`/, \"<code>$1</code>\");\r\n  return text;\r\n}\r\n\r\nfunction convertToHTML(item) {\r\n  var docText = lang.escapeHTML(item.docText);\r\n  docText = convertMarkDownTags(wrapText(docText, 40));\r\n  return [\r\n    \"<b>\", lang.escapeHTML(item.def), \"</b>\", \"<hr></hr>\", docText, \"<br>&nbsp\"\r\n  ].join(\"\");\r\n}\r\n\r\nvar functionsCompletions = prometheusFunctions.map(function(item) {\r\n  return {\r\n    caption: item.name,\r\n    value: item.value,\r\n    docHTML: convertToHTML(item),\r\n    meta: \"function\",\r\n    score: Number.MAX_VALUE\r\n  };\r\n});\r\n\r\nvar PrometheusCompletions = function() {};\r\n\r\n(function() {\r\n  this.getCompletions = function(state, session, pos, prefix, callback) {\r\n    var token = session.getTokenAt(pos.row, pos.column);\r\n    if (token.type === 'entity.name.tag.label-matcher'\r\n      || token.type === 'string.quoted.label-matcher'\r\n      || token.type === 'entity.name.tag.label-list-matcher') {\r\n      return callback(null, []);\r\n    }\r\n\r\n    var completions = keyWordsCompletions.concat(functionsCompletions);\r\n    callback(null, completions);\r\n  };\r\n\r\n}).call(PrometheusCompletions.prototype);\r\n\r\nexports.PrometheusCompletions = PrometheusCompletions;\r\n});\r\n\r\nace.define(\"ace/mode/behaviour/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/behaviour\",\"ace/mode/behaviour/cstyle\",\"ace/token_iterator\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../../lib/oop\");\r\nvar Behaviour = require(\"../behaviour\").Behaviour;\r\nvar CstyleBehaviour = require(\"./cstyle\").CstyleBehaviour;\r\nvar TokenIterator = require(\"../../token_iterator\").TokenIterator;\r\n\r\nfunction getWrapped(selection, selected, opening, closing) {\r\n  var rowDiff = selection.end.row - selection.start.row;\r\n  return {\r\n    text: opening + selected + closing,\r\n    selection: [\r\n      0,\r\n      selection.start.column + 1,\r\n      rowDiff,\r\n      selection.end.column + (rowDiff ? 0 : 1)\r\n    ]\r\n  };\r\n};\r\n\r\nvar PrometheusBehaviour = function () {\r\n  this.inherit(CstyleBehaviour);\r\n\r\n  // Rewrite default CstyleBehaviour for {} braces\r\n  this.add(\"braces\", \"insertion\", function(state, action, editor, session, text) {\r\n    if (text == '{') {\r\n      var selection = editor.getSelectionRange();\r\n      var selected = session.doc.getTextRange(selection);\r\n      if (selected !== \"\" && editor.getWrapBehavioursEnabled()) {\r\n        return getWrapped(selection, selected, '{', '}');\r\n      } else if (CstyleBehaviour.isSaneInsertion(editor, session)) {\r\n        return {\r\n          text: '{}',\r\n          selection: [1, 1]\r\n        };\r\n      }\r\n    } else if (text == '}') {\r\n      var cursor = editor.getCursorPosition();\r\n      var line = session.doc.getLine(cursor.row);\r\n      var rightChar = line.substring(cursor.column, cursor.column + 1);\r\n      if (rightChar == '}') {\r\n        var matching = session.$findOpeningBracket('}', {column: cursor.column + 1, row: cursor.row});\r\n        if (matching !== null && CstyleBehaviour.isAutoInsertedClosing(cursor, line, text)) {\r\n          return {\r\n            text: '',\r\n            selection: [1, 1]\r\n          };\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  this.add(\"braces\", \"deletion\", function(state, action, editor, session, range) {\r\n    var selected = session.doc.getTextRange(range);\r\n    if (!range.isMultiLine() && selected == '{') {\r\n      var line = session.doc.getLine(range.start.row);\r\n      var rightChar = line.substring(range.start.column + 1, range.start.column + 2);\r\n      if (rightChar == '}') {\r\n        range.end.column++;\r\n        return range;\r\n      }\r\n    }\r\n  });\r\n\r\n}\r\noop.inherits(PrometheusBehaviour, CstyleBehaviour);\r\n\r\nexports.PrometheusBehaviour = PrometheusBehaviour;\r\n});\r\n\r\nace.define(\"ace/mode/prometheus\",[\"require\",\"exports\",\"module\",\"ace/lib/oop\",\"ace/mode/text\",\"ace/mode/prometheus_highlight_rules\"], function(require, exports, module) {\r\n\"use strict\";\r\n\r\nvar oop = require(\"../lib/oop\");\r\nvar TextMode = require(\"./text\").Mode;\r\nvar PrometheusHighlightRules = require(\"./prometheus_highlight_rules\").PrometheusHighlightRules;\r\nvar PrometheusCompletions = require(\"./prometheus_completions\").PrometheusCompletions;\r\nvar PrometheusBehaviour = require(\"./behaviour/prometheus\").PrometheusBehaviour;\r\n\r\nvar Mode = function() {\r\n  this.HighlightRules = PrometheusHighlightRules;\r\n  this.$behaviour = new PrometheusBehaviour();\r\n  this.$completer = new PrometheusCompletions();\r\n  // replace keyWordCompleter\r\n  this.completer = this.$completer;\r\n};\r\noop.inherits(Mode, TextMode);\r\n\r\n(function() {\r\n\r\n  this.$id = \"ace/mode/prometheus\";\r\n}).call(Mode.prototype);\r\n\r\nexports.Mode = Mode;\r\n\r\n});\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nexport class LinkSrv {\r\n  /** @ngInject */\r\n  constructor(private templateSrv, private timeSrv) {}\r\n\r\n  getLinkUrl(link) {\r\n    const url = this.templateSrv.replace(link.url || '');\r\n    const params = {};\r\n\r\n    if (link.keepTime) {\r\n      const range = this.timeSrv.timeRangeForUrl();\r\n      params['from'] = range.from;\r\n      params['to'] = range.to;\r\n    }\r\n\r\n    if (link.includeVars) {\r\n      this.templateSrv.fillVariableValuesForUrl(params);\r\n    }\r\n\r\n    return this.addParamsToUrl(url, params);\r\n  }\r\n\r\n  addParamsToUrl(url, params) {\r\n    const paramsArray = [];\r\n\r\n    _.each(params, function(value, key) {\r\n      if (value === null) {\r\n        return;\r\n      }\r\n      if (value === true) {\r\n        paramsArray.push(key);\r\n      } else if (_.isArray(value)) {\r\n        _.each(value, function(instance) {\r\n          paramsArray.push(key + '=' + encodeURIComponent(instance));\r\n        });\r\n      } else {\r\n        paramsArray.push(key + '=' + encodeURIComponent(value));\r\n      }\r\n    });\r\n\r\n    if (paramsArray.length === 0) {\r\n      return url;\r\n    }\r\n\r\n    return this.appendToQueryString(url, paramsArray.join('&'));\r\n  }\r\n\r\n  appendToQueryString(url, stringToAppend) {\r\n    if (!_.isUndefined(stringToAppend) && stringToAppend !== null && stringToAppend !== '') {\r\n      const pos = url.indexOf('?');\r\n      if (pos !== -1) {\r\n        if (url.length - pos > 1) {\r\n          url += '&';\r\n        }\r\n      } else {\r\n        url += '?';\r\n      }\r\n      url += stringToAppend;\r\n    }\r\n\r\n    return url;\r\n  }\r\n\r\n  getAnchorInfo(link) {\r\n    const info: any = {};\r\n    info.href = this.getLinkUrl(link);\r\n    info.title = this.templateSrv.replace(link.title || '');\r\n    return info;\r\n  }\r\n\r\n  getPanelLinkAnchorInfo(link, scopedVars) {\r\n    const info: any = {};\r\n    if (link.type === 'absolute') {\r\n      info.target = link.targetBlank ? '_blank' : '_self';\r\n      info.href = this.templateSrv.replace(link.url || '', scopedVars);\r\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\r\n    } else if (link.url) {\r\n      info.href = link.url;\r\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\r\n      info.target = link.targetBlank ? '_blank' : '';\r\n    } else if (link.dashUri) {\r\n      info.href = 'dashboard/' + link.dashUri + '?';\r\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\r\n      info.target = link.targetBlank ? '_blank' : '';\r\n    } else {\r\n      info.title = this.templateSrv.replace(link.title || '', scopedVars);\r\n      const slug = kbn.slugifyForUrl(link.dashboard || '');\r\n      info.href = 'dashboard/db/' + slug + '?';\r\n    }\r\n\r\n    const params = {};\r\n\r\n    if (link.keepTime) {\r\n      const range = this.timeSrv.timeRangeForUrl();\r\n      params['from'] = range.from;\r\n      params['to'] = range.to;\r\n    }\r\n\r\n    if (link.includeVars) {\r\n      this.templateSrv.fillVariableValuesForUrl(params, scopedVars);\r\n    }\r\n\r\n    info.href = this.addParamsToUrl(info.href, params);\r\n\r\n    if (link.params) {\r\n      info.href = this.appendToQueryString(info.href, this.templateSrv.replace(link.params, scopedVars));\r\n    }\r\n\r\n    return info;\r\n  }\r\n}\r\n\r\nangular.module('grafana.services').service('linkSrv', LinkSrv);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport './link_srv';\r\n\r\nfunction panelLinksEditor() {\r\n  return {\r\n    scope: {\r\n      panel: '=',\r\n    },\r\n    restrict: 'E',\r\n    controller: 'PanelLinksEditorCtrl',\r\n    templateUrl: 'public/app/features/panellinks/module.html',\r\n    link: function() {},\r\n  };\r\n}\r\n\r\nexport class PanelLinksEditorCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, backendSrv) {\r\n    $scope.panel.links = $scope.panel.links || [];\r\n\r\n    $scope.addLink = function() {\r\n      $scope.panel.links.push({\r\n        type: 'dashboard',\r\n      });\r\n    };\r\n\r\n    $scope.searchDashboards = function(queryStr, callback) {\r\n      backendSrv.search({ query: queryStr }).then(function(hits) {\r\n        const dashboards = _.map(hits, function(dash) {\r\n          return dash.title;\r\n        });\r\n\r\n        callback(dashboards);\r\n      });\r\n    };\r\n\r\n    $scope.dashboardChanged = function(link) {\r\n      backendSrv.search({ query: link.dashboard }).then(function(hits) {\r\n        const dashboard = _.find(hits, { title: link.dashboard });\r\n        if (dashboard) {\r\n          if (dashboard.url) {\r\n            link.url = dashboard.url;\r\n          } else {\r\n            // To support legacy url's\r\n            link.dashUri = dashboard.uri;\r\n          }\r\n          link.title = dashboard.title;\r\n        }\r\n      });\r\n    };\r\n\r\n    $scope.deleteLink = function(link) {\r\n      $scope.panel.links = _.without($scope.panel.links, link);\r\n    };\r\n  }\r\n}\r\n\r\nangular\r\n  .module('grafana.directives')\r\n  .directive('panelLinksEditor', panelLinksEditor)\r\n  .controller('PanelLinksEditorCtrl', PanelLinksEditorCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport let iconMap = {\r\n  'external link': 'fa-external-link',\r\n  dashboard: 'fa-th-large',\r\n  question: 'fa-question',\r\n  info: 'fa-info',\r\n  bolt: 'fa-bolt',\r\n  doc: 'fa-file-text-o',\r\n  cloud: 'fa-cloud',\r\n};\r\n\r\nexport class DashLinkEditorCtrl {\r\n  dashboard: any;\r\n  iconMap: any;\r\n  mode: any;\r\n  link: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $rootScope) {\r\n    this.iconMap = iconMap;\r\n    this.dashboard.links = this.dashboard.links || [];\r\n    this.mode = 'list';\r\n\r\n    $scope.$on('$destroy', () => {\r\n      $rootScope.appEvent('dash-links-updated');\r\n    });\r\n  }\r\n\r\n  backToList() {\r\n    this.mode = 'list';\r\n  }\r\n\r\n  setupNew() {\r\n    this.mode = 'new';\r\n    this.link = { type: 'dashboards', icon: 'external link' };\r\n  }\r\n\r\n  addLink() {\r\n    this.dashboard.links.push(this.link);\r\n    this.mode = 'list';\r\n  }\r\n\r\n  editLink(link) {\r\n    this.link = link;\r\n    this.mode = 'edit';\r\n    console.log(this.link);\r\n  }\r\n\r\n  saveLink() {\r\n    this.backToList();\r\n  }\r\n\r\n  moveLink(index, dir) {\r\n    _.move(this.dashboard.links, index, index + dir);\r\n  }\r\n\r\n  deleteLink(index) {\r\n    this.dashboard.links.splice(index, 1);\r\n    this.dashboard.updateSubmenuVisibility();\r\n  }\r\n}\r\n\r\nfunction dashLinksEditor() {\r\n  return {\r\n    restrict: 'E',\r\n    controller: DashLinkEditorCtrl,\r\n    templateUrl: 'public/app/features/dashlinks/editor.html',\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dashboard: '=',\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('dashLinksEditor', dashLinksEditor);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { iconMap } from './editor';\r\n\r\nfunction dashLinksContainer() {\r\n  return {\r\n    scope: {\r\n      links: '=',\r\n    },\r\n    restrict: 'E',\r\n    controller: 'DashLinksContainerCtrl',\r\n    template: '<dash-link ng-repeat=\"link in generatedLinks\" link=\"link\"></dash-link>',\r\n    link: function() {},\r\n  };\r\n}\r\n\r\n/** @ngInject */\r\nfunction dashLink($compile, $sanitize, linkSrv) {\r\n  return {\r\n    restrict: 'E',\r\n    link: function(scope, elem) {\r\n      const link = scope.link;\r\n      let template =\r\n        '<div class=\"gf-form\">' +\r\n        '<a class=\"pointer gf-form-label\" data-placement=\"bottom\"' +\r\n        (link.asDropdown ? ' ng-click=\"fillDropdown(link)\" data-toggle=\"dropdown\"' : '') +\r\n        '>' +\r\n        '<i></i> <span></span></a>';\r\n\r\n      if (link.asDropdown) {\r\n        template +=\r\n          '<ul class=\"dropdown-menu\" role=\"menu\">' +\r\n          '<li ng-repeat=\"dash in link.searchHits\">' +\r\n          '<a href=\"{{dash.url}}\" target=\"{{dash.target}}\">{{dash.title}}</a>' +\r\n          '</li>' +\r\n          '</ul>';\r\n      }\r\n\r\n      template += '</div>';\r\n\r\n      elem.html(template);\r\n      $compile(elem.contents())(scope);\r\n\r\n      function update() {\r\n        const linkInfo = linkSrv.getAnchorInfo(link);\r\n\r\n        const anchor = elem.find('a');\r\n        const span = elem.find('span');\r\n        span.text(linkInfo.title);\r\n\r\n        if (!link.asDropdown) {\r\n          anchor.attr('href', linkInfo.href);\r\n          sanitizeAnchor();\r\n        }\r\n        anchor.attr('data-placement', 'bottom');\r\n        // tooltip\r\n        anchor.tooltip({\r\n          title: $sanitize(scope.link.tooltip),\r\n          html: true,\r\n          container: 'body',\r\n        });\r\n      }\r\n\r\n      function sanitizeAnchor() {\r\n        const anchor = elem.find('a');\r\n        const anchorSanitized = $sanitize(anchor.parent().html());\r\n        anchor.parent().html(anchorSanitized);\r\n      }\r\n\r\n      elem.find('i').attr('class', 'fa fa-fw ' + scope.link.icon);\r\n      elem.find('a').attr('target', scope.link.target);\r\n\r\n      // fix for menus on the far right\r\n      if (link.asDropdown && scope.$last) {\r\n        elem.find('.dropdown-menu').addClass('pull-right');\r\n      }\r\n\r\n      update();\r\n      scope.$on('refresh', update);\r\n    },\r\n  };\r\n}\r\n\r\nexport class DashLinksContainerCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $rootScope, $q, backendSrv, dashboardSrv, linkSrv) {\r\n    const currentDashId = dashboardSrv.getCurrent().id;\r\n\r\n    function buildLinks(linkDef) {\r\n      if (linkDef.type === 'dashboards') {\r\n        if (!linkDef.tags) {\r\n          console.log('Dashboard link missing tag');\r\n          return $q.when([]);\r\n        }\r\n\r\n        if (linkDef.asDropdown) {\r\n          return $q.when([\r\n            {\r\n              title: linkDef.title,\r\n              tags: linkDef.tags,\r\n              keepTime: linkDef.keepTime,\r\n              includeVars: linkDef.includeVars,\r\n              target: linkDef.targetBlank ? '_blank' : '_self',\r\n              icon: 'fa fa-bars',\r\n              asDropdown: true,\r\n            },\r\n          ]);\r\n        }\r\n\r\n        return $scope.searchDashboards(linkDef, 7);\r\n      }\r\n\r\n      if (linkDef.type === 'link') {\r\n        return $q.when([\r\n          {\r\n            url: linkDef.url,\r\n            title: linkDef.title,\r\n            icon: iconMap[linkDef.icon],\r\n            tooltip: linkDef.tooltip,\r\n            target: linkDef.targetBlank ? '_blank' : '_self',\r\n            keepTime: linkDef.keepTime,\r\n            includeVars: linkDef.includeVars,\r\n          },\r\n        ]);\r\n      }\r\n\r\n      return $q.when([]);\r\n    }\r\n\r\n    function updateDashLinks() {\r\n      const promises = _.map($scope.links, buildLinks);\r\n\r\n      $q.all(promises).then(function(results) {\r\n        $scope.generatedLinks = _.flatten(results);\r\n      });\r\n    }\r\n\r\n    $scope.searchDashboards = function(link, limit) {\r\n      return backendSrv.search({ tag: link.tags, limit: limit }).then(function(results) {\r\n        return _.reduce(\r\n          results,\r\n          function(memo, dash) {\r\n            // do not add current dashboard\r\n            if (dash.id !== currentDashId) {\r\n              memo.push({\r\n                title: dash.title,\r\n                url: dash.url,\r\n                target: link.target === '_self' ? '' : link.target,\r\n                icon: 'fa fa-th-large',\r\n                keepTime: link.keepTime,\r\n                includeVars: link.includeVars,\r\n              });\r\n            }\r\n            return memo;\r\n          },\r\n          []\r\n        );\r\n      });\r\n    };\r\n\r\n    $scope.fillDropdown = function(link) {\r\n      $scope.searchDashboards(link, 100).then(function(results) {\r\n        _.each(results, function(hit) {\r\n          hit.url = linkSrv.getLinkUrl(hit);\r\n        });\r\n        link.searchHits = results;\r\n      });\r\n    };\r\n\r\n    updateDashLinks();\r\n    $rootScope.onAppEvent('dash-links-updated', updateDashLinks, $scope);\r\n  }\r\n}\r\n\r\nangular.module('grafana.directives').directive('dashLinksContainer', dashLinksContainer);\r\nangular.module('grafana.directives').directive('dashLink', dashLink);\r\nangular.module('grafana.directives').controller('DashLinksContainerCtrl', DashLinksContainerCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nexport class AnnotationsEditorCtrl {\r\n  mode: any;\r\n  datasources: any;\r\n  annotations: any;\r\n  currentAnnotation: any;\r\n  currentDatasource: any;\r\n  currentIsNew: any;\r\n\r\n  annotationDefaults: any = {\r\n    name: '',\r\n    datasource: null,\r\n    iconColor: 'rgba(255, 96, 96, 1)',\r\n    enable: true,\r\n    showIn: 0,\r\n    hide: false,\r\n  };\r\n\r\n  showOptions: any = [{ text: 'All Panels', value: 0 }, { text: 'Specific Panels', value: 1 }];\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private datasourceSrv) {\r\n    $scope.ctrl = this;\r\n\r\n    this.mode = 'list';\r\n    this.datasources = datasourceSrv.getAnnotationSources();\r\n    this.annotations = $scope.dashboard.annotations.list;\r\n    this.reset();\r\n\r\n    this.onColorChange = this.onColorChange.bind(this);\r\n  }\r\n\r\n  datasourceChanged() {\r\n    return this.datasourceSrv.get(this.currentAnnotation.datasource).then(ds => {\r\n      this.currentDatasource = ds;\r\n    });\r\n  }\r\n\r\n  edit(annotation) {\r\n    this.currentAnnotation = annotation;\r\n    this.currentAnnotation.showIn = this.currentAnnotation.showIn || 0;\r\n    this.currentIsNew = false;\r\n    this.datasourceChanged();\r\n    this.mode = 'edit';\r\n    $('.tooltip.in').remove();\r\n  }\r\n\r\n  reset() {\r\n    this.currentAnnotation = angular.copy(this.annotationDefaults);\r\n    this.currentAnnotation.datasource = this.datasources[0].name;\r\n    this.currentIsNew = true;\r\n    this.datasourceChanged();\r\n  }\r\n\r\n  update() {\r\n    this.reset();\r\n    this.mode = 'list';\r\n  }\r\n\r\n  setupNew() {\r\n    this.mode = 'new';\r\n    this.reset();\r\n  }\r\n\r\n  backToList() {\r\n    this.mode = 'list';\r\n  }\r\n\r\n  move(index, dir) {\r\n    _.move(this.annotations, index, index + dir);\r\n  }\r\n\r\n  add() {\r\n    this.annotations.push(this.currentAnnotation);\r\n    this.reset();\r\n    this.mode = 'list';\r\n  }\r\n\r\n  removeAnnotation(annotation) {\r\n    const index = _.indexOf(this.annotations, annotation);\r\n    this.annotations.splice(index, 1);\r\n  }\r\n\r\n  onColorChange(newColor) {\r\n    this.currentAnnotation.iconColor = newColor;\r\n  }\r\n}\r\n\r\ncoreModule.controller('AnnotationsEditorCtrl', AnnotationsEditorCtrl);\r\n","import _ from 'lodash';\r\n\r\n/**\r\n * This function converts annotation events into set\r\n * of single events and regions (event consist of two)\r\n * @param annotations\r\n * @param options\r\n */\r\nexport function makeRegions(annotations, options) {\r\n  const [regionEvents, singleEvents] = _.partition(annotations, 'regionId');\r\n  const regions = getRegions(regionEvents, options.range);\r\n  annotations = _.concat(regions, singleEvents);\r\n  return annotations;\r\n}\r\n\r\nfunction getRegions(events, range) {\r\n  const regionEvents = _.filter(events, event => {\r\n    return event.regionId;\r\n  });\r\n  let regions = _.groupBy(regionEvents, 'regionId');\r\n  regions = _.compact(\r\n    _.map(regions, regionEvents => {\r\n      const regionObj = _.head(regionEvents);\r\n      if (regionEvents && regionEvents.length > 1) {\r\n        regionObj.timeEnd = regionEvents[1].time;\r\n        regionObj.isRegion = true;\r\n        return regionObj;\r\n      } else {\r\n        if (regionEvents && regionEvents.length) {\r\n          // Don't change proper region object\r\n          if (!regionObj.time || !regionObj.timeEnd) {\r\n            // This is cut region\r\n            if (isStartOfRegion(regionObj)) {\r\n              regionObj.timeEnd = range.to.valueOf() - 1;\r\n            } else {\r\n              // Start time = null\r\n              regionObj.timeEnd = regionObj.time;\r\n              regionObj.time = range.from.valueOf() + 1;\r\n            }\r\n            regionObj.isRegion = true;\r\n          }\r\n\r\n          return regionObj;\r\n        }\r\n      }\r\n    })\r\n  );\r\n\r\n  return regions;\r\n}\r\n\r\nfunction isStartOfRegion(event): boolean {\r\n  return event.id && event.id === event.regionId;\r\n}\r\n\r\nexport function dedupAnnotations(annotations) {\r\n  let dedup = [];\r\n\r\n  // Split events by annotationId property existence\r\n  const events = _.partition(annotations, 'id');\r\n\r\n  const eventsById = _.groupBy(events[0], 'id');\r\n  dedup = _.map(eventsById, eventGroup => {\r\n    if (eventGroup.length > 1 && !_.every(eventGroup, isPanelAlert)) {\r\n      // Get first non-panel alert\r\n      return _.find(eventGroup, event => {\r\n        return event.eventType !== 'panel-alert';\r\n      });\r\n    } else {\r\n      return _.head(eventGroup);\r\n    }\r\n  });\r\n\r\n  dedup = _.concat(dedup, events[1]);\r\n  return dedup;\r\n}\r\n\r\nfunction isPanelAlert(event) {\r\n  return event.eventType === 'panel-alert';\r\n}\r\n","import './editor_ctrl';\r\n\r\nimport angular from 'angular';\r\nimport _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport { makeRegions, dedupAnnotations } from './events_processing';\r\n\r\nexport class AnnotationsSrv {\r\n  globalAnnotationsPromise: any;\r\n  alertStatesPromise: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $rootScope, private $q, private datasourceSrv, private backendSrv, private timeSrv) {\r\n    $rootScope.onAppEvent('refresh', this.clearCache.bind(this), $rootScope);\r\n    $rootScope.onAppEvent('dashboard-initialized', this.clearCache.bind(this), $rootScope);\r\n  }\r\n\r\n  clearCache() {\r\n    this.globalAnnotationsPromise = null;\r\n    this.alertStatesPromise = null;\r\n  }\r\n\r\n  getAnnotations(options) {\r\n    return this.$q\r\n      .all([this.getGlobalAnnotations(options), this.getAlertStates(options)])\r\n      .then(results => {\r\n        // combine the annotations and flatten results\r\n        let annotations = _.flattenDeep(results[0]);\r\n\r\n        // filter out annotations that do not belong to requesting panel\r\n        annotations = _.filter(annotations, item => {\r\n          // if event has panel id and query is of type dashboard then panel and requesting panel id must match\r\n          if (item.panelId && item.source.type === 'dashboard') {\r\n            return item.panelId === options.panel.id;\r\n          }\r\n          return true;\r\n        });\r\n\r\n        annotations = dedupAnnotations(annotations);\r\n        annotations = makeRegions(annotations, options);\r\n\r\n        // look for alert state for this panel\r\n        const alertState = _.find(results[1], { panelId: options.panel.id });\r\n\r\n        return {\r\n          annotations: annotations,\r\n          alertState: alertState,\r\n        };\r\n      })\r\n      .catch(err => {\r\n        if (!err.message && err.data && err.data.message) {\r\n          err.message = err.data.message;\r\n        }\r\n        console.log('AnnotationSrv.query error', err);\r\n        this.$rootScope.appEvent('alert-error', ['Annotation Query Failed', err.message || err]);\r\n        return [];\r\n      });\r\n  }\r\n\r\n  getAlertStates(options) {\r\n    if (!options.dashboard.id) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    // ignore if no alerts\r\n    if (options.panel && !options.panel.alert) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    if (options.range.raw.to !== 'now') {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    if (this.alertStatesPromise) {\r\n      return this.alertStatesPromise;\r\n    }\r\n\r\n    this.alertStatesPromise = this.backendSrv.get('/api/alerts/states-for-dashboard', {\r\n      dashboardId: options.dashboard.id,\r\n    });\r\n    return this.alertStatesPromise;\r\n  }\r\n\r\n  getGlobalAnnotations(options) {\r\n    const dashboard = options.dashboard;\r\n\r\n    if (this.globalAnnotationsPromise) {\r\n      return this.globalAnnotationsPromise;\r\n    }\r\n\r\n    const range = this.timeSrv.timeRange();\r\n    const promises = [];\r\n\r\n    for (const annotation of dashboard.annotations.list) {\r\n      if (!annotation.enable) {\r\n        continue;\r\n      }\r\n\r\n      if (annotation.snapshotData) {\r\n        return this.translateQueryResult(annotation, annotation.snapshotData);\r\n      }\r\n\r\n      promises.push(\r\n        this.datasourceSrv\r\n          .get(annotation.datasource)\r\n          .then(datasource => {\r\n            // issue query against data source\r\n            return datasource.annotationQuery({\r\n              range: range,\r\n              rangeRaw: range.raw,\r\n              annotation: annotation,\r\n              dashboard: dashboard,\r\n            });\r\n          })\r\n          .then(results => {\r\n            // store response in annotation object if this is a snapshot call\r\n            if (dashboard.snapshot) {\r\n              annotation.snapshotData = angular.copy(results);\r\n            }\r\n            // translate result\r\n            return this.translateQueryResult(annotation, results);\r\n          })\r\n      );\r\n    }\r\n\r\n    this.globalAnnotationsPromise = this.$q.all(promises);\r\n    return this.globalAnnotationsPromise;\r\n  }\r\n\r\n  saveAnnotationEvent(annotation) {\r\n    this.globalAnnotationsPromise = null;\r\n    return this.backendSrv.post('/api/annotations', annotation);\r\n  }\r\n\r\n  updateAnnotationEvent(annotation) {\r\n    this.globalAnnotationsPromise = null;\r\n    return this.backendSrv.put(`/api/annotations/${annotation.id}`, annotation);\r\n  }\r\n\r\n  deleteAnnotationEvent(annotation) {\r\n    this.globalAnnotationsPromise = null;\r\n    let deleteUrl = `/api/annotations/${annotation.id}`;\r\n    if (annotation.isRegion) {\r\n      deleteUrl = `/api/annotations/region/${annotation.regionId}`;\r\n    }\r\n\r\n    return this.backendSrv.delete(deleteUrl);\r\n  }\r\n\r\n  translateQueryResult(annotation, results) {\r\n    // if annotation has snapshotData\r\n    // make clone and remove it\r\n    if (annotation.snapshotData) {\r\n      annotation = angular.copy(annotation);\r\n      delete annotation.snapshotData;\r\n    }\r\n\r\n    for (const item of results) {\r\n      item.source = annotation;\r\n    }\r\n    return results;\r\n  }\r\n}\r\n\r\ncoreModule.service('annotationsSrv', AnnotationsSrv);\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { coreModule } from 'app/core/core';\r\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport { AnnotationEvent } from './event';\r\n\r\nexport class EventEditorCtrl {\r\n  panelCtrl: MetricsPanelCtrl;\r\n  event: AnnotationEvent;\r\n  timeRange: { from: number; to: number };\r\n  form: any;\r\n  close: any;\r\n  timeFormated: string;\r\n\r\n  /** @ngInject */\r\n  constructor(private annotationsSrv) {\r\n    this.event.panelId = this.panelCtrl.panel.id;\r\n    this.event.dashboardId = this.panelCtrl.dashboard.id;\r\n\r\n    // Annotations query returns time as Unix timestamp in milliseconds\r\n    this.event.time = tryEpochToMoment(this.event.time);\r\n    if (this.event.isRegion) {\r\n      this.event.timeEnd = tryEpochToMoment(this.event.timeEnd);\r\n    }\r\n\r\n    this.timeFormated = this.panelCtrl.dashboard.formatDate(this.event.time);\r\n  }\r\n\r\n  save() {\r\n    if (!this.form.$valid) {\r\n      return;\r\n    }\r\n\r\n    const saveModel = _.cloneDeep(this.event);\r\n    saveModel.time = saveModel.time.valueOf();\r\n    saveModel.timeEnd = 0;\r\n\r\n    if (saveModel.isRegion) {\r\n      saveModel.timeEnd = this.event.timeEnd.valueOf();\r\n\r\n      if (saveModel.timeEnd < saveModel.time) {\r\n        console.log('invalid time');\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (saveModel.id) {\r\n      this.annotationsSrv\r\n        .updateAnnotationEvent(saveModel)\r\n        .then(() => {\r\n          this.panelCtrl.refresh();\r\n          this.close();\r\n        })\r\n        .catch(() => {\r\n          this.panelCtrl.refresh();\r\n          this.close();\r\n        });\r\n    } else {\r\n      this.annotationsSrv\r\n        .saveAnnotationEvent(saveModel)\r\n        .then(() => {\r\n          this.panelCtrl.refresh();\r\n          this.close();\r\n        })\r\n        .catch(() => {\r\n          this.panelCtrl.refresh();\r\n          this.close();\r\n        });\r\n    }\r\n  }\r\n\r\n  delete() {\r\n    return this.annotationsSrv\r\n      .deleteAnnotationEvent(this.event)\r\n      .then(() => {\r\n        this.panelCtrl.refresh();\r\n        this.close();\r\n      })\r\n      .catch(() => {\r\n        this.panelCtrl.refresh();\r\n        this.close();\r\n      });\r\n  }\r\n}\r\n\r\nfunction tryEpochToMoment(timestamp) {\r\n  if (timestamp && _.isNumber(timestamp)) {\r\n    const epoch = Number(timestamp);\r\n    return moment(epoch);\r\n  } else {\r\n    return timestamp;\r\n  }\r\n}\r\n\r\nexport function eventEditor() {\r\n  return {\r\n    restrict: 'E',\r\n    controller: EventEditorCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'public/app/features/annotations/partials/event_editor.html',\r\n    scope: {\r\n      panelCtrl: '=',\r\n      event: '=',\r\n      close: '&',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('eventEditor', eventEditor);\r\n","export class AnnotationEvent {\r\n  dashboardId: number;\r\n  panelId: number;\r\n  userId: number;\r\n  time: any;\r\n  timeEnd: any;\r\n  isRegion: boolean;\r\n  text: string;\r\n  type: string;\r\n  tags: string;\r\n}\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport tinycolor from 'tinycolor2';\r\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport { AnnotationEvent } from './event';\r\nimport {\r\n  OK_COLOR,\r\n  ALERTING_COLOR,\r\n  NO_DATA_COLOR,\r\n  DEFAULT_ANNOTATION_COLOR,\r\n  REGION_FILL_ALPHA,\r\n} from 'app/core/utils/colors';\r\n\r\nexport class EventManager {\r\n  event: AnnotationEvent;\r\n  editorOpen: boolean;\r\n\r\n  constructor(private panelCtrl: MetricsPanelCtrl) {}\r\n\r\n  editorClosed() {\r\n    this.event = null;\r\n    this.editorOpen = false;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  editorOpened() {\r\n    this.editorOpen = true;\r\n  }\r\n\r\n  updateTime(range) {\r\n    if (!this.event) {\r\n      this.event = new AnnotationEvent();\r\n      this.event.dashboardId = this.panelCtrl.dashboard.id;\r\n      this.event.panelId = this.panelCtrl.panel.id;\r\n    }\r\n\r\n    // update time\r\n    this.event.time = moment(range.from);\r\n    this.event.isRegion = false;\r\n    if (range.to) {\r\n      this.event.timeEnd = moment(range.to);\r\n      this.event.isRegion = true;\r\n    }\r\n\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  editEvent(event, elem?) {\r\n    this.event = event;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  addFlotEvents(annotations, flotOptions) {\r\n    if (!this.event && annotations.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const types = {\r\n      $__alerting: {\r\n        color: ALERTING_COLOR,\r\n        position: 'BOTTOM',\r\n        markerSize: 5,\r\n      },\r\n      $__ok: {\r\n        color: OK_COLOR,\r\n        position: 'BOTTOM',\r\n        markerSize: 5,\r\n      },\r\n      $__no_data: {\r\n        color: NO_DATA_COLOR,\r\n        position: 'BOTTOM',\r\n        markerSize: 5,\r\n      },\r\n      $__editing: {\r\n        color: DEFAULT_ANNOTATION_COLOR,\r\n        position: 'BOTTOM',\r\n        markerSize: 5,\r\n      },\r\n    };\r\n\r\n    if (this.event) {\r\n      if (this.event.isRegion) {\r\n        annotations = [\r\n          {\r\n            isRegion: true,\r\n            min: this.event.time.valueOf(),\r\n            timeEnd: this.event.timeEnd.valueOf(),\r\n            text: this.event.text,\r\n            eventType: '$__editing',\r\n            editModel: this.event,\r\n          },\r\n        ];\r\n      } else {\r\n        annotations = [\r\n          {\r\n            min: this.event.time.valueOf(),\r\n            text: this.event.text,\r\n            editModel: this.event,\r\n            eventType: '$__editing',\r\n          },\r\n        ];\r\n      }\r\n    } else {\r\n      // annotations from query\r\n      for (let i = 0; i < annotations.length; i++) {\r\n        const item = annotations[i];\r\n\r\n        // add properties used by jquery flot events\r\n        item.min = item.time;\r\n        item.max = item.time;\r\n        item.eventType = item.source.name;\r\n\r\n        if (item.newState) {\r\n          item.eventType = '$__' + item.newState;\r\n          continue;\r\n        }\r\n\r\n        if (!types[item.source.name]) {\r\n          types[item.source.name] = {\r\n            color: item.source.iconColor,\r\n            position: 'BOTTOM',\r\n            markerSize: 5,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    const regions = getRegions(annotations);\r\n    addRegionMarking(regions, flotOptions);\r\n\r\n    const eventSectionHeight = 20;\r\n    const eventSectionMargin = 7;\r\n    flotOptions.grid.eventSectionHeight = eventSectionMargin;\r\n    flotOptions.xaxis.eventSectionHeight = eventSectionHeight;\r\n\r\n    flotOptions.events = {\r\n      levels: _.keys(types).length + 1,\r\n      data: annotations,\r\n      types: types,\r\n      manager: this,\r\n    };\r\n  }\r\n}\r\n\r\nfunction getRegions(events) {\r\n  return _.filter(events, 'isRegion');\r\n}\r\n\r\nfunction addRegionMarking(regions, flotOptions) {\r\n  const markings = flotOptions.grid.markings;\r\n  const defaultColor = DEFAULT_ANNOTATION_COLOR;\r\n  let fillColor;\r\n\r\n  _.each(regions, region => {\r\n    if (region.source) {\r\n      fillColor = region.source.iconColor || defaultColor;\r\n    } else {\r\n      fillColor = defaultColor;\r\n    }\r\n\r\n    fillColor = addAlphaToRGB(fillColor, REGION_FILL_ALPHA);\r\n    markings.push({\r\n      xaxis: { from: region.min, to: region.timeEnd },\r\n      color: fillColor,\r\n    });\r\n  });\r\n}\r\n\r\nfunction addAlphaToRGB(colorString: string, alpha: number): string {\r\n  const color = tinycolor(colorString);\r\n  if (color.isValid()) {\r\n    color.setAlpha(alpha);\r\n    return color.toRgbString();\r\n  } else {\r\n    return colorString;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport coreModule from 'app/core/core_module';\r\nimport alertDef from '../alerting/alert_def';\r\n\r\n/** @ngInject */\r\nexport function annotationTooltipDirective($sanitize, dashboardSrv, contextSrv, $compile) {\r\n  function sanitizeString(str) {\r\n    try {\r\n      return $sanitize(str);\r\n    } catch (err) {\r\n      console.log('Could not sanitize annotation string, html escaping instead');\r\n      return _.escape(str);\r\n    }\r\n  }\r\n\r\n  return {\r\n    restrict: 'E',\r\n    scope: {\r\n      event: '=',\r\n      onEdit: '&',\r\n    },\r\n    link: function(scope, element) {\r\n      const event = scope.event;\r\n      let title = event.title;\r\n      let text = event.text;\r\n      const dashboard = dashboardSrv.getCurrent();\r\n\r\n      let tooltip = '<div class=\"graph-annotation\">';\r\n      let titleStateClass = '';\r\n\r\n      if (event.alertId) {\r\n        const stateModel = alertDef.getStateDisplayModel(event.newState);\r\n        titleStateClass = stateModel.stateClass;\r\n        title = `<i class=\"icon-gf ${stateModel.iconClass}\"></i> ${stateModel.text}`;\r\n        text = alertDef.getAlertAnnotationInfo(event);\r\n        if (event.text) {\r\n          text = text + '<br />' + event.text;\r\n        }\r\n      } else if (title) {\r\n        text = title + '<br />' + (_.isString(text) ? text : '');\r\n        title = '';\r\n      }\r\n\r\n      let header = `<div class=\"graph-annotation__header\">`;\r\n      if (event.login) {\r\n        header += `<div class=\"graph-annotation__user\" bs-tooltip=\"'Created by ${event.login}'\"><img src=\"${\r\n          event.avatarUrl\r\n        }\" /></div>`;\r\n      }\r\n      header += `\r\n          <span class=\"graph-annotation__title ${titleStateClass}\">${sanitizeString(title)}</span>\r\n          <span class=\"graph-annotation__time\">${dashboard.formatDate(event.min)}</span>\r\n      `;\r\n\r\n      // Show edit icon only for users with at least Editor role\r\n      if (event.id && dashboard.meta.canEdit) {\r\n        header += `\r\n          <span class=\"pointer graph-annotation__edit-icon\" ng-click=\"onEdit()\">\r\n            <i class=\"fa fa-pencil-square\"></i>\r\n          </span>\r\n        `;\r\n      }\r\n\r\n      header += `</div>`;\r\n      tooltip += header;\r\n      tooltip += '<div class=\"graph-annotation__body\">';\r\n\r\n      if (text) {\r\n        tooltip += '<div>' + sanitizeString(text.replace(/\\n/g, '<br>')) + '</div>';\r\n      }\r\n\r\n      const tags = event.tags;\r\n\r\n      if (tags && tags.length) {\r\n        scope.tags = tags;\r\n        tooltip +=\r\n          '<span class=\"label label-tag small\" ng-repeat=\"tag in tags\" tag-color-from-name=\"tag\">{{tag}}</span><br/>';\r\n      }\r\n\r\n      tooltip += '</div>';\r\n      tooltip += '</div>';\r\n\r\n      const $tooltip = $(tooltip);\r\n      $tooltip.appendTo(element);\r\n\r\n      $compile(element.contents())(scope);\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('annotationTooltip', annotationTooltipDirective);\r\n","import { AnnotationsSrv } from './annotations_srv';\r\nimport { eventEditor } from './event_editor';\r\nimport { EventManager } from './event_manager';\r\nimport { AnnotationEvent } from './event';\r\nimport { annotationTooltipDirective } from './annotation_tooltip';\r\n\r\nexport { AnnotationsSrv, eventEditor, EventManager, AnnotationEvent, annotationTooltipDirective };\r\n","import kbn from 'app/core/utils/kbn';\r\nimport { assignModelProperties } from 'app/core/utils/model_utils';\r\n\r\nexport interface Variable {\r\n  setValue(option);\r\n  updateOptions();\r\n  dependsOn(variable);\r\n  setValueFromUrl(urlValue);\r\n  getValueForUrl();\r\n  getSaveModel();\r\n}\r\n\r\nexport let variableTypes = {};\r\nexport { assignModelProperties };\r\n\r\nexport function containsVariable(...args: any[]) {\r\n  let variableName = args[args.length - 1];\r\n  let str = args[0] || '';\r\n\r\n  for (let i = 1; i < args.length - 1; i++) {\r\n    str += ' ' + args[i] || '';\r\n  }\r\n\r\n  variableName = kbn.regexEscape(variableName);\r\n  const findVarRegex = new RegExp('\\\\$(' + variableName + ')(?:\\\\W|$)|\\\\[\\\\[(' + variableName + ')\\\\]\\\\]', 'g');\r\n  const match = findVarRegex.exec(str);\r\n  return match !== null;\r\n}\r\n","import _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport { variableTypes } from './variable';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class VariableEditorCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, datasourceSrv, variableSrv, templateSrv) {\r\n    $scope.variableTypes = variableTypes;\r\n    $scope.ctrl = {};\r\n    $scope.namePattern = /^(?!__).*$/;\r\n    $scope._ = _;\r\n    $scope.optionsLimit = 20;\r\n\r\n    $scope.refreshOptions = [\r\n      { value: 0, text: 'Never' },\r\n      { value: 1, text: 'On Dashboard Load' },\r\n      { value: 2, text: 'On Time Range Change' },\r\n    ];\r\n\r\n    $scope.sortOptions = [\r\n      { value: 0, text: 'Disabled' },\r\n      { value: 1, text: 'Alphabetical (asc)' },\r\n      { value: 2, text: 'Alphabetical (desc)' },\r\n      { value: 3, text: 'Numerical (asc)' },\r\n      { value: 4, text: 'Numerical (desc)' },\r\n      { value: 5, text: 'Alphabetical (case-insensitive, asc)' },\r\n      { value: 6, text: 'Alphabetical (case-insensitive, desc)' },\r\n    ];\r\n\r\n    $scope.hideOptions = [{ value: 0, text: '' }, { value: 1, text: 'Label' }, { value: 2, text: 'Variable' }];\r\n\r\n    $scope.init = function() {\r\n      $scope.mode = 'list';\r\n\r\n      $scope.variables = variableSrv.variables;\r\n      $scope.reset();\r\n\r\n      $scope.$watch('mode', function(val) {\r\n        if (val === 'new') {\r\n          $scope.reset();\r\n        }\r\n      });\r\n    };\r\n\r\n    $scope.setMode = function(mode) {\r\n      $scope.mode = mode;\r\n    };\r\n\r\n    $scope.add = function() {\r\n      if ($scope.isValid()) {\r\n        variableSrv.addVariable($scope.current);\r\n        $scope.update();\r\n      }\r\n    };\r\n\r\n    $scope.isValid = function() {\r\n      if (!$scope.ctrl.form.$valid) {\r\n        return false;\r\n      }\r\n\r\n      if (!$scope.current.name.match(/^\\w+$/)) {\r\n        appEvents.emit('alert-warning', ['Validation', 'Only word and digit characters are allowed in variable names']);\r\n        return false;\r\n      }\r\n\r\n      const sameName = _.find($scope.variables, { name: $scope.current.name });\r\n      if (sameName && sameName !== $scope.current) {\r\n        appEvents.emit('alert-warning', ['Validation', 'Variable with the same name already exists']);\r\n        return false;\r\n      }\r\n\r\n      if (\r\n        $scope.current.type === 'query' &&\r\n        $scope.current.query.match(new RegExp('\\\\$' + $scope.current.name + '(/| |$)'))\r\n      ) {\r\n        appEvents.emit('alert-warning', [\r\n          'Validation',\r\n          'Query cannot contain a reference to itself. Variable: $' + $scope.current.name,\r\n        ]);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    };\r\n\r\n    $scope.validate = function() {\r\n      $scope.infoText = '';\r\n      if ($scope.current.type === 'adhoc' && $scope.current.datasource !== null) {\r\n        $scope.infoText = 'Adhoc filters are applied automatically to all queries that target this datasource';\r\n        datasourceSrv.get($scope.current.datasource).then(ds => {\r\n          if (!ds.getTagKeys) {\r\n            $scope.infoText = 'This datasource does not support adhoc filters yet.';\r\n          }\r\n        });\r\n      }\r\n    };\r\n\r\n    $scope.runQuery = function() {\r\n      $scope.optionsLimit = 20;\r\n      return variableSrv.updateOptions($scope.current).catch(err => {\r\n        if (err.data && err.data.message) {\r\n          err.message = err.data.message;\r\n        }\r\n        appEvents.emit('alert-error', ['Templating', 'Template variables could not be initialized: ' + err.message]);\r\n      });\r\n    };\r\n\r\n    $scope.edit = function(variable) {\r\n      $scope.current = variable;\r\n      $scope.currentIsNew = false;\r\n      $scope.mode = 'edit';\r\n      $scope.validate();\r\n    };\r\n\r\n    $scope.duplicate = function(variable) {\r\n      const clone = _.cloneDeep(variable.getSaveModel());\r\n      $scope.current = variableSrv.createVariableFromModel(clone);\r\n      $scope.current.name = 'copy_of_' + variable.name;\r\n      variableSrv.addVariable($scope.current);\r\n    };\r\n\r\n    $scope.update = function() {\r\n      if ($scope.isValid()) {\r\n        $scope.runQuery().then(function() {\r\n          $scope.reset();\r\n          $scope.mode = 'list';\r\n          templateSrv.updateTemplateData();\r\n        });\r\n      }\r\n    };\r\n\r\n    $scope.reset = function() {\r\n      $scope.currentIsNew = true;\r\n      $scope.current = variableSrv.createVariableFromModel({ type: 'query' });\r\n\r\n      // this is done here in case a new data source type variable was added\r\n      $scope.datasources = _.filter(datasourceSrv.getMetricSources(), function(ds) {\r\n        return !ds.meta.mixed && ds.value !== null;\r\n      });\r\n\r\n      $scope.datasourceTypes = _($scope.datasources)\r\n        .uniqBy('meta.id')\r\n        .map(function(ds) {\r\n          return { text: ds.meta.name, value: ds.meta.id };\r\n        })\r\n        .value();\r\n    };\r\n\r\n    $scope.typeChanged = function() {\r\n      const old = $scope.current;\r\n      $scope.current = variableSrv.createVariableFromModel({\r\n        type: $scope.current.type,\r\n      });\r\n      $scope.current.name = old.name;\r\n      $scope.current.hide = old.hide;\r\n      $scope.current.label = old.label;\r\n\r\n      const oldIndex = _.indexOf(this.variables, old);\r\n      if (oldIndex !== -1) {\r\n        this.variables[oldIndex] = $scope.current;\r\n      }\r\n\r\n      $scope.validate();\r\n    };\r\n\r\n    $scope.removeVariable = function(variable) {\r\n      variableSrv.removeVariable(variable);\r\n    };\r\n\r\n    $scope.showMoreOptions = function() {\r\n      $scope.optionsLimit += 20;\r\n    };\r\n  }\r\n}\r\n\r\ncoreModule.controller('VariableEditorCtrl', VariableEditorCtrl);\r\n","import kbn from 'app/core/utils/kbn';\r\nimport _ from 'lodash';\r\n\r\nfunction luceneEscape(value) {\r\n  return value.replace(/([\\!\\*\\+\\-\\=<>\\s\\&\\|\\(\\)\\[\\]\\{\\}\\^\\~\\?\\:\\\\/\"])/g, '\\\\$1');\r\n}\r\n\r\nexport class TemplateSrv {\r\n  variables: any[];\r\n\r\n  /*\r\n   * This regex matches 3 types of variable reference with an optional format specifier\r\n   * \\$(\\w+)                          $var1\r\n   * \\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]    [[var2]] or [[var2:fmt2]]\r\n   * \\${(\\w+)(?::(\\w+))?}             ${var3} or ${var3:fmt3}\r\n   */\r\n  private regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)(?::(\\w+))?\\]\\]|\\${(\\w+)(?::(\\w+))?}/g;\r\n  private index = {};\r\n  private grafanaVariables = {};\r\n  private builtIns = {};\r\n\r\n  constructor() {\r\n    this.builtIns['__interval'] = { text: '1s', value: '1s' };\r\n    this.builtIns['__interval_ms'] = { text: '100', value: '100' };\r\n  }\r\n\r\n  init(variables) {\r\n    this.variables = variables;\r\n    this.updateTemplateData();\r\n  }\r\n\r\n  updateTemplateData() {\r\n    this.index = {};\r\n\r\n    for (let i = 0; i < this.variables.length; i++) {\r\n      const variable = this.variables[i];\r\n\r\n      if (!variable.current || (!variable.current.isNone && !variable.current.value)) {\r\n        continue;\r\n      }\r\n\r\n      this.index[variable.name] = variable;\r\n    }\r\n  }\r\n\r\n  variableInitialized(variable) {\r\n    this.index[variable.name] = variable;\r\n  }\r\n\r\n  getAdhocFilters(datasourceName) {\r\n    let filters = [];\r\n\r\n    for (let i = 0; i < this.variables.length; i++) {\r\n      const variable = this.variables[i];\r\n      if (variable.type !== 'adhoc') {\r\n        continue;\r\n      }\r\n\r\n      if (variable.datasource === datasourceName) {\r\n        filters = filters.concat(variable.filters);\r\n      }\r\n\r\n      if (variable.datasource.indexOf('$') === 0) {\r\n        if (this.replace(variable.datasource) === datasourceName) {\r\n          filters = filters.concat(variable.filters);\r\n        }\r\n      }\r\n    }\r\n\r\n    return filters;\r\n  }\r\n\r\n  luceneFormat(value) {\r\n    if (typeof value === 'string') {\r\n      return luceneEscape(value);\r\n    }\r\n    if (value instanceof Array && value.length === 0) {\r\n      return '__empty__';\r\n    }\r\n    const quotedValues = _.map(value, function(val) {\r\n      return '\"' + luceneEscape(val) + '\"';\r\n    });\r\n    return '(' + quotedValues.join(' OR ') + ')';\r\n  }\r\n\r\n  formatValue(value, format, variable) {\r\n    // for some scopedVars there is no variable\r\n    variable = variable || {};\r\n\r\n    if (typeof format === 'function') {\r\n      return format(value, variable, this.formatValue);\r\n    }\r\n\r\n    switch (format) {\r\n      case 'regex': {\r\n        if (typeof value === 'string') {\r\n          return kbn.regexEscape(value);\r\n        }\r\n\r\n        const escapedValues = _.map(value, kbn.regexEscape);\r\n        if (escapedValues.length === 1) {\r\n          return escapedValues[0];\r\n        }\r\n        return '(' + escapedValues.join('|') + ')';\r\n      }\r\n      case 'lucene': {\r\n        return this.luceneFormat(value);\r\n      }\r\n      case 'pipe': {\r\n        if (typeof value === 'string') {\r\n          return value;\r\n        }\r\n        return value.join('|');\r\n      }\r\n      case 'distributed': {\r\n        if (typeof value === 'string') {\r\n          return value;\r\n        }\r\n        return this.distributeVariable(value, variable.name);\r\n      }\r\n      case 'csv': {\r\n        if (_.isArray(value)) {\r\n          return value.join(',');\r\n        }\r\n        return value;\r\n      }\r\n      default: {\r\n        if (_.isArray(value)) {\r\n          return '{' + value.join(',') + '}';\r\n        }\r\n        return value;\r\n      }\r\n    }\r\n  }\r\n\r\n  setGrafanaVariable(name, value) {\r\n    this.grafanaVariables[name] = value;\r\n  }\r\n\r\n  getVariableName(expression) {\r\n    this.regex.lastIndex = 0;\r\n    const match = this.regex.exec(expression);\r\n    if (!match) {\r\n      return null;\r\n    }\r\n    return match[1] || match[2];\r\n  }\r\n\r\n  variableExists(expression) {\r\n    const name = this.getVariableName(expression);\r\n    return name && this.index[name] !== void 0;\r\n  }\r\n\r\n  highlightVariablesAsHtml(str) {\r\n    if (!str || !_.isString(str)) {\r\n      return str;\r\n    }\r\n\r\n    str = _.escape(str);\r\n    this.regex.lastIndex = 0;\r\n    return str.replace(this.regex, (match, var1, var2, fmt2, var3) => {\r\n      if (this.index[var1 || var2 || var3] || this.builtIns[var1 || var2 || var3]) {\r\n        return '<span class=\"template-variable\">' + match + '</span>';\r\n      }\r\n      return match;\r\n    });\r\n  }\r\n\r\n  getAllValue(variable) {\r\n    if (variable.allValue) {\r\n      return variable.allValue;\r\n    }\r\n    const values = [];\r\n    for (let i = 1; i < variable.options.length; i++) {\r\n      values.push(variable.options[i].value);\r\n    }\r\n    return values;\r\n  }\r\n\r\n  replace(target, scopedVars?, format?) {\r\n    if (!target) {\r\n      return target;\r\n    }\r\n\r\n    let variable, systemValue, value, fmt;\r\n    this.regex.lastIndex = 0;\r\n\r\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3, fmt3) => {\r\n      variable = this.index[var1 || var2 || var3];\r\n      fmt = fmt2 || fmt3 || format;\r\n      if (scopedVars) {\r\n        value = scopedVars[var1 || var2 || var3];\r\n        if (value) {\r\n          return this.formatValue(value.value, fmt, variable);\r\n        }\r\n      }\r\n\r\n      if (!variable) {\r\n        return match;\r\n      }\r\n\r\n      systemValue = this.grafanaVariables[variable.current.value];\r\n      if (systemValue) {\r\n        return this.formatValue(systemValue, fmt, variable);\r\n      }\r\n\r\n      value = variable.current.value;\r\n      if (this.isAllValue(value)) {\r\n        value = this.getAllValue(variable);\r\n        // skip formatting of custom all values\r\n        if (variable.allValue) {\r\n          return this.replace(value);\r\n        }\r\n      }\r\n\r\n      const res = this.formatValue(value, fmt, variable);\r\n      return res;\r\n    });\r\n  }\r\n\r\n  isAllValue(value) {\r\n    return value === '$__all' || (Array.isArray(value) && value[0] === '$__all');\r\n  }\r\n\r\n  replaceWithText(target, scopedVars) {\r\n    if (!target) {\r\n      return target;\r\n    }\r\n\r\n    let variable;\r\n    this.regex.lastIndex = 0;\r\n\r\n    return target.replace(this.regex, (match, var1, var2, fmt2, var3) => {\r\n      if (scopedVars) {\r\n        const option = scopedVars[var1 || var2 || var3];\r\n        if (option) {\r\n          return option.text;\r\n        }\r\n      }\r\n\r\n      variable = this.index[var1 || var2 || var3];\r\n      if (!variable) {\r\n        return match;\r\n      }\r\n\r\n      return this.grafanaVariables[variable.current.value] || variable.current.text;\r\n    });\r\n  }\r\n\r\n  fillVariableValuesForUrl(params, scopedVars) {\r\n    _.each(this.variables, function(variable) {\r\n      if (scopedVars && scopedVars[variable.name] !== void 0) {\r\n        if (scopedVars[variable.name].skipUrlSync) {\r\n          return;\r\n        }\r\n        params['var-' + variable.name] = scopedVars[variable.name].value;\r\n      } else {\r\n        if (variable.skipUrlSync) {\r\n          return;\r\n        }\r\n        params['var-' + variable.name] = variable.getValueForUrl();\r\n      }\r\n    });\r\n  }\r\n\r\n  distributeVariable(value, variable) {\r\n    value = _.map(value, function(val, index) {\r\n      if (index !== 0) {\r\n        return variable + '=' + val;\r\n      } else {\r\n        return val;\r\n      }\r\n    });\r\n    return value.join(',');\r\n  }\r\n}\r\n\r\nexport default new TemplateSrv();\r\n","export class Edge {\r\n  inputNode: Node;\r\n  outputNode: Node;\r\n\r\n  _linkTo(node, direction) {\r\n    if (direction <= 0) {\r\n      node.inputEdges.push(this);\r\n    }\r\n\r\n    if (direction >= 0) {\r\n      node.outputEdges.push(this);\r\n    }\r\n\r\n    node.edges.push(this);\r\n  }\r\n\r\n  link(inputNode: Node, outputNode: Node) {\r\n    this.unlink();\r\n    this.inputNode = inputNode;\r\n    this.outputNode = outputNode;\r\n\r\n    this._linkTo(inputNode, 1);\r\n    this._linkTo(outputNode, -1);\r\n    return this;\r\n  }\r\n\r\n  unlink() {\r\n    let pos;\r\n    const inode = this.inputNode;\r\n    const onode = this.outputNode;\r\n\r\n    if (!(inode && onode)) {\r\n      return;\r\n    }\r\n\r\n    pos = inode.edges.indexOf(this);\r\n    if (pos > -1) {\r\n      inode.edges.splice(pos, 1);\r\n    }\r\n\r\n    pos = onode.edges.indexOf(this);\r\n    if (pos > -1) {\r\n      onode.edges.splice(pos, 1);\r\n    }\r\n\r\n    pos = inode.outputEdges.indexOf(this);\r\n    if (pos > -1) {\r\n      inode.outputEdges.splice(pos, 1);\r\n    }\r\n\r\n    pos = onode.inputEdges.indexOf(this);\r\n    if (pos > -1) {\r\n      onode.inputEdges.splice(pos, 1);\r\n    }\r\n\r\n    this.inputNode = null;\r\n    this.outputNode = null;\r\n  }\r\n}\r\n\r\nexport class Node {\r\n  name: string;\r\n  edges: Edge[];\r\n  inputEdges: Edge[];\r\n  outputEdges: Edge[];\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n    this.edges = [];\r\n    this.inputEdges = [];\r\n    this.outputEdges = [];\r\n  }\r\n\r\n  getEdgeFrom(from: string | Node): Edge {\r\n    if (!from) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof from === 'object') {\r\n      return this.inputEdges.find(e => e.inputNode.name === from.name);\r\n    }\r\n\r\n    return this.inputEdges.find(e => e.inputNode.name === from);\r\n  }\r\n\r\n  getEdgeTo(to: string | Node): Edge {\r\n    if (!to) {\r\n      return null;\r\n    }\r\n\r\n    if (typeof to === 'object') {\r\n      return this.outputEdges.find(e => e.outputNode.name === to.name);\r\n    }\r\n\r\n    return this.outputEdges.find(e => e.outputNode.name === to);\r\n  }\r\n\r\n  getOptimizedInputEdges(): Edge[] {\r\n    const toBeRemoved = [];\r\n    this.inputEdges.forEach(e => {\r\n      const inputEdgesNodes = e.inputNode.inputEdges.map(e => e.inputNode);\r\n\r\n      inputEdgesNodes.forEach(n => {\r\n        const edgeToRemove = n.getEdgeTo(this.name);\r\n        if (edgeToRemove) {\r\n          toBeRemoved.push(edgeToRemove);\r\n        }\r\n      });\r\n    });\r\n\r\n    return this.inputEdges.filter(e => toBeRemoved.indexOf(e) === -1);\r\n  }\r\n}\r\n\r\nexport class Graph {\r\n  nodes = {};\r\n\r\n  constructor() {}\r\n\r\n  createNode(name: string): Node {\r\n    const n = new Node(name);\r\n    this.nodes[name] = n;\r\n    return n;\r\n  }\r\n\r\n  createNodes(names: string[]): Node[] {\r\n    const nodes = [];\r\n    names.forEach(name => {\r\n      nodes.push(this.createNode(name));\r\n    });\r\n    return nodes;\r\n  }\r\n\r\n  link(input: string | string[] | Node | Node[], output: string | string[] | Node | Node[]): Edge[] {\r\n    let inputArr = [];\r\n    let outputArr = [];\r\n    const inputNodes = [];\r\n    const outputNodes = [];\r\n\r\n    if (input instanceof Array) {\r\n      inputArr = input;\r\n    } else {\r\n      inputArr = [input];\r\n    }\r\n\r\n    if (output instanceof Array) {\r\n      outputArr = output;\r\n    } else {\r\n      outputArr = [output];\r\n    }\r\n\r\n    for (let n = 0; n < inputArr.length; n++) {\r\n      const i = inputArr[n];\r\n      if (typeof i === 'string') {\r\n        inputNodes.push(this.getNode(i));\r\n      } else {\r\n        inputNodes.push(i);\r\n      }\r\n    }\r\n\r\n    for (let n = 0; n < outputArr.length; n++) {\r\n      const i = outputArr[n];\r\n      if (typeof i === 'string') {\r\n        outputNodes.push(this.getNode(i));\r\n      } else {\r\n        outputNodes.push(i);\r\n      }\r\n    }\r\n\r\n    const edges = [];\r\n    inputNodes.forEach(input => {\r\n      outputNodes.forEach(output => {\r\n        edges.push(this.createEdge().link(input, output));\r\n      });\r\n    });\r\n    return edges;\r\n  }\r\n\r\n  createEdge(): Edge {\r\n    return new Edge();\r\n  }\r\n\r\n  getNode(name: string): Node {\r\n    return this.nodes[name];\r\n  }\r\n}\r\n\r\nexport const printGraph = (g: Graph) => {\r\n  Object.keys(g.nodes).forEach(name => {\r\n    const n = g.nodes[name];\r\n    let outputEdges = n.outputEdges.map(e => e.outputNode.name).join(', ');\r\n    if (!outputEdges) {\r\n      outputEdges = '<none>';\r\n    }\r\n    let inputEdges = n.inputEdges.map(e => e.inputNode.name).join(', ');\r\n    if (!inputEdges) {\r\n      inputEdges = '<none>';\r\n    }\r\n    console.log(`${n.name}:\\n - links to:   ${outputEdges}\\n - links from: ${inputEdges}`);\r\n  });\r\n};\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport { variableTypes } from './variable';\r\nimport { Graph } from 'app/core/utils/dag';\r\n\r\nexport class VariableSrv {\r\n  dashboard: any;\r\n  variables: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $rootScope, private $q, private $location, private $injector, private templateSrv) {\r\n    // update time variant variables\r\n    $rootScope.$on('refresh', this.onDashboardRefresh.bind(this), $rootScope);\r\n    $rootScope.$on('template-variable-value-updated', this.updateUrlParamsWithCurrentVariables.bind(this), $rootScope);\r\n  }\r\n\r\n  init(dashboard) {\r\n    this.dashboard = dashboard;\r\n\r\n    // create working class models representing variables\r\n    this.variables = dashboard.templating.list = dashboard.templating.list.map(this.createVariableFromModel.bind(this));\r\n    this.templateSrv.init(this.variables);\r\n\r\n    // init variables\r\n    for (const variable of this.variables) {\r\n      variable.initLock = this.$q.defer();\r\n    }\r\n\r\n    const queryParams = this.$location.search();\r\n    return this.$q\r\n      .all(\r\n        this.variables.map(variable => {\r\n          return this.processVariable(variable, queryParams);\r\n        })\r\n      )\r\n      .then(() => {\r\n        this.templateSrv.updateTemplateData();\r\n      });\r\n  }\r\n\r\n  onDashboardRefresh(evt, payload) {\r\n    if (payload && payload.fromVariableValueUpdated) {\r\n      return Promise.resolve({});\r\n    }\r\n\r\n    const promises = this.variables.filter(variable => variable.refresh === 2).map(variable => {\r\n      const previousOptions = variable.options.slice();\r\n\r\n      return variable.updateOptions().then(() => {\r\n        if (angular.toJson(previousOptions) !== angular.toJson(variable.options)) {\r\n          this.$rootScope.$emit('template-variable-value-updated');\r\n        }\r\n      });\r\n    });\r\n\r\n    return this.$q.all(promises);\r\n  }\r\n\r\n  processVariable(variable, queryParams) {\r\n    const dependencies = [];\r\n\r\n    for (const otherVariable of this.variables) {\r\n      if (variable.dependsOn(otherVariable)) {\r\n        dependencies.push(otherVariable.initLock.promise);\r\n      }\r\n    }\r\n\r\n    return this.$q\r\n      .all(dependencies)\r\n      .then(() => {\r\n        const urlValue = queryParams['var-' + variable.name];\r\n        if (urlValue !== void 0) {\r\n          return variable.setValueFromUrl(urlValue).then(variable.initLock.resolve);\r\n        }\r\n\r\n        if (variable.refresh === 1 || variable.refresh === 2) {\r\n          return variable.updateOptions().then(variable.initLock.resolve);\r\n        }\r\n\r\n        variable.initLock.resolve();\r\n      })\r\n      .finally(() => {\r\n        this.templateSrv.variableInitialized(variable);\r\n        delete variable.initLock;\r\n      });\r\n  }\r\n\r\n  createVariableFromModel(model) {\r\n    const ctor = variableTypes[model.type].ctor;\r\n    if (!ctor) {\r\n      throw {\r\n        message: 'Unable to find variable constructor for ' + model.type,\r\n      };\r\n    }\r\n\r\n    const variable = this.$injector.instantiate(ctor, { model: model });\r\n    return variable;\r\n  }\r\n\r\n  addVariable(variable) {\r\n    this.variables.push(variable);\r\n    this.templateSrv.updateTemplateData();\r\n    this.dashboard.updateSubmenuVisibility();\r\n  }\r\n\r\n  removeVariable(variable) {\r\n    const index = _.indexOf(this.variables, variable);\r\n    this.variables.splice(index, 1);\r\n    this.templateSrv.updateTemplateData();\r\n    this.dashboard.updateSubmenuVisibility();\r\n  }\r\n\r\n  updateOptions(variable) {\r\n    return variable.updateOptions();\r\n  }\r\n\r\n  variableUpdated(variable, emitChangeEvents?) {\r\n    // if there is a variable lock ignore cascading update because we are in a boot up scenario\r\n    if (variable.initLock) {\r\n      return this.$q.when();\r\n    }\r\n\r\n    const g = this.createGraph();\r\n    const promises = g\r\n      .getNode(variable.name)\r\n      .getOptimizedInputEdges()\r\n      .map(e => {\r\n        return this.updateOptions(this.variables.find(v => v.name === e.inputNode.name));\r\n      });\r\n\r\n    return this.$q.all(promises).then(() => {\r\n      if (emitChangeEvents) {\r\n        this.$rootScope.$emit('template-variable-value-updated');\r\n        this.$rootScope.$broadcast('refresh', { fromVariableValueUpdated: true });\r\n      }\r\n    });\r\n  }\r\n\r\n  selectOptionsForCurrentValue(variable) {\r\n    let i, y, value, option;\r\n    const selected: any = [];\r\n\r\n    for (i = 0; i < variable.options.length; i++) {\r\n      option = variable.options[i];\r\n      option.selected = false;\r\n      if (_.isArray(variable.current.value)) {\r\n        for (y = 0; y < variable.current.value.length; y++) {\r\n          value = variable.current.value[y];\r\n          if (option.value === value) {\r\n            option.selected = true;\r\n            selected.push(option);\r\n          }\r\n        }\r\n      } else if (option.value === variable.current.value) {\r\n        option.selected = true;\r\n        selected.push(option);\r\n      }\r\n    }\r\n\r\n    return selected;\r\n  }\r\n\r\n  validateVariableSelectionState(variable) {\r\n    if (!variable.current) {\r\n      variable.current = {};\r\n    }\r\n\r\n    if (_.isArray(variable.current.value)) {\r\n      let selected = this.selectOptionsForCurrentValue(variable);\r\n\r\n      // if none pick first\r\n      if (selected.length === 0) {\r\n        selected = variable.options[0];\r\n      } else {\r\n        selected = {\r\n          value: _.map(selected, function(val) {\r\n            return val.value;\r\n          }),\r\n          text: _.map(selected, function(val) {\r\n            return val.text;\r\n          }).join(' + '),\r\n        };\r\n      }\r\n\r\n      return variable.setValue(selected);\r\n    } else {\r\n      const currentOption = _.find(variable.options, {\r\n        text: variable.current.text,\r\n      });\r\n      if (currentOption) {\r\n        return variable.setValue(currentOption);\r\n      } else {\r\n        if (!variable.options.length) {\r\n          return Promise.resolve();\r\n        }\r\n        return variable.setValue(variable.options[0]);\r\n      }\r\n    }\r\n  }\r\n\r\n  setOptionFromUrl(variable, urlValue) {\r\n    let promise = this.$q.when();\r\n\r\n    if (variable.refresh) {\r\n      promise = variable.updateOptions();\r\n    }\r\n\r\n    return promise.then(() => {\r\n      let option = _.find(variable.options, op => {\r\n        return op.text === urlValue || op.value === urlValue;\r\n      });\r\n\r\n      let defaultText = urlValue;\r\n      const defaultValue = urlValue;\r\n\r\n      if (!option && _.isArray(urlValue)) {\r\n        defaultText = [];\r\n\r\n        for (let n = 0; n < urlValue.length; n++) {\r\n          const t = _.find(variable.options, op => {\r\n            return op.value === urlValue[n];\r\n          });\r\n\r\n          if (t) {\r\n            defaultText.push(t.text);\r\n          }\r\n        }\r\n      }\r\n\r\n      option = option || { text: defaultText, value: defaultValue };\r\n      return variable.setValue(option);\r\n    });\r\n  }\r\n\r\n  setOptionAsCurrent(variable, option) {\r\n    variable.current = _.cloneDeep(option);\r\n\r\n    if (_.isArray(variable.current.text)) {\r\n      variable.current.text = variable.current.text.join(' + ');\r\n    }\r\n\r\n    this.selectOptionsForCurrentValue(variable);\r\n    return this.variableUpdated(variable);\r\n  }\r\n\r\n  updateUrlParamsWithCurrentVariables() {\r\n    // update url\r\n    const params = this.$location.search();\r\n\r\n    // remove variable params\r\n    _.each(params, function(value, key) {\r\n      if (key.indexOf('var-') === 0) {\r\n        delete params[key];\r\n      }\r\n    });\r\n\r\n    // add new values\r\n    this.templateSrv.fillVariableValuesForUrl(params);\r\n    // update url\r\n    this.$location.search(params);\r\n  }\r\n\r\n  setAdhocFilter(options) {\r\n    let variable = _.find(this.variables, {\r\n      type: 'adhoc',\r\n      datasource: options.datasource,\r\n    });\r\n    if (!variable) {\r\n      variable = this.createVariableFromModel({\r\n        name: 'Filters',\r\n        type: 'adhoc',\r\n        datasource: options.datasource,\r\n      });\r\n      this.addVariable(variable);\r\n    }\r\n\r\n    const filters = variable.filters;\r\n    let filter = _.find(filters, { key: options.key, value: options.value });\r\n\r\n    if (!filter) {\r\n      filter = { key: options.key, value: options.value };\r\n      filters.push(filter);\r\n    }\r\n\r\n    filter.operator = options.operator;\r\n    this.variableUpdated(variable, true);\r\n  }\r\n\r\n  createGraph() {\r\n    const g = new Graph();\r\n\r\n    this.variables.forEach(v1 => {\r\n      g.createNode(v1.name);\r\n\r\n      this.variables.forEach(v2 => {\r\n        if (v1 === v2) {\r\n          return;\r\n        }\r\n\r\n        if (v1.dependsOn(v2)) {\r\n          g.link(v1.name, v2.name);\r\n        }\r\n      });\r\n    });\r\n\r\n    return g;\r\n  }\r\n}\r\n\r\ncoreModule.service('variableSrv', VariableSrv);\r\n","import _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { Variable, assignModelProperties, variableTypes } from './variable';\r\n\r\nexport class IntervalVariable implements Variable {\r\n  name: string;\r\n  auto_count: number; // tslint:disable-line variable-name\r\n  auto_min: number; // tslint:disable-line variable-name\r\n  options: any;\r\n  auto: boolean;\r\n  query: string;\r\n  refresh: number;\r\n  current: any;\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'interval',\r\n    name: '',\r\n    hide: 0,\r\n    label: '',\r\n    refresh: 2,\r\n    options: [],\r\n    current: {},\r\n    query: '1m,10m,30m,1h,6h,12h,1d,7d,14d,30d',\r\n    auto: false,\r\n    auto_min: '10s',\r\n    auto_count: 30,\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model, private timeSrv, private templateSrv, private variableSrv) {\r\n    assignModelProperties(this, model, this.defaults);\r\n    this.refresh = 2;\r\n  }\r\n\r\n  getSaveModel() {\r\n    assignModelProperties(this.model, this, this.defaults);\r\n    return this.model;\r\n  }\r\n\r\n  setValue(option) {\r\n    this.updateAutoValue();\r\n    return this.variableSrv.setOptionAsCurrent(this, option);\r\n  }\r\n\r\n  updateAutoValue() {\r\n    if (!this.auto) {\r\n      return;\r\n    }\r\n\r\n    // add auto option if missing\r\n    if (this.options.length && this.options[0].text !== 'auto') {\r\n      this.options.unshift({\r\n        text: 'auto',\r\n        value: '$__auto_interval_' + this.name,\r\n      });\r\n    }\r\n\r\n    const res = kbn.calculateInterval(this.timeSrv.timeRange(), this.auto_count, this.auto_min);\r\n    this.templateSrv.setGrafanaVariable('$__auto_interval_' + this.name, res.interval);\r\n    // for backward compatibility, to be removed eventually\r\n    this.templateSrv.setGrafanaVariable('$__auto_interval', res.interval);\r\n  }\r\n\r\n  updateOptions() {\r\n    // extract options between quotes and/or comma\r\n    this.options = _.map(this.query.match(/([\"'])(.*?)\\1|\\w+/g), function(text) {\r\n      text = text.replace(/[\"']+/g, '');\r\n      return { text: text.trim(), value: text.trim() };\r\n    });\r\n\r\n    this.updateAutoValue();\r\n    return this.variableSrv.validateVariableSelectionState(this);\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    return false;\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    this.updateAutoValue();\r\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\r\n  }\r\n\r\n  getValueForUrl() {\r\n    return this.current.value;\r\n  }\r\n}\r\n\r\nvariableTypes['interval'] = {\r\n  name: 'Interval',\r\n  ctor: IntervalVariable,\r\n  description: 'Define a timespan interval (ex 1m, 1h, 1d)',\r\n};\r\n","import _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\r\n\r\nfunction getNoneOption() {\r\n  return { text: 'None', value: '', isNone: true };\r\n}\r\n\r\nexport class QueryVariable implements Variable {\r\n  datasource: any;\r\n  query: any;\r\n  regex: any;\r\n  sort: any;\r\n  options: any;\r\n  current: any;\r\n  refresh: number;\r\n  hide: number;\r\n  name: string;\r\n  multi: boolean;\r\n  includeAll: boolean;\r\n  useTags: boolean;\r\n  tagsQuery: string;\r\n  tagValuesQuery: string;\r\n  tags: any[];\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'query',\r\n    label: null,\r\n    query: '',\r\n    regex: '',\r\n    sort: 0,\r\n    datasource: null,\r\n    refresh: 0,\r\n    hide: 0,\r\n    name: '',\r\n    multi: false,\r\n    includeAll: false,\r\n    allValue: null,\r\n    options: [],\r\n    current: {},\r\n    tags: [],\r\n    useTags: false,\r\n    tagsQuery: '',\r\n    tagValuesQuery: '',\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model, private datasourceSrv, private templateSrv, private variableSrv, private timeSrv) {\r\n    // copy model properties to this instance\r\n    assignModelProperties(this, model, this.defaults);\r\n  }\r\n\r\n  getSaveModel() {\r\n    // copy back model properties to model\r\n    assignModelProperties(this.model, this, this.defaults);\r\n\r\n    // remove options\r\n    if (this.refresh !== 0) {\r\n      this.model.options = [];\r\n    }\r\n\r\n    return this.model;\r\n  }\r\n\r\n  setValue(option) {\r\n    return this.variableSrv.setOptionAsCurrent(this, option);\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\r\n  }\r\n\r\n  getValueForUrl() {\r\n    if (this.current.text === 'All') {\r\n      return 'All';\r\n    }\r\n    return this.current.value;\r\n  }\r\n\r\n  updateOptions() {\r\n    return this.datasourceSrv\r\n      .get(this.datasource)\r\n      .then(this.updateOptionsFromMetricFindQuery.bind(this))\r\n      .then(this.updateTags.bind(this))\r\n      .then(this.variableSrv.validateVariableSelectionState.bind(this.variableSrv, this));\r\n  }\r\n\r\n  updateTags(datasource) {\r\n    if (this.useTags) {\r\n      return this.metricFindQuery(datasource, this.tagsQuery).then(results => {\r\n        this.tags = [];\r\n        for (let i = 0; i < results.length; i++) {\r\n          this.tags.push(results[i].text);\r\n        }\r\n        return datasource;\r\n      });\r\n    } else {\r\n      delete this.tags;\r\n    }\r\n\r\n    return datasource;\r\n  }\r\n\r\n  getValuesForTag(tagKey) {\r\n    return this.datasourceSrv.get(this.datasource).then(datasource => {\r\n      const query = this.tagValuesQuery.replace('$tag', tagKey);\r\n      return this.metricFindQuery(datasource, query).then(function(results) {\r\n        return _.map(results, function(value) {\r\n          return value.text;\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  updateOptionsFromMetricFindQuery(datasource) {\r\n    return this.metricFindQuery(datasource, this.query).then(results => {\r\n      this.options = this.metricNamesToVariableValues(results);\r\n      if (this.includeAll) {\r\n        this.addAllOption();\r\n      }\r\n      if (!this.options.length) {\r\n        this.options.push(getNoneOption());\r\n      }\r\n      return datasource;\r\n    });\r\n  }\r\n\r\n  metricFindQuery(datasource, query) {\r\n    const options = { range: undefined, variable: this };\r\n\r\n    if (this.refresh === 2) {\r\n      options.range = this.timeSrv.timeRange();\r\n    }\r\n\r\n    return datasource.metricFindQuery(query, options);\r\n  }\r\n\r\n  addAllOption() {\r\n    this.options.unshift({ text: 'All', value: '$__all' });\r\n  }\r\n\r\n  metricNamesToVariableValues(metricNames) {\r\n    let regex, options, i, matches;\r\n    options = [];\r\n\r\n    if (this.regex) {\r\n      regex = kbn.stringToJsRegex(this.templateSrv.replace(this.regex, {}, 'regex'));\r\n    }\r\n    for (i = 0; i < metricNames.length; i++) {\r\n      const item = metricNames[i];\r\n      let text = item.text === undefined || item.text === null ? item.value : item.text;\r\n\r\n      let value = item.value === undefined || item.value === null ? item.text : item.value;\r\n\r\n      if (_.isNumber(value)) {\r\n        value = value.toString();\r\n      }\r\n\r\n      if (_.isNumber(text)) {\r\n        text = text.toString();\r\n      }\r\n\r\n      if (regex) {\r\n        matches = regex.exec(value);\r\n        if (!matches) {\r\n          continue;\r\n        }\r\n        if (matches.length > 1) {\r\n          value = matches[1];\r\n          text = matches[1];\r\n        }\r\n      }\r\n\r\n      options.push({ text: text, value: value });\r\n    }\r\n\r\n    options = _.uniqBy(options, 'value');\r\n    return this.sortVariableValues(options, this.sort);\r\n  }\r\n\r\n  sortVariableValues(options, sortOrder) {\r\n    if (sortOrder === 0) {\r\n      return options;\r\n    }\r\n\r\n    const sortType = Math.ceil(sortOrder / 2);\r\n    const reverseSort = sortOrder % 2 === 0;\r\n\r\n    if (sortType === 1) {\r\n      options = _.sortBy(options, 'text');\r\n    } else if (sortType === 2) {\r\n      options = _.sortBy(options, opt => {\r\n        const matches = opt.text.match(/.*?(\\d+).*/);\r\n        if (!matches || matches.length < 2) {\r\n          return -1;\r\n        } else {\r\n          return parseInt(matches[1], 10);\r\n        }\r\n      });\r\n    } else if (sortType === 3) {\r\n      options = _.sortBy(options, opt => {\r\n        return _.toLower(opt.text);\r\n      });\r\n    }\r\n\r\n    if (reverseSort) {\r\n      options = options.reverse();\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    return containsVariable(this.query, this.datasource, this.regex, variable.name);\r\n  }\r\n}\r\n\r\nvariableTypes['query'] = {\r\n  name: 'Query',\r\n  ctor: QueryVariable,\r\n  description: 'Variable values are fetched from a datasource query',\r\n  supportsMulti: true,\r\n};\r\n","import kbn from 'app/core/utils/kbn';\r\nimport { Variable, containsVariable, assignModelProperties, variableTypes } from './variable';\r\n\r\nexport class DatasourceVariable implements Variable {\r\n  regex: any;\r\n  query: string;\r\n  options: any;\r\n  current: any;\r\n  refresh: any;\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'datasource',\r\n    name: '',\r\n    hide: 0,\r\n    label: '',\r\n    current: {},\r\n    regex: '',\r\n    options: [],\r\n    query: '',\r\n    refresh: 1,\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model, private datasourceSrv, private variableSrv, private templateSrv) {\r\n    assignModelProperties(this, model, this.defaults);\r\n    this.refresh = 1;\r\n  }\r\n\r\n  getSaveModel() {\r\n    assignModelProperties(this.model, this, this.defaults);\r\n\r\n    // don't persist options\r\n    this.model.options = [];\r\n    return this.model;\r\n  }\r\n\r\n  setValue(option) {\r\n    return this.variableSrv.setOptionAsCurrent(this, option);\r\n  }\r\n\r\n  updateOptions() {\r\n    const options = [];\r\n    const sources = this.datasourceSrv.getMetricSources({ skipVariables: true });\r\n    let regex;\r\n\r\n    if (this.regex) {\r\n      regex = this.templateSrv.replace(this.regex, null, 'regex');\r\n      regex = kbn.stringToJsRegex(regex);\r\n    }\r\n\r\n    for (let i = 0; i < sources.length; i++) {\r\n      const source = sources[i];\r\n      // must match on type\r\n      if (source.meta.id !== this.query) {\r\n        continue;\r\n      }\r\n\r\n      if (regex && !regex.exec(source.name)) {\r\n        continue;\r\n      }\r\n\r\n      options.push({ text: source.name, value: source.name });\r\n    }\r\n\r\n    if (options.length === 0) {\r\n      options.push({ text: 'No data sources found', value: '' });\r\n    }\r\n\r\n    this.options = options;\r\n    return this.variableSrv.validateVariableSelectionState(this);\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    if (this.regex) {\r\n      return containsVariable(this.regex, variable.name);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\r\n  }\r\n\r\n  getValueForUrl() {\r\n    return this.current.value;\r\n  }\r\n}\r\n\r\nvariableTypes['datasource'] = {\r\n  name: 'Datasource',\r\n  ctor: DatasourceVariable,\r\n  description: 'Enabled you to dynamically switch the datasource for multiple panels',\r\n};\r\n","import _ from 'lodash';\r\nimport { Variable, assignModelProperties, variableTypes } from './variable';\r\n\r\nexport class CustomVariable implements Variable {\r\n  query: string;\r\n  options: any;\r\n  includeAll: boolean;\r\n  multi: boolean;\r\n  current: any;\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'custom',\r\n    name: '',\r\n    label: '',\r\n    hide: 0,\r\n    options: [],\r\n    current: {},\r\n    query: '',\r\n    includeAll: false,\r\n    multi: false,\r\n    allValue: null,\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model, private variableSrv) {\r\n    assignModelProperties(this, model, this.defaults);\r\n  }\r\n\r\n  setValue(option) {\r\n    return this.variableSrv.setOptionAsCurrent(this, option);\r\n  }\r\n\r\n  getSaveModel() {\r\n    assignModelProperties(this.model, this, this.defaults);\r\n    return this.model;\r\n  }\r\n\r\n  updateOptions() {\r\n    // extract options in comma separated string\r\n    this.options = _.map(this.query.split(/[,]+/), function(text) {\r\n      return { text: text.trim(), value: text.trim() };\r\n    });\r\n\r\n    if (this.includeAll) {\r\n      this.addAllOption();\r\n    }\r\n\r\n    return this.variableSrv.validateVariableSelectionState(this);\r\n  }\r\n\r\n  addAllOption() {\r\n    this.options.unshift({ text: 'All', value: '$__all' });\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    return false;\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\r\n  }\r\n\r\n  getValueForUrl() {\r\n    if (this.current.text === 'All') {\r\n      return 'All';\r\n    }\r\n    return this.current.value;\r\n  }\r\n}\r\n\r\nvariableTypes['custom'] = {\r\n  name: 'Custom',\r\n  ctor: CustomVariable,\r\n  description: 'Define variable values manually',\r\n  supportsMulti: true,\r\n};\r\n","import { Variable, assignModelProperties, variableTypes } from './variable';\r\n\r\nexport class ConstantVariable implements Variable {\r\n  query: string;\r\n  options: any[];\r\n  current: any;\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'constant',\r\n    name: '',\r\n    hide: 2,\r\n    label: '',\r\n    query: '',\r\n    current: {},\r\n    options: [],\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model, private variableSrv) {\r\n    assignModelProperties(this, model, this.defaults);\r\n  }\r\n\r\n  getSaveModel() {\r\n    assignModelProperties(this.model, this, this.defaults);\r\n    return this.model;\r\n  }\r\n\r\n  setValue(option) {\r\n    this.variableSrv.setOptionAsCurrent(this, option);\r\n  }\r\n\r\n  updateOptions() {\r\n    this.options = [{ text: this.query.trim(), value: this.query.trim() }];\r\n    this.setValue(this.options[0]);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    return false;\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    return this.variableSrv.setOptionFromUrl(this, urlValue);\r\n  }\r\n\r\n  getValueForUrl() {\r\n    return this.current.value;\r\n  }\r\n}\r\n\r\nvariableTypes['constant'] = {\r\n  name: 'Constant',\r\n  ctor: ConstantVariable,\r\n  description: 'Define a hidden constant variable, useful for metric prefixes in dashboards you want to share',\r\n};\r\n","import _ from 'lodash';\r\nimport { Variable, assignModelProperties, variableTypes } from './variable';\r\n\r\nexport class AdhocVariable implements Variable {\r\n  filters: any[];\r\n  skipUrlSync: boolean;\r\n\r\n  defaults = {\r\n    type: 'adhoc',\r\n    name: '',\r\n    label: '',\r\n    hide: 0,\r\n    datasource: null,\r\n    filters: [],\r\n    skipUrlSync: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private model) {\r\n    assignModelProperties(this, model, this.defaults);\r\n  }\r\n\r\n  setValue(option) {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  getSaveModel() {\r\n    assignModelProperties(this.model, this, this.defaults);\r\n    return this.model;\r\n  }\r\n\r\n  updateOptions() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  dependsOn(variable) {\r\n    return false;\r\n  }\r\n\r\n  setValueFromUrl(urlValue) {\r\n    if (!_.isArray(urlValue)) {\r\n      urlValue = [urlValue];\r\n    }\r\n\r\n    this.filters = urlValue.map(item => {\r\n      const values = item.split('|').map(value => {\r\n        return this.unescapeDelimiter(value);\r\n      });\r\n      return {\r\n        key: values[0],\r\n        operator: values[1],\r\n        value: values[2],\r\n      };\r\n    });\r\n\r\n    return Promise.resolve();\r\n  }\r\n\r\n  getValueForUrl() {\r\n    return this.filters.map(filter => {\r\n      return [filter.key, filter.operator, filter.value]\r\n        .map(value => {\r\n          return this.escapeDelimiter(value);\r\n        })\r\n        .join('|');\r\n    });\r\n  }\r\n\r\n  escapeDelimiter(value) {\r\n    return value.replace(/\\|/g, '__gfp__');\r\n  }\r\n\r\n  unescapeDelimiter(value) {\r\n    return value.replace(/__gfp__/g, '|');\r\n  }\r\n\r\n  setFilters(filters: any[]) {\r\n    this.filters = filters;\r\n  }\r\n}\r\n\r\nvariableTypes['adhoc'] = {\r\n  name: 'Ad hoc filters',\r\n  ctor: AdhocVariable,\r\n  description: 'Add key/value filters on the fly',\r\n};\r\n","import './editor_ctrl';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nimport templateSrv from './template_srv';\r\nimport { VariableSrv } from './variable_srv';\r\nimport { IntervalVariable } from './interval_variable';\r\nimport { QueryVariable } from './query_variable';\r\nimport { DatasourceVariable } from './datasource_variable';\r\nimport { CustomVariable } from './custom_variable';\r\nimport { ConstantVariable } from './constant_variable';\r\nimport { AdhocVariable } from './adhoc_variable';\r\n\r\ncoreModule.factory('templateSrv', function() {\r\n  return templateSrv;\r\n});\r\n\r\nexport {\r\n  VariableSrv,\r\n  IntervalVariable,\r\n  QueryVariable,\r\n  DatasourceVariable,\r\n  CustomVariable,\r\n  ConstantVariable,\r\n  AdhocVariable,\r\n};\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport Remarkable from 'remarkable';\r\n\r\nexport class PluginEditCtrl {\r\n  model: any;\r\n  pluginIcon: string;\r\n  pluginId: any;\r\n  includes: any;\r\n  readmeHtml: any;\r\n  includedDatasources: any;\r\n  tab: string;\r\n  navModel: any;\r\n  hasDashboards: any;\r\n  preUpdateHook: () => any;\r\n  postUpdateHook: () => any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private $rootScope, private backendSrv, private $sce, private $routeParams, navModelSrv) {\r\n    this.pluginId = $routeParams.pluginId;\r\n    this.preUpdateHook = () => Promise.resolve();\r\n    this.postUpdateHook = () => Promise.resolve();\r\n\r\n    this.init();\r\n  }\r\n\r\n  setNavModel(model) {\r\n    let defaultTab = 'readme';\r\n\r\n    this.navModel = {\r\n      main: {\r\n        img: model.info.logos.large,\r\n        subTitle: model.info.author.name,\r\n        url: '',\r\n        text: model.name,\r\n        breadcrumbs: [{ title: 'Plugins', url: 'plugins' }],\r\n        children: [\r\n          {\r\n            icon: 'fa fa-fw fa-file-text-o',\r\n            id: 'readme',\r\n            text: 'Readme',\r\n            url: `plugins/${this.model.id}/edit?tab=readme`,\r\n          },\r\n        ],\r\n      },\r\n    };\r\n\r\n    if (model.type === 'app') {\r\n      this.navModel.main.children.push({\r\n        icon: 'gicon gicon-cog',\r\n        id: 'config',\r\n        text: 'Config',\r\n        url: `plugins/${this.model.id}/edit?tab=config`,\r\n      });\r\n\r\n      const hasDashboards = _.find(model.includes, { type: 'dashboard' });\r\n\r\n      if (hasDashboards) {\r\n        this.navModel.main.children.push({\r\n          icon: 'gicon gicon-dashboard',\r\n          id: 'dashboards',\r\n          text: 'Dashboards',\r\n          url: `plugins/${this.model.id}/edit?tab=dashboards`,\r\n        });\r\n      }\r\n\r\n      defaultTab = 'config';\r\n    }\r\n\r\n    this.tab = this.$routeParams.tab || defaultTab;\r\n\r\n    for (const tab of this.navModel.main.children) {\r\n      if (tab.id === this.tab) {\r\n        tab.active = true;\r\n      }\r\n    }\r\n  }\r\n\r\n  init() {\r\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(result => {\r\n      this.model = result;\r\n      this.pluginIcon = this.getPluginIcon(this.model.type);\r\n\r\n      this.model.dependencies.plugins.forEach(plug => {\r\n        plug.icon = this.getPluginIcon(plug.type);\r\n      });\r\n\r\n      this.includes = _.map(result.includes, plug => {\r\n        plug.icon = this.getPluginIcon(plug.type);\r\n        return plug;\r\n      });\r\n\r\n      this.setNavModel(this.model);\r\n      return this.initReadme();\r\n    });\r\n  }\r\n\r\n  initReadme() {\r\n    return this.backendSrv.get(`/api/plugins/${this.pluginId}/markdown/readme`).then(res => {\r\n      const md = new Remarkable({\r\n        linkify: true,\r\n      });\r\n      this.readmeHtml = this.$sce.trustAsHtml(md.render(res));\r\n    });\r\n  }\r\n\r\n  getPluginIcon(type) {\r\n    switch (type) {\r\n      case 'datasource':\r\n        return 'icon-gf icon-gf-datasources';\r\n      case 'panel':\r\n        return 'icon-gf icon-gf-panel';\r\n      case 'app':\r\n        return 'icon-gf icon-gf-apps';\r\n      case 'page':\r\n        return 'icon-gf icon-gf-endpoint-tiny';\r\n      case 'dashboard':\r\n        return 'icon-gf icon-gf-dashboard';\r\n      default:\r\n        return 'icon-gf icon-gf-apps';\r\n    }\r\n  }\r\n\r\n  update() {\r\n    this.preUpdateHook()\r\n      .then(() => {\r\n        const updateCmd = _.extend(\r\n          {\r\n            enabled: this.model.enabled,\r\n            pinned: this.model.pinned,\r\n            jsonData: this.model.jsonData,\r\n            secureJsonData: this.model.secureJsonData,\r\n          },\r\n          {}\r\n        );\r\n        return this.backendSrv.post(`/api/plugins/${this.pluginId}/settings`, updateCmd);\r\n      })\r\n      .then(this.postUpdateHook)\r\n      .then(res => {\r\n        window.location.href = window.location.href;\r\n      });\r\n  }\r\n\r\n  importDashboards() {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  setPreUpdateHook(callback: () => any) {\r\n    this.preUpdateHook = callback;\r\n  }\r\n\r\n  setPostUpdateHook(callback: () => any) {\r\n    this.postUpdateHook = callback;\r\n  }\r\n\r\n  updateAvailable() {\r\n    const modalScope = this.$scope.$new(true);\r\n    modalScope.plugin = this.model;\r\n\r\n    this.$rootScope.appEvent('show-modal', {\r\n      src: 'public/app/features/plugins/partials/update_instructions.html',\r\n      scope: modalScope,\r\n    });\r\n  }\r\n\r\n  enable() {\r\n    this.model.enabled = true;\r\n    this.model.pinned = true;\r\n    this.update();\r\n  }\r\n\r\n  disable() {\r\n    this.model.enabled = false;\r\n    this.model.pinned = false;\r\n    this.update();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('PluginEditCtrl', PluginEditCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nconst pluginInfoCache = {};\r\n\r\nexport class AppPageCtrl {\r\n  page: any;\r\n  pluginId: any;\r\n  appModel: any;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $routeParams: any, private $rootScope, private navModelSrv) {\r\n    this.pluginId = $routeParams.pluginId;\r\n\r\n    if (pluginInfoCache[this.pluginId]) {\r\n      this.initPage(pluginInfoCache[this.pluginId]);\r\n    } else {\r\n      this.loadPluginInfo();\r\n    }\r\n  }\r\n\r\n  initPage(app) {\r\n    this.appModel = app;\r\n    this.page = _.find(app.includes, { slug: this.$routeParams.slug });\r\n\r\n    pluginInfoCache[this.pluginId] = app;\r\n\r\n    if (!this.page) {\r\n      this.$rootScope.appEvent('alert-error', ['App Page Not Found', '']);\r\n\r\n      this.navModel = this.navModelSrv.getNotFoundNav();\r\n      return;\r\n    }\r\n\r\n    const pluginNav = this.navModelSrv.getNav('plugin-page-' + app.id);\r\n\r\n    this.navModel = {\r\n      main: {\r\n        img: app.info.logos.large,\r\n        subTitle: app.name,\r\n        url: '',\r\n        text: this.page.name,\r\n        breadcrumbs: [{ title: app.name, url: pluginNav.main.url }],\r\n      },\r\n    };\r\n  }\r\n\r\n  loadPluginInfo() {\r\n    this.backendSrv.get(`/api/plugins/${this.pluginId}/settings`).then(app => {\r\n      this.initPage(app);\r\n    });\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('AppPageCtrl', AppPageCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class PluginListCtrl {\r\n  plugins: any[];\r\n  tabIndex: number;\r\n  navModel: any;\r\n  searchQuery: string;\r\n  allPlugins: any[];\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv: any, $location, navModelSrv) {\r\n    this.tabIndex = 0;\r\n    this.navModel = navModelSrv.getNav('cfg', 'plugins', 0);\r\n\r\n    this.backendSrv.get('api/plugins', { embedded: 0 }).then(plugins => {\r\n      this.plugins = plugins;\r\n      this.allPlugins = plugins;\r\n    });\r\n  }\r\n\r\n  onQueryUpdated() {\r\n    const regex = new RegExp(this.searchQuery, 'ig');\r\n    this.plugins = _.filter(this.allPlugins, item => {\r\n      return regex.test(item.name) || regex.test(item.type);\r\n    });\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('PluginListCtrl', PluginListCtrl);\r\n","import _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class DashImportListCtrl {\r\n  dashboards: any[];\r\n  plugin: any;\r\n  datasource: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private backendSrv, private $rootScope) {\r\n    this.dashboards = [];\r\n\r\n    backendSrv.get(`/api/plugins/${this.plugin.id}/dashboards`).then(dashboards => {\r\n      this.dashboards = dashboards;\r\n    });\r\n\r\n    appEvents.on('dashboard-list-import-all', this.importAll.bind(this), $scope);\r\n  }\r\n\r\n  importAll(payload) {\r\n    return this.importNext(0)\r\n      .then(() => {\r\n        payload.resolve('All dashboards imported');\r\n      })\r\n      .catch(err => {\r\n        payload.reject(err);\r\n      });\r\n  }\r\n\r\n  importNext(index) {\r\n    return this.import(this.dashboards[index], true).then(() => {\r\n      if (index + 1 < this.dashboards.length) {\r\n        return new Promise(resolve => {\r\n          setTimeout(() => {\r\n            this.importNext(index + 1).then(() => {\r\n              resolve();\r\n            });\r\n          }, 500);\r\n        });\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  import(dash, overwrite) {\r\n    const installCmd = {\r\n      pluginId: this.plugin.id,\r\n      path: dash.path,\r\n      overwrite: overwrite,\r\n      inputs: [],\r\n    };\r\n\r\n    if (this.datasource) {\r\n      installCmd.inputs.push({\r\n        name: '*',\r\n        type: 'datasource',\r\n        pluginId: this.datasource.type,\r\n        value: this.datasource.name,\r\n      });\r\n    }\r\n\r\n    return this.backendSrv.post(`/api/dashboards/import`, installCmd).then(res => {\r\n      this.$rootScope.appEvent('alert-success', ['Dashboard Imported', dash.title]);\r\n      _.extend(dash, res);\r\n    });\r\n  }\r\n\r\n  remove(dash) {\r\n    this.backendSrv.delete('/api/dashboards/' + dash.importedUri).then(() => {\r\n      this.$rootScope.appEvent('alert-success', ['Dashboard Deleted', dash.title]);\r\n      dash.imported = false;\r\n    });\r\n  }\r\n}\r\n\r\nexport function dashboardImportList() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/plugins/import_list/import_list.html',\r\n    controller: DashImportListCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      plugin: '=',\r\n      datasource: '=',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('dashboardImportList', dashboardImportList);\r\n","import _ from 'lodash';\r\nimport { toJS } from 'mobx';\r\nimport config from 'app/core/config';\r\nimport { coreModule, appEvents } from 'app/core/core';\r\nimport { store } from 'app/stores/store';\r\n\r\nlet datasourceTypes = [];\r\n\r\nconst defaults = {\r\n  name: '',\r\n  type: 'graphite',\r\n  url: '',\r\n  access: 'proxy',\r\n  jsonData: {},\r\n  secureJsonFields: {},\r\n  secureJsonData: {},\r\n};\r\n\r\nlet datasourceCreated = false;\r\n\r\nexport class DataSourceEditCtrl {\r\n  isNew: boolean;\r\n  datasources: any[];\r\n  current: any;\r\n  types: any;\r\n  testing: any;\r\n  datasourceMeta: any;\r\n  editForm: any;\r\n  gettingStarted: boolean;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $q, private backendSrv, private $routeParams, private $location, private datasourceSrv) {\r\n    if (store.nav.main === null) {\r\n      store.nav.load('cfg', 'datasources');\r\n    }\r\n\r\n    this.navModel = toJS(store.nav);\r\n    this.datasources = [];\r\n\r\n    this.loadDatasourceTypes().then(() => {\r\n      if (this.$routeParams.id) {\r\n        this.getDatasourceById(this.$routeParams.id);\r\n      } else {\r\n        this.initNewDatasourceModel();\r\n      }\r\n    });\r\n  }\r\n\r\n  initNewDatasourceModel() {\r\n    this.isNew = true;\r\n    this.current = _.cloneDeep(defaults);\r\n\r\n    // We are coming from getting started\r\n    if (this.$location.search().gettingstarted) {\r\n      this.gettingStarted = true;\r\n      this.current.isDefault = true;\r\n    }\r\n\r\n    this.typeChanged();\r\n  }\r\n\r\n  loadDatasourceTypes() {\r\n    if (datasourceTypes.length > 0) {\r\n      this.types = datasourceTypes;\r\n      return this.$q.when(null);\r\n    }\r\n\r\n    return this.backendSrv.get('/api/plugins', { enabled: 1, type: 'datasource' }).then(plugins => {\r\n      datasourceTypes = plugins;\r\n      this.types = plugins;\r\n    });\r\n  }\r\n\r\n  getDatasourceById(id) {\r\n    this.backendSrv.get('/api/datasources/' + id).then(ds => {\r\n      this.isNew = false;\r\n      this.current = ds;\r\n\r\n      if (datasourceCreated) {\r\n        datasourceCreated = false;\r\n        this.testDatasource();\r\n      }\r\n\r\n      return this.typeChanged();\r\n    });\r\n  }\r\n\r\n  userChangedType() {\r\n    // reset model but keep name & default flag\r\n    this.current = _.defaults(\r\n      {\r\n        id: this.current.id,\r\n        name: this.current.name,\r\n        isDefault: this.current.isDefault,\r\n        type: this.current.type,\r\n      },\r\n      _.cloneDeep(defaults)\r\n    );\r\n    this.typeChanged();\r\n  }\r\n\r\n  updateNav() {\r\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-settings');\r\n    this.navModel = toJS(store.nav);\r\n  }\r\n\r\n  typeChanged() {\r\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\r\n      this.datasourceMeta = pluginInfo;\r\n      this.updateNav();\r\n    });\r\n  }\r\n\r\n  updateFrontendSettings() {\r\n    return this.backendSrv.get('/api/frontend/settings').then(settings => {\r\n      config.datasources = settings.datasources;\r\n      config.defaultDatasource = settings.defaultDatasource;\r\n      this.datasourceSrv.init();\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    this.datasourceSrv.get(this.current.name).then(datasource => {\r\n      if (!datasource.testDatasource) {\r\n        return;\r\n      }\r\n\r\n      this.testing = { done: false, status: 'error' };\r\n\r\n      // make test call in no backend cache context\r\n      this.backendSrv\r\n        .withNoBackendCache(() => {\r\n          return datasource\r\n            .testDatasource()\r\n            .then(result => {\r\n              this.testing.message = result.message;\r\n              this.testing.status = result.status;\r\n            })\r\n            .catch(err => {\r\n              if (err.statusText) {\r\n                this.testing.message = 'HTTP Error ' + err.statusText;\r\n              } else {\r\n                this.testing.message = err.message;\r\n              }\r\n            });\r\n        })\r\n        .finally(() => {\r\n          this.testing.done = true;\r\n        });\r\n    });\r\n  }\r\n\r\n  saveChanges() {\r\n    if (!this.editForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    if (this.current.readOnly) {\r\n      return;\r\n    }\r\n\r\n    if (this.current.id) {\r\n      return this.backendSrv.put('/api/datasources/' + this.current.id, this.current).then(result => {\r\n        this.current = result.datasource;\r\n        this.updateNav();\r\n        this.updateFrontendSettings().then(() => {\r\n          this.testDatasource();\r\n        });\r\n      });\r\n    } else {\r\n      return this.backendSrv.post('/api/datasources', this.current).then(result => {\r\n        this.current = result.datasource;\r\n        this.updateFrontendSettings();\r\n\r\n        datasourceCreated = true;\r\n        this.$location.path('datasources/edit/' + result.id);\r\n      });\r\n    }\r\n  }\r\n\r\n  confirmDelete() {\r\n    this.backendSrv.delete('/api/datasources/' + this.current.id).then(() => {\r\n      this.$location.path('datasources');\r\n    });\r\n  }\r\n\r\n  delete(s) {\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete this datasource?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        this.confirmDelete();\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('DataSourceEditCtrl', DataSourceEditCtrl);\r\n\r\ncoreModule.directive('datasourceHttpSettings', function() {\r\n  return {\r\n    scope: {\r\n      current: '=',\r\n      suggestUrl: '@',\r\n      noDirectAccess: '@',\r\n    },\r\n    templateUrl: 'public/app/features/plugins/partials/ds_http_settings.html',\r\n    link: {\r\n      pre: function($scope, elem, attrs) {\r\n        // do not show access option if direct access is disabled\r\n        $scope.showAccessOption = $scope.noDirectAccess !== 'true';\r\n        $scope.showAccessHelp = false;\r\n        $scope.toggleAccessHelp = function() {\r\n          $scope.showAccessHelp = !$scope.showAccessHelp;\r\n        };\r\n\r\n        $scope.getSuggestUrls = function() {\r\n          return [$scope.suggestUrl];\r\n        };\r\n      },\r\n    },\r\n  };\r\n});\r\n","import { toJS } from 'mobx';\r\nimport { coreModule } from 'app/core/core';\r\nimport { store } from 'app/stores/store';\r\n\r\nexport class DataSourceDashboardsCtrl {\r\n  datasourceMeta: any;\r\n  navModel: any;\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $routeParams) {\r\n    if (store.nav.main === null) {\r\n      store.nav.load('cfg', 'datasources');\r\n    }\r\n\r\n    this.navModel = toJS(store.nav);\r\n\r\n    if (this.$routeParams.id) {\r\n      this.getDatasourceById(this.$routeParams.id);\r\n    }\r\n  }\r\n\r\n  getDatasourceById(id) {\r\n    this.backendSrv\r\n      .get('/api/datasources/' + id)\r\n      .then(ds => {\r\n        this.current = ds;\r\n      })\r\n      .then(this.getPluginInfo.bind(this));\r\n  }\r\n\r\n  updateNav() {\r\n    store.nav.initDatasourceEditNav(this.current, this.datasourceMeta, 'datasource-dashboards');\r\n    this.navModel = toJS(store.nav);\r\n  }\r\n\r\n  getPluginInfo() {\r\n    return this.backendSrv.get('/api/plugins/' + this.current.type + '/settings').then(pluginInfo => {\r\n      this.datasourceMeta = pluginInfo;\r\n      this.updateNav();\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('DataSourceDashboardsCtrl', DataSourceDashboardsCtrl);\r\n","import coreModule from '../../core/core_module';\r\nimport _ from 'lodash';\r\n\r\nexport class DataSourcesCtrl {\r\n  datasources: any;\r\n  unfiltered: any;\r\n  navModel: any;\r\n  searchQuery: string;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private backendSrv, private datasourceSrv, private navModelSrv) {\r\n    this.navModel = this.navModelSrv.getNav('cfg', 'datasources', 0);\r\n    backendSrv.get('/api/datasources').then(result => {\r\n      this.datasources = result;\r\n      this.unfiltered = result;\r\n    });\r\n  }\r\n\r\n  onQueryUpdated() {\r\n    const regex = new RegExp(this.searchQuery, 'ig');\r\n    this.datasources = _.filter(this.unfiltered, item => {\r\n      regex.lastIndex = 0;\r\n      return regex.test(item.name) || regex.test(item.type);\r\n    });\r\n  }\r\n\r\n  removeDataSourceConfirmed(ds) {\r\n    this.backendSrv\r\n      .delete('/api/datasources/' + ds.id)\r\n      .then(\r\n        () => {\r\n          this.$scope.appEvent('alert-success', ['Datasource deleted', '']);\r\n        },\r\n        () => {\r\n          this.$scope.appEvent('alert-error', ['Unable to delete datasource', '']);\r\n        }\r\n      )\r\n      .then(() => {\r\n        this.backendSrv.get('/api/datasources').then(result => {\r\n          this.datasources = result;\r\n        });\r\n        this.backendSrv.get('/api/frontend/settings').then(settings => {\r\n          this.datasourceSrv.init(settings.datasources);\r\n        });\r\n      });\r\n  }\r\n\r\n  removeDataSource(ds) {\r\n    this.$scope.appEvent('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete datasource ' + ds.name + '?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        this.removeDataSourceConfirmed(ds);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('DataSourcesCtrl', DataSourcesCtrl);\r\n","import config from 'app/core/config';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport { appEvents, profiler } from 'app/core/core';\r\nimport { PanelModel } from 'app/features/dashboard/panel_model';\r\nimport Remarkable from 'remarkable';\r\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, LS_PANEL_COPY_KEY } from 'app/core/constants';\r\nimport store from 'app/core/store';\r\n\r\nconst TITLE_HEIGHT = 27;\r\nconst PANEL_BORDER = 2;\r\n\r\nimport { Emitter } from 'app/core/core';\r\n\r\nexport class PanelCtrl {\r\n  panel: any;\r\n  error: any;\r\n  dashboard: any;\r\n  editorTabIndex: number;\r\n  pluginName: string;\r\n  pluginId: string;\r\n  editorTabs: any;\r\n  $scope: any;\r\n  $injector: any;\r\n  $location: any;\r\n  $timeout: any;\r\n  fullscreen: boolean;\r\n  inspector: any;\r\n  editModeInitiated: boolean;\r\n  editMode: any;\r\n  height: any;\r\n  containerHeight: any;\r\n  events: Emitter;\r\n  timing: any;\r\n  loading: boolean;\r\n\r\n  constructor($scope, $injector) {\r\n    this.$injector = $injector;\r\n    this.$location = $injector.get('$location');\r\n    this.$scope = $scope;\r\n    this.$timeout = $injector.get('$timeout');\r\n    this.editorTabIndex = 0;\r\n    this.events = this.panel.events;\r\n    this.timing = {};\r\n\r\n    const plugin = config.panels[this.panel.type];\r\n    if (plugin) {\r\n      this.pluginId = plugin.id;\r\n      this.pluginName = plugin.name;\r\n    }\r\n\r\n    $scope.$on('refresh', () => this.refresh());\r\n    $scope.$on('component-did-mount', () => this.panelDidMount());\r\n\r\n    $scope.$on('$destroy', () => {\r\n      this.events.emit('panel-teardown');\r\n      this.events.removeAllListeners();\r\n    });\r\n  }\r\n\r\n  init() {\r\n    this.events.emit('panel-initialized');\r\n    this.publishAppEvent('panel-initialized', { scope: this.$scope });\r\n  }\r\n\r\n  panelDidMount() {\r\n    this.events.emit('component-did-mount');\r\n  }\r\n\r\n  renderingCompleted() {\r\n    profiler.renderingCompleted(this.panel.id, this.timing);\r\n  }\r\n\r\n  refresh() {\r\n    this.events.emit('refresh', null);\r\n  }\r\n\r\n  publishAppEvent(evtName, evt) {\r\n    this.$scope.$root.appEvent(evtName, evt);\r\n  }\r\n\r\n  changeView(fullscreen, edit) {\r\n    this.publishAppEvent('panel-change-view', {\r\n      fullscreen: fullscreen,\r\n      edit: edit,\r\n      panelId: this.panel.id,\r\n    });\r\n  }\r\n\r\n  viewPanel() {\r\n    this.changeView(true, false);\r\n  }\r\n\r\n  editPanel() {\r\n    this.changeView(true, true);\r\n  }\r\n\r\n  exitFullscreen() {\r\n    this.changeView(false, false);\r\n  }\r\n\r\n  initEditMode() {\r\n    this.editorTabs = [];\r\n    this.addEditorTab('General', 'public/app/partials/panelgeneral.html');\r\n    this.editModeInitiated = true;\r\n    this.events.emit('init-edit-mode', null);\r\n\r\n    const urlTab = (this.$injector.get('$routeParams').tab || '').toLowerCase();\r\n    if (urlTab) {\r\n      this.editorTabs.forEach((tab, i) => {\r\n        if (tab.title.toLowerCase() === urlTab) {\r\n          this.editorTabIndex = i;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  changeTab(newIndex) {\r\n    this.editorTabIndex = newIndex;\r\n    const route = this.$injector.get('$route');\r\n    route.current.params.tab = this.editorTabs[newIndex].title.toLowerCase();\r\n    route.updateParams();\r\n  }\r\n\r\n  addEditorTab(title, directiveFn, index?) {\r\n    const editorTab = { title, directiveFn };\r\n\r\n    if (_.isString(directiveFn)) {\r\n      editorTab.directiveFn = function() {\r\n        return { templateUrl: directiveFn };\r\n      };\r\n    }\r\n    if (index) {\r\n      this.editorTabs.splice(index, 0, editorTab);\r\n    } else {\r\n      this.editorTabs.push(editorTab);\r\n    }\r\n  }\r\n\r\n  getMenu() {\r\n    const menu = [];\r\n    menu.push({\r\n      text: 'View',\r\n      click: 'ctrl.viewPanel();',\r\n      icon: 'fa fa-fw fa-eye',\r\n      shortcut: 'v',\r\n    });\r\n\r\n    if (this.dashboard.meta.canEdit) {\r\n      menu.push({\r\n        text: 'Edit',\r\n        click: 'ctrl.editPanel();',\r\n        role: 'Editor',\r\n        icon: 'fa fa-fw fa-edit',\r\n        shortcut: 'e',\r\n      });\r\n    }\r\n\r\n    menu.push({\r\n      text: 'Share',\r\n      click: 'ctrl.sharePanel();',\r\n      icon: 'fa fa-fw fa-share',\r\n      shortcut: 'p s',\r\n    });\r\n\r\n    // Additional items from sub-class\r\n    menu.push(...this.getAdditionalMenuItems());\r\n\r\n    const extendedMenu = this.getExtendedMenu();\r\n    menu.push({\r\n      text: 'More ...',\r\n      click: '',\r\n      icon: 'fa fa-fw fa-cube',\r\n      submenu: extendedMenu,\r\n    });\r\n\r\n    if (this.dashboard.meta.canEdit) {\r\n      menu.push({ divider: true, role: 'Editor' });\r\n      menu.push({\r\n        text: 'Remove',\r\n        click: 'ctrl.removePanel();',\r\n        role: 'Editor',\r\n        icon: 'fa fa-fw fa-trash',\r\n        shortcut: 'p r',\r\n      });\r\n    }\r\n\r\n    return menu;\r\n  }\r\n\r\n  getExtendedMenu() {\r\n    const menu = [];\r\n    if (!this.fullscreen && this.dashboard.meta.canEdit) {\r\n      menu.push({\r\n        text: 'Duplicate',\r\n        click: 'ctrl.duplicate()',\r\n        role: 'Editor',\r\n        shortcut: 'p d',\r\n      });\r\n\r\n      menu.push({\r\n        text: 'Copy',\r\n        click: 'ctrl.copyPanel()',\r\n        role: 'Editor',\r\n      });\r\n    }\r\n\r\n    menu.push({\r\n      text: 'Panel JSON',\r\n      click: 'ctrl.editPanelJson(); dismiss();',\r\n    });\r\n\r\n    this.events.emit('init-panel-actions', menu);\r\n    return menu;\r\n  }\r\n\r\n  // Override in sub-class to add items before extended menu\r\n  getAdditionalMenuItems() {\r\n    return [];\r\n  }\r\n\r\n  otherPanelInFullscreenMode() {\r\n    return this.dashboard.meta.fullscreen && !this.fullscreen;\r\n  }\r\n\r\n  calculatePanelHeight() {\r\n    if (this.fullscreen) {\r\n      const docHeight = $(window).height();\r\n      const editHeight = Math.floor(docHeight * 0.4);\r\n      const fullscreenHeight = Math.floor(docHeight * 0.8);\r\n      this.containerHeight = this.editMode ? editHeight : fullscreenHeight;\r\n    } else {\r\n      this.containerHeight = this.panel.gridPos.h * GRID_CELL_HEIGHT + (this.panel.gridPos.h - 1) * GRID_CELL_VMARGIN;\r\n    }\r\n\r\n    if (this.panel.soloMode) {\r\n      this.containerHeight = $(window).height();\r\n    }\r\n\r\n    this.height = this.containerHeight - (PANEL_BORDER + TITLE_HEIGHT);\r\n  }\r\n\r\n  render(payload?) {\r\n    this.timing.renderStart = new Date().getTime();\r\n    this.events.emit('render', payload);\r\n  }\r\n\r\n  duplicate() {\r\n    this.dashboard.duplicatePanel(this.panel);\r\n    this.$timeout(() => {\r\n      this.$scope.$root.$broadcast('render');\r\n    });\r\n  }\r\n\r\n  removePanel() {\r\n    this.publishAppEvent('panel-remove', {\r\n      panelId: this.panel.id,\r\n    });\r\n  }\r\n\r\n  editPanelJson() {\r\n    const editScope = this.$scope.$root.$new();\r\n    editScope.object = this.panel.getSaveModel();\r\n    editScope.updateHandler = this.replacePanel.bind(this);\r\n    editScope.enableCopy = true;\r\n\r\n    this.publishAppEvent('show-modal', {\r\n      src: 'public/app/partials/edit_json.html',\r\n      scope: editScope,\r\n    });\r\n  }\r\n\r\n  copyPanel() {\r\n    store.set(LS_PANEL_COPY_KEY, JSON.stringify(this.panel.getSaveModel()));\r\n    appEvents.emit('alert-success', ['Panel copied. Open Add Panel to paste']);\r\n  }\r\n\r\n  replacePanel(newPanel, oldPanel) {\r\n    const dashboard = this.dashboard;\r\n    const index = _.findIndex(dashboard.panels, panel => {\r\n      return panel.id === oldPanel.id;\r\n    });\r\n\r\n    const deletedPanel = dashboard.panels.splice(index, 1);\r\n    this.dashboard.events.emit('panel-removed', deletedPanel);\r\n\r\n    newPanel = new PanelModel(newPanel);\r\n    newPanel.id = oldPanel.id;\r\n\r\n    dashboard.panels.splice(index, 0, newPanel);\r\n    dashboard.sortPanelsByGridPos();\r\n    dashboard.events.emit('panel-added', newPanel);\r\n  }\r\n\r\n  sharePanel() {\r\n    const shareScope = this.$scope.$new();\r\n    shareScope.panel = this.panel;\r\n    shareScope.dashboard = this.dashboard;\r\n\r\n    this.publishAppEvent('show-modal', {\r\n      src: 'public/app/features/dashboard/partials/shareModal.html',\r\n      scope: shareScope,\r\n    });\r\n  }\r\n\r\n  getInfoMode() {\r\n    if (this.error) {\r\n      return 'error';\r\n    }\r\n    if (!!this.panel.description) {\r\n      return 'info';\r\n    }\r\n    if (this.panel.links && this.panel.links.length) {\r\n      return 'links';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  getInfoContent(options) {\r\n    let markdown = this.panel.description;\r\n\r\n    if (options.mode === 'tooltip') {\r\n      markdown = this.error || this.panel.description;\r\n    }\r\n\r\n    const linkSrv = this.$injector.get('linkSrv');\r\n    const sanitize = this.$injector.get('$sanitize');\r\n    const templateSrv = this.$injector.get('templateSrv');\r\n    const interpolatedMarkdown = templateSrv.replace(markdown, this.panel.scopedVars);\r\n    let html = '<div class=\"markdown-html\">';\r\n\r\n    html += new Remarkable().render(interpolatedMarkdown);\r\n\r\n    if (this.panel.links && this.panel.links.length > 0) {\r\n      html += '<ul>';\r\n      for (const link of this.panel.links) {\r\n        const info = linkSrv.getPanelLinkAnchorInfo(link, this.panel.scopedVars);\r\n        html +=\r\n          '<li><a class=\"panel-menu-link\" href=\"' +\r\n          info.href +\r\n          '\" target=\"' +\r\n          info.target +\r\n          '\">' +\r\n          info.title +\r\n          '</a></li>';\r\n      }\r\n      html += '</ul>';\r\n    }\r\n\r\n    html += '</div>';\r\n    return sanitize(html);\r\n  }\r\n\r\n  openInspector() {\r\n    const modalScope = this.$scope.$new();\r\n    modalScope.panel = this.panel;\r\n    modalScope.dashboard = this.dashboard;\r\n    modalScope.panelInfoHtml = this.getInfoContent({ mode: 'inspector' });\r\n\r\n    modalScope.inspector = $.extend(true, {}, this.inspector);\r\n    this.publishAppEvent('show-modal', {\r\n      src: 'public/app/features/dashboard/partials/inspector.html',\r\n      scope: modalScope,\r\n    });\r\n  }\r\n}\r\n","import { DashboardModel } from '../dashboard/dashboard_model';\r\nimport Remarkable from 'remarkable';\r\n\r\nexport class MetricsTabCtrl {\r\n  dsName: string;\r\n  panel: any;\r\n  panelCtrl: any;\r\n  datasources: any[];\r\n  datasourceInstance: any;\r\n  nextRefId: string;\r\n  dashboard: DashboardModel;\r\n  panelDsValue: any;\r\n  addQueryDropdown: any;\r\n  queryTroubleshooterOpen: boolean;\r\n  helpOpen: boolean;\r\n  optionsOpen: boolean;\r\n  hasQueryHelp: boolean;\r\n  helpHtml: string;\r\n  queryOptions: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private $sce, datasourceSrv, private backendSrv) {\r\n    this.panelCtrl = $scope.ctrl;\r\n    $scope.ctrl = this;\r\n\r\n    this.panel = this.panelCtrl.panel;\r\n    this.dashboard = this.panelCtrl.dashboard;\r\n    this.datasources = datasourceSrv.getMetricSources();\r\n    this.panelDsValue = this.panelCtrl.panel.datasource;\r\n\r\n    for (const ds of this.datasources) {\r\n      if (ds.value === this.panelDsValue) {\r\n        this.datasourceInstance = ds;\r\n      }\r\n    }\r\n\r\n    this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };\r\n\r\n    // update next ref id\r\n    this.panelCtrl.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\r\n    this.updateDatasourceOptions();\r\n  }\r\n\r\n  updateDatasourceOptions() {\r\n    if (this.datasourceInstance) {\r\n      this.hasQueryHelp = this.datasourceInstance.meta.hasQueryHelp;\r\n      this.queryOptions = this.datasourceInstance.meta.queryOptions;\r\n    }\r\n  }\r\n\r\n  getOptions(includeBuiltin) {\r\n    return Promise.resolve(\r\n      this.datasources\r\n        .filter(value => {\r\n          return includeBuiltin || !value.meta.builtIn;\r\n        })\r\n        .map(ds => {\r\n          return { value: ds.value, text: ds.name, datasource: ds };\r\n        })\r\n    );\r\n  }\r\n\r\n  datasourceChanged(option) {\r\n    if (!option) {\r\n      return;\r\n    }\r\n\r\n    this.datasourceInstance = option.datasource;\r\n    this.panelCtrl.setDatasource(option.datasource);\r\n    this.updateDatasourceOptions();\r\n  }\r\n\r\n  addMixedQuery(option) {\r\n    if (!option) {\r\n      return;\r\n    }\r\n\r\n    this.panelCtrl.addQuery({\r\n      isNew: true,\r\n      datasource: option.datasource.name,\r\n    });\r\n    this.addQueryDropdown = { text: 'Add Query', value: null, fake: true };\r\n  }\r\n\r\n  addQuery() {\r\n    this.panelCtrl.addQuery({ isNew: true });\r\n  }\r\n\r\n  toggleHelp() {\r\n    this.optionsOpen = false;\r\n    this.queryTroubleshooterOpen = false;\r\n    this.helpOpen = !this.helpOpen;\r\n\r\n    this.backendSrv.get(`/api/plugins/${this.datasourceInstance.meta.id}/markdown/query_help`).then(res => {\r\n      const md = new Remarkable();\r\n      this.helpHtml = this.$sce.trustAsHtml(md.render(res));\r\n    });\r\n  }\r\n\r\n  toggleOptions() {\r\n    this.helpOpen = false;\r\n    this.queryTroubleshooterOpen = false;\r\n    this.optionsOpen = !this.optionsOpen;\r\n  }\r\n\r\n  toggleQueryTroubleshooter() {\r\n    this.helpOpen = false;\r\n    this.optionsOpen = false;\r\n    this.queryTroubleshooterOpen = !this.queryTroubleshooterOpen;\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function metricsTabDirective() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/features/panel/partials/metrics_tab.html',\r\n    controller: MetricsTabCtrl,\r\n  };\r\n}\r\n","import $ from 'jquery';\r\nimport _ from 'lodash';\r\n\r\nimport config from 'app/core/config';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { PanelCtrl } from 'app/features/panel/panel_ctrl';\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport { encodePathComponent } from 'app/core/utils/location_util';\r\n\r\nimport { metricsTabDirective } from './metrics_tab';\r\n\r\nclass MetricsPanelCtrl extends PanelCtrl {\r\n  scope: any;\r\n  datasource: any;\r\n  datasourceName: any;\r\n  $q: any;\r\n  $timeout: any;\r\n  contextSrv: any;\r\n  datasourceSrv: any;\r\n  timeSrv: any;\r\n  templateSrv: any;\r\n  timing: any;\r\n  range: any;\r\n  interval: any;\r\n  intervalMs: any;\r\n  resolution: any;\r\n  timeInfo: any;\r\n  skipDataOnInit: boolean;\r\n  dataStream: any;\r\n  dataSubscription: any;\r\n  dataList: any;\r\n  nextRefId: string;\r\n\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    // make metrics tab the default\r\n    this.editorTabIndex = 1;\r\n    this.$q = $injector.get('$q');\r\n    this.contextSrv = $injector.get('contextSrv');\r\n    this.datasourceSrv = $injector.get('datasourceSrv');\r\n    this.timeSrv = $injector.get('timeSrv');\r\n    this.templateSrv = $injector.get('templateSrv');\r\n    this.scope = $scope;\r\n    this.panel.datasource = this.panel.datasource || null;\r\n\r\n    if (!this.panel.targets) {\r\n      this.panel.targets = [{}];\r\n    }\r\n\r\n    this.events.on('refresh', this.onMetricsPanelRefresh.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitMetricsPanelEditMode.bind(this));\r\n    this.events.on('panel-teardown', this.onPanelTearDown.bind(this));\r\n  }\r\n\r\n  private onPanelTearDown() {\r\n    if (this.dataSubscription) {\r\n      this.dataSubscription.unsubscribe();\r\n      this.dataSubscription = null;\r\n    }\r\n  }\r\n\r\n  private onInitMetricsPanelEditMode() {\r\n    this.addEditorTab('Metrics', metricsTabDirective);\r\n    this.addEditorTab('Time range', 'public/app/features/panel/partials/panelTime.html');\r\n  }\r\n\r\n  private onMetricsPanelRefresh() {\r\n    // ignore fetching data if another panel is in fullscreen\r\n    if (this.otherPanelInFullscreenMode()) {\r\n      return;\r\n    }\r\n\r\n    // if we have snapshot data use that\r\n    if (this.panel.snapshotData) {\r\n      this.updateTimeRange();\r\n      let data = this.panel.snapshotData;\r\n      // backward compatibility\r\n      if (!_.isArray(data)) {\r\n        data = data.data;\r\n      }\r\n\r\n      // Defer panel rendering till the next digest cycle.\r\n      // For some reason snapshot panels don't init at this time, so this helps to avoid rendering issues.\r\n      return this.$timeout(() => {\r\n        this.events.emit('data-snapshot-load', data);\r\n      });\r\n    }\r\n\r\n    // // ignore if we have data stream\r\n    if (this.dataStream) {\r\n      return;\r\n    }\r\n\r\n    // clear loading/error state\r\n    delete this.error;\r\n    this.loading = true;\r\n\r\n    // load datasource service\r\n    this.setTimeQueryStart();\r\n    this.datasourceSrv\r\n      .get(this.panel.datasource)\r\n      .then(this.updateTimeRange.bind(this))\r\n      .then(this.issueQueries.bind(this))\r\n      .then(this.handleQueryResult.bind(this))\r\n      .catch(err => {\r\n        // if cancelled  keep loading set to true\r\n        if (err.cancelled) {\r\n          console.log('Panel request cancelled', err);\r\n          return;\r\n        }\r\n\r\n        this.loading = false;\r\n        this.error = err.message || 'Request Error';\r\n        this.inspector = { error: err };\r\n\r\n        if (err.data) {\r\n          if (err.data.message) {\r\n            this.error = err.data.message;\r\n          }\r\n          if (err.data.error) {\r\n            this.error = err.data.error;\r\n          }\r\n        }\r\n\r\n        this.events.emit('data-error', err);\r\n        console.log('Panel data error:', err);\r\n      });\r\n  }\r\n\r\n  setTimeQueryStart() {\r\n    this.timing.queryStart = new Date().getTime();\r\n  }\r\n\r\n  setTimeQueryEnd() {\r\n    this.timing.queryEnd = new Date().getTime();\r\n  }\r\n\r\n  updateTimeRange(datasource?) {\r\n    this.datasource = datasource || this.datasource;\r\n    this.range = this.timeSrv.timeRange();\r\n\r\n    this.applyPanelTimeOverrides();\r\n\r\n    if (this.panel.maxDataPoints) {\r\n      this.resolution = this.panel.maxDataPoints;\r\n    } else {\r\n      this.resolution = Math.ceil($(window).width() * (this.panel.gridPos.w / 24));\r\n    }\r\n\r\n    this.calculateInterval();\r\n\r\n    return this.datasource;\r\n  }\r\n\r\n  calculateInterval() {\r\n    let intervalOverride = this.panel.interval;\r\n\r\n    // if no panel interval check datasource\r\n    if (intervalOverride) {\r\n      intervalOverride = this.templateSrv.replace(intervalOverride, this.panel.scopedVars);\r\n    } else if (this.datasource && this.datasource.interval) {\r\n      intervalOverride = this.datasource.interval;\r\n    }\r\n\r\n    const res = kbn.calculateInterval(this.range, this.resolution, intervalOverride);\r\n    this.interval = res.interval;\r\n    this.intervalMs = res.intervalMs;\r\n  }\r\n\r\n  applyPanelTimeOverrides() {\r\n    this.timeInfo = '';\r\n\r\n    // check panel time overrrides\r\n    if (this.panel.timeFrom) {\r\n      const timeFromInterpolated = this.templateSrv.replace(this.panel.timeFrom, this.panel.scopedVars);\r\n      const timeFromInfo = rangeUtil.describeTextRange(timeFromInterpolated);\r\n      if (timeFromInfo.invalid) {\r\n        this.timeInfo = 'invalid time override';\r\n        return;\r\n      }\r\n\r\n      if (_.isString(this.range.raw.from)) {\r\n        const timeFromDate = dateMath.parse(timeFromInfo.from);\r\n        this.timeInfo = timeFromInfo.display;\r\n        this.range.from = timeFromDate;\r\n        this.range.to = dateMath.parse(timeFromInfo.to);\r\n        this.range.raw.from = timeFromInfo.from;\r\n        this.range.raw.to = timeFromInfo.to;\r\n      }\r\n    }\r\n\r\n    if (this.panel.timeShift) {\r\n      const timeShiftInterpolated = this.templateSrv.replace(this.panel.timeShift, this.panel.scopedVars);\r\n      const timeShiftInfo = rangeUtil.describeTextRange(timeShiftInterpolated);\r\n      if (timeShiftInfo.invalid) {\r\n        this.timeInfo = 'invalid timeshift';\r\n        return;\r\n      }\r\n\r\n      const timeShift = '-' + timeShiftInterpolated;\r\n      this.timeInfo += ' timeshift ' + timeShift;\r\n      this.range.from = dateMath.parseDateMath(timeShift, this.range.from, false);\r\n      this.range.to = dateMath.parseDateMath(timeShift, this.range.to, true);\r\n      this.range.raw = { from: this.range.from, to: this.range.to };\r\n    }\r\n\r\n    if (this.panel.hideTimeOverride) {\r\n      this.timeInfo = '';\r\n    }\r\n  }\r\n\r\n  issueQueries(datasource) {\r\n    this.datasource = datasource;\r\n\r\n    if (!this.panel.targets || this.panel.targets.length === 0) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    // make shallow copy of scoped vars,\r\n    // and add built in variables interval and interval_ms\r\n    const scopedVars = Object.assign({}, this.panel.scopedVars, {\r\n      __interval: { text: this.interval, value: this.interval },\r\n      __interval_ms: { text: this.intervalMs, value: this.intervalMs },\r\n    });\r\n\r\n    const metricsQuery = {\r\n      timezone: this.dashboard.getTimezone(),\r\n      panelId: this.panel.id,\r\n      dashboardId: this.dashboard.id,\r\n      range: this.range,\r\n      rangeRaw: this.range.raw,\r\n      interval: this.interval,\r\n      intervalMs: this.intervalMs,\r\n      targets: this.panel.targets,\r\n      maxDataPoints: this.resolution,\r\n      scopedVars: scopedVars,\r\n      cacheTimeout: this.panel.cacheTimeout,\r\n    };\r\n\r\n    return datasource.query(metricsQuery);\r\n  }\r\n\r\n  handleQueryResult(result) {\r\n    this.setTimeQueryEnd();\r\n    this.loading = false;\r\n\r\n    // check for if data source returns subject\r\n    if (result && result.subscribe) {\r\n      this.handleDataStream(result);\r\n      return;\r\n    }\r\n\r\n    if (this.dashboard.snapshot) {\r\n      this.panel.snapshotData = result.data;\r\n    }\r\n\r\n    if (!result || !result.data) {\r\n      console.log('Data source query result invalid, missing data field:', result);\r\n      result = { data: [] };\r\n    }\r\n\r\n    this.events.emit('data-received', result.data);\r\n  }\r\n\r\n  handleDataStream(stream) {\r\n    // if we already have a connection\r\n    if (this.dataStream) {\r\n      console.log('two stream observables!');\r\n      return;\r\n    }\r\n\r\n    this.dataStream = stream;\r\n    this.dataSubscription = stream.subscribe({\r\n      next: data => {\r\n        console.log('dataSubject next!');\r\n        if (data.range) {\r\n          this.range = data.range;\r\n        }\r\n        this.events.emit('data-received', data.data);\r\n      },\r\n      error: error => {\r\n        this.events.emit('data-error', error);\r\n        console.log('panel: observer got error');\r\n      },\r\n      complete: () => {\r\n        console.log('panel: observer got complete');\r\n        this.dataStream = null;\r\n      },\r\n    });\r\n  }\r\n\r\n  setDatasource(datasource) {\r\n    // switching to mixed\r\n    if (datasource.meta.mixed) {\r\n      _.each(this.panel.targets, target => {\r\n        target.datasource = this.panel.datasource;\r\n        if (!target.datasource) {\r\n          target.datasource = config.defaultDatasource;\r\n        }\r\n      });\r\n    } else if (this.datasource && this.datasource.meta.mixed) {\r\n      _.each(this.panel.targets, target => {\r\n        delete target.datasource;\r\n      });\r\n    }\r\n\r\n    this.panel.datasource = datasource.value;\r\n    this.datasourceName = datasource.name;\r\n    this.datasource = null;\r\n    this.refresh();\r\n  }\r\n\r\n  getAdditionalMenuItems() {\r\n    const items = [];\r\n    if (config.exploreEnabled && this.contextSrv.isEditor && this.datasource && this.datasource.supportsExplore) {\r\n      items.push({\r\n        text: 'Explore',\r\n        click: 'ctrl.explore();',\r\n        icon: 'fa fa-fw fa-rocket',\r\n        shortcut: 'x',\r\n      });\r\n    }\r\n    return items;\r\n  }\r\n\r\n  explore() {\r\n    const range = this.timeSrv.timeRangeForUrl();\r\n    const state = {\r\n      ...this.datasource.getExploreState(this.panel),\r\n      range,\r\n    };\r\n    const exploreState = encodePathComponent(JSON.stringify(state));\r\n    this.$location.url(`/explore?state=${exploreState}`);\r\n  }\r\n\r\n  addQuery(target) {\r\n    target.refId = this.dashboard.getNextQueryLetter(this.panel);\r\n\r\n    this.panel.targets.push(target);\r\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\r\n  }\r\n\r\n  removeQuery(target) {\r\n    const index = _.indexOf(this.panel.targets, target);\r\n    this.panel.targets.splice(index, 1);\r\n    this.nextRefId = this.dashboard.getNextQueryLetter(this.panel);\r\n    this.refresh();\r\n  }\r\n\r\n  moveQuery(target, direction) {\r\n    const index = _.indexOf(this.panel.targets, target);\r\n    _.move(this.panel.targets, index, index + direction);\r\n  }\r\n}\r\n\r\nexport { MetricsPanelCtrl };\r\n","import _ from 'lodash';\r\n\r\nexport class QueryCtrl {\r\n  target: any;\r\n  datasource: any;\r\n  panelCtrl: any;\r\n  panel: any;\r\n  hasRawMode: boolean;\r\n  error: string;\r\n  isLastQuery: boolean;\r\n\r\n  constructor(public $scope, public $injector) {\r\n    this.panel = this.panelCtrl.panel;\r\n    this.isLastQuery = _.indexOf(this.panel.targets, this.target) === this.panel.targets.length - 1;\r\n  }\r\n\r\n  refresh() {\r\n    this.panelCtrl.refresh();\r\n  }\r\n}\r\n","export class ThresholdMapper {\r\n  static alertToGraphThresholds(panel) {\r\n    for (let i = 0; i < panel.alert.conditions.length; i++) {\r\n      const condition = panel.alert.conditions[i];\r\n      if (condition.type !== 'query') {\r\n        continue;\r\n      }\r\n\r\n      const evaluator = condition.evaluator;\r\n      const thresholds = (panel.thresholds = []);\r\n\r\n      switch (evaluator.type) {\r\n        case 'gt': {\r\n          const value = evaluator.params[0];\r\n          thresholds.push({ value: value, op: 'gt' });\r\n          break;\r\n        }\r\n        case 'lt': {\r\n          const value = evaluator.params[0];\r\n          thresholds.push({ value: value, op: 'lt' });\r\n          break;\r\n        }\r\n        case 'outside_range': {\r\n          const value1 = evaluator.params[0];\r\n          const value2 = evaluator.params[1];\r\n\r\n          if (value1 > value2) {\r\n            thresholds.push({ value: value1, op: 'gt' });\r\n            thresholds.push({ value: value2, op: 'lt' });\r\n          } else {\r\n            thresholds.push({ value: value1, op: 'lt' });\r\n            thresholds.push({ value: value2, op: 'gt' });\r\n          }\r\n\r\n          break;\r\n        }\r\n        case 'within_range': {\r\n          const value1 = evaluator.params[0];\r\n          const value2 = evaluator.params[1];\r\n\r\n          if (value1 > value2) {\r\n            thresholds.push({ value: value1, op: 'lt' });\r\n            thresholds.push({ value: value2, op: 'gt' });\r\n          } else {\r\n            thresholds.push({ value: value1, op: 'gt' });\r\n            thresholds.push({ value: value2, op: 'lt' });\r\n          }\r\n          break;\r\n        }\r\n      }\r\n      break;\r\n    }\r\n\r\n    for (const t of panel.thresholds) {\r\n      t.fill = true;\r\n      t.line = true;\r\n      t.colorMode = 'critical';\r\n    }\r\n\r\n    const updated = true;\r\n    return updated;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { ThresholdMapper } from './threshold_mapper';\r\nimport { QueryPart } from 'app/core/components/query_part/query_part';\r\nimport alertDef from './alert_def';\r\nimport config from 'app/core/config';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class AlertTabCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n  testing: boolean;\r\n  testResult: any;\r\n  subTabIndex: number;\r\n  conditionTypes: any;\r\n  alert: any;\r\n  conditionModels: any;\r\n  evalFunctions: any;\r\n  evalOperators: any;\r\n  noDataModes: any;\r\n  executionErrorModes: any;\r\n  addNotificationSegment;\r\n  notifications;\r\n  alertNotifications;\r\n  error: string;\r\n  appSubUrl: string;\r\n  alertHistory: any;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private $scope,\r\n    private backendSrv,\r\n    private dashboardSrv,\r\n    private uiSegmentSrv,\r\n    private $q,\r\n    private datasourceSrv\r\n  ) {\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.$scope.ctrl = this;\r\n    this.subTabIndex = 0;\r\n    this.evalFunctions = alertDef.evalFunctions;\r\n    this.evalOperators = alertDef.evalOperators;\r\n    this.conditionTypes = alertDef.conditionTypes;\r\n    this.noDataModes = alertDef.noDataModes;\r\n    this.executionErrorModes = alertDef.executionErrorModes;\r\n    this.appSubUrl = config.appSubUrl;\r\n  }\r\n\r\n  $onInit() {\r\n    this.addNotificationSegment = this.uiSegmentSrv.newPlusButton();\r\n\r\n    // subscribe to graph threshold handle changes\r\n    const thresholdChangedEventHandler = this.graphThresholdChanged.bind(this);\r\n    this.panelCtrl.events.on('threshold-changed', thresholdChangedEventHandler);\r\n\r\n    // set panel alert edit mode\r\n    this.$scope.$on('$destroy', () => {\r\n      this.panelCtrl.events.off('threshold-changed', thresholdChangedEventHandler);\r\n      this.panelCtrl.editingThresholds = false;\r\n      this.panelCtrl.render();\r\n    });\r\n\r\n    // build notification model\r\n    this.notifications = [];\r\n    this.alertNotifications = [];\r\n    this.alertHistory = [];\r\n\r\n    return this.backendSrv.get('/api/alert-notifications').then(res => {\r\n      this.notifications = res;\r\n\r\n      this.initModel();\r\n      this.validateModel();\r\n    });\r\n  }\r\n\r\n  getAlertHistory() {\r\n    this.backendSrv\r\n      .get(`/api/annotations?dashboardId=${this.panelCtrl.dashboard.id}&panelId=${this.panel.id}&limit=50&type=alert`)\r\n      .then(res => {\r\n        this.alertHistory = _.map(res, ah => {\r\n          ah.time = this.dashboardSrv.getCurrent().formatDate(ah.time, 'MMM D, YYYY HH:mm:ss');\r\n          ah.stateModel = alertDef.getStateDisplayModel(ah.newState);\r\n          ah.info = alertDef.getAlertAnnotationInfo(ah);\r\n          return ah;\r\n        });\r\n      });\r\n  }\r\n\r\n  getNotificationIcon(type): string {\r\n    switch (type) {\r\n      case 'email':\r\n        return 'fa fa-envelope';\r\n      case 'slack':\r\n        return 'fa fa-slack';\r\n      case 'victorops':\r\n        return 'fa fa-pagelines';\r\n      case 'webhook':\r\n        return 'fa fa-cubes';\r\n      case 'pagerduty':\r\n        return 'fa fa-bullhorn';\r\n      case 'opsgenie':\r\n        return 'fa fa-bell';\r\n      case 'hipchat':\r\n        return 'fa fa-mail-forward';\r\n      case 'pushover':\r\n        return 'fa fa-mobile';\r\n      case 'kafka':\r\n        return 'fa fa-random';\r\n      case 'teams':\r\n        return 'fa fa-windows';\r\n    }\r\n    return 'fa fa-bell';\r\n  }\r\n\r\n  getNotifications() {\r\n    return Promise.resolve(\r\n      this.notifications.map(item => {\r\n        return this.uiSegmentSrv.newSegment(item.name);\r\n      })\r\n    );\r\n  }\r\n\r\n  changeTabIndex(newTabIndex) {\r\n    this.subTabIndex = newTabIndex;\r\n\r\n    if (this.subTabIndex === 2) {\r\n      this.getAlertHistory();\r\n    }\r\n  }\r\n\r\n  notificationAdded() {\r\n    const model = _.find(this.notifications, {\r\n      name: this.addNotificationSegment.value,\r\n    });\r\n    if (!model) {\r\n      return;\r\n    }\r\n\r\n    this.alertNotifications.push({\r\n      name: model.name,\r\n      iconClass: this.getNotificationIcon(model.type),\r\n      isDefault: false,\r\n    });\r\n    this.alert.notifications.push({ id: model.id });\r\n\r\n    // reset plus button\r\n    this.addNotificationSegment.value = this.uiSegmentSrv.newPlusButton().value;\r\n    this.addNotificationSegment.html = this.uiSegmentSrv.newPlusButton().html;\r\n  }\r\n\r\n  removeNotification(index) {\r\n    this.alert.notifications.splice(index, 1);\r\n    this.alertNotifications.splice(index, 1);\r\n  }\r\n\r\n  initModel() {\r\n    const alert = (this.alert = this.panel.alert);\r\n    if (!alert) {\r\n      return;\r\n    }\r\n\r\n    alert.conditions = alert.conditions || [];\r\n    if (alert.conditions.length === 0) {\r\n      alert.conditions.push(this.buildDefaultCondition());\r\n    }\r\n\r\n    alert.noDataState = alert.noDataState || 'no_data';\r\n    alert.executionErrorState = alert.executionErrorState || 'alerting';\r\n    alert.frequency = alert.frequency || '60s';\r\n    alert.handler = alert.handler || 1;\r\n    alert.notifications = alert.notifications || [];\r\n\r\n    const defaultName = this.panel.title + ' alert';\r\n    alert.name = alert.name || defaultName;\r\n\r\n    this.conditionModels = _.reduce(\r\n      alert.conditions,\r\n      (memo, value) => {\r\n        memo.push(this.buildConditionModel(value));\r\n        return memo;\r\n      },\r\n      []\r\n    );\r\n\r\n    ThresholdMapper.alertToGraphThresholds(this.panel);\r\n\r\n    for (const addedNotification of alert.notifications) {\r\n      const model = _.find(this.notifications, { id: addedNotification.id });\r\n      if (model && model.isDefault === false) {\r\n        model.iconClass = this.getNotificationIcon(model.type);\r\n        this.alertNotifications.push(model);\r\n      }\r\n    }\r\n\r\n    for (const notification of this.notifications) {\r\n      if (notification.isDefault) {\r\n        notification.iconClass = this.getNotificationIcon(notification.type);\r\n        notification.bgColor = '#00678b';\r\n        this.alertNotifications.push(notification);\r\n      }\r\n    }\r\n\r\n    this.panelCtrl.editingThresholds = true;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  graphThresholdChanged(evt) {\r\n    for (const condition of this.alert.conditions) {\r\n      if (condition.type === 'query') {\r\n        condition.evaluator.params[evt.handleIndex] = evt.threshold.value;\r\n        this.evaluatorParamsChanged();\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  buildDefaultCondition() {\r\n    return {\r\n      type: 'query',\r\n      query: { params: ['A', '5m', 'now'] },\r\n      reducer: { type: 'avg', params: [] },\r\n      evaluator: { type: 'gt', params: [null] },\r\n      operator: { type: 'and' },\r\n    };\r\n  }\r\n\r\n  validateModel() {\r\n    if (!this.alert) {\r\n      return;\r\n    }\r\n\r\n    let firstTarget;\r\n    let foundTarget = null;\r\n\r\n    for (const condition of this.alert.conditions) {\r\n      if (condition.type !== 'query') {\r\n        continue;\r\n      }\r\n\r\n      for (const target of this.panel.targets) {\r\n        if (!firstTarget) {\r\n          firstTarget = target;\r\n        }\r\n        if (condition.query.params[0] === target.refId) {\r\n          foundTarget = target;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!foundTarget) {\r\n        if (firstTarget) {\r\n          condition.query.params[0] = firstTarget.refId;\r\n          foundTarget = firstTarget;\r\n        } else {\r\n          this.error = 'Could not find any metric queries';\r\n        }\r\n      }\r\n\r\n      const datasourceName = foundTarget.datasource || this.panel.datasource;\r\n      this.datasourceSrv.get(datasourceName).then(ds => {\r\n        if (!ds.meta.alerting) {\r\n          this.error = 'The datasource does not support alerting queries';\r\n        } else if (ds.targetContainsTemplate(foundTarget)) {\r\n          this.error = 'Template variables are not supported in alert queries';\r\n        } else {\r\n          this.error = '';\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  buildConditionModel(source) {\r\n    const cm: any = { source: source, type: source.type };\r\n\r\n    cm.queryPart = new QueryPart(source.query, alertDef.alertQueryDef);\r\n    cm.reducerPart = alertDef.createReducerPart(source.reducer);\r\n    cm.evaluator = source.evaluator;\r\n    cm.operator = source.operator;\r\n\r\n    return cm;\r\n  }\r\n\r\n  handleQueryPartEvent(conditionModel, evt) {\r\n    switch (evt.name) {\r\n      case 'action-remove-part': {\r\n        break;\r\n      }\r\n      case 'get-part-actions': {\r\n        return this.$q.when([]);\r\n      }\r\n      case 'part-param-changed': {\r\n        this.validateModel();\r\n      }\r\n      case 'get-param-options': {\r\n        const result = this.panel.targets.map(target => {\r\n          return this.uiSegmentSrv.newSegment({ value: target.refId });\r\n        });\r\n\r\n        return this.$q.when(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleReducerPartEvent(conditionModel, evt) {\r\n    switch (evt.name) {\r\n      case 'action': {\r\n        conditionModel.source.reducer.type = evt.action.value;\r\n        conditionModel.reducerPart = alertDef.createReducerPart(conditionModel.source.reducer);\r\n        break;\r\n      }\r\n      case 'get-part-actions': {\r\n        const result = [];\r\n        for (const type of alertDef.reducerTypes) {\r\n          if (type.value !== conditionModel.source.reducer.type) {\r\n            result.push(type);\r\n          }\r\n        }\r\n        return this.$q.when(result);\r\n      }\r\n    }\r\n  }\r\n\r\n  addCondition(type) {\r\n    const condition = this.buildDefaultCondition();\r\n    // add to persited model\r\n    this.alert.conditions.push(condition);\r\n    // add to view model\r\n    this.conditionModels.push(this.buildConditionModel(condition));\r\n  }\r\n\r\n  removeCondition(index) {\r\n    this.alert.conditions.splice(index, 1);\r\n    this.conditionModels.splice(index, 1);\r\n  }\r\n\r\n  delete() {\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete Alert',\r\n      text: 'Are you sure you want to delete this alert rule?',\r\n      text2: 'You need to save dashboard for the delete to take effect',\r\n      icon: 'fa-trash',\r\n      yesText: 'Delete',\r\n      onConfirm: () => {\r\n        delete this.panel.alert;\r\n        this.alert = null;\r\n        this.panel.thresholds = [];\r\n        this.conditionModels = [];\r\n        this.panelCtrl.alertState = null;\r\n        this.panelCtrl.render();\r\n      },\r\n    });\r\n  }\r\n\r\n  enable() {\r\n    this.panel.alert = {};\r\n    this.initModel();\r\n  }\r\n\r\n  evaluatorParamsChanged() {\r\n    ThresholdMapper.alertToGraphThresholds(this.panel);\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  evaluatorTypeChanged(evaluator) {\r\n    // ensure params array is correct length\r\n    switch (evaluator.type) {\r\n      case 'lt':\r\n      case 'gt': {\r\n        evaluator.params = [evaluator.params[0]];\r\n        break;\r\n      }\r\n      case 'within_range':\r\n      case 'outside_range': {\r\n        evaluator.params = [evaluator.params[0], evaluator.params[1]];\r\n        break;\r\n      }\r\n      case 'no_value': {\r\n        evaluator.params = [];\r\n      }\r\n    }\r\n\r\n    this.evaluatorParamsChanged();\r\n  }\r\n\r\n  clearHistory() {\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete Alert History',\r\n      text: 'Are you sure you want to remove all history & annotations for this alert?',\r\n      icon: 'fa-trash',\r\n      yesText: 'Yes',\r\n      onConfirm: () => {\r\n        this.backendSrv\r\n          .post('/api/annotations/mass-delete', {\r\n            dashboardId: this.panelCtrl.dashboard.id,\r\n            panelId: this.panel.id,\r\n          })\r\n          .then(res => {\r\n            this.alertHistory = [];\r\n            this.panelCtrl.refresh();\r\n          });\r\n      },\r\n    });\r\n  }\r\n\r\n  test() {\r\n    this.testing = true;\r\n    this.testResult = false;\r\n\r\n    const payload = {\r\n      dashboard: this.dashboardSrv.getCurrent().getSaveModelClone(),\r\n      panelId: this.panelCtrl.panel.id,\r\n    };\r\n\r\n    return this.backendSrv.post('/api/alerts/test', payload).then(res => {\r\n      this.testResult = res;\r\n      this.testing = false;\r\n    });\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function alertTab() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/features/alerting/partials/alert_tab.html',\r\n    controller: AlertTabCtrl,\r\n  };\r\n}\r\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\r\nimport { MetricsPanelCtrl } from 'app/features/panel/metrics_panel_ctrl';\r\nimport { QueryCtrl } from 'app/features/panel/query_ctrl';\r\nimport { alertTab } from 'app/features/alerting/alert_tab_ctrl';\r\nimport { loadPluginCss } from 'app/features/plugins/plugin_loader';\r\n\r\nexport { PanelCtrl, MetricsPanelCtrl, QueryCtrl, alertTab, loadPluginCss };\r\n","import { isBoolean, isNumber, sortedUniq, sortedIndexOf, unescape as htmlUnescaped } from 'lodash';\r\nimport moment from 'moment';\r\nimport { saveAs } from 'file-saver';\r\nimport { isNullOrUndefined } from 'util';\r\n\r\nconst DEFAULT_DATETIME_FORMAT = 'YYYY-MM-DDTHH:mm:ssZ';\r\nconst POINT_TIME_INDEX = 1;\r\nconst POINT_VALUE_INDEX = 0;\r\n\r\nconst END_COLUMN = ';';\r\nconst END_ROW = '\\r\\n';\r\nconst QUOTE = '\"';\r\nconst EXPORT_FILENAME = 'grafana_data_export.csv';\r\n\r\nfunction csvEscaped(text) {\r\n  if (!text) {\r\n    return text;\r\n  }\r\n\r\n  return text.split(QUOTE).join(QUOTE + QUOTE);\r\n}\r\n\r\nconst domParser = new DOMParser();\r\nfunction htmlDecoded(text) {\r\n  if (!text) {\r\n    return text;\r\n  }\r\n\r\n  const regexp = /&[^;]+;/g;\r\n  function htmlDecoded(value) {\r\n    const parsedDom = domParser.parseFromString(value, 'text/html');\r\n    return parsedDom.body.textContent;\r\n  }\r\n  return text.replace(regexp, htmlDecoded).replace(regexp, htmlDecoded);\r\n}\r\n\r\nfunction formatSpecialHeader(useExcelHeader) {\r\n  return useExcelHeader ? `sep=${END_COLUMN}${END_ROW}` : '';\r\n}\r\n\r\nfunction formatRow(row, addEndRowDelimiter = true) {\r\n  let text = '';\r\n  for (let i = 0; i < row.length; i += 1) {\r\n    if (isBoolean(row[i]) || isNullOrUndefined(row[i])) {\r\n      text += row[i];\r\n    } else if (isNumber(row[i])) {\r\n      text += row[i].toLocaleString();\r\n    } else {\r\n      text += `${QUOTE}${csvEscaped(htmlUnescaped(htmlDecoded(row[i])))}${QUOTE}`;\r\n    }\r\n\r\n    if (i < row.length - 1) {\r\n      text += END_COLUMN;\r\n    }\r\n  }\r\n  return addEndRowDelimiter ? text + END_ROW : text;\r\n}\r\n\r\nexport function convertSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\r\n  let text = formatSpecialHeader(excel) + formatRow(['Series', 'Time', 'Value']);\r\n  for (let seriesIndex = 0; seriesIndex < seriesList.length; seriesIndex += 1) {\r\n    for (let i = 0; i < seriesList[seriesIndex].datapoints.length; i += 1) {\r\n      text += formatRow(\r\n        [\r\n          seriesList[seriesIndex].alias,\r\n          moment(seriesList[seriesIndex].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat),\r\n          seriesList[seriesIndex].datapoints[i][POINT_VALUE_INDEX],\r\n        ],\r\n        i < seriesList[seriesIndex].datapoints.length - 1 || seriesIndex < seriesList.length - 1\r\n      );\r\n    }\r\n  }\r\n  return text;\r\n}\r\n\r\nexport function exportSeriesListToCsv(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\r\n  const text = convertSeriesListToCsv(seriesList, dateTimeFormat, excel);\r\n  saveSaveBlob(text, EXPORT_FILENAME);\r\n}\r\n\r\nexport function convertSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\r\n  // add header\r\n  let text =\r\n    formatSpecialHeader(excel) +\r\n    formatRow(\r\n      ['Time'].concat(\r\n        seriesList.map(function(val) {\r\n          return val.alias;\r\n        })\r\n      )\r\n    );\r\n  // process data\r\n  seriesList = mergeSeriesByTime(seriesList);\r\n\r\n  // make text\r\n  for (let i = 0; i < seriesList[0].datapoints.length; i += 1) {\r\n    const timestamp = moment(seriesList[0].datapoints[i][POINT_TIME_INDEX]).format(dateTimeFormat);\r\n    text += formatRow(\r\n      [timestamp].concat(\r\n        seriesList.map(function(series) {\r\n          return series.datapoints[i][POINT_VALUE_INDEX];\r\n        })\r\n      ),\r\n      i < seriesList[0].datapoints.length - 1\r\n    );\r\n  }\r\n\r\n  return text;\r\n}\r\n\r\n/**\r\n * Collect all unique timestamps from series list and use it to fill\r\n * missing points by null.\r\n */\r\nfunction mergeSeriesByTime(seriesList) {\r\n  let timestamps = [];\r\n  for (let i = 0; i < seriesList.length; i++) {\r\n    const seriesPoints = seriesList[i].datapoints;\r\n    for (let j = 0; j < seriesPoints.length; j++) {\r\n      timestamps.push(seriesPoints[j][POINT_TIME_INDEX]);\r\n    }\r\n  }\r\n  timestamps = sortedUniq(timestamps.sort());\r\n\r\n  for (let i = 0; i < seriesList.length; i++) {\r\n    const seriesPoints = seriesList[i].datapoints;\r\n    const seriesTimestamps = seriesPoints.map(p => p[POINT_TIME_INDEX]);\r\n    const extendedSeries = [];\r\n    let pointIndex;\r\n    for (let j = 0; j < timestamps.length; j++) {\r\n      pointIndex = sortedIndexOf(seriesTimestamps, timestamps[j]);\r\n      if (pointIndex !== -1) {\r\n        extendedSeries.push(seriesPoints[pointIndex]);\r\n      } else {\r\n        extendedSeries.push([null, timestamps[j]]);\r\n      }\r\n    }\r\n    seriesList[i].datapoints = extendedSeries;\r\n  }\r\n  return seriesList;\r\n}\r\n\r\nexport function exportSeriesListToCsvColumns(seriesList, dateTimeFormat = DEFAULT_DATETIME_FORMAT, excel = false) {\r\n  const text = convertSeriesListToCsvColumns(seriesList, dateTimeFormat, excel);\r\n  saveSaveBlob(text, EXPORT_FILENAME);\r\n}\r\n\r\nexport function convertTableDataToCsv(table, excel = false) {\r\n  let text = formatSpecialHeader(excel);\r\n  // add headline\r\n  text += formatRow(table.columns.map(val => val.title || val.text));\r\n  // process data\r\n  for (let i = 0; i < table.rows.length; i += 1) {\r\n    text += formatRow(table.rows[i], i < table.rows.length - 1);\r\n  }\r\n  return text;\r\n}\r\n\r\nexport function exportTableDataToCsv(table, excel = false) {\r\n  const text = convertTableDataToCsv(table, excel);\r\n  saveSaveBlob(text, EXPORT_FILENAME);\r\n}\r\n\r\nexport function saveSaveBlob(payload, fname) {\r\n  const blob = new Blob([payload], { type: 'text/csv;charset=utf-8;header=present;' });\r\n  saveAs(blob, fname);\r\n}\r\n","// Copyright (c) 2014, Hugh Kennedy\r\n// Based on code from https://github.com/hughsk/flat/blob/master/index.js\r\n//\r\nexport default function flatten(target, opts): any {\r\n  opts = opts || {};\r\n\r\n  const delimiter = opts.delimiter || '.';\r\n  let maxDepth = opts.maxDepth || 3;\r\n  let currentDepth = 1;\r\n  const output = {};\r\n\r\n  function step(object, prev) {\r\n    Object.keys(object).forEach(function(key) {\r\n      const value = object[key];\r\n      const isarray = opts.safe && Array.isArray(value);\r\n      const type = Object.prototype.toString.call(value);\r\n      const isobject = type === '[object Object]';\r\n\r\n      const newKey = prev ? prev + delimiter + key : key;\r\n\r\n      if (!opts.maxDepth) {\r\n        maxDepth = currentDepth + 1;\r\n      }\r\n\r\n      if (!isarray && isobject && Object.keys(value).length && currentDepth < maxDepth) {\r\n        ++currentDepth;\r\n        return step(value, newKey);\r\n      }\r\n\r\n      output[newKey] = value;\r\n    });\r\n  }\r\n\r\n  step(target, null);\r\n\r\n  return output;\r\n}\r\n","import _ from 'lodash';\r\n\r\nconst versionPattern = /^(\\d+)(?:\\.(\\d+))?(?:\\.(\\d+))?(?:-([0-9A-Za-z\\.]+))?/;\r\n\r\nexport class SemVersion {\r\n  major: number;\r\n  minor: number;\r\n  patch: number;\r\n  meta: string;\r\n\r\n  constructor(version: string) {\r\n    const match = versionPattern.exec(version);\r\n    if (match) {\r\n      this.major = Number(match[1]);\r\n      this.minor = Number(match[2] || 0);\r\n      this.patch = Number(match[3] || 0);\r\n      this.meta = match[4];\r\n    }\r\n  }\r\n\r\n  isGtOrEq(version: string): boolean {\r\n    const compared = new SemVersion(version);\r\n    return !(this.major < compared.major || this.minor < compared.minor || this.patch < compared.patch);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    return _.isNumber(this.major);\r\n  }\r\n}\r\n\r\nexport function isVersionGtOrEq(a: string, b: string): boolean {\r\n  const aSemver = new SemVersion(a);\r\n  return aSemver.isGtOrEq(b);\r\n}\r\n","import _ from 'lodash';\r\nimport { isVersionGtOrEq } from 'app/core/utils/version';\r\n\r\nconst index = {};\r\n\r\nfunction addFuncDef(funcDef) {\r\n  funcDef.params = funcDef.params || [];\r\n  funcDef.defaultParams = funcDef.defaultParams || [];\r\n\r\n  index[funcDef.name] = funcDef;\r\n  if (funcDef.shortName) {\r\n    index[funcDef.shortName] = funcDef;\r\n  }\r\n}\r\n\r\nconst optionalSeriesRefArgs = [{ name: 'other', type: 'value_or_series', optional: true, multiple: true }];\r\n\r\naddFuncDef({\r\n  name: 'scaleToSeconds',\r\n  category: 'Transform',\r\n  params: [{ name: 'seconds', type: 'int' }],\r\n  defaultParams: [1],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'perSecond',\r\n  category: 'Transform',\r\n  params: [{ name: 'max value', type: 'int', optional: true }],\r\n  defaultParams: [],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'holtWintersForecast',\r\n  category: 'Calculate',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'holtWintersConfidenceBands',\r\n  category: 'Calculate',\r\n  params: [{ name: 'delta', type: 'int' }],\r\n  defaultParams: [3],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'holtWintersAberration',\r\n  category: 'Calculate',\r\n  params: [{ name: 'delta', type: 'int' }],\r\n  defaultParams: [3],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'nPercentile',\r\n  category: 'Calculate',\r\n  params: [{ name: 'Nth percentile', type: 'int' }],\r\n  defaultParams: [95],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'diffSeries',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: ['#A'],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'stddevSeries',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: [''],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'divideSeries',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: ['#A'],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'multiplySeries',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: ['#A'],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'asPercent',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: ['#A'],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'group',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: ['#A', '#B'],\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sumSeries',\r\n  shortName: 'sum',\r\n  category: 'Combine',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: [''],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'averageSeries',\r\n  shortName: 'avg',\r\n  category: 'Combine',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: [''],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'rangeOfSeries',\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'percentileOfSeries',\r\n  category: 'Combine',\r\n  params: [{ name: 'n', type: 'int' }, { name: 'interpolate', type: 'boolean', options: ['true', 'false'] }],\r\n  defaultParams: [95, 'false'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sumSeriesWithWildcards',\r\n  category: 'Combine',\r\n  params: [{ name: 'node', type: 'int', multiple: true }],\r\n  defaultParams: [3],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'maxSeries',\r\n  shortName: 'max',\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'minSeries',\r\n  shortName: 'min',\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'averageSeriesWithWildcards',\r\n  category: 'Combine',\r\n  params: [{ name: 'node', type: 'int', multiple: true }],\r\n  defaultParams: [3],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'alias',\r\n  category: 'Alias',\r\n  params: [{ name: 'alias', type: 'string' }],\r\n  defaultParams: ['alias'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'aliasSub',\r\n  category: 'Alias',\r\n  params: [{ name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\r\n  defaultParams: ['', '\\\\1'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'consolidateBy',\r\n  category: 'Special',\r\n  params: [\r\n    {\r\n      name: 'function',\r\n      type: 'string',\r\n      options: ['sum', 'average', 'min', 'max'],\r\n    },\r\n  ],\r\n  defaultParams: ['max'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'cumulative',\r\n  category: 'Special',\r\n  params: [],\r\n  defaultParams: [],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'groupByNode',\r\n  category: 'Combine',\r\n  params: [\r\n    {\r\n      name: 'node',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n    },\r\n    {\r\n      name: 'function',\r\n      type: 'string',\r\n      options: ['sum', 'avg', 'maxSeries'],\r\n    },\r\n  ],\r\n  defaultParams: [3, 'sum'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'aliasByNode',\r\n  category: 'Alias',\r\n  params: [\r\n    {\r\n      name: 'node',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n      multiple: true,\r\n    },\r\n  ],\r\n  defaultParams: [3],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'substr',\r\n  category: 'Special',\r\n  params: [\r\n    {\r\n      name: 'start',\r\n      type: 'int',\r\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n    },\r\n    {\r\n      name: 'stop',\r\n      type: 'int',\r\n      options: [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n    },\r\n  ],\r\n  defaultParams: [0, 0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sortByName',\r\n  category: 'Sorting',\r\n  params: [\r\n    {\r\n      name: 'natural',\r\n      type: 'boolean',\r\n      options: ['true', 'false'],\r\n      optional: true,\r\n    },\r\n  ],\r\n  defaultParams: ['false'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sortByMaxima',\r\n  category: 'Sorting',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sortByMinima',\r\n  category: 'Sorting',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'sortByTotal',\r\n  category: 'Sorting',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'aliasByMetric',\r\n  category: 'Alias',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'randomWalk',\r\n  fake: true,\r\n  category: 'Special',\r\n  params: [{ name: 'name', type: 'string' }],\r\n  defaultParams: ['randomWalk'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'countSeries',\r\n  category: 'Combine',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'constantLine',\r\n  category: 'Special',\r\n  params: [{ name: 'value', type: 'int' }],\r\n  defaultParams: [10],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'cactiStyle',\r\n  category: 'Special',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'keepLastValue',\r\n  category: 'Transform',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [100],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'changed',\r\n  category: 'Special',\r\n  params: [],\r\n  defaultParams: [],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'scale',\r\n  category: 'Transform',\r\n  params: [{ name: 'factor', type: 'int' }],\r\n  defaultParams: [1],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'offset',\r\n  category: 'Transform',\r\n  params: [{ name: 'amount', type: 'int' }],\r\n  defaultParams: [10],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'transformNull',\r\n  category: 'Transform',\r\n  params: [{ name: 'amount', type: 'int' }],\r\n  defaultParams: [0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'integral',\r\n  category: 'Transform',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'derivative',\r\n  category: 'Transform',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'nonNegativeDerivative',\r\n  category: 'Transform',\r\n  params: [{ name: 'max value or 0', type: 'int', optional: true }],\r\n  defaultParams: [''],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'timeShift',\r\n  category: 'Transform',\r\n  params: [\r\n    {\r\n      name: 'amount',\r\n      type: 'select',\r\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\r\n    },\r\n  ],\r\n  defaultParams: ['1d'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'timeStack',\r\n  category: 'Transform',\r\n  params: [\r\n    {\r\n      name: 'timeShiftUnit',\r\n      type: 'select',\r\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\r\n    },\r\n    { name: 'timeShiftStart', type: 'int' },\r\n    { name: 'timeShiftEnd', type: 'int' },\r\n  ],\r\n  defaultParams: ['1d', 0, 7],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'summarize',\r\n  category: 'Transform',\r\n  params: [\r\n    { name: 'interval', type: 'string' },\r\n    {\r\n      name: 'func',\r\n      type: 'select',\r\n      options: ['sum', 'avg', 'min', 'max', 'last'],\r\n    },\r\n    {\r\n      name: 'alignToFrom',\r\n      type: 'boolean',\r\n      optional: true,\r\n      options: ['false', 'true'],\r\n    },\r\n  ],\r\n  defaultParams: ['1h', 'sum', 'false'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'smartSummarize',\r\n  category: 'Transform',\r\n  params: [\r\n    { name: 'interval', type: 'string' },\r\n    {\r\n      name: 'func',\r\n      type: 'select',\r\n      options: ['sum', 'avg', 'min', 'max', 'last'],\r\n    },\r\n  ],\r\n  defaultParams: ['1h', 'sum'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'absolute',\r\n  category: 'Transform',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'hitcount',\r\n  category: 'Transform',\r\n  params: [{ name: 'interval', type: 'string' }],\r\n  defaultParams: ['10s'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'log',\r\n  category: 'Transform',\r\n  params: [{ name: 'base', type: 'int' }],\r\n  defaultParams: ['10'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'averageAbove',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [25],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'averageBelow',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [25],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'currentAbove',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [25],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'currentBelow',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [25],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'maximumAbove',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'value', type: 'int' }],\r\n  defaultParams: [0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'maximumBelow',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'value', type: 'int' }],\r\n  defaultParams: [0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'minimumAbove',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'value', type: 'int' }],\r\n  defaultParams: [0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'minimumBelow',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'value', type: 'int' }],\r\n  defaultParams: [0],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'limit',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'mostDeviant',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [10],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'exclude',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'exclude', type: 'string' }],\r\n  defaultParams: ['exclude'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'highestCurrent',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'highestMax',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'lowestCurrent',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'movingAverage',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: [10],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'movingMedian',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: ['5'],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'stdev',\r\n  category: 'Calculate',\r\n  params: [{ name: 'n', type: 'int' }, { name: 'tolerance', type: 'int' }],\r\n  defaultParams: [5, 0.1],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'highestAverage',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'lowestAverage',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeAbovePercentile',\r\n  category: 'Filter Data',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeAboveValue',\r\n  category: 'Filter Data',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeBelowPercentile',\r\n  category: 'Filter Data',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeBelowValue',\r\n  category: 'Filter Data',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [5],\r\n});\r\n\r\naddFuncDef({\r\n  name: 'useSeriesAbove',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'value', type: 'int' }, { name: 'search', type: 'string' }, { name: 'replace', type: 'string' }],\r\n  defaultParams: [0, 'search', 'replace'],\r\n});\r\n\r\n////////////////////\r\n// Graphite 1.0.x //\r\n////////////////////\r\n\r\naddFuncDef({\r\n  name: 'aggregateLine',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'func',\r\n      type: 'select',\r\n      options: ['sum', 'avg', 'min', 'max', 'last'],\r\n    },\r\n  ],\r\n  defaultParams: ['avg'],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'averageOutsidePercentile',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [95],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'delay',\r\n  category: 'Transform',\r\n  params: [{ name: 'steps', type: 'int' }],\r\n  defaultParams: [1],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'exponentialMovingAverage',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: [10],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'fallbackSeries',\r\n  category: 'Special',\r\n  params: [{ name: 'fallback', type: 'string' }],\r\n  defaultParams: ['constantLine(0)'],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'grep',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'grep', type: 'string' }],\r\n  defaultParams: ['grep'],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'groupByNodes',\r\n  category: 'Combine',\r\n  params: [\r\n    {\r\n      name: 'function',\r\n      type: 'string',\r\n      options: ['sum', 'avg', 'maxSeries'],\r\n    },\r\n    {\r\n      name: 'node',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n      multiple: true,\r\n    },\r\n  ],\r\n  defaultParams: ['sum', 3],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'integralByInterval',\r\n  category: 'Transform',\r\n  params: [\r\n    {\r\n      name: 'intervalUnit',\r\n      type: 'select',\r\n      options: ['1h', '6h', '12h', '1d', '2d', '7d', '14d', '30d'],\r\n    },\r\n  ],\r\n  defaultParams: ['1d'],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'interpolate',\r\n  category: 'Transform',\r\n  params: [{ name: 'limit', type: 'int', optional: true }],\r\n  defaultParams: [],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'invert',\r\n  category: 'Transform',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'isNonNull',\r\n  category: 'Combine',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'linearRegression',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'startSourceAt',\r\n      type: 'select',\r\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\r\n      optional: true,\r\n    },\r\n    {\r\n      name: 'endSourceAt',\r\n      type: 'select',\r\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\r\n      optional: true,\r\n    },\r\n  ],\r\n  defaultParams: [],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'mapSeries',\r\n  shortName: 'map',\r\n  params: [{ name: 'node', type: 'int' }],\r\n  defaultParams: [3],\r\n  category: 'Combine',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'movingMin',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: [10],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'movingMax',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: [10],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'movingSum',\r\n  category: 'Calculate',\r\n  params: [\r\n    {\r\n      name: 'windowSize',\r\n      type: 'int_or_interval',\r\n      options: ['5', '7', '10', '5min', '10min', '30min', '1hour'],\r\n    },\r\n  ],\r\n  defaultParams: [10],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'multiplySeriesWithWildcards',\r\n  category: 'Combine',\r\n  params: [\r\n    {\r\n      name: 'position',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n      multiple: true,\r\n    },\r\n  ],\r\n  defaultParams: [2],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'offsetToZero',\r\n  category: 'Transform',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'pow',\r\n  category: 'Transform',\r\n  params: [{ name: 'factor', type: 'int' }],\r\n  defaultParams: [10],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'powSeries',\r\n  category: 'Transform',\r\n  params: optionalSeriesRefArgs,\r\n  defaultParams: [''],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'reduceSeries',\r\n  shortName: 'reduce',\r\n  params: [\r\n    {\r\n      name: 'function',\r\n      type: 'string',\r\n      options: ['asPercent', 'diffSeries', 'divideSeries'],\r\n    },\r\n    {\r\n      name: 'reduceNode',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13],\r\n    },\r\n    { name: 'reduceMatchers', type: 'string', multiple: true },\r\n  ],\r\n  defaultParams: ['asPercent', 2, 'used_bytes'],\r\n  category: 'Combine',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeBetweenPercentile',\r\n  category: 'Filter Series',\r\n  params: [{ name: 'n', type: 'int' }],\r\n  defaultParams: [95],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'removeEmptySeries',\r\n  category: 'Filter Series',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'squareRoot',\r\n  category: 'Transform',\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'timeSlice',\r\n  category: 'Transform',\r\n  params: [\r\n    {\r\n      name: 'startSliceAt',\r\n      type: 'select',\r\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\r\n    },\r\n    {\r\n      name: 'endSliceAt',\r\n      type: 'select',\r\n      options: ['-1h', '-6h', '-12h', '-1d', '-2d', '-7d', '-14d', '-30d'],\r\n      optional: true,\r\n    },\r\n  ],\r\n  defaultParams: ['-1h'],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'weightedAverage',\r\n  category: 'Combine',\r\n  params: [\r\n    { name: 'other', type: 'value_or_series', optional: true },\r\n    {\r\n      name: 'node',\r\n      type: 'int',\r\n      options: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12],\r\n    },\r\n  ],\r\n  defaultParams: ['#A', 4],\r\n  version: '1.0',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'seriesByTag',\r\n  category: 'Special',\r\n  params: [{ name: 'tagExpression', type: 'string', multiple: true }],\r\n  version: '1.1',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'groupByTags',\r\n  category: 'Combine',\r\n  params: [\r\n    {\r\n      name: 'function',\r\n      type: 'string',\r\n      options: ['sum', 'avg', 'maxSeries'],\r\n    },\r\n    { name: 'tag', type: 'string', multiple: true },\r\n  ],\r\n  defaultParams: ['sum', 'tag'],\r\n  version: '1.1',\r\n});\r\n\r\naddFuncDef({\r\n  name: 'aliasByTags',\r\n  category: 'Alias',\r\n  params: [{ name: 'tag', type: 'string', multiple: true }],\r\n  defaultParams: ['tag'],\r\n  version: '1.1',\r\n});\r\n\r\nfunction isVersionRelatedFunction(obj, graphiteVersion) {\r\n  return !obj.version || isVersionGtOrEq(graphiteVersion, obj.version);\r\n}\r\n\r\nexport class FuncInstance {\r\n  def: any;\r\n  params: any;\r\n  text: any;\r\n  added: boolean;\r\n\r\n  constructor(funcDef, options) {\r\n    this.def = funcDef;\r\n    this.params = [];\r\n\r\n    if (options && options.withDefaultParams) {\r\n      this.params = funcDef.defaultParams.slice(0);\r\n    }\r\n\r\n    this.updateText();\r\n  }\r\n\r\n  render(metricExp) {\r\n    const str = this.def.name + '(';\r\n\r\n    const parameters = _.map(this.params, (value, index) => {\r\n      let paramType;\r\n      if (index < this.def.params.length) {\r\n        paramType = this.def.params[index].type;\r\n      } else if (_.get(_.last(this.def.params), 'multiple')) {\r\n        paramType = _.get(_.last(this.def.params), 'type');\r\n      }\r\n      // param types that should never be quoted\r\n      if (_.includes(['value_or_series', 'boolean', 'int', 'float', 'node'], paramType)) {\r\n        return value;\r\n      }\r\n      // param types that might be quoted\r\n      if (_.includes(['int_or_interval', 'node_or_tag'], paramType) && _.isFinite(+value)) {\r\n        return _.toString(+value);\r\n      }\r\n      return \"'\" + value + \"'\";\r\n    });\r\n\r\n    // don't send any blank parameters to graphite\r\n    while (parameters[parameters.length - 1] === '') {\r\n      parameters.pop();\r\n    }\r\n\r\n    if (metricExp) {\r\n      parameters.unshift(metricExp);\r\n    }\r\n\r\n    return str + parameters.join(', ') + ')';\r\n  }\r\n\r\n  _hasMultipleParamsInString(strValue, index) {\r\n    if (strValue.indexOf(',') === -1) {\r\n      return false;\r\n    }\r\n\r\n    if (this.def.params[index + 1] && this.def.params[index + 1].optional) {\r\n      return true;\r\n    }\r\n\r\n    if (index + 1 >= this.def.params.length && _.get(_.last(this.def.params), 'multiple')) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  updateParam(strValue, index) {\r\n    // handle optional parameters\r\n    // if string contains ',' and next param is optional, split and update both\r\n    if (this._hasMultipleParamsInString(strValue, index)) {\r\n      _.each(strValue.split(','), (partVal, idx) => {\r\n        this.updateParam(partVal.trim(), index + idx);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (strValue === '' && (index >= this.def.params.length || this.def.params[index].optional)) {\r\n      this.params.splice(index, 1);\r\n    } else {\r\n      this.params[index] = strValue;\r\n    }\r\n\r\n    this.updateText();\r\n  }\r\n\r\n  updateText() {\r\n    if (this.params.length === 0) {\r\n      this.text = this.def.name + '()';\r\n      return;\r\n    }\r\n\r\n    let text = this.def.name + '(';\r\n    text += this.params.join(', ');\r\n    text += ')';\r\n    this.text = text;\r\n  }\r\n}\r\n\r\nfunction createFuncInstance(funcDef, options?, idx?) {\r\n  if (_.isString(funcDef)) {\r\n    funcDef = getFuncDef(funcDef, idx);\r\n  }\r\n  return new FuncInstance(funcDef, options);\r\n}\r\n\r\nfunction getFuncDef(name, idx?) {\r\n  if (!(idx || index)[name]) {\r\n    throw { message: 'Method not found ' + name };\r\n  }\r\n  return (idx || index)[name];\r\n}\r\n\r\nfunction getFuncDefs(graphiteVersion, idx?) {\r\n  const funcs = {};\r\n  _.forEach(idx || index, function(funcDef) {\r\n    if (isVersionRelatedFunction(funcDef, graphiteVersion)) {\r\n      funcs[funcDef.name] = _.assign({}, funcDef, {\r\n        params: _.filter(funcDef.params, function(param) {\r\n          return isVersionRelatedFunction(param, graphiteVersion);\r\n        }),\r\n      });\r\n    }\r\n  });\r\n  return funcs;\r\n}\r\n\r\n// parse response from graphite /functions endpoint into internal format\r\nfunction parseFuncDefs(rawDefs) {\r\n  const funcDefs = {};\r\n\r\n  _.forEach(rawDefs || {}, (funcDef, funcName) => {\r\n    // skip graphite graph functions\r\n    if (funcDef.group === 'Graph') {\r\n      return;\r\n    }\r\n\r\n    let description = funcDef.description;\r\n    if (description) {\r\n      // tidy up some pydoc syntax that rst2html can't handle\r\n      description = description\r\n        .replace(/:py:func:`(.+)( <[^>]*>)?`/g, '``$1``')\r\n        .replace(/.. seealso:: /g, 'See also: ')\r\n        .replace(/.. code-block *:: *none/g, '.. code-block::');\r\n    }\r\n\r\n    const func = {\r\n      name: funcDef.name,\r\n      description: description,\r\n      category: funcDef.group,\r\n      params: [],\r\n      defaultParams: [],\r\n      fake: false,\r\n    };\r\n\r\n    // get rid of the first \"seriesList\" param\r\n    if (/^seriesLists?$/.test(_.get(funcDef, 'params[0].type', ''))) {\r\n      // handle functions that accept multiple seriesLists\r\n      // we leave the param in place but mark it optional, so users can add more series if they wish\r\n      if (funcDef.params[0].multiple) {\r\n        funcDef.params[0].required = false;\r\n        // otherwise chop off the first param, it'll be handled separately\r\n      } else {\r\n        funcDef.params.shift();\r\n      }\r\n      // tag function as fake\r\n    } else {\r\n      func.fake = true;\r\n    }\r\n\r\n    _.forEach(funcDef.params, rawParam => {\r\n      const param = {\r\n        name: rawParam.name,\r\n        type: 'string',\r\n        optional: !rawParam.required,\r\n        multiple: !!rawParam.multiple,\r\n        options: undefined,\r\n      };\r\n\r\n      if (rawParam.default !== undefined) {\r\n        func.defaultParams.push(_.toString(rawParam.default));\r\n      } else if (rawParam.suggestions) {\r\n        func.defaultParams.push(_.toString(rawParam.suggestions[0]));\r\n      } else {\r\n        func.defaultParams.push('');\r\n      }\r\n\r\n      if (rawParam.type === 'boolean') {\r\n        param.type = 'boolean';\r\n        param.options = ['true', 'false'];\r\n      } else if (rawParam.type === 'integer') {\r\n        param.type = 'int';\r\n      } else if (rawParam.type === 'float') {\r\n        param.type = 'float';\r\n      } else if (rawParam.type === 'node') {\r\n        param.type = 'node';\r\n        param.options = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\r\n      } else if (rawParam.type === 'nodeOrTag') {\r\n        param.type = 'node_or_tag';\r\n        param.options = ['name', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\r\n      } else if (rawParam.type === 'intOrInterval') {\r\n        param.type = 'int_or_interval';\r\n      } else if (rawParam.type === 'seriesList') {\r\n        param.type = 'value_or_series';\r\n      }\r\n\r\n      if (rawParam.options) {\r\n        param.options = _.map(rawParam.options, _.toString);\r\n      } else if (rawParam.suggestions) {\r\n        param.options = _.map(rawParam.suggestions, _.toString);\r\n      }\r\n\r\n      func.params.push(param);\r\n    });\r\n\r\n    funcDefs[funcName] = func;\r\n  });\r\n\r\n  return funcDefs;\r\n}\r\n\r\nexport default {\r\n  createFuncInstance: createFuncInstance,\r\n  getFuncDef: getFuncDef,\r\n  getFuncDefs: getFuncDefs,\r\n  parseFuncDefs: parseFuncDefs,\r\n};\r\n","import _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport { isVersionGtOrEq, SemVersion } from 'app/core/utils/version';\r\nimport gfunc from './gfunc';\r\n\r\n/** @ngInject */\r\nexport function GraphiteDatasource(this: any, instanceSettings, $q, backendSrv, templateSrv) {\r\n  this.basicAuth = instanceSettings.basicAuth;\r\n  this.url = instanceSettings.url;\r\n  this.name = instanceSettings.name;\r\n  this.graphiteVersion = instanceSettings.jsonData.graphiteVersion || '0.9';\r\n  this.supportsTags = supportsTags(this.graphiteVersion);\r\n  this.cacheTimeout = instanceSettings.cacheTimeout;\r\n  this.withCredentials = instanceSettings.withCredentials;\r\n  this.render_method = instanceSettings.render_method || 'POST';\r\n  this.funcDefs = null;\r\n  this.funcDefsPromise = null;\r\n\r\n  this.getQueryOptionsInfo = function() {\r\n    return {\r\n      maxDataPoints: true,\r\n      cacheTimeout: true,\r\n      links: [\r\n        {\r\n          text: 'Help',\r\n          url: 'http://docs.grafana.org/features/datasources/graphite/#using-graphite-in-grafana',\r\n        },\r\n      ],\r\n    };\r\n  };\r\n\r\n  this.query = function(options) {\r\n    const graphOptions = {\r\n      from: this.translateTime(options.rangeRaw.from, false),\r\n      until: this.translateTime(options.rangeRaw.to, true),\r\n      targets: options.targets,\r\n      format: options.format,\r\n      cacheTimeout: options.cacheTimeout || this.cacheTimeout,\r\n      maxDataPoints: options.maxDataPoints,\r\n    };\r\n\r\n    const params = this.buildGraphiteParams(graphOptions, options.scopedVars);\r\n    if (params.length === 0) {\r\n      return $q.when({ data: [] });\r\n    }\r\n\r\n    const httpOptions: any = {\r\n      method: 'POST',\r\n      url: '/render',\r\n      data: params.join('&'),\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n    };\r\n\r\n    this.addTracingHeaders(httpOptions, options);\r\n\r\n    if (options.panelId) {\r\n      httpOptions.requestId = this.name + '.panelId.' + options.panelId;\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(this.convertDataPointsToMs);\r\n  };\r\n\r\n  this.addTracingHeaders = function(httpOptions, options) {\r\n    const proxyMode = !this.url.match(/^http/);\r\n    if (proxyMode) {\r\n      httpOptions.headers['X-Dashboard-Id'] = options.dashboardId;\r\n      httpOptions.headers['X-Panel-Id'] = options.panelId;\r\n    }\r\n  };\r\n\r\n  this.convertDataPointsToMs = function(result) {\r\n    if (!result || !result.data) {\r\n      return [];\r\n    }\r\n    for (let i = 0; i < result.data.length; i++) {\r\n      const series = result.data[i];\r\n      for (let y = 0; y < series.datapoints.length; y++) {\r\n        series.datapoints[y][1] *= 1000;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  this.parseTags = function(tagString) {\r\n    let tags = [];\r\n    tags = tagString.split(',');\r\n    if (tags.length === 1) {\r\n      tags = tagString.split(' ');\r\n      if (tags[0] === '') {\r\n        tags = [];\r\n      }\r\n    }\r\n    return tags;\r\n  };\r\n\r\n  this.annotationQuery = function(options) {\r\n    // Graphite metric as annotation\r\n    if (options.annotation.target) {\r\n      const target = templateSrv.replace(options.annotation.target, {}, 'glob');\r\n      const graphiteQuery = {\r\n        rangeRaw: options.rangeRaw,\r\n        targets: [{ target: target }],\r\n        format: 'json',\r\n        maxDataPoints: 100,\r\n      };\r\n\r\n      return this.query(graphiteQuery).then(function(result) {\r\n        const list = [];\r\n\r\n        for (let i = 0; i < result.data.length; i++) {\r\n          const target = result.data[i];\r\n\r\n          for (let y = 0; y < target.datapoints.length; y++) {\r\n            const datapoint = target.datapoints[y];\r\n            if (!datapoint[0]) {\r\n              continue;\r\n            }\r\n\r\n            list.push({\r\n              annotation: options.annotation,\r\n              time: datapoint[1],\r\n              title: target.target,\r\n            });\r\n          }\r\n        }\r\n\r\n        return list;\r\n      });\r\n    } else {\r\n      // Graphite event as annotation\r\n      const tags = templateSrv.replace(options.annotation.tags);\r\n      return this.events({ range: options.rangeRaw, tags: tags }).then(results => {\r\n        const list = [];\r\n        for (let i = 0; i < results.data.length; i++) {\r\n          const e = results.data[i];\r\n\r\n          let tags = e.tags;\r\n          if (_.isString(e.tags)) {\r\n            tags = this.parseTags(e.tags);\r\n          }\r\n\r\n          list.push({\r\n            annotation: options.annotation,\r\n            time: e.when * 1000,\r\n            title: e.what,\r\n            tags: tags,\r\n            text: e.data,\r\n          });\r\n        }\r\n\r\n        return list;\r\n      });\r\n    }\r\n  };\r\n\r\n  this.events = function(options) {\r\n    try {\r\n      let tags = '';\r\n      if (options.tags) {\r\n        tags = '&tags=' + options.tags;\r\n      }\r\n      return this.doGraphiteRequest({\r\n        method: 'GET',\r\n        url:\r\n          '/events/get_data?from=' +\r\n          this.translateTime(options.range.from, false) +\r\n          '&until=' +\r\n          this.translateTime(options.range.to, true) +\r\n          tags,\r\n      });\r\n    } catch (err) {\r\n      return $q.reject(err);\r\n    }\r\n  };\r\n\r\n  this.targetContainsTemplate = function(target) {\r\n    return templateSrv.variableExists(target.target);\r\n  };\r\n\r\n  this.translateTime = function(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      if (date === 'now') {\r\n        return 'now';\r\n      } else if (date.indexOf('now-') >= 0 && date.indexOf('/') === -1) {\r\n        date = date.substring(3);\r\n        date = date.replace('m', 'min');\r\n        date = date.replace('M', 'mon');\r\n        return date;\r\n      }\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n\r\n    // graphite' s from filter is exclusive\r\n    // here we step back one minute in order\r\n    // to guarantee that we get all the data that\r\n    // exists for the specified range\r\n    if (roundUp) {\r\n      if (date.get('s')) {\r\n        date.add(1, 'm');\r\n      }\r\n    } else if (roundUp === false) {\r\n      if (date.get('s')) {\r\n        date.subtract(1, 'm');\r\n      }\r\n    }\r\n\r\n    return date.unix();\r\n  };\r\n\r\n  this.metricFindQuery = function(query, optionalOptions) {\r\n    const options = optionalOptions || {};\r\n    const interpolatedQuery = templateSrv.replace(query);\r\n\r\n    // special handling for tag_values(<tag>[,<expression>]*), this is used for template variables\r\n    let matches = interpolatedQuery.match(/^tag_values\\(([^,]+)((, *[^,]+)*)\\)$/);\r\n    if (matches) {\r\n      const expressions = [];\r\n      const exprRegex = /, *([^,]+)/g;\r\n      let match;\r\n      while ((match = exprRegex.exec(matches[2])) !== null) {\r\n        expressions.push(match[1]);\r\n      }\r\n      options.limit = 10000;\r\n      return this.getTagValuesAutoComplete(expressions, matches[1], undefined, options);\r\n    }\r\n\r\n    // special handling for tags(<expression>[,<expression>]*), this is used for template variables\r\n    matches = interpolatedQuery.match(/^tags\\(([^,]*)((, *[^,]+)*)\\)$/);\r\n    if (matches) {\r\n      const expressions = [];\r\n      if (matches[1]) {\r\n        expressions.push(matches[1]);\r\n        const exprRegex = /, *([^,]+)/g;\r\n        let match;\r\n        while ((match = exprRegex.exec(matches[2])) !== null) {\r\n          expressions.push(match[1]);\r\n        }\r\n      }\r\n      options.limit = 10000;\r\n      return this.getTagsAutoComplete(expressions, undefined, options);\r\n    }\r\n\r\n    const httpOptions: any = {\r\n      method: 'GET',\r\n      url: '/metrics/find',\r\n      params: {\r\n        query: interpolatedQuery,\r\n      },\r\n      // for cancellations\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    if (options.range) {\r\n      httpOptions.params.from = this.translateTime(options.range.from, false);\r\n      httpOptions.params.until = this.translateTime(options.range.to, true);\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(results => {\r\n      return _.map(results.data, metric => {\r\n        return {\r\n          text: metric.text,\r\n          expandable: metric.expandable ? true : false,\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  this.getTags = function(optionalOptions) {\r\n    const options = optionalOptions || {};\r\n\r\n    const httpOptions: any = {\r\n      method: 'GET',\r\n      url: '/tags',\r\n      // for cancellations\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    if (options.range) {\r\n      httpOptions.params.from = this.translateTime(options.range.from, false);\r\n      httpOptions.params.until = this.translateTime(options.range.to, true);\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(results => {\r\n      return _.map(results.data, tag => {\r\n        return {\r\n          text: tag.tag,\r\n          id: tag.id,\r\n        };\r\n      });\r\n    });\r\n  };\r\n\r\n  this.getTagValues = function(tag, optionalOptions) {\r\n    const options = optionalOptions || {};\r\n\r\n    const httpOptions: any = {\r\n      method: 'GET',\r\n      url: '/tags/' + templateSrv.replace(tag),\r\n      // for cancellations\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    if (options.range) {\r\n      httpOptions.params.from = this.translateTime(options.range.from, false);\r\n      httpOptions.params.until = this.translateTime(options.range.to, true);\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(results => {\r\n      if (results.data && results.data.values) {\r\n        return _.map(results.data.values, value => {\r\n          return {\r\n            text: value.value,\r\n            id: value.id,\r\n          };\r\n        });\r\n      } else {\r\n        return [];\r\n      }\r\n    });\r\n  };\r\n\r\n  this.getTagsAutoComplete = (expressions, tagPrefix, optionalOptions) => {\r\n    const options = optionalOptions || {};\r\n\r\n    const httpOptions: any = {\r\n      method: 'GET',\r\n      url: '/tags/autoComplete/tags',\r\n      params: {\r\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\r\n      },\r\n      // for cancellations\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    if (tagPrefix) {\r\n      httpOptions.params.tagPrefix = tagPrefix;\r\n    }\r\n    if (options.limit) {\r\n      httpOptions.params.limit = options.limit;\r\n    }\r\n    if (options.range) {\r\n      httpOptions.params.from = this.translateTime(options.range.from, false);\r\n      httpOptions.params.until = this.translateTime(options.range.to, true);\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(results => {\r\n      if (results.data) {\r\n        return _.map(results.data, tag => {\r\n          return { text: tag };\r\n        });\r\n      } else {\r\n        return [];\r\n      }\r\n    });\r\n  };\r\n\r\n  this.getTagValuesAutoComplete = (expressions, tag, valuePrefix, optionalOptions) => {\r\n    const options = optionalOptions || {};\r\n\r\n    const httpOptions: any = {\r\n      method: 'GET',\r\n      url: '/tags/autoComplete/values',\r\n      params: {\r\n        expr: _.map(expressions, expression => templateSrv.replace((expression || '').trim())),\r\n        tag: templateSrv.replace((tag || '').trim()),\r\n      },\r\n      // for cancellations\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    if (valuePrefix) {\r\n      httpOptions.params.valuePrefix = valuePrefix;\r\n    }\r\n    if (options.limit) {\r\n      httpOptions.params.limit = options.limit;\r\n    }\r\n    if (options.range) {\r\n      httpOptions.params.from = this.translateTime(options.range.from, false);\r\n      httpOptions.params.until = this.translateTime(options.range.to, true);\r\n    }\r\n\r\n    return this.doGraphiteRequest(httpOptions).then(results => {\r\n      if (results.data) {\r\n        return _.map(results.data, value => {\r\n          return { text: value };\r\n        });\r\n      } else {\r\n        return [];\r\n      }\r\n    });\r\n  };\r\n\r\n  this.getVersion = function(optionalOptions) {\r\n    const options = optionalOptions || {};\r\n\r\n    const httpOptions = {\r\n      method: 'GET',\r\n      url: '/version',\r\n      requestId: options.requestId,\r\n    };\r\n\r\n    return this.doGraphiteRequest(httpOptions)\r\n      .then(results => {\r\n        if (results.data) {\r\n          const semver = new SemVersion(results.data);\r\n          return semver.isValid() ? results.data : '';\r\n        }\r\n        return '';\r\n      })\r\n      .catch(() => {\r\n        return '';\r\n      });\r\n  };\r\n\r\n  this.createFuncInstance = function(funcDef, options?) {\r\n    return gfunc.createFuncInstance(funcDef, options, this.funcDefs);\r\n  };\r\n\r\n  this.getFuncDef = function(name) {\r\n    return gfunc.getFuncDef(name, this.funcDefs);\r\n  };\r\n\r\n  this.waitForFuncDefsLoaded = function() {\r\n    return this.getFuncDefs();\r\n  };\r\n\r\n  this.getFuncDefs = function() {\r\n    if (this.funcDefsPromise !== null) {\r\n      return this.funcDefsPromise;\r\n    }\r\n\r\n    if (!supportsFunctionIndex(this.graphiteVersion)) {\r\n      this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\r\n      this.funcDefsPromise = Promise.resolve(this.funcDefs);\r\n      return this.funcDefsPromise;\r\n    }\r\n\r\n    const httpOptions = {\r\n      method: 'GET',\r\n      url: '/functions',\r\n    };\r\n\r\n    this.funcDefsPromise = this.doGraphiteRequest(httpOptions)\r\n      .then(results => {\r\n        if (results.status !== 200 || typeof results.data !== 'object') {\r\n          this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\r\n        } else {\r\n          this.funcDefs = gfunc.parseFuncDefs(results.data);\r\n        }\r\n        return this.funcDefs;\r\n      })\r\n      .catch(err => {\r\n        console.log('Fetching graphite functions error', err);\r\n        this.funcDefs = gfunc.getFuncDefs(this.graphiteVersion);\r\n        return this.funcDefs;\r\n      });\r\n\r\n    return this.funcDefsPromise;\r\n  };\r\n\r\n  this.testDatasource = function() {\r\n    const query = {\r\n      panelId: 3,\r\n      rangeRaw: { from: 'now-1h', to: 'now' },\r\n      targets: [{ target: 'constantLine(100)' }],\r\n      maxDataPoints: 300,\r\n    };\r\n    return this.query(query).then(function() {\r\n      return { status: 'success', message: 'Data source is working' };\r\n    });\r\n  };\r\n\r\n  this.doGraphiteRequest = function(options) {\r\n    if (this.basicAuth || this.withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n    if (this.basicAuth) {\r\n      options.headers = options.headers || {};\r\n      options.headers.Authorization = this.basicAuth;\r\n    }\r\n\r\n    options.url = this.url + options.url;\r\n    options.inspect = { type: 'graphite' };\r\n\r\n    return backendSrv.datasourceRequest(options);\r\n  };\r\n\r\n  this._seriesRefLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n  this.buildGraphiteParams = function(options, scopedVars) {\r\n    const graphiteOptions = ['from', 'until', 'rawData', 'format', 'maxDataPoints', 'cacheTimeout'];\r\n    const cleanOptions = [],\r\n      targets = {};\r\n    let target, targetValue, i;\r\n    const regex = /\\#([A-Z])/g;\r\n    const intervalFormatFixRegex = /'(\\d+)m'/gi;\r\n    let hasTargets = false;\r\n\r\n    options['format'] = 'json';\r\n\r\n    function fixIntervalFormat(match) {\r\n      return match.replace('m', 'min').replace('M', 'mon');\r\n    }\r\n\r\n    for (i = 0; i < options.targets.length; i++) {\r\n      target = options.targets[i];\r\n      if (!target.target) {\r\n        continue;\r\n      }\r\n\r\n      if (!target.refId) {\r\n        target.refId = this._seriesRefLetters[i];\r\n      }\r\n\r\n      targetValue = templateSrv.replace(target.target, scopedVars);\r\n      targetValue = targetValue.replace(intervalFormatFixRegex, fixIntervalFormat);\r\n      targets[target.refId] = targetValue;\r\n    }\r\n\r\n    function nestedSeriesRegexReplacer(match, g1) {\r\n      return targets[g1] || match;\r\n    }\r\n\r\n    for (i = 0; i < options.targets.length; i++) {\r\n      target = options.targets[i];\r\n      if (!target.target) {\r\n        continue;\r\n      }\r\n\r\n      targetValue = targets[target.refId];\r\n      targetValue = targetValue.replace(regex, nestedSeriesRegexReplacer);\r\n      targets[target.refId] = targetValue;\r\n\r\n      if (!target.hide) {\r\n        hasTargets = true;\r\n        cleanOptions.push('target=' + encodeURIComponent(targetValue));\r\n      }\r\n    }\r\n\r\n    _.each(options, function(value, key) {\r\n      if (_.indexOf(graphiteOptions, key) === -1) {\r\n        return;\r\n      }\r\n      if (value) {\r\n        cleanOptions.push(key + '=' + encodeURIComponent(value));\r\n      }\r\n    });\r\n\r\n    if (!hasTargets) {\r\n      return [];\r\n    }\r\n\r\n    return cleanOptions;\r\n  };\r\n}\r\n\r\nfunction supportsTags(version: string): boolean {\r\n  return isVersionGtOrEq(version, '1.1');\r\n}\r\n\r\nfunction supportsFunctionIndex(version: string): boolean {\r\n  return isVersionGtOrEq(version, '1.1');\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport rst2html from 'rst2html';\r\nimport Drop from 'tether-drop';\r\n\r\n/** @ngInject */\r\nexport function graphiteAddFunc($compile) {\r\n  const inputTemplate =\r\n    '<input type=\"text\"' + ' class=\"gf-form-input\"' + ' spellcheck=\"false\" style=\"display:none\"></input>';\r\n\r\n  const buttonTemplate =\r\n    '<a class=\"gf-form-label query-part dropdown-toggle\"' +\r\n    ' tabindex=\"1\" gf-dropdown=\"functionMenu\" data-toggle=\"dropdown\">' +\r\n    '<i class=\"fa fa-plus\"></i></a>';\r\n\r\n  return {\r\n    link: function($scope, elem) {\r\n      const ctrl = $scope.ctrl;\r\n\r\n      const $input = $(inputTemplate);\r\n      const $button = $(buttonTemplate);\r\n\r\n      $input.appendTo(elem);\r\n      $button.appendTo(elem);\r\n\r\n      ctrl.datasource.getFuncDefs().then(function(funcDefs) {\r\n        const allFunctions = _.map(funcDefs, 'name').sort();\r\n\r\n        $scope.functionMenu = createFunctionDropDownMenu(funcDefs);\r\n\r\n        $input.attr('data-provide', 'typeahead');\r\n        $input.typeahead({\r\n          source: allFunctions,\r\n          minLength: 1,\r\n          items: 10,\r\n          updater: function(value) {\r\n            let funcDef = ctrl.datasource.getFuncDef(value);\r\n            if (!funcDef) {\r\n              // try find close match\r\n              value = value.toLowerCase();\r\n              funcDef = _.find(allFunctions, function(funcName) {\r\n                return funcName.toLowerCase().indexOf(value) === 0;\r\n              });\r\n\r\n              if (!funcDef) {\r\n                return '';\r\n              }\r\n            }\r\n\r\n            $scope.$apply(function() {\r\n              ctrl.addFunction(funcDef);\r\n            });\r\n\r\n            $input.trigger('blur');\r\n            return '';\r\n          },\r\n        });\r\n\r\n        $button.click(function() {\r\n          $button.hide();\r\n          $input.show();\r\n          $input.focus();\r\n        });\r\n\r\n        $input.keyup(function() {\r\n          elem.toggleClass('open', $input.val() === '');\r\n        });\r\n\r\n        $input.blur(function() {\r\n          // clicking the function dropdown menu won't\r\n          // work if you remove class at once\r\n          setTimeout(function() {\r\n            $input.val('');\r\n            $input.hide();\r\n            $button.show();\r\n            elem.removeClass('open');\r\n          }, 200);\r\n        });\r\n\r\n        $compile(elem.contents())($scope);\r\n      });\r\n\r\n      let drop;\r\n      const cleanUpDrop = function() {\r\n        if (drop) {\r\n          drop.destroy();\r\n          drop = null;\r\n        }\r\n      };\r\n\r\n      $(elem)\r\n        .on('mouseenter', 'ul.dropdown-menu li', () => {\r\n          cleanUpDrop();\r\n\r\n          let funcDef;\r\n          try {\r\n            funcDef = ctrl.datasource.getFuncDef($('a', this).text());\r\n          } catch (e) {\r\n            // ignore\r\n          }\r\n\r\n          if (funcDef && funcDef.description) {\r\n            let shortDesc = funcDef.description;\r\n            if (shortDesc.length > 500) {\r\n              shortDesc = shortDesc.substring(0, 497) + '...';\r\n            }\r\n\r\n            const contentElement = document.createElement('div');\r\n            contentElement.innerHTML = '<h4>' + funcDef.name + '</h4>' + rst2html(shortDesc);\r\n\r\n            drop = new Drop({\r\n              target: this,\r\n              content: contentElement,\r\n              classes: 'drop-popover',\r\n              openOn: 'always',\r\n              tetherOptions: {\r\n                attachment: 'bottom left',\r\n                targetAttachment: 'bottom right',\r\n              },\r\n            });\r\n          }\r\n        })\r\n        .on('mouseout', 'ul.dropdown-menu li', function() {\r\n          cleanUpDrop();\r\n        });\r\n\r\n      $scope.$on('$destroy', cleanUpDrop);\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('graphiteAddFunc', graphiteAddFunc);\r\n\r\nfunction createFunctionDropDownMenu(funcDefs) {\r\n  const categories = {};\r\n\r\n  _.forEach(funcDefs, function(funcDef) {\r\n    if (!funcDef.category) {\r\n      return;\r\n    }\r\n    if (!categories[funcDef.category]) {\r\n      categories[funcDef.category] = [];\r\n    }\r\n    categories[funcDef.category].push({\r\n      text: funcDef.name,\r\n      click: \"ctrl.addFunction('\" + funcDef.name + \"')\",\r\n    });\r\n  });\r\n\r\n  return _.sortBy(\r\n    _.map(categories, function(submenu, category) {\r\n      return {\r\n        text: category,\r\n        submenu: _.sortBy(submenu, 'text'),\r\n      };\r\n    }),\r\n    'text'\r\n  );\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport rst2html from 'rst2html';\r\n\r\n/** @ngInject */\r\nexport function graphiteFuncEditor($compile, templateSrv, popoverSrv) {\r\n  const funcSpanTemplate = '<a ng-click=\"\">{{func.def.name}}</a><span>(</span>';\r\n  const paramTemplate =\r\n    '<input type=\"text\" style=\"display:none\"' + ' class=\"input-small tight-form-func-param\"></input>';\r\n\r\n  const funcControlsTemplate = `\r\n    <div class=\"tight-form-func-controls\">\r\n      <span class=\"pointer fa fa-arrow-left\"></span>\r\n      <span class=\"pointer fa fa-question-circle\"></span>\r\n      <span class=\"pointer fa fa-remove\" ></span>\r\n      <span class=\"pointer fa fa-arrow-right\"></span>\r\n    </div>`;\r\n\r\n  return {\r\n    restrict: 'A',\r\n    link: function postLink($scope, elem) {\r\n      const $funcLink = $(funcSpanTemplate);\r\n      const $funcControls = $(funcControlsTemplate);\r\n      const ctrl = $scope.ctrl;\r\n      const func = $scope.func;\r\n      let scheduledRelink = false;\r\n      let paramCountAtLink = 0;\r\n      let cancelBlur = null;\r\n\r\n      function clickFuncParam(this: any, paramIndex) {\r\n        /*jshint validthis:true */\r\n\r\n        const $link = $(this);\r\n        const $comma = $link.prev('.comma');\r\n        const $input = $link.next();\r\n\r\n        $input.val(func.params[paramIndex]);\r\n\r\n        $comma.removeClass('query-part__last');\r\n        $link.hide();\r\n        $input.show();\r\n        $input.focus();\r\n        $input.select();\r\n\r\n        const typeahead = $input.data('typeahead');\r\n        if (typeahead) {\r\n          $input.val('');\r\n          typeahead.lookup();\r\n        }\r\n      }\r\n\r\n      function scheduledRelinkIfNeeded() {\r\n        if (paramCountAtLink === func.params.length) {\r\n          return;\r\n        }\r\n\r\n        if (!scheduledRelink) {\r\n          scheduledRelink = true;\r\n          setTimeout(function() {\r\n            relink();\r\n            scheduledRelink = false;\r\n          }, 200);\r\n        }\r\n      }\r\n\r\n      function paramDef(index) {\r\n        if (index < func.def.params.length) {\r\n          return func.def.params[index];\r\n        }\r\n        if (_.last(func.def.params).multiple) {\r\n          return _.assign({}, _.last(func.def.params), { optional: true });\r\n        }\r\n        return {};\r\n      }\r\n\r\n      function switchToLink(inputElem, paramIndex) {\r\n        /*jshint validthis:true */\r\n        const $input = $(inputElem);\r\n\r\n        clearTimeout(cancelBlur);\r\n        cancelBlur = null;\r\n\r\n        const $link = $input.prev();\r\n        const $comma = $link.prev('.comma');\r\n        const newValue = $input.val();\r\n\r\n        // remove optional empty params\r\n        if (newValue !== '' || paramDef(paramIndex).optional) {\r\n          func.updateParam(newValue, paramIndex);\r\n          $link.html(newValue ? templateSrv.highlightVariablesAsHtml(newValue) : '&nbsp;');\r\n        }\r\n\r\n        scheduledRelinkIfNeeded();\r\n\r\n        $scope.$apply(function() {\r\n          ctrl.targetChanged();\r\n        });\r\n\r\n        if ($link.hasClass('query-part__last') && newValue === '') {\r\n          $comma.addClass('query-part__last');\r\n        } else {\r\n          $link.removeClass('query-part__last');\r\n        }\r\n\r\n        $input.hide();\r\n        $link.show();\r\n      }\r\n\r\n      // this = input element\r\n      function inputBlur(this: any, paramIndex) {\r\n        /*jshint validthis:true */\r\n        const inputElem = this;\r\n        // happens long before the click event on the typeahead options\r\n        // need to have long delay because the blur\r\n        cancelBlur = setTimeout(function() {\r\n          switchToLink(inputElem, paramIndex);\r\n        }, 200);\r\n      }\r\n\r\n      function inputKeyPress(this: any, paramIndex, e) {\r\n        /*jshint validthis:true */\r\n        if (e.which === 13) {\r\n          $(this).blur();\r\n        }\r\n      }\r\n\r\n      function inputKeyDown(this: any) {\r\n        /*jshint validthis:true */\r\n        this.style.width = (3 + this.value.length) * 8 + 'px';\r\n      }\r\n\r\n      function addTypeahead($input, paramIndex) {\r\n        $input.attr('data-provide', 'typeahead');\r\n\r\n        let options = paramDef(paramIndex).options;\r\n        if (paramDef(paramIndex).type === 'int') {\r\n          options = _.map(options, function(val) {\r\n            return val.toString();\r\n          });\r\n        }\r\n\r\n        $input.typeahead({\r\n          source: options,\r\n          minLength: 0,\r\n          items: 20,\r\n          updater: function(value) {\r\n            $input.val(value);\r\n            switchToLink($input[0], paramIndex);\r\n            return value;\r\n          },\r\n        });\r\n\r\n        const typeahead = $input.data('typeahead');\r\n        typeahead.lookup = function() {\r\n          this.query = this.$element.val() || '';\r\n          return this.process(this.source);\r\n        };\r\n      }\r\n\r\n      function toggleFuncControls() {\r\n        const targetDiv = elem.closest('.tight-form');\r\n\r\n        if (elem.hasClass('show-function-controls')) {\r\n          elem.removeClass('show-function-controls');\r\n          targetDiv.removeClass('has-open-function');\r\n          $funcControls.hide();\r\n          return;\r\n        }\r\n\r\n        elem.addClass('show-function-controls');\r\n        targetDiv.addClass('has-open-function');\r\n\r\n        $funcControls.show();\r\n      }\r\n\r\n      function addElementsAndCompile() {\r\n        $funcControls.appendTo(elem);\r\n        $funcLink.appendTo(elem);\r\n\r\n        const defParams = _.clone(func.def.params);\r\n        const lastParam = _.last(func.def.params);\r\n\r\n        while (func.params.length >= defParams.length && lastParam && lastParam.multiple) {\r\n          defParams.push(_.assign({}, lastParam, { optional: true }));\r\n        }\r\n\r\n        _.each(defParams, function(param, index) {\r\n          if (param.optional && func.params.length < index) {\r\n            return false;\r\n          }\r\n\r\n          let paramValue = templateSrv.highlightVariablesAsHtml(func.params[index]);\r\n\r\n          const last = index >= func.params.length - 1 && param.optional && !paramValue;\r\n          if (last && param.multiple) {\r\n            paramValue = '+';\r\n          }\r\n\r\n          if (index > 0) {\r\n            $('<span class=\"comma' + (last ? ' query-part__last' : '') + '\">, </span>').appendTo(elem);\r\n          }\r\n\r\n          const $paramLink = $(\r\n            '<a ng-click=\"\" class=\"graphite-func-param-link' +\r\n              (last ? ' query-part__last' : '') +\r\n              '\">' +\r\n              (paramValue || '&nbsp;') +\r\n              '</a>'\r\n          );\r\n          const $input = $(paramTemplate);\r\n          $input.attr('placeholder', param.name);\r\n\r\n          paramCountAtLink++;\r\n\r\n          $paramLink.appendTo(elem);\r\n          $input.appendTo(elem);\r\n\r\n          $input.blur(_.partial(inputBlur, index));\r\n          $input.keyup(inputKeyDown);\r\n          $input.keypress(_.partial(inputKeyPress, index));\r\n          $paramLink.click(_.partial(clickFuncParam, index));\r\n\r\n          if (param.options) {\r\n            addTypeahead($input, index);\r\n          }\r\n\r\n          return true;\r\n        });\r\n\r\n        $('<span>)</span>').appendTo(elem);\r\n\r\n        $compile(elem.contents())($scope);\r\n      }\r\n\r\n      function ifJustAddedFocusFirstParam() {\r\n        if ($scope.func.added) {\r\n          $scope.func.added = false;\r\n          setTimeout(function() {\r\n            elem\r\n              .find('.graphite-func-param-link')\r\n              .first()\r\n              .click();\r\n          }, 10);\r\n        }\r\n      }\r\n\r\n      function registerFuncControlsToggle() {\r\n        $funcLink.click(toggleFuncControls);\r\n      }\r\n\r\n      function registerFuncControlsActions() {\r\n        $funcControls.click(function(e) {\r\n          const $target = $(e.target);\r\n          if ($target.hasClass('fa-remove')) {\r\n            toggleFuncControls();\r\n            $scope.$apply(function() {\r\n              ctrl.removeFunction($scope.func);\r\n            });\r\n            return;\r\n          }\r\n\r\n          if ($target.hasClass('fa-arrow-left')) {\r\n            $scope.$apply(function() {\r\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index - 1);\r\n              ctrl.targetChanged();\r\n            });\r\n            return;\r\n          }\r\n\r\n          if ($target.hasClass('fa-arrow-right')) {\r\n            $scope.$apply(function() {\r\n              _.move(ctrl.queryModel.functions, $scope.$index, $scope.$index + 1);\r\n              ctrl.targetChanged();\r\n            });\r\n            return;\r\n          }\r\n\r\n          if ($target.hasClass('fa-question-circle')) {\r\n            const funcDef = ctrl.datasource.getFuncDef(func.def.name);\r\n            if (funcDef && funcDef.description) {\r\n              popoverSrv.show({\r\n                element: e.target,\r\n                position: 'bottom left',\r\n                classNames: 'drop-popover drop-function-def',\r\n                template: `\r\n                  <div style=\"overflow:auto;max-height:30rem;\">\r\n                    <h4> ${funcDef.name} </h4>\r\n                    ${rst2html(funcDef.description)}\r\n                  </div>`,\r\n                openOn: 'click',\r\n              });\r\n            } else {\r\n              window.open(\r\n                'http://graphite.readthedocs.org/en/latest/functions.html#graphite.render.functions.' + func.def.name,\r\n                '_blank'\r\n              );\r\n            }\r\n            return;\r\n          }\r\n        });\r\n      }\r\n\r\n      function relink() {\r\n        elem.children().remove();\r\n\r\n        addElementsAndCompile();\r\n        ifJustAddedFocusFirstParam();\r\n        registerFuncControlsToggle();\r\n        registerFuncControlsActions();\r\n      }\r\n\r\n      relink();\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('graphiteFuncEditor', graphiteFuncEditor);\r\n","import _ from 'lodash';\r\n\r\n// This is auto generated from the unicode tables.\r\n// The tables are at:\r\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\r\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\r\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\r\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\r\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\r\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\r\n\r\nconst unicodeLetterTable = [\r\n  170,\r\n  170,\r\n  181,\r\n  181,\r\n  186,\r\n  186,\r\n  192,\r\n  214,\r\n  216,\r\n  246,\r\n  248,\r\n  705,\r\n  710,\r\n  721,\r\n  736,\r\n  740,\r\n  748,\r\n  748,\r\n  750,\r\n  750,\r\n  880,\r\n  884,\r\n  886,\r\n  887,\r\n  890,\r\n  893,\r\n  902,\r\n  902,\r\n  904,\r\n  906,\r\n  908,\r\n  908,\r\n  910,\r\n  929,\r\n  931,\r\n  1013,\r\n  1015,\r\n  1153,\r\n  1162,\r\n  1319,\r\n  1329,\r\n  1366,\r\n  1369,\r\n  1369,\r\n  1377,\r\n  1415,\r\n  1488,\r\n  1514,\r\n  1520,\r\n  1522,\r\n  1568,\r\n  1610,\r\n  1646,\r\n  1647,\r\n  1649,\r\n  1747,\r\n  1749,\r\n  1749,\r\n  1765,\r\n  1766,\r\n  1774,\r\n  1775,\r\n  1786,\r\n  1788,\r\n  1791,\r\n  1791,\r\n  1808,\r\n  1808,\r\n  1810,\r\n  1839,\r\n  1869,\r\n  1957,\r\n  1969,\r\n  1969,\r\n  1994,\r\n  2026,\r\n  2036,\r\n  2037,\r\n  2042,\r\n  2042,\r\n  2048,\r\n  2069,\r\n  2074,\r\n  2074,\r\n  2084,\r\n  2084,\r\n  2088,\r\n  2088,\r\n  2112,\r\n  2136,\r\n  2308,\r\n  2361,\r\n  2365,\r\n  2365,\r\n  2384,\r\n  2384,\r\n  2392,\r\n  2401,\r\n  2417,\r\n  2423,\r\n  2425,\r\n  2431,\r\n  2437,\r\n  2444,\r\n  2447,\r\n  2448,\r\n  2451,\r\n  2472,\r\n  2474,\r\n  2480,\r\n  2482,\r\n  2482,\r\n  2486,\r\n  2489,\r\n  2493,\r\n  2493,\r\n  2510,\r\n  2510,\r\n  2524,\r\n  2525,\r\n  2527,\r\n  2529,\r\n  2544,\r\n  2545,\r\n  2565,\r\n  2570,\r\n  2575,\r\n  2576,\r\n  2579,\r\n  2600,\r\n  2602,\r\n  2608,\r\n  2610,\r\n  2611,\r\n  2613,\r\n  2614,\r\n  2616,\r\n  2617,\r\n  2649,\r\n  2652,\r\n  2654,\r\n  2654,\r\n  2674,\r\n  2676,\r\n  2693,\r\n  2701,\r\n  2703,\r\n  2705,\r\n  2707,\r\n  2728,\r\n  2730,\r\n  2736,\r\n  2738,\r\n  2739,\r\n  2741,\r\n  2745,\r\n  2749,\r\n  2749,\r\n  2768,\r\n  2768,\r\n  2784,\r\n  2785,\r\n  2821,\r\n  2828,\r\n  2831,\r\n  2832,\r\n  2835,\r\n  2856,\r\n  2858,\r\n  2864,\r\n  2866,\r\n  2867,\r\n  2869,\r\n  2873,\r\n  2877,\r\n  2877,\r\n  2908,\r\n  2909,\r\n  2911,\r\n  2913,\r\n  2929,\r\n  2929,\r\n  2947,\r\n  2947,\r\n  2949,\r\n  2954,\r\n  2958,\r\n  2960,\r\n  2962,\r\n  2965,\r\n  2969,\r\n  2970,\r\n  2972,\r\n  2972,\r\n  2974,\r\n  2975,\r\n  2979,\r\n  2980,\r\n  2984,\r\n  2986,\r\n  2990,\r\n  3001,\r\n  3024,\r\n  3024,\r\n  3077,\r\n  3084,\r\n  3086,\r\n  3088,\r\n  3090,\r\n  3112,\r\n  3114,\r\n  3123,\r\n  3125,\r\n  3129,\r\n  3133,\r\n  3133,\r\n  3160,\r\n  3161,\r\n  3168,\r\n  3169,\r\n  3205,\r\n  3212,\r\n  3214,\r\n  3216,\r\n  3218,\r\n  3240,\r\n  3242,\r\n  3251,\r\n  3253,\r\n  3257,\r\n  3261,\r\n  3261,\r\n  3294,\r\n  3294,\r\n  3296,\r\n  3297,\r\n  3313,\r\n  3314,\r\n  3333,\r\n  3340,\r\n  3342,\r\n  3344,\r\n  3346,\r\n  3386,\r\n  3389,\r\n  3389,\r\n  3406,\r\n  3406,\r\n  3424,\r\n  3425,\r\n  3450,\r\n  3455,\r\n  3461,\r\n  3478,\r\n  3482,\r\n  3505,\r\n  3507,\r\n  3515,\r\n  3517,\r\n  3517,\r\n  3520,\r\n  3526,\r\n  3585,\r\n  3632,\r\n  3634,\r\n  3635,\r\n  3648,\r\n  3654,\r\n  3713,\r\n  3714,\r\n  3716,\r\n  3716,\r\n  3719,\r\n  3720,\r\n  3722,\r\n  3722,\r\n  3725,\r\n  3725,\r\n  3732,\r\n  3735,\r\n  3737,\r\n  3743,\r\n  3745,\r\n  3747,\r\n  3749,\r\n  3749,\r\n  3751,\r\n  3751,\r\n  3754,\r\n  3755,\r\n  3757,\r\n  3760,\r\n  3762,\r\n  3763,\r\n  3773,\r\n  3773,\r\n  3776,\r\n  3780,\r\n  3782,\r\n  3782,\r\n  3804,\r\n  3805,\r\n  3840,\r\n  3840,\r\n  3904,\r\n  3911,\r\n  3913,\r\n  3948,\r\n  3976,\r\n  3980,\r\n  4096,\r\n  4138,\r\n  4159,\r\n  4159,\r\n  4176,\r\n  4181,\r\n  4186,\r\n  4189,\r\n  4193,\r\n  4193,\r\n  4197,\r\n  4198,\r\n  4206,\r\n  4208,\r\n  4213,\r\n  4225,\r\n  4238,\r\n  4238,\r\n  4256,\r\n  4293,\r\n  4304,\r\n  4346,\r\n  4348,\r\n  4348,\r\n  4352,\r\n  4680,\r\n  4682,\r\n  4685,\r\n  4688,\r\n  4694,\r\n  4696,\r\n  4696,\r\n  4698,\r\n  4701,\r\n  4704,\r\n  4744,\r\n  4746,\r\n  4749,\r\n  4752,\r\n  4784,\r\n  4786,\r\n  4789,\r\n  4792,\r\n  4798,\r\n  4800,\r\n  4800,\r\n  4802,\r\n  4805,\r\n  4808,\r\n  4822,\r\n  4824,\r\n  4880,\r\n  4882,\r\n  4885,\r\n  4888,\r\n  4954,\r\n  4992,\r\n  5007,\r\n  5024,\r\n  5108,\r\n  5121,\r\n  5740,\r\n  5743,\r\n  5759,\r\n  5761,\r\n  5786,\r\n  5792,\r\n  5866,\r\n  5870,\r\n  5872,\r\n  5888,\r\n  5900,\r\n  5902,\r\n  5905,\r\n  5920,\r\n  5937,\r\n  5952,\r\n  5969,\r\n  5984,\r\n  5996,\r\n  5998,\r\n  6000,\r\n  6016,\r\n  6067,\r\n  6103,\r\n  6103,\r\n  6108,\r\n  6108,\r\n  6176,\r\n  6263,\r\n  6272,\r\n  6312,\r\n  6314,\r\n  6314,\r\n  6320,\r\n  6389,\r\n  6400,\r\n  6428,\r\n  6480,\r\n  6509,\r\n  6512,\r\n  6516,\r\n  6528,\r\n  6571,\r\n  6593,\r\n  6599,\r\n  6656,\r\n  6678,\r\n  6688,\r\n  6740,\r\n  6823,\r\n  6823,\r\n  6917,\r\n  6963,\r\n  6981,\r\n  6987,\r\n  7043,\r\n  7072,\r\n  7086,\r\n  7087,\r\n  7104,\r\n  7141,\r\n  7168,\r\n  7203,\r\n  7245,\r\n  7247,\r\n  7258,\r\n  7293,\r\n  7401,\r\n  7404,\r\n  7406,\r\n  7409,\r\n  7424,\r\n  7615,\r\n  7680,\r\n  7957,\r\n  7960,\r\n  7965,\r\n  7968,\r\n  8005,\r\n  8008,\r\n  8013,\r\n  8016,\r\n  8023,\r\n  8025,\r\n  8025,\r\n  8027,\r\n  8027,\r\n  8029,\r\n  8029,\r\n  8031,\r\n  8061,\r\n  8064,\r\n  8116,\r\n  8118,\r\n  8124,\r\n  8126,\r\n  8126,\r\n  8130,\r\n  8132,\r\n  8134,\r\n  8140,\r\n  8144,\r\n  8147,\r\n  8150,\r\n  8155,\r\n  8160,\r\n  8172,\r\n  8178,\r\n  8180,\r\n  8182,\r\n  8188,\r\n  8305,\r\n  8305,\r\n  8319,\r\n  8319,\r\n  8336,\r\n  8348,\r\n  8450,\r\n  8450,\r\n  8455,\r\n  8455,\r\n  8458,\r\n  8467,\r\n  8469,\r\n  8469,\r\n  8473,\r\n  8477,\r\n  8484,\r\n  8484,\r\n  8486,\r\n  8486,\r\n  8488,\r\n  8488,\r\n  8490,\r\n  8493,\r\n  8495,\r\n  8505,\r\n  8508,\r\n  8511,\r\n  8517,\r\n  8521,\r\n  8526,\r\n  8526,\r\n  8544,\r\n  8584,\r\n  11264,\r\n  11310,\r\n  11312,\r\n  11358,\r\n  11360,\r\n  11492,\r\n  11499,\r\n  11502,\r\n  11520,\r\n  11557,\r\n  11568,\r\n  11621,\r\n  11631,\r\n  11631,\r\n  11648,\r\n  11670,\r\n  11680,\r\n  11686,\r\n  11688,\r\n  11694,\r\n  11696,\r\n  11702,\r\n  11704,\r\n  11710,\r\n  11712,\r\n  11718,\r\n  11720,\r\n  11726,\r\n  11728,\r\n  11734,\r\n  11736,\r\n  11742,\r\n  11823,\r\n  11823,\r\n  12293,\r\n  12295,\r\n  12321,\r\n  12329,\r\n  12337,\r\n  12341,\r\n  12344,\r\n  12348,\r\n  12353,\r\n  12438,\r\n  12445,\r\n  12447,\r\n  12449,\r\n  12538,\r\n  12540,\r\n  12543,\r\n  12549,\r\n  12589,\r\n  12593,\r\n  12686,\r\n  12704,\r\n  12730,\r\n  12784,\r\n  12799,\r\n  13312,\r\n  13312,\r\n  19893,\r\n  19893,\r\n  19968,\r\n  19968,\r\n  40907,\r\n  40907,\r\n  40960,\r\n  42124,\r\n  42192,\r\n  42237,\r\n  42240,\r\n  42508,\r\n  42512,\r\n  42527,\r\n  42538,\r\n  42539,\r\n  42560,\r\n  42606,\r\n  42623,\r\n  42647,\r\n  42656,\r\n  42735,\r\n  42775,\r\n  42783,\r\n  42786,\r\n  42888,\r\n  42891,\r\n  42894,\r\n  42896,\r\n  42897,\r\n  42912,\r\n  42921,\r\n  43002,\r\n  43009,\r\n  43011,\r\n  43013,\r\n  43015,\r\n  43018,\r\n  43020,\r\n  43042,\r\n  43072,\r\n  43123,\r\n  43138,\r\n  43187,\r\n  43250,\r\n  43255,\r\n  43259,\r\n  43259,\r\n  43274,\r\n  43301,\r\n  43312,\r\n  43334,\r\n  43360,\r\n  43388,\r\n  43396,\r\n  43442,\r\n  43471,\r\n  43471,\r\n  43520,\r\n  43560,\r\n  43584,\r\n  43586,\r\n  43588,\r\n  43595,\r\n  43616,\r\n  43638,\r\n  43642,\r\n  43642,\r\n  43648,\r\n  43695,\r\n  43697,\r\n  43697,\r\n  43701,\r\n  43702,\r\n  43705,\r\n  43709,\r\n  43712,\r\n  43712,\r\n  43714,\r\n  43714,\r\n  43739,\r\n  43741,\r\n  43777,\r\n  43782,\r\n  43785,\r\n  43790,\r\n  43793,\r\n  43798,\r\n  43808,\r\n  43814,\r\n  43816,\r\n  43822,\r\n  43968,\r\n  44002,\r\n  44032,\r\n  44032,\r\n  55203,\r\n  55203,\r\n  55216,\r\n  55238,\r\n  55243,\r\n  55291,\r\n  63744,\r\n  64045,\r\n  64048,\r\n  64109,\r\n  64112,\r\n  64217,\r\n  64256,\r\n  64262,\r\n  64275,\r\n  64279,\r\n  64285,\r\n  64285,\r\n  64287,\r\n  64296,\r\n  64298,\r\n  64310,\r\n  64312,\r\n  64316,\r\n  64318,\r\n  64318,\r\n  64320,\r\n  64321,\r\n  64323,\r\n  64324,\r\n  64326,\r\n  64433,\r\n  64467,\r\n  64829,\r\n  64848,\r\n  64911,\r\n  64914,\r\n  64967,\r\n  65008,\r\n  65019,\r\n  65136,\r\n  65140,\r\n  65142,\r\n  65276,\r\n  65313,\r\n  65338,\r\n  65345,\r\n  65370,\r\n  65382,\r\n  65470,\r\n  65474,\r\n  65479,\r\n  65482,\r\n  65487,\r\n  65490,\r\n  65495,\r\n  65498,\r\n  65500,\r\n  65536,\r\n  65547,\r\n  65549,\r\n  65574,\r\n  65576,\r\n  65594,\r\n  65596,\r\n  65597,\r\n  65599,\r\n  65613,\r\n  65616,\r\n  65629,\r\n  65664,\r\n  65786,\r\n  65856,\r\n  65908,\r\n  66176,\r\n  66204,\r\n  66208,\r\n  66256,\r\n  66304,\r\n  66334,\r\n  66352,\r\n  66378,\r\n  66432,\r\n  66461,\r\n  66464,\r\n  66499,\r\n  66504,\r\n  66511,\r\n  66513,\r\n  66517,\r\n  66560,\r\n  66717,\r\n  67584,\r\n  67589,\r\n  67592,\r\n  67592,\r\n  67594,\r\n  67637,\r\n  67639,\r\n  67640,\r\n  67644,\r\n  67644,\r\n  67647,\r\n  67669,\r\n  67840,\r\n  67861,\r\n  67872,\r\n  67897,\r\n  68096,\r\n  68096,\r\n  68112,\r\n  68115,\r\n  68117,\r\n  68119,\r\n  68121,\r\n  68147,\r\n  68192,\r\n  68220,\r\n  68352,\r\n  68405,\r\n  68416,\r\n  68437,\r\n  68448,\r\n  68466,\r\n  68608,\r\n  68680,\r\n  69635,\r\n  69687,\r\n  69763,\r\n  69807,\r\n  73728,\r\n  74606,\r\n  74752,\r\n  74850,\r\n  77824,\r\n  78894,\r\n  92160,\r\n  92728,\r\n  110592,\r\n  110593,\r\n  119808,\r\n  119892,\r\n  119894,\r\n  119964,\r\n  119966,\r\n  119967,\r\n  119970,\r\n  119970,\r\n  119973,\r\n  119974,\r\n  119977,\r\n  119980,\r\n  119982,\r\n  119993,\r\n  119995,\r\n  119995,\r\n  119997,\r\n  120003,\r\n  120005,\r\n  120069,\r\n  120071,\r\n  120074,\r\n  120077,\r\n  120084,\r\n  120086,\r\n  120092,\r\n  120094,\r\n  120121,\r\n  120123,\r\n  120126,\r\n  120128,\r\n  120132,\r\n  120134,\r\n  120134,\r\n  120138,\r\n  120144,\r\n  120146,\r\n  120485,\r\n  120488,\r\n  120512,\r\n  120514,\r\n  120538,\r\n  120540,\r\n  120570,\r\n  120572,\r\n  120596,\r\n  120598,\r\n  120628,\r\n  120630,\r\n  120654,\r\n  120656,\r\n  120686,\r\n  120688,\r\n  120712,\r\n  120714,\r\n  120744,\r\n  120746,\r\n  120770,\r\n  120772,\r\n  120779,\r\n  131072,\r\n  131072,\r\n  173782,\r\n  173782,\r\n  173824,\r\n  173824,\r\n  177972,\r\n  177972,\r\n  177984,\r\n  177984,\r\n  178205,\r\n  178205,\r\n  194560,\r\n  195101,\r\n];\r\n\r\nconst identifierStartTable = [];\r\n\r\nfor (let i = 0; i < 128; i++) {\r\n  identifierStartTable[i] =\r\n    (i >= 48 && i <= 57) || // 0-9\r\n    i === 36 || // $\r\n    i === 126 || // ~\r\n    i === 124 || // |\r\n    (i >= 65 && i <= 90) || // A-Z\r\n    i === 95 || // _\r\n    i === 45 || // -\r\n    i === 42 || // *\r\n    i === 58 || // :\r\n    i === 91 || // templateStart [\r\n    i === 93 || // templateEnd ]\r\n    i === 63 || // ?\r\n    i === 37 || // %\r\n    i === 35 || // #\r\n    i === 61 || // =\r\n    (i >= 97 && i <= 122); // a-z\r\n}\r\n\r\nconst identifierPartTable = identifierStartTable;\r\n\r\nexport function Lexer(this: any, expression) {\r\n  this.input = expression;\r\n  this.char = 1;\r\n  this.from = 1;\r\n}\r\n\r\nLexer.prototype = {\r\n  peek: function(i) {\r\n    return this.input.charAt(i || 0);\r\n  },\r\n\r\n  skip: function(i) {\r\n    i = i || 1;\r\n    this.char += i;\r\n    this.input = this.input.slice(i);\r\n  },\r\n\r\n  tokenize: function() {\r\n    const list = [];\r\n    let token;\r\n    while ((token = this.next())) {\r\n      list.push(token);\r\n    }\r\n    return list;\r\n  },\r\n\r\n  next: function() {\r\n    this.from = this.char;\r\n\r\n    // Move to the next non-space character.\r\n    if (/\\s/.test(this.peek())) {\r\n      while (/\\s/.test(this.peek())) {\r\n        this.from += 1;\r\n        this.skip();\r\n      }\r\n\r\n      if (this.peek() === '') {\r\n        // EOL\r\n        return null;\r\n      }\r\n    }\r\n\r\n    let match = this.scanStringLiteral();\r\n    if (match) {\r\n      return match;\r\n    }\r\n\r\n    match = this.scanPunctuator() || this.scanNumericLiteral() || this.scanIdentifier() || this.scanTemplateSequence();\r\n\r\n    if (match) {\r\n      this.skip(match.value.length);\r\n      return match;\r\n    }\r\n\r\n    // No token could be matched, give up.\r\n    return null;\r\n  },\r\n\r\n  scanTemplateSequence: function() {\r\n    if (this.peek() === '[' && this.peek(1) === '[') {\r\n      return {\r\n        type: 'templateStart',\r\n        value: '[[',\r\n        pos: this.char,\r\n      };\r\n    }\r\n\r\n    if (this.peek() === ']' && this.peek(1) === ']') {\r\n      return {\r\n        type: 'templateEnd',\r\n        value: '[[',\r\n        pos: this.char,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  /*\r\n   * Extract a JavaScript identifier out of the next sequence of\r\n   * characters or return 'null' if its not possible. In addition,\r\n   * to Identifier this method can also produce BooleanLiteral\r\n   * (true/false) and NullLiteral (null).\r\n   */\r\n  scanIdentifier: function() {\r\n    let id = '';\r\n    let index = 0;\r\n    let type, char;\r\n\r\n    // Detects any character in the Unicode categories \"Uppercase\r\n    // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\r\n    // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\r\n    // \"Letter number (Nl)\".\r\n    //\r\n    // Both approach and unicodeLetterTable were borrowed from\r\n    // Google's Traceur.\r\n\r\n    function isUnicodeLetter(code) {\r\n      for (let i = 0; i < unicodeLetterTable.length; ) {\r\n        if (code < unicodeLetterTable[i++]) {\r\n          return false;\r\n        }\r\n\r\n        if (code <= unicodeLetterTable[i++]) {\r\n          return true;\r\n        }\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    function isHexDigit(str) {\r\n      return /^[0-9a-fA-F]$/.test(str);\r\n    }\r\n\r\n    const readUnicodeEscapeSequence = _.bind(function(this: any) {\r\n      /*jshint validthis:true */\r\n      index += 1;\r\n\r\n      if (this.peek(index) !== 'u') {\r\n        return null;\r\n      }\r\n\r\n      const ch1 = this.peek(index + 1);\r\n      const ch2 = this.peek(index + 2);\r\n      const ch3 = this.peek(index + 3);\r\n      const ch4 = this.peek(index + 4);\r\n      let code;\r\n\r\n      if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\r\n        code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\r\n\r\n        if (isUnicodeLetter(code)) {\r\n          index += 5;\r\n          return '\\\\u' + ch1 + ch2 + ch3 + ch4;\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      return null;\r\n    }, this);\r\n\r\n    const getIdentifierStart = _.bind(function(this: any) {\r\n      /*jshint validthis:true */\r\n      const chr = this.peek(index);\r\n      const code = chr.charCodeAt(0);\r\n\r\n      if (chr === '*') {\r\n        index += 1;\r\n        return chr;\r\n      }\r\n\r\n      if (code === 92) {\r\n        return readUnicodeEscapeSequence();\r\n      }\r\n\r\n      if (code < 128) {\r\n        if (identifierStartTable[code]) {\r\n          index += 1;\r\n          return chr;\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      if (isUnicodeLetter(code)) {\r\n        index += 1;\r\n        return chr;\r\n      }\r\n\r\n      return null;\r\n    }, this);\r\n\r\n    const getIdentifierPart = _.bind(function(this: any) {\r\n      /*jshint validthis:true */\r\n      const chr = this.peek(index);\r\n      const code = chr.charCodeAt(0);\r\n\r\n      if (code === 92) {\r\n        return readUnicodeEscapeSequence();\r\n      }\r\n\r\n      if (code < 128) {\r\n        if (identifierPartTable[code]) {\r\n          index += 1;\r\n          return chr;\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      if (isUnicodeLetter(code)) {\r\n        index += 1;\r\n        return chr;\r\n      }\r\n\r\n      return null;\r\n    }, this);\r\n\r\n    char = getIdentifierStart();\r\n    if (char === null) {\r\n      return null;\r\n    }\r\n\r\n    id = char;\r\n    for (;;) {\r\n      char = getIdentifierPart();\r\n\r\n      if (char === null) {\r\n        break;\r\n      }\r\n\r\n      id += char;\r\n    }\r\n\r\n    switch (id) {\r\n      case 'true': {\r\n        type = 'bool';\r\n        break;\r\n      }\r\n      case 'false': {\r\n        type = 'bool';\r\n        break;\r\n      }\r\n      default:\r\n        type = 'identifier';\r\n    }\r\n\r\n    return {\r\n      type: type,\r\n      value: id,\r\n      pos: this.char,\r\n    };\r\n  },\r\n\r\n  /*\r\n   * Extract a numeric literal out of the next sequence of\r\n   * characters or return 'null' if its not possible. This method\r\n   * supports all numeric literals described in section 7.8.3\r\n   * of the EcmaScript 5 specification.\r\n   *\r\n   * This method's implementation was heavily influenced by the\r\n   * scanNumericLiteral function in the Esprima parser's source code.\r\n   */\r\n  scanNumericLiteral: function(): any {\r\n    let index = 0;\r\n    let value = '';\r\n    const length = this.input.length;\r\n    let char = this.peek(index);\r\n    let bad;\r\n\r\n    function isDecimalDigit(str) {\r\n      return /^[0-9]$/.test(str);\r\n    }\r\n\r\n    function isOctalDigit(str) {\r\n      return /^[0-7]$/.test(str);\r\n    }\r\n\r\n    function isHexDigit(str) {\r\n      return /^[0-9a-fA-F]$/.test(str);\r\n    }\r\n\r\n    function isIdentifierStart(ch) {\r\n      return ch === '$' || ch === '_' || ch === '\\\\' || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');\r\n    }\r\n\r\n    // handle negative num literals\r\n    if (char === '-') {\r\n      value += char;\r\n      index += 1;\r\n      char = this.peek(index);\r\n    }\r\n\r\n    // Numbers must start either with a decimal digit or a point.\r\n    if (char !== '.' && !isDecimalDigit(char)) {\r\n      return null;\r\n    }\r\n\r\n    if (char !== '.') {\r\n      value += this.peek(index);\r\n      index += 1;\r\n      char = this.peek(index);\r\n\r\n      if (value === '0') {\r\n        // Base-16 numbers.\r\n        if (char === 'x' || char === 'X') {\r\n          index += 1;\r\n          value += char;\r\n\r\n          while (index < length) {\r\n            char = this.peek(index);\r\n            if (!isHexDigit(char)) {\r\n              break;\r\n            }\r\n            value += char;\r\n            index += 1;\r\n          }\r\n\r\n          if (value.length <= 2) {\r\n            // 0x\r\n            return {\r\n              type: 'number',\r\n              value: value,\r\n              isMalformed: true,\r\n              pos: this.char,\r\n            };\r\n          }\r\n\r\n          if (index < length) {\r\n            char = this.peek(index);\r\n            if (isIdentifierStart(char)) {\r\n              return null;\r\n            }\r\n          }\r\n\r\n          return {\r\n            type: 'number',\r\n            value: value,\r\n            base: 16,\r\n            isMalformed: false,\r\n            pos: this.char,\r\n          };\r\n        }\r\n\r\n        // Base-8 numbers.\r\n        if (isOctalDigit(char)) {\r\n          index += 1;\r\n          value += char;\r\n          bad = false;\r\n\r\n          while (index < length) {\r\n            char = this.peek(index);\r\n\r\n            // Numbers like '019' (note the 9) are not valid octals\r\n            // but we still parse them and mark as malformed.\r\n\r\n            if (isDecimalDigit(char)) {\r\n              bad = true;\r\n            }\r\n            if (!isOctalDigit(char)) {\r\n              // if the char is a non punctuator then its not a valid number\r\n              if (!this.isPunctuator(char)) {\r\n                return null;\r\n              }\r\n              break;\r\n            }\r\n            value += char;\r\n            index += 1;\r\n          }\r\n\r\n          if (index < length) {\r\n            char = this.peek(index);\r\n            if (isIdentifierStart(char)) {\r\n              return null;\r\n            }\r\n          }\r\n\r\n          return {\r\n            type: 'number',\r\n            value: value,\r\n            base: 8,\r\n            isMalformed: bad,\r\n          };\r\n        }\r\n\r\n        // Decimal numbers that start with '0' such as '09' are illegal\r\n        // but we still parse them and return as malformed.\r\n\r\n        if (isDecimalDigit(char)) {\r\n          index += 1;\r\n          value += char;\r\n        }\r\n      }\r\n\r\n      while (index < length) {\r\n        char = this.peek(index);\r\n        if (!isDecimalDigit(char)) {\r\n          break;\r\n        }\r\n        value += char;\r\n        index += 1;\r\n      }\r\n    }\r\n\r\n    // Decimal digits.\r\n\r\n    if (char === '.') {\r\n      value += char;\r\n      index += 1;\r\n\r\n      while (index < length) {\r\n        char = this.peek(index);\r\n        if (!isDecimalDigit(char)) {\r\n          break;\r\n        }\r\n        value += char;\r\n        index += 1;\r\n      }\r\n    }\r\n\r\n    // Exponent part.\r\n\r\n    if (char === 'e' || char === 'E') {\r\n      value += char;\r\n      index += 1;\r\n      char = this.peek(index);\r\n\r\n      if (char === '+' || char === '-') {\r\n        value += this.peek(index);\r\n        index += 1;\r\n      }\r\n\r\n      char = this.peek(index);\r\n      if (isDecimalDigit(char)) {\r\n        value += char;\r\n        index += 1;\r\n\r\n        while (index < length) {\r\n          char = this.peek(index);\r\n          if (!isDecimalDigit(char)) {\r\n            break;\r\n          }\r\n          value += char;\r\n          index += 1;\r\n        }\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    if (index < length) {\r\n      char = this.peek(index);\r\n      if (!this.isPunctuator(char)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    return {\r\n      type: 'number',\r\n      value: value,\r\n      base: 10,\r\n      pos: this.char,\r\n      isMalformed: !isFinite(+value),\r\n    };\r\n  },\r\n\r\n  isPunctuator: function(ch1) {\r\n    switch (ch1) {\r\n      case '.':\r\n      case '(':\r\n      case ')':\r\n      case ',':\r\n      case '{':\r\n      case '}':\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  scanPunctuator: function() {\r\n    const ch1 = this.peek();\r\n\r\n    if (this.isPunctuator(ch1)) {\r\n      return {\r\n        type: ch1,\r\n        value: ch1,\r\n        pos: this.char,\r\n      };\r\n    }\r\n\r\n    return null;\r\n  },\r\n\r\n  /*\r\n   * Extract a string out of the next sequence of characters and/or\r\n   * lines or return 'null' if its not possible. Since strings can\r\n   * span across multiple lines this method has to move the char\r\n   * pointer.\r\n   *\r\n   * This method recognizes pseudo-multiline JavaScript strings:\r\n   *\r\n   *   var str = \"hello\\\r\n   *   world\";\r\n   */\r\n  scanStringLiteral: function() {\r\n    /*jshint loopfunc:true */\r\n    const quote = this.peek();\r\n\r\n    // String must start with a quote.\r\n    if (quote !== '\"' && quote !== \"'\") {\r\n      return null;\r\n    }\r\n\r\n    let value = '';\r\n\r\n    this.skip();\r\n\r\n    while (this.peek() !== quote) {\r\n      if (this.peek() === '') {\r\n        // End Of Line\r\n        return {\r\n          type: 'string',\r\n          value: value,\r\n          isUnclosed: true,\r\n          quote: quote,\r\n          pos: this.char,\r\n        };\r\n      }\r\n\r\n      const char = this.peek();\r\n      const jump = 1; // A length of a jump, after we're done\r\n      // parsing this character.\r\n\r\n      value += char;\r\n      this.skip(jump);\r\n    }\r\n\r\n    this.skip();\r\n    return {\r\n      type: 'string',\r\n      value: value,\r\n      isUnclosed: false,\r\n      quote: quote,\r\n      pos: this.char,\r\n    };\r\n  },\r\n};\r\n","import { Lexer } from './lexer';\r\n\r\nexport function Parser(this: any, expression) {\r\n  this.expression = expression;\r\n  this.lexer = new Lexer(expression);\r\n  this.tokens = this.lexer.tokenize();\r\n  this.index = 0;\r\n}\r\n\r\nParser.prototype = {\r\n  getAst: function() {\r\n    return this.start();\r\n  },\r\n\r\n  start: function() {\r\n    try {\r\n      return this.functionCall() || this.metricExpression();\r\n    } catch (e) {\r\n      return {\r\n        type: 'error',\r\n        message: e.message,\r\n        pos: e.pos,\r\n      };\r\n    }\r\n  },\r\n\r\n  curlyBraceSegment: function() {\r\n    if (this.match('identifier', '{') || this.match('{')) {\r\n      let curlySegment = '';\r\n\r\n      while (!this.match('') && !this.match('}')) {\r\n        curlySegment += this.consumeToken().value;\r\n      }\r\n\r\n      if (!this.match('}')) {\r\n        this.errorMark(\"Expected closing '}'\");\r\n      }\r\n\r\n      curlySegment += this.consumeToken().value;\r\n\r\n      // if curly segment is directly followed by identifier\r\n      // include it in the segment\r\n      if (this.match('identifier')) {\r\n        curlySegment += this.consumeToken().value;\r\n      }\r\n\r\n      return {\r\n        type: 'segment',\r\n        value: curlySegment,\r\n      };\r\n    } else {\r\n      return null;\r\n    }\r\n  },\r\n\r\n  metricSegment: function() {\r\n    const curly = this.curlyBraceSegment();\r\n    if (curly) {\r\n      return curly;\r\n    }\r\n\r\n    if (this.match('identifier') || this.match('number')) {\r\n      // hack to handle float numbers in metric segments\r\n      const parts = this.consumeToken().value.split('.');\r\n      if (parts.length === 2) {\r\n        this.tokens.splice(this.index, 0, { type: '.' });\r\n        this.tokens.splice(this.index + 1, 0, {\r\n          type: 'number',\r\n          value: parts[1],\r\n        });\r\n      }\r\n\r\n      return {\r\n        type: 'segment',\r\n        value: parts[0],\r\n      };\r\n    }\r\n\r\n    if (!this.match('templateStart')) {\r\n      this.errorMark('Expected metric identifier');\r\n    }\r\n\r\n    this.consumeToken();\r\n\r\n    if (!this.match('identifier')) {\r\n      this.errorMark('Expected identifier after templateStart');\r\n    }\r\n\r\n    const node = {\r\n      type: 'template',\r\n      value: this.consumeToken().value,\r\n    };\r\n\r\n    if (!this.match('templateEnd')) {\r\n      this.errorMark('Expected templateEnd');\r\n    }\r\n\r\n    this.consumeToken();\r\n    return node;\r\n  },\r\n\r\n  metricExpression: function() {\r\n    if (!this.match('templateStart') && !this.match('identifier') && !this.match('number') && !this.match('{')) {\r\n      return null;\r\n    }\r\n\r\n    const node = {\r\n      type: 'metric',\r\n      segments: [],\r\n    };\r\n\r\n    node.segments.push(this.metricSegment());\r\n\r\n    while (this.match('.')) {\r\n      this.consumeToken();\r\n\r\n      const segment = this.metricSegment();\r\n      if (!segment) {\r\n        this.errorMark('Expected metric identifier');\r\n      }\r\n\r\n      node.segments.push(segment);\r\n    }\r\n\r\n    return node;\r\n  },\r\n\r\n  functionCall: function() {\r\n    if (!this.match('identifier', '(')) {\r\n      return null;\r\n    }\r\n\r\n    const node: any = {\r\n      type: 'function',\r\n      name: this.consumeToken().value,\r\n    };\r\n\r\n    // consume left parenthesis\r\n    this.consumeToken();\r\n\r\n    node.params = this.functionParameters();\r\n\r\n    if (!this.match(')')) {\r\n      this.errorMark('Expected closing parenthesis');\r\n    }\r\n\r\n    this.consumeToken();\r\n\r\n    return node;\r\n  },\r\n\r\n  boolExpression: function() {\r\n    if (!this.match('bool')) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      type: 'bool',\r\n      value: this.consumeToken().value === 'true',\r\n    };\r\n  },\r\n\r\n  functionParameters: function() {\r\n    if (this.match(')') || this.match('')) {\r\n      return [];\r\n    }\r\n\r\n    const param =\r\n      this.functionCall() ||\r\n      this.numericLiteral() ||\r\n      this.seriesRefExpression() ||\r\n      this.boolExpression() ||\r\n      this.metricExpression() ||\r\n      this.stringLiteral();\r\n\r\n    if (!this.match(',')) {\r\n      return [param];\r\n    }\r\n\r\n    this.consumeToken();\r\n    return [param].concat(this.functionParameters());\r\n  },\r\n\r\n  seriesRefExpression: function() {\r\n    if (!this.match('identifier')) {\r\n      return null;\r\n    }\r\n\r\n    const value = this.tokens[this.index].value;\r\n    if (!value.match(/\\#[A-Z]/)) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.consumeToken();\r\n\r\n    return {\r\n      type: 'series-ref',\r\n      value: token.value,\r\n    };\r\n  },\r\n\r\n  numericLiteral: function() {\r\n    if (!this.match('number')) {\r\n      return null;\r\n    }\r\n\r\n    return {\r\n      type: 'number',\r\n      value: parseFloat(this.consumeToken().value),\r\n    };\r\n  },\r\n\r\n  stringLiteral: function() {\r\n    if (!this.match('string')) {\r\n      return null;\r\n    }\r\n\r\n    const token = this.consumeToken();\r\n    if (token.isUnclosed) {\r\n      throw { message: 'Unclosed string parameter', pos: token.pos };\r\n    }\r\n\r\n    return {\r\n      type: 'string',\r\n      value: token.value,\r\n    };\r\n  },\r\n\r\n  errorMark: function(text) {\r\n    const currentToken = this.tokens[this.index];\r\n    const type = currentToken ? currentToken.type : 'end of string';\r\n    throw {\r\n      message: text + ' instead found ' + type,\r\n      pos: currentToken ? currentToken.pos : this.lexer.char,\r\n    };\r\n  },\r\n\r\n  // returns token value and incre\r\n  consumeToken: function() {\r\n    this.index++;\r\n    return this.tokens[this.index - 1];\r\n  },\r\n\r\n  matchToken: function(type, index) {\r\n    const token = this.tokens[this.index + index];\r\n    return (token === undefined && type === '') || (token && token.type === type);\r\n  },\r\n\r\n  match: function(token1, token2) {\r\n    return this.matchToken(token1, 0) && (!token2 || this.matchToken(token2, 1));\r\n  },\r\n};\r\n","import _ from 'lodash';\r\nimport { Parser } from './parser';\r\n\r\nexport default class GraphiteQuery {\r\n  datasource: any;\r\n  target: any;\r\n  functions: any[];\r\n  segments: any[];\r\n  tags: any[];\r\n  error: any;\r\n  seriesByTagUsed: boolean;\r\n  checkOtherSegmentsIndex: number;\r\n  removeTagValue: string;\r\n  templateSrv: any;\r\n  scopedVars: any;\r\n\r\n  /** @ngInject */\r\n  constructor(datasource, target, templateSrv?, scopedVars?) {\r\n    this.datasource = datasource;\r\n    this.target = target;\r\n    this.parseTarget();\r\n\r\n    this.removeTagValue = '-- remove tag --';\r\n  }\r\n\r\n  parseTarget() {\r\n    this.functions = [];\r\n    this.segments = [];\r\n    this.tags = [];\r\n    this.error = null;\r\n\r\n    if (this.target.textEditor) {\r\n      return;\r\n    }\r\n\r\n    const parser = new Parser(this.target.target);\r\n    const astNode = parser.getAst();\r\n    if (astNode === null) {\r\n      this.checkOtherSegmentsIndex = 0;\r\n      return;\r\n    }\r\n\r\n    if (astNode.type === 'error') {\r\n      this.error = astNode.message + ' at position: ' + astNode.pos;\r\n      this.target.textEditor = true;\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.parseTargetRecursive(astNode, null);\r\n    } catch (err) {\r\n      console.log('error parsing target:', err.message);\r\n      this.error = err.message;\r\n      this.target.textEditor = true;\r\n    }\r\n\r\n    this.checkOtherSegmentsIndex = this.segments.length - 1;\r\n    this.checkForSeriesByTag();\r\n  }\r\n\r\n  checkForSeriesByTag() {\r\n    const seriesByTagFunc = _.find(this.functions, func => func.def.name === 'seriesByTag');\r\n    if (seriesByTagFunc) {\r\n      this.seriesByTagUsed = true;\r\n      seriesByTagFunc.hidden = true;\r\n      const tags = this.splitSeriesByTagParams(seriesByTagFunc);\r\n      this.tags = tags;\r\n    }\r\n  }\r\n\r\n  getSegmentPathUpTo(index) {\r\n    const arr = this.segments.slice(0, index);\r\n\r\n    return _.reduce(\r\n      arr,\r\n      function(result, segment) {\r\n        return result ? result + '.' + segment.value : segment.value;\r\n      },\r\n      ''\r\n    );\r\n  }\r\n\r\n  parseTargetRecursive(astNode, func) {\r\n    if (astNode === null) {\r\n      return null;\r\n    }\r\n\r\n    switch (astNode.type) {\r\n      case 'function':\r\n        const innerFunc = this.datasource.createFuncInstance(astNode.name, {\r\n          withDefaultParams: false,\r\n        });\r\n        _.each(astNode.params, param => {\r\n          this.parseTargetRecursive(param, innerFunc);\r\n        });\r\n\r\n        innerFunc.updateText();\r\n        this.functions.push(innerFunc);\r\n        break;\r\n      case 'series-ref':\r\n        if (this.segments.length > 0) {\r\n          this.addFunctionParameter(func, astNode.value);\r\n        } else {\r\n          this.segments.push(astNode);\r\n        }\r\n        break;\r\n      case 'bool':\r\n      case 'string':\r\n      case 'number':\r\n        this.addFunctionParameter(func, astNode.value);\r\n        break;\r\n      case 'metric':\r\n        if (this.segments.length > 0) {\r\n          this.addFunctionParameter(func, _.join(_.map(astNode.segments, 'value'), '.'));\r\n        } else {\r\n          this.segments = astNode.segments;\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  updateSegmentValue(segment, index) {\r\n    this.segments[index].value = segment.value;\r\n  }\r\n\r\n  addSelectMetricSegment() {\r\n    this.segments.push({ value: 'select metric' });\r\n  }\r\n\r\n  addFunction(newFunc) {\r\n    this.functions.push(newFunc);\r\n    this.moveAliasFuncLast();\r\n  }\r\n\r\n  moveAliasFuncLast() {\r\n    const aliasFunc = _.find(this.functions, function(func) {\r\n      return func.def.name.startsWith('alias');\r\n    });\r\n\r\n    if (aliasFunc) {\r\n      this.functions = _.without(this.functions, aliasFunc);\r\n      this.functions.push(aliasFunc);\r\n    }\r\n  }\r\n\r\n  addFunctionParameter(func, value) {\r\n    if (func.params.length >= func.def.params.length && !_.get(_.last(func.def.params), 'multiple', false)) {\r\n      throw { message: 'too many parameters for function ' + func.def.name };\r\n    }\r\n    func.params.push(value);\r\n  }\r\n\r\n  removeFunction(func) {\r\n    this.functions = _.without(this.functions, func);\r\n  }\r\n\r\n  updateModelTarget(targets) {\r\n    // render query\r\n    if (!this.target.textEditor) {\r\n      const metricPath = this.getSegmentPathUpTo(this.segments.length).replace(/\\.select metric$/, '');\r\n      this.target.target = _.reduce(this.functions, wrapFunction, metricPath);\r\n    }\r\n\r\n    this.updateRenderedTarget(this.target, targets);\r\n\r\n    // loop through other queries and update targetFull as needed\r\n    for (const target of targets || []) {\r\n      if (target.refId !== this.target.refId) {\r\n        this.updateRenderedTarget(target, targets);\r\n      }\r\n    }\r\n  }\r\n\r\n  updateRenderedTarget(target, targets) {\r\n    // render nested query\r\n    const targetsByRefId = _.keyBy(targets, 'refId');\r\n\r\n    // no references to self\r\n    delete targetsByRefId[target.refId];\r\n\r\n    const nestedSeriesRefRegex = /\\#([A-Z])/g;\r\n    let targetWithNestedQueries = target.target;\r\n\r\n    // Use ref count to track circular references\r\n    function countTargetRefs(targetsByRefId, refId) {\r\n      let refCount = 0;\r\n      _.each(targetsByRefId, (t, id) => {\r\n        if (id !== refId) {\r\n          const match = nestedSeriesRefRegex.exec(t.target);\r\n          const count = match && match.length ? match.length - 1 : 0;\r\n          refCount += count;\r\n        }\r\n      });\r\n      targetsByRefId[refId].refCount = refCount;\r\n    }\r\n    _.each(targetsByRefId, (t, id) => {\r\n      countTargetRefs(targetsByRefId, id);\r\n    });\r\n\r\n    // Keep interpolating until there are no query references\r\n    // The reason for the loop is that the referenced query might contain another reference to another query\r\n    while (targetWithNestedQueries.match(nestedSeriesRefRegex)) {\r\n      const updated = targetWithNestedQueries.replace(nestedSeriesRefRegex, (match, g1) => {\r\n        const t = targetsByRefId[g1];\r\n        if (!t) {\r\n          return match;\r\n        }\r\n\r\n        // no circular references\r\n        if (t.refCount === 0) {\r\n          delete targetsByRefId[g1];\r\n        }\r\n        t.refCount--;\r\n\r\n        return t.target;\r\n      });\r\n\r\n      if (updated === targetWithNestedQueries) {\r\n        break;\r\n      }\r\n\r\n      targetWithNestedQueries = updated;\r\n    }\r\n\r\n    delete target.targetFull;\r\n    if (target.target !== targetWithNestedQueries) {\r\n      target.targetFull = targetWithNestedQueries;\r\n    }\r\n  }\r\n\r\n  splitSeriesByTagParams(func) {\r\n    const tagPattern = /([^\\!=~]+)(\\!?=~?)(.*)/;\r\n    return _.flatten(\r\n      _.map(func.params, (param: string) => {\r\n        const matches = tagPattern.exec(param);\r\n        if (matches) {\r\n          const tag = matches.slice(1);\r\n          if (tag.length === 3) {\r\n            return {\r\n              key: tag[0],\r\n              operator: tag[1],\r\n              value: tag[2],\r\n            };\r\n          }\r\n        }\r\n        return [];\r\n      })\r\n    );\r\n  }\r\n\r\n  getSeriesByTagFuncIndex() {\r\n    return _.findIndex(this.functions, func => func.def.name === 'seriesByTag');\r\n  }\r\n\r\n  getSeriesByTagFunc() {\r\n    const seriesByTagFuncIndex = this.getSeriesByTagFuncIndex();\r\n    if (seriesByTagFuncIndex >= 0) {\r\n      return this.functions[seriesByTagFuncIndex];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  addTag(tag) {\r\n    const newTagParam = renderTagString(tag);\r\n    this.getSeriesByTagFunc().params.push(newTagParam);\r\n    this.tags.push(tag);\r\n  }\r\n\r\n  removeTag(index) {\r\n    this.getSeriesByTagFunc().params.splice(index, 1);\r\n    this.tags.splice(index, 1);\r\n  }\r\n\r\n  updateTag(tag, tagIndex) {\r\n    this.error = null;\r\n\r\n    if (tag.key === this.removeTagValue) {\r\n      this.removeTag(tagIndex);\r\n      return;\r\n    }\r\n\r\n    const newTagParam = renderTagString(tag);\r\n    this.getSeriesByTagFunc().params[tagIndex] = newTagParam;\r\n    this.tags[tagIndex] = tag;\r\n  }\r\n\r\n  renderTagExpressions(excludeIndex = -1) {\r\n    return _.compact(\r\n      _.map(this.tags, (tagExpr, index) => {\r\n        // Don't render tag that we want to lookup\r\n        if (index !== excludeIndex) {\r\n          return tagExpr.key + tagExpr.operator + tagExpr.value;\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n\r\nfunction wrapFunction(target, func) {\r\n  return func.render(target);\r\n}\r\n\r\nfunction renderTagString(tag) {\r\n  return tag.key + tag.operator + tag.value;\r\n}\r\n","import './add_graphite_func';\r\nimport './func_editor';\r\n\r\nimport _ from 'lodash';\r\nimport GraphiteQuery from './graphite_query';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nconst GRAPHITE_TAG_OPERATORS = ['=', '!=', '=~', '!=~'];\r\nconst TAG_PREFIX = 'tag: ';\r\n\r\nexport class GraphiteQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  queryModel: GraphiteQuery;\r\n  segments: any[];\r\n  addTagSegments: any[];\r\n  removeTagValue: string;\r\n  supportsTags: boolean;\r\n  paused: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private uiSegmentSrv, private templateSrv, $timeout) {\r\n    super($scope, $injector);\r\n    this.supportsTags = this.datasource.supportsTags;\r\n    this.paused = false;\r\n    this.target.target = this.target.target || '';\r\n\r\n    this.datasource.waitForFuncDefsLoaded().then(() => {\r\n      this.queryModel = new GraphiteQuery(this.datasource, this.target, templateSrv);\r\n      this.buildSegments();\r\n    });\r\n\r\n    this.removeTagValue = '-- remove tag --';\r\n  }\r\n\r\n  parseTarget() {\r\n    this.queryModel.parseTarget();\r\n    this.buildSegments();\r\n  }\r\n\r\n  toggleEditorMode() {\r\n    this.target.textEditor = !this.target.textEditor;\r\n    this.parseTarget();\r\n  }\r\n\r\n  buildSegments() {\r\n    this.segments = _.map(this.queryModel.segments, segment => {\r\n      return this.uiSegmentSrv.newSegment(segment);\r\n    });\r\n\r\n    const checkOtherSegmentsIndex = this.queryModel.checkOtherSegmentsIndex || 0;\r\n    this.checkOtherSegments(checkOtherSegmentsIndex);\r\n\r\n    if (this.queryModel.seriesByTagUsed) {\r\n      this.fixTagSegments();\r\n    }\r\n  }\r\n\r\n  addSelectMetricSegment() {\r\n    this.queryModel.addSelectMetricSegment();\r\n    this.segments.push(this.uiSegmentSrv.newSelectMetric());\r\n  }\r\n\r\n  checkOtherSegments(fromIndex) {\r\n    if (this.queryModel.segments.length === 1 && this.queryModel.segments[0].type === 'series-ref') {\r\n      return;\r\n    }\r\n\r\n    if (fromIndex === 0) {\r\n      this.addSelectMetricSegment();\r\n      return;\r\n    }\r\n\r\n    const path = this.queryModel.getSegmentPathUpTo(fromIndex + 1);\r\n    if (path === '') {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return this.datasource\r\n      .metricFindQuery(path)\r\n      .then(segments => {\r\n        if (segments.length === 0) {\r\n          if (path !== '') {\r\n            this.queryModel.segments = this.queryModel.segments.splice(0, fromIndex);\r\n            this.segments = this.segments.splice(0, fromIndex);\r\n            this.addSelectMetricSegment();\r\n          }\r\n        } else if (segments[0].expandable) {\r\n          if (this.segments.length === fromIndex) {\r\n            this.addSelectMetricSegment();\r\n          } else {\r\n            return this.checkOtherSegments(fromIndex + 1);\r\n          }\r\n        }\r\n      })\r\n      .catch(err => {\r\n        appEvents.emit('alert-error', ['Error', err]);\r\n      });\r\n  }\r\n\r\n  setSegmentFocus(segmentIndex) {\r\n    _.each(this.segments, (segment, index) => {\r\n      segment.focus = segmentIndex === index;\r\n    });\r\n  }\r\n\r\n  getAltSegments(index, prefix) {\r\n    let query = prefix && prefix.length > 0 ? '*' + prefix + '*' : '*';\r\n    if (index > 0) {\r\n      query = this.queryModel.getSegmentPathUpTo(index) + '.' + query;\r\n    }\r\n    const options = {\r\n      range: this.panelCtrl.range,\r\n      requestId: 'get-alt-segments',\r\n    };\r\n\r\n    return this.datasource\r\n      .metricFindQuery(query, options)\r\n      .then(segments => {\r\n        const altSegments = _.map(segments, segment => {\r\n          return this.uiSegmentSrv.newSegment({\r\n            value: segment.text,\r\n            expandable: segment.expandable,\r\n          });\r\n        });\r\n\r\n        if (index > 0 && altSegments.length === 0) {\r\n          return altSegments;\r\n        }\r\n\r\n        // add query references\r\n        if (index === 0) {\r\n          _.eachRight(this.panelCtrl.panel.targets, target => {\r\n            if (target.refId === this.queryModel.target.refId) {\r\n              return;\r\n            }\r\n\r\n            altSegments.unshift(\r\n              this.uiSegmentSrv.newSegment({\r\n                type: 'series-ref',\r\n                value: '#' + target.refId,\r\n                expandable: false,\r\n              })\r\n            );\r\n          });\r\n        }\r\n\r\n        // add template variables\r\n        _.eachRight(this.templateSrv.variables, variable => {\r\n          altSegments.unshift(\r\n            this.uiSegmentSrv.newSegment({\r\n              type: 'template',\r\n              value: '$' + variable.name,\r\n              expandable: true,\r\n            })\r\n          );\r\n        });\r\n\r\n        // add wildcard option\r\n        altSegments.unshift(this.uiSegmentSrv.newSegment('*'));\r\n\r\n        if (this.supportsTags && index === 0) {\r\n          this.removeTaggedEntry(altSegments);\r\n          return this.addAltTagSegments(prefix, altSegments);\r\n        } else {\r\n          return altSegments;\r\n        }\r\n      })\r\n      .catch(err => {\r\n        return [];\r\n      });\r\n  }\r\n\r\n  addAltTagSegments(prefix, altSegments) {\r\n    return this.getTagsAsSegments(prefix).then(tagSegments => {\r\n      tagSegments = _.map(tagSegments, segment => {\r\n        segment.value = TAG_PREFIX + segment.value;\r\n        return segment;\r\n      });\r\n      return altSegments.concat(...tagSegments);\r\n    });\r\n  }\r\n\r\n  removeTaggedEntry(altSegments) {\r\n    altSegments = _.remove(altSegments, s => s.value === '_tagged');\r\n  }\r\n\r\n  segmentValueChanged(segment, segmentIndex) {\r\n    this.error = null;\r\n    this.queryModel.updateSegmentValue(segment, segmentIndex);\r\n\r\n    if (this.queryModel.functions.length > 0 && this.queryModel.functions[0].def.fake) {\r\n      this.queryModel.functions = [];\r\n    }\r\n\r\n    if (segment.type === 'tag') {\r\n      const tag = removeTagPrefix(segment.value);\r\n      this.pause();\r\n      this.addSeriesByTagFunc(tag);\r\n      return;\r\n    }\r\n\r\n    if (segment.expandable) {\r\n      return this.checkOtherSegments(segmentIndex + 1).then(() => {\r\n        this.setSegmentFocus(segmentIndex + 1);\r\n        this.targetChanged();\r\n      });\r\n    } else {\r\n      this.spliceSegments(segmentIndex + 1);\r\n    }\r\n\r\n    this.setSegmentFocus(segmentIndex + 1);\r\n    this.targetChanged();\r\n  }\r\n\r\n  spliceSegments(index) {\r\n    this.segments = this.segments.splice(0, index);\r\n    this.queryModel.segments = this.queryModel.segments.splice(0, index);\r\n  }\r\n\r\n  emptySegments() {\r\n    this.queryModel.segments = [];\r\n    this.segments = [];\r\n  }\r\n\r\n  targetTextChanged() {\r\n    this.updateModelTarget();\r\n    this.refresh();\r\n  }\r\n\r\n  updateModelTarget() {\r\n    this.queryModel.updateModelTarget(this.panelCtrl.panel.targets);\r\n  }\r\n\r\n  targetChanged() {\r\n    if (this.queryModel.error) {\r\n      return;\r\n    }\r\n\r\n    const oldTarget = this.queryModel.target.target;\r\n    this.updateModelTarget();\r\n\r\n    if (this.queryModel.target !== oldTarget && !this.paused) {\r\n      this.panelCtrl.refresh();\r\n    }\r\n  }\r\n\r\n  addFunction(funcDef) {\r\n    const newFunc = this.datasource.createFuncInstance(funcDef, {\r\n      withDefaultParams: true,\r\n    });\r\n    newFunc.added = true;\r\n    this.queryModel.addFunction(newFunc);\r\n    this.smartlyHandleNewAliasByNode(newFunc);\r\n\r\n    if (this.segments.length === 1 && this.segments[0].fake) {\r\n      this.emptySegments();\r\n    }\r\n\r\n    if (!newFunc.params.length && newFunc.added) {\r\n      this.targetChanged();\r\n    }\r\n\r\n    if (newFunc.def.name === 'seriesByTag') {\r\n      this.parseTarget();\r\n    }\r\n  }\r\n\r\n  removeFunction(func) {\r\n    this.queryModel.removeFunction(func);\r\n    this.targetChanged();\r\n  }\r\n\r\n  addSeriesByTagFunc(tag) {\r\n    const newFunc = this.datasource.createFuncInstance('seriesByTag', {\r\n      withDefaultParams: false,\r\n    });\r\n    const tagParam = `${tag}=`;\r\n    newFunc.params = [tagParam];\r\n    this.queryModel.addFunction(newFunc);\r\n    newFunc.added = true;\r\n\r\n    this.emptySegments();\r\n    this.targetChanged();\r\n    this.parseTarget();\r\n  }\r\n\r\n  smartlyHandleNewAliasByNode(func) {\r\n    if (func.def.name !== 'aliasByNode') {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this.segments.length; i++) {\r\n      if (this.segments[i].value.indexOf('*') >= 0) {\r\n        func.params[0] = i;\r\n        func.added = false;\r\n        this.targetChanged();\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  getAllTags() {\r\n    return this.datasource.getTags().then(values => {\r\n      const altTags = _.map(values, 'text');\r\n      altTags.splice(0, 0, this.removeTagValue);\r\n      return mapToDropdownOptions(altTags);\r\n    });\r\n  }\r\n\r\n  getTags(index, tagPrefix) {\r\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\r\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\r\n      const altTags = _.map(values, 'text');\r\n      altTags.splice(0, 0, this.removeTagValue);\r\n      return mapToDropdownOptions(altTags);\r\n    });\r\n  }\r\n\r\n  getTagsAsSegments(tagPrefix) {\r\n    const tagExpressions = this.queryModel.renderTagExpressions();\r\n    return this.datasource.getTagsAutoComplete(tagExpressions, tagPrefix).then(values => {\r\n      return _.map(values, val => {\r\n        return this.uiSegmentSrv.newSegment({\r\n          value: val.text,\r\n          type: 'tag',\r\n          expandable: false,\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  getTagOperators() {\r\n    return mapToDropdownOptions(GRAPHITE_TAG_OPERATORS);\r\n  }\r\n\r\n  getAllTagValues(tag) {\r\n    const tagKey = tag.key;\r\n    return this.datasource.getTagValues(tagKey).then(values => {\r\n      const altValues = _.map(values, 'text');\r\n      return mapToDropdownOptions(altValues);\r\n    });\r\n  }\r\n\r\n  getTagValues(tag, index, valuePrefix) {\r\n    const tagExpressions = this.queryModel.renderTagExpressions(index);\r\n    const tagKey = tag.key;\r\n    return this.datasource.getTagValuesAutoComplete(tagExpressions, tagKey, valuePrefix).then(values => {\r\n      const altValues = _.map(values, 'text');\r\n      // Add template variables as additional values\r\n      _.eachRight(this.templateSrv.variables, variable => {\r\n        altValues.push('${' + variable.name + ':regex}');\r\n      });\r\n      return mapToDropdownOptions(altValues);\r\n    });\r\n  }\r\n\r\n  tagChanged(tag, tagIndex) {\r\n    this.queryModel.updateTag(tag, tagIndex);\r\n    this.targetChanged();\r\n  }\r\n\r\n  addNewTag(segment) {\r\n    const newTagKey = segment.value;\r\n    const newTag = { key: newTagKey, operator: '=', value: '' };\r\n    this.queryModel.addTag(newTag);\r\n    this.targetChanged();\r\n    this.fixTagSegments();\r\n  }\r\n\r\n  removeTag(index) {\r\n    this.queryModel.removeTag(index);\r\n    this.targetChanged();\r\n  }\r\n\r\n  fixTagSegments() {\r\n    // Adding tag with the same name as just removed works incorrectly if single segment is used (instead of array)\r\n    this.addTagSegments = [this.uiSegmentSrv.newPlusButton()];\r\n  }\r\n\r\n  showDelimiter(index) {\r\n    return index !== this.queryModel.tags.length - 1;\r\n  }\r\n\r\n  pause() {\r\n    this.paused = true;\r\n  }\r\n\r\n  unpause() {\r\n    this.paused = false;\r\n    this.panelCtrl.refresh();\r\n  }\r\n}\r\n\r\nfunction mapToDropdownOptions(results) {\r\n  return _.map(results, value => {\r\n    return { text: value, value: value };\r\n  });\r\n}\r\n\r\nfunction removeTagPrefix(value: string): string {\r\n  return value.replace(TAG_PREFIX, '');\r\n}\r\n","import { GraphiteDatasource } from './datasource';\r\nimport { GraphiteQueryCtrl } from './query_ctrl';\r\nimport { GraphiteConfigCtrl } from './config_ctrl';\r\n\r\nclass AnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  GraphiteDatasource as Datasource,\r\n  GraphiteQueryCtrl as QueryCtrl,\r\n  GraphiteConfigCtrl as ConfigCtrl,\r\n  AnnotationsQueryCtrl,\r\n};\r\n","export class GraphiteConfigCtrl {\r\n  static templateUrl = 'public/app/plugins/datasource/graphite/partials/config.html';\r\n  datasourceSrv: any;\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, datasourceSrv) {\r\n    this.datasourceSrv = datasourceSrv;\r\n    this.current.jsonData = this.current.jsonData || {};\r\n    this.current.jsonData.graphiteVersion = this.current.jsonData.graphiteVersion || '0.9';\r\n    this.autoDetectGraphiteVersion();\r\n  }\r\n\r\n  autoDetectGraphiteVersion() {\r\n    if (!this.current.id) {\r\n      return;\r\n    }\r\n\r\n    this.datasourceSrv\r\n      .loadDatasource(this.current.name)\r\n      .then(ds => {\r\n        return ds.getVersion();\r\n      })\r\n      .then(version => {\r\n        this.graphiteVersions.push({ name: version, value: version });\r\n        this.current.jsonData.graphiteVersion = version;\r\n      });\r\n  }\r\n\r\n  graphiteVersions = [\r\n    { name: '0.9.x', value: '0.9' },\r\n    { name: '1.0.x', value: '1.0' },\r\n    { name: '1.1.x', value: '1.1' },\r\n  ];\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class CloudWatchQueryParameter {\r\n  constructor() {\r\n    return {\r\n      templateUrl: 'public/app/plugins/datasource/cloudwatch/partials/query.parameter.html',\r\n      controller: 'CloudWatchQueryParameterCtrl',\r\n      restrict: 'E',\r\n      scope: {\r\n        target: '=',\r\n        datasource: '=',\r\n        onChange: '&',\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\nexport class CloudWatchQueryParameterCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, templateSrv, uiSegmentSrv, datasourceSrv, $q) {\r\n    $scope.init = function() {\r\n      const target = $scope.target;\r\n      target.namespace = target.namespace || '';\r\n      target.metricName = target.metricName || '';\r\n      target.statistics = target.statistics || ['Average'];\r\n      target.dimensions = target.dimensions || {};\r\n      target.period = target.period || '';\r\n      target.region = target.region || 'default';\r\n      target.id = target.id || '';\r\n      target.expression = target.expression || '';\r\n      target.returnData = target.returnData || false;\r\n      target.highResolution = target.highResolution || false;\r\n\r\n      $scope.regionSegment = uiSegmentSrv.getSegmentForValue($scope.target.region, 'select region');\r\n      $scope.namespaceSegment = uiSegmentSrv.getSegmentForValue($scope.target.namespace, 'select namespace');\r\n      $scope.metricSegment = uiSegmentSrv.getSegmentForValue($scope.target.metricName, 'select metric');\r\n\r\n      $scope.dimSegments = _.reduce(\r\n        $scope.target.dimensions,\r\n        function(memo, value, key) {\r\n          memo.push(uiSegmentSrv.newKey(key));\r\n          memo.push(uiSegmentSrv.newOperator('='));\r\n          memo.push(uiSegmentSrv.newKeyValue(value));\r\n          return memo;\r\n        },\r\n        []\r\n      );\r\n\r\n      $scope.statSegments = _.map($scope.target.statistics, function(stat) {\r\n        return uiSegmentSrv.getSegmentForValue(stat);\r\n      });\r\n\r\n      $scope.ensurePlusButton($scope.statSegments);\r\n      $scope.ensurePlusButton($scope.dimSegments);\r\n      $scope.removeDimSegment = uiSegmentSrv.newSegment({\r\n        fake: true,\r\n        value: '-- remove dimension --',\r\n      });\r\n      $scope.removeStatSegment = uiSegmentSrv.newSegment({\r\n        fake: true,\r\n        value: '-- remove stat --',\r\n      });\r\n\r\n      if (_.isEmpty($scope.target.region)) {\r\n        $scope.target.region = 'default';\r\n      }\r\n\r\n      if (!$scope.onChange) {\r\n        $scope.onChange = function() {};\r\n      }\r\n    };\r\n\r\n    $scope.getStatSegments = function() {\r\n      return $q.when(\r\n        _.flatten([\r\n          angular.copy($scope.removeStatSegment),\r\n          _.map($scope.datasource.standardStatistics, function(s) {\r\n            return uiSegmentSrv.getSegmentForValue(s);\r\n          }),\r\n          uiSegmentSrv.getSegmentForValue('pNN.NN'),\r\n        ])\r\n      );\r\n    };\r\n\r\n    $scope.statSegmentChanged = function(segment, index) {\r\n      if (segment.value === $scope.removeStatSegment.value) {\r\n        $scope.statSegments.splice(index, 1);\r\n      } else {\r\n        segment.type = 'value';\r\n      }\r\n\r\n      $scope.target.statistics = _.reduce(\r\n        $scope.statSegments,\r\n        function(memo, seg) {\r\n          if (!seg.fake) {\r\n            memo.push(seg.value);\r\n          }\r\n          return memo;\r\n        },\r\n        []\r\n      );\r\n\r\n      $scope.ensurePlusButton($scope.statSegments);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.ensurePlusButton = function(segments) {\r\n      const count = segments.length;\r\n      const lastSegment = segments[Math.max(count - 1, 0)];\r\n\r\n      if (!lastSegment || lastSegment.type !== 'plus-button') {\r\n        segments.push(uiSegmentSrv.newPlusButton());\r\n      }\r\n    };\r\n\r\n    $scope.getDimSegments = function(segment, $index) {\r\n      if (segment.type === 'operator') {\r\n        return $q.when([]);\r\n      }\r\n\r\n      const target = $scope.target;\r\n      let query = $q.when([]);\r\n\r\n      if (segment.type === 'key' || segment.type === 'plus-button') {\r\n        query = $scope.datasource.getDimensionKeys($scope.target.namespace, $scope.target.region);\r\n      } else if (segment.type === 'value') {\r\n        const dimensionKey = $scope.dimSegments[$index - 2].value;\r\n        query = $scope.datasource.getDimensionValues(\r\n          target.region,\r\n          target.namespace,\r\n          target.metricName,\r\n          dimensionKey,\r\n          target.dimensions\r\n        );\r\n      }\r\n\r\n      return query.then($scope.transformToSegments(true)).then(function(results) {\r\n        if (segment.type === 'key') {\r\n          results.splice(0, 0, angular.copy($scope.removeDimSegment));\r\n        }\r\n        return results;\r\n      });\r\n    };\r\n\r\n    $scope.dimSegmentChanged = function(segment, index) {\r\n      $scope.dimSegments[index] = segment;\r\n\r\n      if (segment.value === $scope.removeDimSegment.value) {\r\n        $scope.dimSegments.splice(index, 3);\r\n      } else if (segment.type === 'plus-button') {\r\n        $scope.dimSegments.push(uiSegmentSrv.newOperator('='));\r\n        $scope.dimSegments.push(uiSegmentSrv.newFake('select dimension value', 'value', 'query-segment-value'));\r\n        segment.type = 'key';\r\n        segment.cssClass = 'query-segment-key';\r\n      }\r\n\r\n      $scope.syncDimSegmentsWithModel();\r\n      $scope.ensurePlusButton($scope.dimSegments);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.syncDimSegmentsWithModel = function() {\r\n      const dims = {};\r\n      const length = $scope.dimSegments.length;\r\n\r\n      for (let i = 0; i < length - 2; i += 3) {\r\n        const keySegment = $scope.dimSegments[i];\r\n        const valueSegment = $scope.dimSegments[i + 2];\r\n        if (!valueSegment.fake) {\r\n          dims[keySegment.value] = valueSegment.value;\r\n        }\r\n      }\r\n\r\n      $scope.target.dimensions = dims;\r\n    };\r\n\r\n    $scope.getRegions = function() {\r\n      return $scope.datasource\r\n        .metricFindQuery('regions()')\r\n        .then(function(results) {\r\n          results.unshift({ text: 'default' });\r\n          return results;\r\n        })\r\n        .then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.getNamespaces = function() {\r\n      return $scope.datasource.metricFindQuery('namespaces()').then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.getMetrics = function() {\r\n      return $scope.datasource\r\n        .metricFindQuery('metrics(' + $scope.target.namespace + ',' + $scope.target.region + ')')\r\n        .then($scope.transformToSegments(true));\r\n    };\r\n\r\n    $scope.regionChanged = function() {\r\n      $scope.target.region = $scope.regionSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.namespaceChanged = function() {\r\n      $scope.target.namespace = $scope.namespaceSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.metricChanged = function() {\r\n      $scope.target.metricName = $scope.metricSegment.value;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.transformToSegments = function(addTemplateVars) {\r\n      return function(results) {\r\n        const segments = _.map(results, function(segment) {\r\n          return uiSegmentSrv.newSegment({\r\n            value: segment.text,\r\n            expandable: segment.expandable,\r\n          });\r\n        });\r\n\r\n        if (addTemplateVars) {\r\n          _.each(templateSrv.variables, function(variable) {\r\n            segments.unshift(\r\n              uiSegmentSrv.newSegment({\r\n                type: 'template',\r\n                value: '$' + variable.name,\r\n                expandable: true,\r\n              })\r\n            );\r\n          });\r\n        }\r\n\r\n        return segments;\r\n      };\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').directive('cloudwatchQueryParameter', CloudWatchQueryParameter);\r\nangular.module('grafana.controllers').controller('CloudWatchQueryParameterCtrl', CloudWatchQueryParameterCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport * as templatingVariable from 'app/features/templating/variable';\r\n// import * as moment from 'moment';\r\n\r\nexport default class CloudWatchDatasource {\r\n  type: any;\r\n  name: any;\r\n  supportMetrics: any;\r\n  proxyUrl: any;\r\n  defaultRegion: any;\r\n  instanceSettings: any;\r\n  standardStatistics: any;\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\r\n    this.type = 'cloudwatch';\r\n    this.name = instanceSettings.name;\r\n    this.supportMetrics = true;\r\n    this.proxyUrl = instanceSettings.url;\r\n    this.defaultRegion = instanceSettings.jsonData.defaultRegion;\r\n    this.instanceSettings = instanceSettings;\r\n    this.standardStatistics = ['Average', 'Maximum', 'Minimum', 'Sum', 'SampleCount'];\r\n  }\r\n\r\n  query(options) {\r\n    options = angular.copy(options);\r\n    options.targets = this.expandTemplateVariable(options.targets, options.scopedVars, this.templateSrv);\r\n\r\n    const queries = _.filter(options.targets, item => {\r\n      return (\r\n        (item.id !== '' || item.hide !== true) &&\r\n        ((!!item.region && !!item.namespace && !!item.metricName && !_.isEmpty(item.statistics)) ||\r\n          item.expression.length > 0)\r\n      );\r\n    }).map(item => {\r\n      item.region = this.templateSrv.replace(this.getActualRegion(item.region), options.scopedVars);\r\n      item.namespace = this.templateSrv.replace(item.namespace, options.scopedVars);\r\n      item.metricName = this.templateSrv.replace(item.metricName, options.scopedVars);\r\n      item.dimensions = this.convertDimensionFormat(item.dimensions, options.scopedVars);\r\n      item.period = String(this.getPeriod(item, options)); // use string format for period in graph query, and alerting\r\n      item.id = this.templateSrv.replace(item.id, options.scopedVars);\r\n      item.expression = this.templateSrv.replace(item.expression, options.scopedVars);\r\n      item.returnData = typeof item.hide === 'undefined' ? true : !item.hide;\r\n\r\n      // valid ExtendedStatistics is like p90.00, check the pattern\r\n      const hasInvalidStatistics = item.statistics.some(s => {\r\n        return s.indexOf('p') === 0 && !/p\\d{2}\\.\\d{2}/.test(s);\r\n      });\r\n      if (hasInvalidStatistics) {\r\n        throw { message: 'Invalid extended statistics' };\r\n      }\r\n\r\n      return _.extend(\r\n        {\r\n          refId: item.refId,\r\n          intervalMs: options.intervalMs,\r\n          maxDataPoints: options.maxDataPoints,\r\n          datasourceId: this.instanceSettings.id,\r\n          type: 'timeSeriesQuery',\r\n        },\r\n        item\r\n      );\r\n    });\r\n\r\n    // No valid targets, return the empty result to save a round trip.\r\n    if (_.isEmpty(queries)) {\r\n      const d = this.$q.defer();\r\n      d.resolve({ data: [] });\r\n      return d.promise;\r\n    }\r\n\r\n    const request = {\r\n      from: options.range.from.valueOf().toString(),\r\n      to: options.range.to.valueOf().toString(),\r\n      queries: queries,\r\n    };\r\n\r\n    return this.performTimeSeriesQuery(request);\r\n  }\r\n\r\n  getPeriod(target, options, now?) {\r\n    const start = this.convertToCloudWatchTime(options.range.from, false);\r\n    const end = this.convertToCloudWatchTime(options.range.to, true);\r\n    now = Math.round((now || Date.now()) / 1000);\r\n\r\n    let period;\r\n    const range = end - start;\r\n\r\n    const hourSec = 60 * 60;\r\n    const daySec = hourSec * 24;\r\n    let periodUnit = 60;\r\n    if (!target.period) {\r\n      if (now - start <= daySec * 15) {\r\n        // until 15 days ago\r\n        if (target.namespace === 'AWS/EC2') {\r\n          periodUnit = period = 300;\r\n        } else {\r\n          periodUnit = period = 60;\r\n        }\r\n      } else if (now - start <= daySec * 63) {\r\n        // until 63 days ago\r\n        periodUnit = period = 60 * 5;\r\n      } else if (now - start <= daySec * 455) {\r\n        // until 455 days ago\r\n        periodUnit = period = 60 * 60;\r\n      } else {\r\n        // over 455 days, should return error, but try to long period\r\n        periodUnit = period = 60 * 60;\r\n      }\r\n    } else {\r\n      if (/^\\d+$/.test(target.period)) {\r\n        period = parseInt(target.period, 10);\r\n      } else {\r\n        period = kbn.interval_to_seconds(this.templateSrv.replace(target.period, options.scopedVars));\r\n      }\r\n    }\r\n    if (period < 1) {\r\n      period = 1;\r\n    }\r\n    if (!target.highResolution && range / period >= 1440) {\r\n      period = Math.ceil(range / 1440 / periodUnit) * periodUnit;\r\n    }\r\n\r\n    return period;\r\n  }\r\n\r\n  performTimeSeriesQuery(request) {\r\n    return this.awsRequest('/api/tsdb/query', request).then(res => {\r\n      const data = [];\r\n\r\n      if (res.results) {\r\n        _.forEach(res.results, queryRes => {\r\n          _.forEach(queryRes.series, series => {\r\n            data.push({ target: series.name, datapoints: series.points });\r\n          });\r\n        });\r\n      }\r\n\r\n      return { data: data };\r\n    });\r\n  }\r\n\r\n  transformSuggestDataFromTable(suggestData) {\r\n    return _.map(suggestData.results['metricFindQuery'].tables[0].rows, v => {\r\n      return {\r\n        text: v[0],\r\n        value: v[1],\r\n      };\r\n    });\r\n  }\r\n\r\n  doMetricQueryRequest(subtype, parameters) {\r\n    const range = this.timeSrv.timeRange();\r\n    return this.awsRequest('/api/tsdb/query', {\r\n      from: range.from.valueOf().toString(),\r\n      to: range.to.valueOf().toString(),\r\n      queries: [\r\n        _.extend(\r\n          {\r\n            refId: 'metricFindQuery',\r\n            intervalMs: 1, // dummy\r\n            maxDataPoints: 1, // dummy\r\n            datasourceId: this.instanceSettings.id,\r\n            type: 'metricFindQuery',\r\n            subtype: subtype,\r\n          },\r\n          parameters\r\n        ),\r\n      ],\r\n    }).then(r => {\r\n      return this.transformSuggestDataFromTable(r);\r\n    });\r\n  }\r\n\r\n  getRegions() {\r\n    return this.doMetricQueryRequest('regions', null);\r\n  }\r\n\r\n  getNamespaces() {\r\n    return this.doMetricQueryRequest('namespaces', null);\r\n  }\r\n\r\n  getMetrics(namespace, region) {\r\n    return this.doMetricQueryRequest('metrics', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n    });\r\n  }\r\n\r\n  getDimensionKeys(namespace, region) {\r\n    return this.doMetricQueryRequest('dimension_keys', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n    });\r\n  }\r\n\r\n  getDimensionValues(region, namespace, metricName, dimensionKey, filterDimensions) {\r\n    return this.doMetricQueryRequest('dimension_values', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      namespace: this.templateSrv.replace(namespace),\r\n      metricName: this.templateSrv.replace(metricName),\r\n      dimensionKey: this.templateSrv.replace(dimensionKey),\r\n      dimensions: this.convertDimensionFormat(filterDimensions, {}),\r\n    });\r\n  }\r\n\r\n  getEbsVolumeIds(region, instanceId) {\r\n    return this.doMetricQueryRequest('ebs_volume_ids', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      instanceId: this.templateSrv.replace(instanceId),\r\n    });\r\n  }\r\n\r\n  getEc2InstanceAttribute(region, attributeName, filters) {\r\n    return this.doMetricQueryRequest('ec2_instance_attribute', {\r\n      region: this.templateSrv.replace(this.getActualRegion(region)),\r\n      attributeName: this.templateSrv.replace(attributeName),\r\n      filters: filters,\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    let region;\r\n    let namespace;\r\n    let metricName;\r\n    let filterJson;\r\n\r\n    const regionQuery = query.match(/^regions\\(\\)/);\r\n    if (regionQuery) {\r\n      return this.getRegions();\r\n    }\r\n\r\n    const namespaceQuery = query.match(/^namespaces\\(\\)/);\r\n    if (namespaceQuery) {\r\n      return this.getNamespaces();\r\n    }\r\n\r\n    const metricNameQuery = query.match(/^metrics\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\r\n    if (metricNameQuery) {\r\n      namespace = metricNameQuery[1];\r\n      region = metricNameQuery[3];\r\n      return this.getMetrics(namespace, region);\r\n    }\r\n\r\n    const dimensionKeysQuery = query.match(/^dimension_keys\\(([^\\)]+?)(,\\s?([^,]+?))?\\)/);\r\n    if (dimensionKeysQuery) {\r\n      namespace = dimensionKeysQuery[1];\r\n      region = dimensionKeysQuery[3];\r\n      return this.getDimensionKeys(namespace, region);\r\n    }\r\n\r\n    const dimensionValuesQuery = query.match(\r\n      /^dimension_values\\(([^,]+?),\\s?([^,]+?),\\s?([^,]+?),\\s?([^,]+?)(,\\s?(.+))?\\)/\r\n    );\r\n    if (dimensionValuesQuery) {\r\n      region = dimensionValuesQuery[1];\r\n      namespace = dimensionValuesQuery[2];\r\n      metricName = dimensionValuesQuery[3];\r\n      const dimensionKey = dimensionValuesQuery[4];\r\n      filterJson = {};\r\n      if (dimensionValuesQuery[6]) {\r\n        filterJson = JSON.parse(this.templateSrv.replace(dimensionValuesQuery[6]));\r\n      }\r\n\r\n      return this.getDimensionValues(region, namespace, metricName, dimensionKey, filterJson);\r\n    }\r\n\r\n    const ebsVolumeIdsQuery = query.match(/^ebs_volume_ids\\(([^,]+?),\\s?([^,]+?)\\)/);\r\n    if (ebsVolumeIdsQuery) {\r\n      region = ebsVolumeIdsQuery[1];\r\n      const instanceId = ebsVolumeIdsQuery[2];\r\n      return this.getEbsVolumeIds(region, instanceId);\r\n    }\r\n\r\n    const ec2InstanceAttributeQuery = query.match(/^ec2_instance_attribute\\(([^,]+?),\\s?([^,]+?),\\s?(.+?)\\)/);\r\n    if (ec2InstanceAttributeQuery) {\r\n      region = ec2InstanceAttributeQuery[1];\r\n      const targetAttributeName = ec2InstanceAttributeQuery[2];\r\n      filterJson = JSON.parse(this.templateSrv.replace(ec2InstanceAttributeQuery[3]));\r\n      return this.getEc2InstanceAttribute(region, targetAttributeName, filterJson);\r\n    }\r\n\r\n    return this.$q.when([]);\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    const annotation = options.annotation;\r\n    const statistics = _.map(annotation.statistics, s => {\r\n      return this.templateSrv.replace(s);\r\n    });\r\n    const defaultPeriod = annotation.prefixMatching ? '' : '300';\r\n    let period = annotation.period || defaultPeriod;\r\n    period = parseInt(period, 10);\r\n    const parameters = {\r\n      prefixMatching: annotation.prefixMatching,\r\n      region: this.templateSrv.replace(this.getActualRegion(annotation.region)),\r\n      namespace: this.templateSrv.replace(annotation.namespace),\r\n      metricName: this.templateSrv.replace(annotation.metricName),\r\n      dimensions: this.convertDimensionFormat(annotation.dimensions, {}),\r\n      statistics: statistics,\r\n      period: period,\r\n      actionPrefix: annotation.actionPrefix || '',\r\n      alarmNamePrefix: annotation.alarmNamePrefix || '',\r\n    };\r\n\r\n    return this.awsRequest('/api/tsdb/query', {\r\n      from: options.range.from.valueOf().toString(),\r\n      to: options.range.to.valueOf().toString(),\r\n      queries: [\r\n        _.extend(\r\n          {\r\n            refId: 'annotationQuery',\r\n            intervalMs: 1, // dummy\r\n            maxDataPoints: 1, // dummy\r\n            datasourceId: this.instanceSettings.id,\r\n            type: 'annotationQuery',\r\n          },\r\n          parameters\r\n        ),\r\n      ],\r\n    }).then(r => {\r\n      return _.map(r.results['annotationQuery'].tables[0].rows, v => {\r\n        return {\r\n          annotation: annotation,\r\n          time: Date.parse(v[0]),\r\n          title: v[1],\r\n          tags: [v[2]],\r\n          text: v[3],\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  targetContainsTemplate(target) {\r\n    return (\r\n      this.templateSrv.variableExists(target.region) ||\r\n      this.templateSrv.variableExists(target.namespace) ||\r\n      this.templateSrv.variableExists(target.metricName) ||\r\n      _.find(target.dimensions, (v, k) => {\r\n        return this.templateSrv.variableExists(k) || this.templateSrv.variableExists(v);\r\n      })\r\n    );\r\n  }\r\n\r\n  testDatasource() {\r\n    /* use billing metrics for test */\r\n    const region = this.defaultRegion;\r\n    const namespace = 'AWS/Billing';\r\n    const metricName = 'EstimatedCharges';\r\n    const dimensions = {};\r\n\r\n    return this.getDimensionValues(region, namespace, metricName, 'ServiceName', dimensions).then(\r\n      () => {\r\n        return { status: 'success', message: 'Data source is working' };\r\n      },\r\n      err => {\r\n        return { status: 'error', message: err.message };\r\n      }\r\n    );\r\n  }\r\n\r\n  awsRequest(url, data) {\r\n    const options = {\r\n      method: 'POST',\r\n      url: url,\r\n      data: data,\r\n    };\r\n\r\n    return this.backendSrv.datasourceRequest(options).then(result => {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  getDefaultRegion() {\r\n    return this.defaultRegion;\r\n  }\r\n\r\n  getActualRegion(region) {\r\n    if (region === 'default' || _.isEmpty(region)) {\r\n      return this.getDefaultRegion();\r\n    }\r\n    return region;\r\n  }\r\n\r\n  getExpandedVariables(target, dimensionKey, variable, templateSrv) {\r\n    /* if the all checkbox is marked we should add all values to the targets */\r\n    const allSelected = _.find(variable.options, { selected: true, text: 'All' });\r\n    const selectedVariables = _.filter(variable.options, v => {\r\n      if (allSelected) {\r\n        return v.text !== 'All';\r\n      } else {\r\n        return v.selected;\r\n      }\r\n    });\r\n    const currentVariables = !_.isArray(variable.current.value)\r\n      ? [variable.current]\r\n      : variable.current.value.map(v => {\r\n          return {\r\n            text: v,\r\n            value: v,\r\n          };\r\n        });\r\n    const useSelectedVariables =\r\n      selectedVariables.some(s => {\r\n        return s.value === currentVariables[0].value;\r\n      }) || currentVariables[0].value === '$__all';\r\n    return (useSelectedVariables ? selectedVariables : currentVariables).map(v => {\r\n      const t = angular.copy(target);\r\n      const scopedVar = {};\r\n      scopedVar[variable.name] = v;\r\n      t.refId = target.refId + '_' + v.value;\r\n      t.dimensions[dimensionKey] = templateSrv.replace(t.dimensions[dimensionKey], scopedVar);\r\n      if (variable.multi && target.id) {\r\n        t.id = target.id + window.btoa(v.value).replace(/=/g, '0'); // generate unique id\r\n      } else {\r\n        t.id = target.id;\r\n      }\r\n      return t;\r\n    });\r\n  }\r\n\r\n  expandTemplateVariable(targets, scopedVars, templateSrv) {\r\n    // Datasource and template srv logic uber-complected. This should be cleaned up.\r\n    return _.chain(targets)\r\n      .map(target => {\r\n        const dimensionKey = _.findKey(target.dimensions, v => {\r\n          return templateSrv.variableExists(v) && !_.has(scopedVars, templateSrv.getVariableName(v));\r\n        });\r\n\r\n        if (dimensionKey) {\r\n          const multiVariable = _.find(templateSrv.variables, variable => {\r\n            return (\r\n              templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name) && variable.multi\r\n            );\r\n          });\r\n          const variable = _.find(templateSrv.variables, variable => {\r\n            return templatingVariable.containsVariable(target.dimensions[dimensionKey], variable.name);\r\n          });\r\n          return this.getExpandedVariables(target, dimensionKey, multiVariable || variable, templateSrv);\r\n        } else {\r\n          return [target];\r\n        }\r\n      })\r\n      .flatten()\r\n      .value();\r\n  }\r\n\r\n  convertToCloudWatchTime(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n    return Math.round(date.valueOf() / 1000);\r\n  }\r\n\r\n  convertDimensionFormat(dimensions, scopedVars) {\r\n    const convertedDimensions = {};\r\n    _.each(dimensions, (value, key) => {\r\n      convertedDimensions[this.templateSrv.replace(key, scopedVars)] = this.templateSrv.replace(value, scopedVars);\r\n    });\r\n    return convertedDimensions;\r\n  }\r\n}\r\n","export class CloudWatchConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n  current: any;\r\n\r\n  accessKeyExist = false;\r\n  secretKeyExist = false;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\r\n    this.current.jsonData.authType = this.current.jsonData.authType || 'credentials';\r\n\r\n    this.accessKeyExist = this.current.secureJsonFields.accessKey;\r\n    this.secretKeyExist = this.current.secureJsonFields.secretKey;\r\n  }\r\n\r\n  resetAccessKey() {\r\n    this.accessKeyExist = false;\r\n  }\r\n\r\n  resetSecretKey() {\r\n    this.secretKeyExist = false;\r\n  }\r\n\r\n  authTypes = [\r\n    { name: 'Access & secret key', value: 'keys' },\r\n    { name: 'Credentials file', value: 'credentials' },\r\n    { name: 'ARN', value: 'arn' },\r\n  ];\r\n\r\n  indexPatternTypes = [\r\n    { name: 'No pattern', value: undefined },\r\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\r\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\r\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\r\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\r\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\r\n  ];\r\n}\r\n","import './query_parameter_ctrl';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport class CloudWatchQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  aliasSyntax: string;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n    this.aliasSyntax = '{{metric}} {{stat}} {{namespace}} {{region}} {{<dimension name>}}';\r\n  }\r\n}\r\n","import './query_parameter_ctrl';\r\n\r\nimport CloudWatchDatasource from './datasource';\r\nimport { CloudWatchQueryCtrl } from './query_ctrl';\r\nimport { CloudWatchConfigCtrl } from './config_ctrl';\r\n\r\nclass CloudWatchAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  CloudWatchDatasource as Datasource,\r\n  CloudWatchQueryCtrl as QueryCtrl,\r\n  CloudWatchConfigCtrl as ConfigCtrl,\r\n  CloudWatchAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\n\r\nexport const metricAggTypes = [\r\n  { text: 'Count', value: 'count', requiresField: false },\r\n  {\r\n    text: 'Average',\r\n    value: 'avg',\r\n    requiresField: true,\r\n    supportsInlineScript: true,\r\n    supportsMissing: true,\r\n  },\r\n  {\r\n    text: 'Sum',\r\n    value: 'sum',\r\n    requiresField: true,\r\n    supportsInlineScript: true,\r\n    supportsMissing: true,\r\n  },\r\n  {\r\n    text: 'Max',\r\n    value: 'max',\r\n    requiresField: true,\r\n    supportsInlineScript: true,\r\n    supportsMissing: true,\r\n  },\r\n  {\r\n    text: 'Min',\r\n    value: 'min',\r\n    requiresField: true,\r\n    supportsInlineScript: true,\r\n    supportsMissing: true,\r\n  },\r\n  {\r\n    text: 'Extended Stats',\r\n    value: 'extended_stats',\r\n    requiresField: true,\r\n    supportsMissing: true,\r\n    supportsInlineScript: true,\r\n  },\r\n  {\r\n    text: 'Percentiles',\r\n    value: 'percentiles',\r\n    requiresField: true,\r\n    supportsMissing: true,\r\n    supportsInlineScript: true,\r\n  },\r\n  {\r\n    text: 'Unique Count',\r\n    value: 'cardinality',\r\n    requiresField: true,\r\n    supportsMissing: true,\r\n  },\r\n  {\r\n    text: 'Moving Average',\r\n    value: 'moving_avg',\r\n    requiresField: false,\r\n    isPipelineAgg: true,\r\n    minVersion: 2,\r\n  },\r\n  {\r\n    text: 'Derivative',\r\n    value: 'derivative',\r\n    requiresField: false,\r\n    isPipelineAgg: true,\r\n    minVersion: 2,\r\n  },\r\n  { text: 'Raw Document', value: 'raw_document', requiresField: false },\r\n];\r\n\r\nexport const bucketAggTypes = [\r\n  { text: 'Terms', value: 'terms', requiresField: true },\r\n  { text: 'Filters', value: 'filters' },\r\n  { text: 'Geo Hash Grid', value: 'geohash_grid', requiresField: true },\r\n  { text: 'Date Histogram', value: 'date_histogram', requiresField: true },\r\n  { text: 'Histogram', value: 'histogram', requiresField: true },\r\n];\r\n\r\nexport const orderByOptions = [{ text: 'Doc Count', value: '_count' }, { text: 'Term value', value: '_term' }];\r\n\r\nexport const orderOptions = [{ text: 'Top', value: 'desc' }, { text: 'Bottom', value: 'asc' }];\r\n\r\nexport const sizeOptions = [\r\n  { text: 'No limit', value: '0' },\r\n  { text: '1', value: '1' },\r\n  { text: '2', value: '2' },\r\n  { text: '3', value: '3' },\r\n  { text: '5', value: '5' },\r\n  { text: '10', value: '10' },\r\n  { text: '15', value: '15' },\r\n  { text: '20', value: '20' },\r\n];\r\n\r\nexport const extendedStats = [\r\n  { text: 'Avg', value: 'avg' },\r\n  { text: 'Min', value: 'min' },\r\n  { text: 'Max', value: 'max' },\r\n  { text: 'Sum', value: 'sum' },\r\n  { text: 'Count', value: 'count' },\r\n  { text: 'Std Dev', value: 'std_deviation' },\r\n  { text: 'Std Dev Upper', value: 'std_deviation_bounds_upper' },\r\n  { text: 'Std Dev Lower', value: 'std_deviation_bounds_lower' },\r\n];\r\n\r\nexport const intervalOptions = [\r\n  { text: 'auto', value: 'auto' },\r\n  { text: '10s', value: '10s' },\r\n  { text: '1m', value: '1m' },\r\n  { text: '5m', value: '5m' },\r\n  { text: '10m', value: '10m' },\r\n  { text: '20m', value: '20m' },\r\n  { text: '1h', value: '1h' },\r\n  { text: '1d', value: '1d' },\r\n];\r\n\r\nexport const movingAvgModelOptions = [\r\n  { text: 'Simple', value: 'simple' },\r\n  { text: 'Linear', value: 'linear' },\r\n  { text: 'Exponentially Weighted', value: 'ewma' },\r\n  { text: 'Holt Linear', value: 'holt' },\r\n  { text: 'Holt Winters', value: 'holt_winters' },\r\n];\r\n\r\nexport const pipelineOptions = {\r\n  moving_avg: [\r\n    { text: 'window', default: 5 },\r\n    { text: 'model', default: 'simple' },\r\n    { text: 'predict', default: undefined },\r\n    { text: 'minimize', default: false },\r\n  ],\r\n  derivative: [{ text: 'unit', default: undefined }],\r\n};\r\n\r\nexport const movingAvgModelSettings = {\r\n  simple: [],\r\n  linear: [],\r\n  ewma: [{ text: 'Alpha', value: 'alpha', default: undefined }],\r\n  holt: [{ text: 'Alpha', value: 'alpha', default: undefined }, { text: 'Beta', value: 'beta', default: undefined }],\r\n  holt_winters: [\r\n    { text: 'Alpha', value: 'alpha', default: undefined },\r\n    { text: 'Beta', value: 'beta', default: undefined },\r\n    { text: 'Gamma', value: 'gamma', default: undefined },\r\n    { text: 'Period', value: 'period', default: undefined },\r\n    { text: 'Pad', value: 'pad', default: undefined, isCheckbox: true },\r\n  ],\r\n};\r\n\r\nexport function getMetricAggTypes(esVersion) {\r\n  return _.filter(metricAggTypes, function(f) {\r\n    if (f.minVersion) {\r\n      return f.minVersion <= esVersion;\r\n    } else {\r\n      return true;\r\n    }\r\n  });\r\n}\r\n\r\nexport function getPipelineOptions(metric) {\r\n  if (!isPipelineAgg(metric.type)) {\r\n    return [];\r\n  }\r\n\r\n  return pipelineOptions[metric.type];\r\n}\r\n\r\nexport function isPipelineAgg(metricType) {\r\n  if (metricType) {\r\n    const po = pipelineOptions[metricType];\r\n    return po !== null && po !== undefined;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport function getPipelineAggOptions(targets) {\r\n  const result = [];\r\n  _.each(targets.metrics, function(metric) {\r\n    if (!isPipelineAgg(metric.type)) {\r\n      result.push({ text: describeMetric(metric), value: metric.id });\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n\r\nexport function getMovingAvgSettings(model, filtered) {\r\n  const filteredResult = [];\r\n  if (filtered) {\r\n    _.each(movingAvgModelSettings[model], function(setting) {\r\n      if (!setting.isCheckbox) {\r\n        filteredResult.push(setting);\r\n      }\r\n    });\r\n    return filteredResult;\r\n  }\r\n  return movingAvgModelSettings[model];\r\n}\r\n\r\nexport function getOrderByOptions(target) {\r\n  const metricRefs = [];\r\n  _.each(target.metrics, function(metric) {\r\n    if (metric.type !== 'count') {\r\n      metricRefs.push({ text: describeMetric(metric), value: metric.id });\r\n    }\r\n  });\r\n\r\n  return orderByOptions.concat(metricRefs);\r\n}\r\n\r\nexport function describeOrder(order) {\r\n  const def = _.find(orderOptions, { value: order });\r\n  return def.text;\r\n}\r\n\r\nexport function describeMetric(metric) {\r\n  const def = _.find(metricAggTypes, { value: metric.type });\r\n  return def.text + ' ' + metric.field;\r\n}\r\n\r\nexport function describeOrderBy(orderBy, target) {\r\n  const def = _.find(orderByOptions, { value: orderBy });\r\n  if (def) {\r\n    return def.text;\r\n  }\r\n  const metric = _.find(target.metrics, { id: orderBy });\r\n  if (metric) {\r\n    return describeMetric(metric);\r\n  } else {\r\n    return 'metric not found';\r\n  }\r\n}\r\n","import * as queryDef from './query_def';\r\n\r\nexport class ElasticQueryBuilder {\r\n  timeField: string;\r\n  esVersion: number;\r\n\r\n  constructor(options) {\r\n    this.timeField = options.timeField;\r\n    this.esVersion = options.esVersion;\r\n  }\r\n\r\n  getRangeFilter() {\r\n    const filter = {};\r\n    filter[this.timeField] = {\r\n      gte: '$timeFrom',\r\n      lte: '$timeTo',\r\n      format: 'epoch_millis',\r\n    };\r\n\r\n    return filter;\r\n  }\r\n\r\n  buildTermsAgg(aggDef, queryNode, target) {\r\n    let metricRef, metric, y;\r\n    queryNode.terms = { field: aggDef.field };\r\n\r\n    if (!aggDef.settings) {\r\n      return queryNode;\r\n    }\r\n\r\n    queryNode.terms.size = parseInt(aggDef.settings.size, 10) === 0 ? 500 : parseInt(aggDef.settings.size, 10);\r\n    if (aggDef.settings.orderBy !== void 0) {\r\n      queryNode.terms.order = {};\r\n      queryNode.terms.order[aggDef.settings.orderBy] = aggDef.settings.order;\r\n\r\n      // if metric ref, look it up and add it to this agg level\r\n      metricRef = parseInt(aggDef.settings.orderBy, 10);\r\n      if (!isNaN(metricRef)) {\r\n        for (y = 0; y < target.metrics.length; y++) {\r\n          metric = target.metrics[y];\r\n          if (metric.id === aggDef.settings.orderBy) {\r\n            queryNode.aggs = {};\r\n            queryNode.aggs[metric.id] = {};\r\n            queryNode.aggs[metric.id][metric.type] = { field: metric.field };\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (aggDef.settings.min_doc_count !== void 0) {\r\n      queryNode.terms.min_doc_count = parseInt(aggDef.settings.min_doc_count, 10);\r\n    }\r\n\r\n    if (aggDef.settings.missing) {\r\n      queryNode.terms.missing = aggDef.settings.missing;\r\n    }\r\n\r\n    return queryNode;\r\n  }\r\n\r\n  getDateHistogramAgg(aggDef) {\r\n    const esAgg: any = {};\r\n    const settings = aggDef.settings || {};\r\n    esAgg.interval = settings.interval;\r\n    esAgg.field = this.timeField;\r\n    esAgg.min_doc_count = settings.min_doc_count || 0;\r\n    esAgg.extended_bounds = { min: '$timeFrom', max: '$timeTo' };\r\n    esAgg.format = 'epoch_millis';\r\n\r\n    if (esAgg.interval === 'auto') {\r\n      esAgg.interval = '$__interval';\r\n    }\r\n\r\n    if (settings.missing) {\r\n      esAgg.missing = settings.missing;\r\n    }\r\n\r\n    return esAgg;\r\n  }\r\n\r\n  getHistogramAgg(aggDef) {\r\n    const esAgg: any = {};\r\n    const settings = aggDef.settings || {};\r\n    esAgg.interval = settings.interval;\r\n    esAgg.field = aggDef.field;\r\n    esAgg.min_doc_count = settings.min_doc_count || 0;\r\n\r\n    if (settings.missing) {\r\n      esAgg.missing = settings.missing;\r\n    }\r\n    return esAgg;\r\n  }\r\n\r\n  getFiltersAgg(aggDef) {\r\n    const filterObj = {};\r\n    for (let i = 0; i < aggDef.settings.filters.length; i++) {\r\n      const query = aggDef.settings.filters[i].query;\r\n      let label = aggDef.settings.filters[i].label;\r\n      label = label === '' || label === undefined ? query : label;\r\n      filterObj[label] = {\r\n        query_string: {\r\n          query: query,\r\n          analyze_wildcard: true,\r\n        },\r\n      };\r\n    }\r\n\r\n    return filterObj;\r\n  }\r\n\r\n  documentQuery(query, size) {\r\n    query.size = size;\r\n    query.sort = {};\r\n    query.sort[this.timeField] = { order: 'desc', unmapped_type: 'boolean' };\r\n\r\n    // fields field not supported on ES 5.x\r\n    if (this.esVersion < 5) {\r\n      query.fields = ['*', '_source'];\r\n    }\r\n\r\n    query.script_fields = {};\r\n    if (this.esVersion < 5) {\r\n      query.fielddata_fields = [this.timeField];\r\n    } else {\r\n      query.docvalue_fields = [this.timeField];\r\n    }\r\n    return query;\r\n  }\r\n\r\n  addAdhocFilters(query, adhocFilters) {\r\n    if (!adhocFilters) {\r\n      return;\r\n    }\r\n\r\n    let i, filter, condition, queryCondition;\r\n\r\n    for (i = 0; i < adhocFilters.length; i++) {\r\n      filter = adhocFilters[i];\r\n      condition = {};\r\n      condition[filter.key] = filter.value;\r\n      queryCondition = {};\r\n      queryCondition[filter.key] = { query: filter.value };\r\n\r\n      switch (filter.operator) {\r\n        case '=':\r\n          if (!query.query.bool.must) {\r\n            query.query.bool.must = [];\r\n          }\r\n          query.query.bool.must.push({ match_phrase: queryCondition });\r\n          break;\r\n        case '!=':\r\n          if (!query.query.bool.must_not) {\r\n            query.query.bool.must_not = [];\r\n          }\r\n          query.query.bool.must_not.push({ match_phrase: queryCondition });\r\n          break;\r\n        case '<':\r\n          condition[filter.key] = { lt: filter.value };\r\n          query.query.bool.filter.push({ range: condition });\r\n          break;\r\n        case '>':\r\n          condition[filter.key] = { gt: filter.value };\r\n          query.query.bool.filter.push({ range: condition });\r\n          break;\r\n        case '=~':\r\n          query.query.bool.filter.push({ regexp: condition });\r\n          break;\r\n        case '!~':\r\n          query.query.bool.filter.push({\r\n            bool: { must_not: { regexp: condition } },\r\n          });\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  build(target, adhocFilters?, queryString?) {\r\n    // make sure query has defaults;\r\n    target.metrics = target.metrics || [{ type: 'count', id: '1' }];\r\n    target.bucketAggs = target.bucketAggs || [{ type: 'date_histogram', id: '2', settings: { interval: 'auto' } }];\r\n    target.timeField = this.timeField;\r\n\r\n    let i, nestedAggs, metric;\r\n    const query = {\r\n      size: 0,\r\n      query: {\r\n        bool: {\r\n          filter: [\r\n            { range: this.getRangeFilter() },\r\n            {\r\n              query_string: {\r\n                analyze_wildcard: true,\r\n                query: queryString,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    };\r\n\r\n    this.addAdhocFilters(query, adhocFilters);\r\n\r\n    // handle document query\r\n    if (target.bucketAggs.length === 0) {\r\n      metric = target.metrics[0];\r\n      if (!metric || metric.type !== 'raw_document') {\r\n        throw { message: 'Invalid query' };\r\n      }\r\n\r\n      const size = (metric.settings && metric.settings.size) || 500;\r\n      return this.documentQuery(query, size);\r\n    }\r\n\r\n    nestedAggs = query;\r\n\r\n    for (i = 0; i < target.bucketAggs.length; i++) {\r\n      const aggDef = target.bucketAggs[i];\r\n      const esAgg = {};\r\n\r\n      switch (aggDef.type) {\r\n        case 'date_histogram': {\r\n          esAgg['date_histogram'] = this.getDateHistogramAgg(aggDef);\r\n          break;\r\n        }\r\n        case 'histogram': {\r\n          esAgg['histogram'] = this.getHistogramAgg(aggDef);\r\n          break;\r\n        }\r\n        case 'filters': {\r\n          esAgg['filters'] = { filters: this.getFiltersAgg(aggDef) };\r\n          break;\r\n        }\r\n        case 'terms': {\r\n          this.buildTermsAgg(aggDef, esAgg, target);\r\n          break;\r\n        }\r\n        case 'geohash_grid': {\r\n          esAgg['geohash_grid'] = {\r\n            field: aggDef.field,\r\n            precision: aggDef.settings.precision,\r\n          };\r\n          break;\r\n        }\r\n      }\r\n\r\n      nestedAggs.aggs = nestedAggs.aggs || {};\r\n      nestedAggs.aggs[aggDef.id] = esAgg;\r\n      nestedAggs = esAgg;\r\n    }\r\n\r\n    nestedAggs.aggs = {};\r\n\r\n    for (i = 0; i < target.metrics.length; i++) {\r\n      metric = target.metrics[i];\r\n      if (metric.type === 'count') {\r\n        continue;\r\n      }\r\n\r\n      const aggField = {};\r\n      let metricAgg = null;\r\n\r\n      if (queryDef.isPipelineAgg(metric.type)) {\r\n        if (metric.pipelineAgg && /^\\d*$/.test(metric.pipelineAgg)) {\r\n          metricAgg = { buckets_path: metric.pipelineAgg };\r\n        } else {\r\n          continue;\r\n        }\r\n      } else {\r\n        metricAgg = { field: metric.field };\r\n      }\r\n\r\n      for (const prop in metric.settings) {\r\n        if (metric.settings.hasOwnProperty(prop) && metric.settings[prop] !== null) {\r\n          metricAgg[prop] = metric.settings[prop];\r\n        }\r\n      }\r\n\r\n      aggField[metric.type] = metricAgg;\r\n      nestedAggs.aggs[metric.id] = aggField;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  getTermsQuery(queryDef) {\r\n    const query: any = {\r\n      size: 0,\r\n      query: {\r\n        bool: {\r\n          filter: [{ range: this.getRangeFilter() }],\r\n        },\r\n      },\r\n    };\r\n\r\n    if (queryDef.query) {\r\n      query.query.bool.filter.push({\r\n        query_string: {\r\n          analyze_wildcard: true,\r\n          query: queryDef.query,\r\n        },\r\n      });\r\n    }\r\n\r\n    let size = 500;\r\n    if (queryDef.size) {\r\n      size = queryDef.size;\r\n    }\r\n\r\n    query.aggs = {\r\n      '1': {\r\n        terms: {\r\n          field: queryDef.field,\r\n          size: size,\r\n          order: {\r\n            _term: 'asc',\r\n          },\r\n        },\r\n      },\r\n    };\r\n    return query;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport * as queryDef from './query_def';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nexport class ElasticResponse {\r\n  constructor(private targets, private response) {\r\n    this.targets = targets;\r\n    this.response = response;\r\n  }\r\n\r\n  processMetrics(esAgg, target, seriesList, props) {\r\n    let metric, y, i, newSeries, bucket, value;\r\n\r\n    for (y = 0; y < target.metrics.length; y++) {\r\n      metric = target.metrics[y];\r\n      if (metric.hide) {\r\n        continue;\r\n      }\r\n\r\n      switch (metric.type) {\r\n        case 'count': {\r\n          newSeries = { datapoints: [], metric: 'count', props: props };\r\n          for (i = 0; i < esAgg.buckets.length; i++) {\r\n            bucket = esAgg.buckets[i];\r\n            value = bucket.doc_count;\r\n            newSeries.datapoints.push([value, bucket.key]);\r\n          }\r\n          seriesList.push(newSeries);\r\n          break;\r\n        }\r\n        case 'percentiles': {\r\n          if (esAgg.buckets.length === 0) {\r\n            break;\r\n          }\r\n\r\n          const firstBucket = esAgg.buckets[0];\r\n          const percentiles = firstBucket[metric.id].values;\r\n\r\n          for (const percentileName in percentiles) {\r\n            newSeries = {\r\n              datapoints: [],\r\n              metric: 'p' + percentileName,\r\n              props: props,\r\n              field: metric.field,\r\n            };\r\n\r\n            for (i = 0; i < esAgg.buckets.length; i++) {\r\n              bucket = esAgg.buckets[i];\r\n              const values = bucket[metric.id].values;\r\n              newSeries.datapoints.push([values[percentileName], bucket.key]);\r\n            }\r\n            seriesList.push(newSeries);\r\n          }\r\n\r\n          break;\r\n        }\r\n        case 'extended_stats': {\r\n          for (const statName in metric.meta) {\r\n            if (!metric.meta[statName]) {\r\n              continue;\r\n            }\r\n\r\n            newSeries = {\r\n              datapoints: [],\r\n              metric: statName,\r\n              props: props,\r\n              field: metric.field,\r\n            };\r\n\r\n            for (i = 0; i < esAgg.buckets.length; i++) {\r\n              bucket = esAgg.buckets[i];\r\n              const stats = bucket[metric.id];\r\n\r\n              // add stats that are in nested obj to top level obj\r\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\r\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\r\n\r\n              newSeries.datapoints.push([stats[statName], bucket.key]);\r\n            }\r\n\r\n            seriesList.push(newSeries);\r\n          }\r\n\r\n          break;\r\n        }\r\n        default: {\r\n          newSeries = {\r\n            datapoints: [],\r\n            metric: metric.type,\r\n            field: metric.field,\r\n            props: props,\r\n          };\r\n          for (i = 0; i < esAgg.buckets.length; i++) {\r\n            bucket = esAgg.buckets[i];\r\n\r\n            value = bucket[metric.id];\r\n            if (value !== undefined) {\r\n              if (value.normalized_value) {\r\n                newSeries.datapoints.push([value.normalized_value, bucket.key]);\r\n              } else {\r\n                newSeries.datapoints.push([value.value, bucket.key]);\r\n              }\r\n            }\r\n          }\r\n          seriesList.push(newSeries);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  processAggregationDocs(esAgg, aggDef, target, table, props) {\r\n    // add columns\r\n    if (table.columns.length === 0) {\r\n      for (const propKey of _.keys(props)) {\r\n        table.addColumn({ text: propKey, filterable: true });\r\n      }\r\n      table.addColumn({ text: aggDef.field, filterable: true });\r\n    }\r\n\r\n    // helper func to add values to value array\r\n    const addMetricValue = (values, metricName, value) => {\r\n      table.addColumn({ text: metricName });\r\n      values.push(value);\r\n    };\r\n\r\n    for (const bucket of esAgg.buckets) {\r\n      const values = [];\r\n\r\n      for (const propValues of _.values(props)) {\r\n        values.push(propValues);\r\n      }\r\n\r\n      // add bucket key (value)\r\n      values.push(bucket.key);\r\n\r\n      for (const metric of target.metrics) {\r\n        switch (metric.type) {\r\n          case 'count': {\r\n            addMetricValue(values, this.getMetricName(metric.type), bucket.doc_count);\r\n            break;\r\n          }\r\n          case 'extended_stats': {\r\n            for (const statName in metric.meta) {\r\n              if (!metric.meta[statName]) {\r\n                continue;\r\n              }\r\n\r\n              const stats = bucket[metric.id];\r\n              // add stats that are in nested obj to top level obj\r\n              stats.std_deviation_bounds_upper = stats.std_deviation_bounds.upper;\r\n              stats.std_deviation_bounds_lower = stats.std_deviation_bounds.lower;\r\n\r\n              addMetricValue(values, this.getMetricName(statName), stats[statName]);\r\n            }\r\n            break;\r\n          }\r\n          default: {\r\n            let metricName = this.getMetricName(metric.type);\r\n            const otherMetrics = _.filter(target.metrics, { type: metric.type });\r\n\r\n            // if more of the same metric type include field field name in property\r\n            if (otherMetrics.length > 1) {\r\n              metricName += ' ' + metric.field;\r\n            }\r\n\r\n            addMetricValue(values, metricName, bucket[metric.id].value);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      table.rows.push(values);\r\n    }\r\n  }\r\n\r\n  // This is quite complex\r\n  // need to recurise down the nested buckets to build series\r\n  processBuckets(aggs, target, seriesList, table, props, depth) {\r\n    let bucket, aggDef, esAgg, aggId;\r\n    const maxDepth = target.bucketAggs.length - 1;\r\n\r\n    for (aggId in aggs) {\r\n      aggDef = _.find(target.bucketAggs, { id: aggId });\r\n      esAgg = aggs[aggId];\r\n\r\n      if (!aggDef) {\r\n        continue;\r\n      }\r\n\r\n      if (depth === maxDepth) {\r\n        if (aggDef.type === 'date_histogram') {\r\n          this.processMetrics(esAgg, target, seriesList, props);\r\n        } else {\r\n          this.processAggregationDocs(esAgg, aggDef, target, table, props);\r\n        }\r\n      } else {\r\n        for (const nameIndex in esAgg.buckets) {\r\n          bucket = esAgg.buckets[nameIndex];\r\n          props = _.clone(props);\r\n          if (bucket.key !== void 0) {\r\n            props[aggDef.field] = bucket.key;\r\n          } else {\r\n            props['filter'] = nameIndex;\r\n          }\r\n          if (bucket.key_as_string) {\r\n            props[aggDef.field] = bucket.key_as_string;\r\n          }\r\n          this.processBuckets(bucket, target, seriesList, table, props, depth + 1);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getMetricName(metric) {\r\n    let metricDef = _.find(queryDef.metricAggTypes, { value: metric });\r\n    if (!metricDef) {\r\n      metricDef = _.find(queryDef.extendedStats, { value: metric });\r\n    }\r\n\r\n    return metricDef ? metricDef.text : metric;\r\n  }\r\n\r\n  private getSeriesName(series, target, metricTypeCount) {\r\n    let metricName = this.getMetricName(series.metric);\r\n\r\n    if (target.alias) {\r\n      const regex = /\\{\\{([\\s\\S]+?)\\}\\}/g;\r\n\r\n      return target.alias.replace(regex, function(match, g1, g2) {\r\n        const group = g1 || g2;\r\n\r\n        if (group.indexOf('term ') === 0) {\r\n          return series.props[group.substring(5)];\r\n        }\r\n        if (series.props[group] !== void 0) {\r\n          return series.props[group];\r\n        }\r\n        if (group === 'metric') {\r\n          return metricName;\r\n        }\r\n        if (group === 'field') {\r\n          return series.field;\r\n        }\r\n\r\n        return match;\r\n      });\r\n    }\r\n\r\n    if (series.field && queryDef.isPipelineAgg(series.metric)) {\r\n      const appliedAgg = _.find(target.metrics, { id: series.field });\r\n      if (appliedAgg) {\r\n        metricName += ' ' + queryDef.describeMetric(appliedAgg);\r\n      } else {\r\n        metricName = 'Unset';\r\n      }\r\n    } else if (series.field) {\r\n      metricName += ' ' + series.field;\r\n    }\r\n\r\n    const propKeys = _.keys(series.props);\r\n    if (propKeys.length === 0) {\r\n      return metricName;\r\n    }\r\n\r\n    let name = '';\r\n    for (const propName in series.props) {\r\n      name += series.props[propName] + ' ';\r\n    }\r\n\r\n    if (metricTypeCount === 1) {\r\n      return name.trim();\r\n    }\r\n\r\n    return name.trim() + ' ' + metricName;\r\n  }\r\n\r\n  nameSeries(seriesList, target) {\r\n    const metricTypeCount = _.uniq(_.map(seriesList, 'metric')).length;\r\n\r\n    for (let i = 0; i < seriesList.length; i++) {\r\n      const series = seriesList[i];\r\n      series.target = this.getSeriesName(series, target, metricTypeCount);\r\n    }\r\n  }\r\n\r\n  processHits(hits, seriesList) {\r\n    const series = {\r\n      target: 'docs',\r\n      type: 'docs',\r\n      datapoints: [],\r\n      total: hits.total,\r\n      filterable: true,\r\n    };\r\n    let propName, hit, doc, i;\r\n\r\n    for (i = 0; i < hits.hits.length; i++) {\r\n      hit = hits.hits[i];\r\n      doc = {\r\n        _id: hit._id,\r\n        _type: hit._type,\r\n        _index: hit._index,\r\n      };\r\n\r\n      if (hit._source) {\r\n        for (propName in hit._source) {\r\n          doc[propName] = hit._source[propName];\r\n        }\r\n      }\r\n\r\n      for (propName in hit.fields) {\r\n        doc[propName] = hit.fields[propName];\r\n      }\r\n      series.datapoints.push(doc);\r\n    }\r\n\r\n    seriesList.push(series);\r\n  }\r\n\r\n  trimDatapoints(aggregations, target) {\r\n    const histogram = _.find(target.bucketAggs, { type: 'date_histogram' });\r\n\r\n    const shouldDropFirstAndLast = histogram && histogram.settings && histogram.settings.trimEdges;\r\n    if (shouldDropFirstAndLast) {\r\n      const trim = histogram.settings.trimEdges;\r\n      for (const prop in aggregations) {\r\n        const points = aggregations[prop];\r\n        if (points.datapoints.length > trim * 2) {\r\n          points.datapoints = points.datapoints.slice(trim, points.datapoints.length - trim);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getErrorFromElasticResponse(response, err) {\r\n    const result: any = {};\r\n    result.data = JSON.stringify(err, null, 4);\r\n    if (err.root_cause && err.root_cause.length > 0 && err.root_cause[0].reason) {\r\n      result.message = err.root_cause[0].reason;\r\n    } else {\r\n      result.message = err.reason || 'Unkown elastic error response';\r\n    }\r\n\r\n    if (response.$$config) {\r\n      result.config = response.$$config;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  getTimeSeries() {\r\n    const seriesList = [];\r\n\r\n    for (let i = 0; i < this.response.responses.length; i++) {\r\n      const response = this.response.responses[i];\r\n      if (response.error) {\r\n        throw this.getErrorFromElasticResponse(this.response, response.error);\r\n      }\r\n\r\n      if (response.hits && response.hits.hits.length > 0) {\r\n        this.processHits(response.hits, seriesList);\r\n      }\r\n\r\n      if (response.aggregations) {\r\n        const aggregations = response.aggregations;\r\n        const target = this.targets[i];\r\n        const tmpSeriesList = [];\r\n        const table = new TableModel();\r\n\r\n        this.processBuckets(aggregations, target, tmpSeriesList, table, {}, 0);\r\n        this.trimDatapoints(tmpSeriesList, target);\r\n        this.nameSeries(tmpSeriesList, target);\r\n\r\n        for (let y = 0; y < tmpSeriesList.length; y++) {\r\n          seriesList.push(tmpSeriesList[y]);\r\n        }\r\n\r\n        if (table.rows.length > 0) {\r\n          seriesList.push(table);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { data: seriesList };\r\n  }\r\n}\r\n","import moment from 'moment';\r\n\r\nconst intervalMap = {\r\n  Hourly: { startOf: 'hour', amount: 'hours' },\r\n  Daily: { startOf: 'day', amount: 'days' },\r\n  Weekly: { startOf: 'isoWeek', amount: 'weeks' },\r\n  Monthly: { startOf: 'month', amount: 'months' },\r\n  Yearly: { startOf: 'year', amount: 'years' },\r\n};\r\n\r\nexport class IndexPattern {\r\n  constructor(private pattern, private interval: string | null) {}\r\n\r\n  getIndexForToday() {\r\n    if (this.interval) {\r\n      return moment.utc().format(this.pattern);\r\n    } else {\r\n      return this.pattern;\r\n    }\r\n  }\r\n\r\n  getIndexList(from, to) {\r\n    if (!this.interval) {\r\n      return this.pattern;\r\n    }\r\n\r\n    const intervalInfo = intervalMap[this.interval];\r\n    const start = moment(from)\r\n      .utc()\r\n      .startOf(intervalInfo.startOf);\r\n    const endEpoch = moment(to)\r\n      .utc()\r\n      .startOf(intervalInfo.startOf)\r\n      .valueOf();\r\n    const indexList = [];\r\n\r\n    while (start.valueOf() <= endEpoch) {\r\n      indexList.push(start.format(this.pattern));\r\n      start.add(1, intervalInfo.amount);\r\n    }\r\n\r\n    return indexList;\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport { ElasticQueryBuilder } from './query_builder';\r\nimport { IndexPattern } from './index_pattern';\r\nimport { ElasticResponse } from './elastic_response';\r\n\r\nexport class ElasticDatasource {\r\n  basicAuth: string;\r\n  withCredentials: boolean;\r\n  url: string;\r\n  name: string;\r\n  index: string;\r\n  timeField: string;\r\n  esVersion: number;\r\n  interval: string;\r\n  maxConcurrentShardRequests: number;\r\n  queryBuilder: ElasticQueryBuilder;\r\n  indexPattern: IndexPattern;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv, private timeSrv) {\r\n    this.basicAuth = instanceSettings.basicAuth;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.index = instanceSettings.index;\r\n    this.timeField = instanceSettings.jsonData.timeField;\r\n    this.esVersion = instanceSettings.jsonData.esVersion;\r\n    this.indexPattern = new IndexPattern(instanceSettings.index, instanceSettings.jsonData.interval);\r\n    this.interval = instanceSettings.jsonData.timeInterval;\r\n    this.maxConcurrentShardRequests = instanceSettings.jsonData.maxConcurrentShardRequests;\r\n    this.queryBuilder = new ElasticQueryBuilder({\r\n      timeField: this.timeField,\r\n      esVersion: this.esVersion,\r\n    });\r\n  }\r\n\r\n  private request(method, url, data?) {\r\n    const options: any = {\r\n      url: this.url + '/' + url,\r\n      method: method,\r\n      data: data,\r\n    };\r\n\r\n    if (this.basicAuth || this.withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n    if (this.basicAuth) {\r\n      options.headers = {\r\n        Authorization: this.basicAuth,\r\n      };\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  private get(url) {\r\n    const range = this.timeSrv.timeRange();\r\n    const indexList = this.indexPattern.getIndexList(range.from.valueOf(), range.to.valueOf());\r\n    if (_.isArray(indexList) && indexList.length) {\r\n      return this.request('GET', indexList[0] + url).then(function(results) {\r\n        results.data.$$config = results.config;\r\n        return results.data;\r\n      });\r\n    } else {\r\n      return this.request('GET', this.indexPattern.getIndexForToday() + url).then(function(results) {\r\n        results.data.$$config = results.config;\r\n        return results.data;\r\n      });\r\n    }\r\n  }\r\n\r\n  private post(url, data) {\r\n    return this.request('POST', url, data)\r\n      .then(function(results) {\r\n        results.data.$$config = results.config;\r\n        return results.data;\r\n      })\r\n      .catch(err => {\r\n        if (err.data && err.data.error) {\r\n          throw {\r\n            message: 'Elasticsearch error: ' + err.data.error.reason,\r\n            error: err.data.error,\r\n          };\r\n        }\r\n\r\n        throw err;\r\n      });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    const annotation = options.annotation;\r\n    const timeField = annotation.timeField || '@timestamp';\r\n    const queryString = annotation.query || '*';\r\n    const tagsField = annotation.tagsField || 'tags';\r\n    const textField = annotation.textField || null;\r\n\r\n    const range = {};\r\n    range[timeField] = {\r\n      from: options.range.from.valueOf(),\r\n      to: options.range.to.valueOf(),\r\n      format: 'epoch_millis',\r\n    };\r\n\r\n    const queryInterpolated = this.templateSrv.replace(queryString, {}, 'lucene');\r\n    const query = {\r\n      bool: {\r\n        filter: [\r\n          { range: range },\r\n          {\r\n            query_string: {\r\n              query: queryInterpolated,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    };\r\n\r\n    const data = {\r\n      query: query,\r\n      size: 10000,\r\n    };\r\n\r\n    // fields field not supported on ES 5.x\r\n    if (this.esVersion < 5) {\r\n      data['fields'] = [timeField, '_source'];\r\n    }\r\n\r\n    const header: any = {\r\n      search_type: 'query_then_fetch',\r\n      ignore_unavailable: true,\r\n    };\r\n\r\n    // old elastic annotations had index specified on them\r\n    if (annotation.index) {\r\n      header.index = annotation.index;\r\n    } else {\r\n      header.index = this.indexPattern.getIndexList(options.range.from, options.range.to);\r\n    }\r\n\r\n    const payload = angular.toJson(header) + '\\n' + angular.toJson(data) + '\\n';\r\n\r\n    return this.post('_msearch', payload).then(res => {\r\n      const list = [];\r\n      const hits = res.responses[0].hits.hits;\r\n\r\n      const getFieldFromSource = function(source, fieldName) {\r\n        if (!fieldName) {\r\n          return;\r\n        }\r\n\r\n        const fieldNames = fieldName.split('.');\r\n        let fieldValue = source;\r\n\r\n        for (let i = 0; i < fieldNames.length; i++) {\r\n          fieldValue = fieldValue[fieldNames[i]];\r\n          if (!fieldValue) {\r\n            console.log('could not find field in annotation: ', fieldName);\r\n            return '';\r\n          }\r\n        }\r\n\r\n        return fieldValue;\r\n      };\r\n\r\n      for (let i = 0; i < hits.length; i++) {\r\n        const source = hits[i]._source;\r\n        let time = getFieldFromSource(source, timeField);\r\n        if (typeof hits[i].fields !== 'undefined') {\r\n          const fields = hits[i].fields;\r\n          if (_.isString(fields[timeField]) || _.isNumber(fields[timeField])) {\r\n            time = fields[timeField];\r\n          }\r\n        }\r\n\r\n        const event = {\r\n          annotation: annotation,\r\n          time: moment.utc(time).valueOf(),\r\n          text: getFieldFromSource(source, textField),\r\n          tags: getFieldFromSource(source, tagsField),\r\n        };\r\n\r\n        // legacy support for title tield\r\n        if (annotation.titleField) {\r\n          const title = getFieldFromSource(source, annotation.titleField);\r\n          if (title) {\r\n            event.text = title + '\\n' + event.text;\r\n          }\r\n        }\r\n\r\n        if (typeof event.tags === 'string') {\r\n          event.tags = event.tags.split(',');\r\n        }\r\n\r\n        list.push(event);\r\n      }\r\n      return list;\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    this.timeSrv.setTime({ from: 'now-1m', to: 'now' }, true);\r\n    // validate that the index exist and has date field\r\n    return this.getFields({ type: 'date' }).then(\r\n      dateFields => {\r\n        const timeField = _.find(dateFields, { text: this.timeField });\r\n        if (!timeField) {\r\n          return {\r\n            status: 'error',\r\n            message: 'No date field named ' + this.timeField + ' found',\r\n          };\r\n        }\r\n        return { status: 'success', message: 'Index OK. Time field name OK.' };\r\n      },\r\n      function(err) {\r\n        console.log(err);\r\n        if (err.data && err.data.error) {\r\n          let message = angular.toJson(err.data.error);\r\n          if (err.data.error.reason) {\r\n            message = err.data.error.reason;\r\n          }\r\n          return { status: 'error', message: message };\r\n        } else {\r\n          return { status: 'error', message: err.status };\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getQueryHeader(searchType, timeFrom, timeTo) {\r\n    const queryHeader: any = {\r\n      search_type: searchType,\r\n      ignore_unavailable: true,\r\n      index: this.indexPattern.getIndexList(timeFrom, timeTo),\r\n    };\r\n    if (this.esVersion >= 56) {\r\n      queryHeader['max_concurrent_shard_requests'] = this.maxConcurrentShardRequests;\r\n    }\r\n    return angular.toJson(queryHeader);\r\n  }\r\n\r\n  query(options) {\r\n    let payload = '';\r\n    let target;\r\n    const sentTargets = [];\r\n\r\n    // add global adhoc filters to timeFilter\r\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n\r\n    for (let i = 0; i < options.targets.length; i++) {\r\n      target = options.targets[i];\r\n      if (target.hide) {\r\n        continue;\r\n      }\r\n\r\n      const queryString = this.templateSrv.replace(target.query || '*', options.scopedVars, 'lucene');\r\n      const queryObj = this.queryBuilder.build(target, adhocFilters, queryString);\r\n      const esQuery = angular.toJson(queryObj);\r\n\r\n      const searchType = queryObj.size === 0 && this.esVersion < 5 ? 'count' : 'query_then_fetch';\r\n      const header = this.getQueryHeader(searchType, options.range.from, options.range.to);\r\n      payload += header + '\\n';\r\n\r\n      payload += esQuery + '\\n';\r\n      sentTargets.push(target);\r\n    }\r\n\r\n    if (sentTargets.length === 0) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    payload = payload.replace(/\\$timeFrom/g, options.range.from.valueOf());\r\n    payload = payload.replace(/\\$timeTo/g, options.range.to.valueOf());\r\n    payload = this.templateSrv.replace(payload, options.scopedVars);\r\n\r\n    return this.post('_msearch', payload).then(function(res) {\r\n      return new ElasticResponse(sentTargets, res).getTimeSeries();\r\n    });\r\n  }\r\n\r\n  getFields(query) {\r\n    return this.get('/_mapping').then(function(result) {\r\n      const typeMap = {\r\n        float: 'number',\r\n        double: 'number',\r\n        integer: 'number',\r\n        long: 'number',\r\n        date: 'date',\r\n        string: 'string',\r\n        text: 'string',\r\n        scaled_float: 'number',\r\n        nested: 'nested',\r\n      };\r\n\r\n      function shouldAddField(obj, key, query) {\r\n        if (key[0] === '_') {\r\n          return false;\r\n        }\r\n\r\n        if (!query.type) {\r\n          return true;\r\n        }\r\n\r\n        // equal query type filter, or via typemap translation\r\n        return query.type === obj.type || query.type === typeMap[obj.type];\r\n      }\r\n\r\n      // Store subfield names: [system, process, cpu, total] -> system.process.cpu.total\r\n      const fieldNameParts = [];\r\n      const fields = {};\r\n\r\n      function getFieldsRecursively(obj) {\r\n        for (const key in obj) {\r\n          const subObj = obj[key];\r\n\r\n          // Check mapping field for nested fields\r\n          if (_.isObject(subObj.properties)) {\r\n            fieldNameParts.push(key);\r\n            getFieldsRecursively(subObj.properties);\r\n          }\r\n\r\n          if (_.isObject(subObj.fields)) {\r\n            fieldNameParts.push(key);\r\n            getFieldsRecursively(subObj.fields);\r\n          }\r\n\r\n          if (_.isString(subObj.type)) {\r\n            const fieldName = fieldNameParts.concat(key).join('.');\r\n\r\n            // Hide meta-fields and check field type\r\n            if (shouldAddField(subObj, key, query)) {\r\n              fields[fieldName] = {\r\n                text: fieldName,\r\n                type: subObj.type,\r\n              };\r\n            }\r\n          }\r\n        }\r\n        fieldNameParts.pop();\r\n      }\r\n\r\n      for (const indexName in result) {\r\n        const index = result[indexName];\r\n        if (index && index.mappings) {\r\n          const mappings = index.mappings;\r\n          for (const typeName in mappings) {\r\n            const properties = mappings[typeName].properties;\r\n            getFieldsRecursively(properties);\r\n          }\r\n        }\r\n      }\r\n\r\n      // transform to array\r\n      return _.map(fields, function(value) {\r\n        return value;\r\n      });\r\n    });\r\n  }\r\n\r\n  getTerms(queryDef) {\r\n    const range = this.timeSrv.timeRange();\r\n    const searchType = this.esVersion >= 5 ? 'query_then_fetch' : 'count';\r\n    const header = this.getQueryHeader(searchType, range.from, range.to);\r\n    let esQuery = angular.toJson(this.queryBuilder.getTermsQuery(queryDef));\r\n\r\n    esQuery = esQuery.replace(/\\$timeFrom/g, range.from.valueOf());\r\n    esQuery = esQuery.replace(/\\$timeTo/g, range.to.valueOf());\r\n    esQuery = header + '\\n' + esQuery + '\\n';\r\n\r\n    return this.post('_msearch?search_type=' + searchType, esQuery).then(function(res) {\r\n      if (!res.responses[0].aggregations) {\r\n        return [];\r\n      }\r\n\r\n      const buckets = res.responses[0].aggregations['1'].buckets;\r\n      return _.map(buckets, function(bucket) {\r\n        return {\r\n          text: bucket.key_as_string || bucket.key,\r\n          value: bucket.key,\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    query = angular.fromJson(query);\r\n    if (!query) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    if (query.find === 'fields') {\r\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\r\n      return this.getFields(query);\r\n    }\r\n\r\n    if (query.find === 'terms') {\r\n      query.field = this.templateSrv.replace(query.field, {}, 'lucene');\r\n      query.query = this.templateSrv.replace(query.query || '*', {}, 'lucene');\r\n      return this.getTerms(query);\r\n    }\r\n  }\r\n\r\n  getTagKeys() {\r\n    return this.getFields({});\r\n  }\r\n\r\n  getTagValues(options) {\r\n    return this.getTerms({ field: options.key, query: '*' });\r\n  }\r\n\r\n  targetContainsTemplate(target) {\r\n    if (this.templateSrv.variableExists(target.query) || this.templateSrv.variableExists(target.alias)) {\r\n      return true;\r\n    }\r\n\r\n    for (const bucketAgg of target.bucketAggs) {\r\n      if (this.templateSrv.variableExists(bucketAgg.field) || this.objectContainsTemplate(bucketAgg.settings)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    for (const metric of target.metrics) {\r\n      if (\r\n        this.templateSrv.variableExists(metric.field) ||\r\n        this.objectContainsTemplate(metric.settings) ||\r\n        this.objectContainsTemplate(metric.meta)\r\n      ) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private isPrimitive(obj) {\r\n    if (obj === null || obj === undefined) {\r\n      return true;\r\n    }\r\n    if (['string', 'number', 'boolean'].some(type => type === typeof true)) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private objectContainsTemplate(obj) {\r\n    if (!obj) {\r\n      return false;\r\n    }\r\n\r\n    for (const key of Object.keys(obj)) {\r\n      if (this.isPrimitive(obj[key])) {\r\n        if (this.templateSrv.variableExists(obj[key])) {\r\n          return true;\r\n        }\r\n      } else if (Array.isArray(obj[key])) {\r\n        for (const item of obj[key]) {\r\n          if (this.objectContainsTemplate(item)) {\r\n            return true;\r\n          }\r\n        }\r\n      } else {\r\n        if (this.objectContainsTemplate(obj[key])) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport * as queryDef from './query_def';\r\n\r\nexport function elasticBucketAgg() {\r\n  return {\r\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/bucket_agg.html',\r\n    controller: 'ElasticBucketAggCtrl',\r\n    restrict: 'E',\r\n    scope: {\r\n      target: '=',\r\n      index: '=',\r\n      onChange: '&',\r\n      getFields: '&',\r\n    },\r\n  };\r\n}\r\n\r\nexport class ElasticBucketAggCtrl {\r\n  /** @nginject */\r\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\r\n    const bucketAggs = $scope.target.bucketAggs;\r\n\r\n    $scope.orderByOptions = [];\r\n\r\n    $scope.getBucketAggTypes = function() {\r\n      return queryDef.bucketAggTypes;\r\n    };\r\n\r\n    $scope.getOrderOptions = function() {\r\n      return queryDef.orderOptions;\r\n    };\r\n\r\n    $scope.getSizeOptions = function() {\r\n      return queryDef.sizeOptions;\r\n    };\r\n\r\n    $rootScope.onAppEvent(\r\n      'elastic-query-updated',\r\n      function() {\r\n        $scope.validateModel();\r\n      },\r\n      $scope\r\n    );\r\n\r\n    $scope.init = function() {\r\n      $scope.agg = bucketAggs[$scope.index];\r\n      $scope.validateModel();\r\n    };\r\n\r\n    $scope.onChangeInternal = function() {\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.onTypeChanged = function() {\r\n      $scope.agg.settings = {};\r\n      $scope.showOptions = false;\r\n\r\n      switch ($scope.agg.type) {\r\n        case 'date_histogram':\r\n        case 'histogram':\r\n        case 'terms': {\r\n          delete $scope.agg.query;\r\n          $scope.agg.field = 'select field';\r\n          break;\r\n        }\r\n        case 'filters': {\r\n          delete $scope.agg.field;\r\n          $scope.agg.query = '*';\r\n          break;\r\n        }\r\n        case 'geohash_grid': {\r\n          $scope.agg.settings.precision = 3;\r\n          break;\r\n        }\r\n      }\r\n\r\n      $scope.validateModel();\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.validateModel = function() {\r\n      $scope.index = _.indexOf(bucketAggs, $scope.agg);\r\n      $scope.isFirst = $scope.index === 0;\r\n      $scope.bucketAggCount = bucketAggs.length;\r\n\r\n      let settingsLinkText = '';\r\n      const settings = $scope.agg.settings || {};\r\n\r\n      switch ($scope.agg.type) {\r\n        case 'terms': {\r\n          settings.order = settings.order || 'desc';\r\n          settings.size = settings.size || '10';\r\n          settings.min_doc_count = settings.min_doc_count || 1;\r\n          settings.orderBy = settings.orderBy || '_term';\r\n\r\n          if (settings.size !== '0') {\r\n            settingsLinkText = queryDef.describeOrder(settings.order) + ' ' + settings.size + ', ';\r\n          }\r\n\r\n          if (settings.min_doc_count > 0) {\r\n            settingsLinkText += 'Min Doc Count: ' + settings.min_doc_count + ', ';\r\n          }\r\n\r\n          settingsLinkText += 'Order by: ' + queryDef.describeOrderBy(settings.orderBy, $scope.target);\r\n\r\n          if (settings.size === '0') {\r\n            settingsLinkText += ' (' + settings.order + ')';\r\n          }\r\n\r\n          break;\r\n        }\r\n        case 'filters': {\r\n          settings.filters = settings.filters || [{ query: '*' }];\r\n          settingsLinkText = _.reduce(\r\n            settings.filters,\r\n            function(memo, value, index) {\r\n              memo += 'Q' + (index + 1) + '  = ' + value.query + ' ';\r\n              return memo;\r\n            },\r\n            ''\r\n          );\r\n          if (settingsLinkText.length > 50) {\r\n            settingsLinkText = settingsLinkText.substr(0, 50) + '...';\r\n          }\r\n          settingsLinkText = 'Filter Queries (' + settings.filters.length + ')';\r\n          break;\r\n        }\r\n        case 'date_histogram': {\r\n          settings.interval = settings.interval || 'auto';\r\n          settings.min_doc_count = settings.min_doc_count || 0;\r\n          $scope.agg.field = $scope.target.timeField;\r\n          settingsLinkText = 'Interval: ' + settings.interval;\r\n\r\n          if (settings.min_doc_count > 0) {\r\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\r\n          }\r\n\r\n          if (settings.trimEdges === undefined || settings.trimEdges < 0) {\r\n            settings.trimEdges = 0;\r\n          }\r\n\r\n          if (settings.trimEdges && settings.trimEdges > 0) {\r\n            settingsLinkText += ', Trim edges: ' + settings.trimEdges;\r\n          }\r\n          break;\r\n        }\r\n        case 'histogram': {\r\n          settings.interval = settings.interval || 1000;\r\n          settings.min_doc_count = _.defaultTo(settings.min_doc_count, 1);\r\n          settingsLinkText = 'Interval: ' + settings.interval;\r\n\r\n          if (settings.min_doc_count > 0) {\r\n            settingsLinkText += ', Min Doc Count: ' + settings.min_doc_count;\r\n          }\r\n          break;\r\n        }\r\n        case 'geohash_grid': {\r\n          // limit precision to 7\r\n          settings.precision = Math.max(Math.min(settings.precision, 7), 1);\r\n          settingsLinkText = 'Precision: ' + settings.precision;\r\n          break;\r\n        }\r\n      }\r\n\r\n      $scope.settingsLinkText = settingsLinkText;\r\n      $scope.agg.settings = settings;\r\n      return true;\r\n    };\r\n\r\n    $scope.addFiltersQuery = function() {\r\n      $scope.agg.settings.filters.push({ query: '*' });\r\n    };\r\n\r\n    $scope.removeFiltersQuery = function(filter) {\r\n      $scope.agg.settings.filters = _.without($scope.agg.settings.filters, filter);\r\n    };\r\n\r\n    $scope.toggleOptions = function() {\r\n      $scope.showOptions = !$scope.showOptions;\r\n    };\r\n\r\n    $scope.getOrderByOptions = function() {\r\n      return queryDef.getOrderByOptions($scope.target);\r\n    };\r\n\r\n    $scope.getFieldsInternal = function() {\r\n      if ($scope.agg.type === 'date_histogram') {\r\n        return $scope.getFields({ $fieldType: 'date' });\r\n      } else {\r\n        return $scope.getFields();\r\n      }\r\n    };\r\n\r\n    $scope.getIntervalOptions = function() {\r\n      return $q.when(uiSegmentSrv.transformToSegments(true, 'interval')(queryDef.intervalOptions));\r\n    };\r\n\r\n    $scope.addBucketAgg = function() {\r\n      // if last is date histogram add it before\r\n      const lastBucket = bucketAggs[bucketAggs.length - 1];\r\n      let addIndex = bucketAggs.length - 1;\r\n\r\n      if (lastBucket && lastBucket.type === 'date_histogram') {\r\n        addIndex -= 1;\r\n      }\r\n\r\n      const id = _.reduce(\r\n        $scope.target.bucketAggs.concat($scope.target.metrics),\r\n        function(max, val) {\r\n          return parseInt(val.id) > max ? parseInt(val.id) : max;\r\n        },\r\n        0\r\n      );\r\n\r\n      bucketAggs.splice(addIndex, 0, { type: 'terms', field: 'select field', id: (id + 1).toString(), fake: true });\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.removeBucketAgg = function() {\r\n      bucketAggs.splice($scope.index, 1);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nconst module = angular.module('grafana.directives');\r\nmodule.directive('elasticBucketAgg', elasticBucketAgg);\r\nmodule.controller('ElasticBucketAggCtrl', ElasticBucketAggCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport * as queryDef from './query_def';\r\n\r\nexport function elasticMetricAgg() {\r\n  return {\r\n    templateUrl: 'public/app/plugins/datasource/elasticsearch/partials/metric_agg.html',\r\n    controller: 'ElasticMetricAggCtrl',\r\n    restrict: 'E',\r\n    scope: {\r\n      target: '=',\r\n      index: '=',\r\n      onChange: '&',\r\n      getFields: '&',\r\n      esVersion: '=',\r\n    },\r\n  };\r\n}\r\n\r\nexport class ElasticMetricAggCtrl {\r\n  constructor($scope, uiSegmentSrv, $q, $rootScope) {\r\n    const metricAggs = $scope.target.metrics;\r\n    $scope.metricAggTypes = queryDef.getMetricAggTypes($scope.esVersion);\r\n    $scope.extendedStats = queryDef.extendedStats;\r\n    $scope.pipelineAggOptions = [];\r\n    $scope.modelSettingsValues = {};\r\n\r\n    $scope.init = function() {\r\n      $scope.agg = metricAggs[$scope.index];\r\n      $scope.validateModel();\r\n      $scope.updatePipelineAggOptions();\r\n    };\r\n\r\n    $scope.updatePipelineAggOptions = function() {\r\n      $scope.pipelineAggOptions = queryDef.getPipelineAggOptions($scope.target);\r\n    };\r\n\r\n    $rootScope.onAppEvent(\r\n      'elastic-query-updated',\r\n      function() {\r\n        $scope.index = _.indexOf(metricAggs, $scope.agg);\r\n        $scope.updatePipelineAggOptions();\r\n        $scope.validateModel();\r\n      },\r\n      $scope\r\n    );\r\n\r\n    $scope.validateModel = function() {\r\n      $scope.isFirst = $scope.index === 0;\r\n      $scope.isSingle = metricAggs.length === 1;\r\n      $scope.settingsLinkText = '';\r\n      $scope.aggDef = _.find($scope.metricAggTypes, { value: $scope.agg.type });\r\n\r\n      if (queryDef.isPipelineAgg($scope.agg.type)) {\r\n        $scope.agg.pipelineAgg = $scope.agg.pipelineAgg || 'select metric';\r\n        $scope.agg.field = $scope.agg.pipelineAgg;\r\n\r\n        const pipelineOptions = queryDef.getPipelineOptions($scope.agg);\r\n        if (pipelineOptions.length > 0) {\r\n          _.each(pipelineOptions, function(opt) {\r\n            $scope.agg.settings[opt.text] = $scope.agg.settings[opt.text] || opt.default;\r\n          });\r\n          $scope.settingsLinkText = 'Options';\r\n        }\r\n      } else if (!$scope.agg.field) {\r\n        $scope.agg.field = 'select field';\r\n      }\r\n      switch ($scope.agg.type) {\r\n        case 'cardinality': {\r\n          const precisionThreshold = $scope.agg.settings.precision_threshold || '';\r\n          $scope.settingsLinkText = 'Precision threshold: ' + precisionThreshold;\r\n          break;\r\n        }\r\n        case 'percentiles': {\r\n          $scope.agg.settings.percents = $scope.agg.settings.percents || [25, 50, 75, 95, 99];\r\n          $scope.settingsLinkText = 'Values: ' + $scope.agg.settings.percents.join(',');\r\n          break;\r\n        }\r\n        case 'extended_stats': {\r\n          if (_.keys($scope.agg.meta).length === 0) {\r\n            $scope.agg.meta.std_deviation_bounds_lower = true;\r\n            $scope.agg.meta.std_deviation_bounds_upper = true;\r\n          }\r\n\r\n          const stats = _.reduce(\r\n            $scope.agg.meta,\r\n            function(memo, val, key) {\r\n              if (val) {\r\n                const def = _.find($scope.extendedStats, { value: key });\r\n                memo.push(def.text);\r\n              }\r\n              return memo;\r\n            },\r\n            []\r\n          );\r\n\r\n          $scope.settingsLinkText = 'Stats: ' + stats.join(', ');\r\n          break;\r\n        }\r\n        case 'moving_avg': {\r\n          $scope.movingAvgModelTypes = queryDef.movingAvgModelOptions;\r\n          $scope.modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, true);\r\n          $scope.updateMovingAvgModelSettings();\r\n          break;\r\n        }\r\n        case 'raw_document': {\r\n          $scope.agg.settings.size = $scope.agg.settings.size || 500;\r\n          $scope.settingsLinkText = 'Size: ' + $scope.agg.settings.size;\r\n          $scope.target.metrics.splice(0, $scope.target.metrics.length, $scope.agg);\r\n\r\n          $scope.target.bucketAggs = [];\r\n          break;\r\n        }\r\n      }\r\n      if ($scope.aggDef.supportsInlineScript) {\r\n        // I know this stores the inline script twice\r\n        // but having it like this simplifes the query_builder\r\n        const inlineScript = $scope.agg.inlineScript;\r\n        if (inlineScript) {\r\n          $scope.agg.settings.script = { inline: inlineScript };\r\n        } else {\r\n          delete $scope.agg.settings.script;\r\n        }\r\n\r\n        if ($scope.settingsLinkText === '') {\r\n          $scope.settingsLinkText = 'Options';\r\n        }\r\n      }\r\n    };\r\n\r\n    $scope.toggleOptions = function() {\r\n      $scope.showOptions = !$scope.showOptions;\r\n      $scope.updatePipelineAggOptions();\r\n    };\r\n\r\n    $scope.onChangeInternal = function() {\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.updateMovingAvgModelSettings = function() {\r\n      const modelSettingsKeys = [];\r\n      const modelSettings = queryDef.getMovingAvgSettings($scope.agg.settings.model, false);\r\n      for (let i = 0; i < modelSettings.length; i++) {\r\n        modelSettingsKeys.push(modelSettings[i].value);\r\n      }\r\n\r\n      for (const key in $scope.agg.settings.settings) {\r\n        if ($scope.agg.settings.settings[key] === null || modelSettingsKeys.indexOf(key) === -1) {\r\n          delete $scope.agg.settings.settings[key];\r\n        }\r\n      }\r\n    };\r\n\r\n    $scope.onChangeClearInternal = function() {\r\n      delete $scope.agg.settings.minimize;\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.onTypeChange = function() {\r\n      $scope.agg.settings = {};\r\n      $scope.agg.meta = {};\r\n      $scope.showOptions = false;\r\n      $scope.updatePipelineAggOptions();\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.getFieldsInternal = function() {\r\n      if ($scope.agg.type === 'cardinality') {\r\n        return $scope.getFields();\r\n      }\r\n      return $scope.getFields({ $fieldType: 'number' });\r\n    };\r\n\r\n    $scope.addMetricAgg = function() {\r\n      const addIndex = metricAggs.length;\r\n\r\n      const id = _.reduce(\r\n        $scope.target.bucketAggs.concat($scope.target.metrics),\r\n        function(max, val) {\r\n          return parseInt(val.id) > max ? parseInt(val.id) : max;\r\n        },\r\n        0\r\n      );\r\n\r\n      metricAggs.splice(addIndex, 0, { type: 'count', field: 'select field', id: (id + 1).toString() });\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.removeMetricAgg = function() {\r\n      metricAggs.splice($scope.index, 1);\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.toggleShowMetric = function() {\r\n      $scope.agg.hide = !$scope.agg.hide;\r\n      if (!$scope.agg.hide) {\r\n        delete $scope.agg.hide;\r\n      }\r\n      $scope.onChange();\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nconst module = angular.module('grafana.directives');\r\nmodule.directive('elasticMetricAgg', elasticMetricAgg);\r\nmodule.controller('ElasticMetricAggCtrl', ElasticMetricAggCtrl);\r\n","import './bucket_agg';\r\nimport './metric_agg';\r\n\r\nimport angular from 'angular';\r\nimport _ from 'lodash';\r\nimport * as queryDef from './query_def';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport class ElasticQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  esVersion: any;\r\n  rawQueryOld: string;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private $rootScope, private uiSegmentSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.esVersion = this.datasource.esVersion;\r\n    this.queryUpdated();\r\n  }\r\n\r\n  getFields(type) {\r\n    const jsonStr = angular.toJson({ find: 'fields', type: type });\r\n    return this.datasource\r\n      .metricFindQuery(jsonStr)\r\n      .then(this.uiSegmentSrv.transformToSegments(false))\r\n      .catch(this.handleQueryError.bind(this));\r\n  }\r\n\r\n  queryUpdated() {\r\n    const newJson = angular.toJson(this.datasource.queryBuilder.build(this.target), true);\r\n    if (this.rawQueryOld && newJson !== this.rawQueryOld) {\r\n      this.refresh();\r\n    }\r\n\r\n    this.rawQueryOld = newJson;\r\n    this.$rootScope.appEvent('elastic-query-updated');\r\n  }\r\n\r\n  getCollapsedText() {\r\n    const metricAggs = this.target.metrics;\r\n    const bucketAggs = this.target.bucketAggs;\r\n    const metricAggTypes = queryDef.getMetricAggTypes(this.esVersion);\r\n    const bucketAggTypes = queryDef.bucketAggTypes;\r\n    let text = '';\r\n\r\n    if (this.target.query) {\r\n      text += 'Query: ' + this.target.query + ', ';\r\n    }\r\n\r\n    text += 'Metrics: ';\r\n\r\n    _.each(metricAggs, (metric, index) => {\r\n      const aggDef = _.find(metricAggTypes, { value: metric.type });\r\n      text += aggDef.text + '(';\r\n      if (aggDef.requiresField) {\r\n        text += metric.field;\r\n      }\r\n      text += '), ';\r\n    });\r\n\r\n    _.each(bucketAggs, (bucketAgg, index) => {\r\n      if (index === 0) {\r\n        text += ' Group by: ';\r\n      }\r\n\r\n      const aggDef = _.find(bucketAggTypes, { value: bucketAgg.type });\r\n      text += aggDef.text + '(';\r\n      if (aggDef.requiresField) {\r\n        text += bucketAgg.field;\r\n      }\r\n      text += '), ';\r\n    });\r\n\r\n    if (this.target.alias) {\r\n      text += 'Alias: ' + this.target.alias;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  handleQueryError(err) {\r\n    this.error = err.message || 'Failed to issue metric query';\r\n    return [];\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport class ElasticConfigCtrl {\r\n  static templateUrl = 'public/app/plugins/datasource/elasticsearch/partials/config.html';\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.current.jsonData.timeField = this.current.jsonData.timeField || '@timestamp';\r\n    this.current.jsonData.esVersion = this.current.jsonData.esVersion || 5;\r\n    this.current.jsonData.maxConcurrentShardRequests = this.current.jsonData.maxConcurrentShardRequests || 256;\r\n  }\r\n\r\n  indexPatternTypes = [\r\n    { name: 'No pattern', value: undefined },\r\n    { name: 'Hourly', value: 'Hourly', example: '[logstash-]YYYY.MM.DD.HH' },\r\n    { name: 'Daily', value: 'Daily', example: '[logstash-]YYYY.MM.DD' },\r\n    { name: 'Weekly', value: 'Weekly', example: '[logstash-]GGGG.WW' },\r\n    { name: 'Monthly', value: 'Monthly', example: '[logstash-]YYYY.MM' },\r\n    { name: 'Yearly', value: 'Yearly', example: '[logstash-]YYYY' },\r\n  ];\r\n\r\n  esVersions = [{ name: '2.x', value: 2 }, { name: '5.x', value: 5 }, { name: '5.6+', value: 56 }];\r\n\r\n  indexPatternTypeChanged() {\r\n    const def = _.find(this.indexPatternTypes, {\r\n      value: this.current.jsonData.interval,\r\n    });\r\n    this.current.database = def.example || 'es-index-name';\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\n\r\nexport default class OpenTsDatasource {\r\n  type: any;\r\n  url: any;\r\n  name: any;\r\n  withCredentials: any;\r\n  basicAuth: any;\r\n  tsdbVersion: any;\r\n  tsdbResolution: any;\r\n  supportMetrics: any;\r\n  tagKeys: any;\r\n\r\n  aggregatorsPromise: any;\r\n  filterTypesPromise: any;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\r\n    this.type = 'opentsdb';\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.basicAuth = instanceSettings.basicAuth;\r\n    instanceSettings.jsonData = instanceSettings.jsonData || {};\r\n    this.tsdbVersion = instanceSettings.jsonData.tsdbVersion || 1;\r\n    this.tsdbResolution = instanceSettings.jsonData.tsdbResolution || 1;\r\n    this.supportMetrics = true;\r\n    this.tagKeys = {};\r\n\r\n    this.aggregatorsPromise = null;\r\n    this.filterTypesPromise = null;\r\n  }\r\n\r\n  // Called once per panel (graph)\r\n  query(options) {\r\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\r\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\r\n    const qs = [];\r\n\r\n    _.each(options.targets, target => {\r\n      if (!target.metric) {\r\n        return;\r\n      }\r\n      qs.push(this.convertTargetToQuery(target, options, this.tsdbVersion));\r\n    });\r\n\r\n    const queries = _.compact(qs);\r\n\r\n    // No valid targets, return the empty result to save a round trip.\r\n    if (_.isEmpty(queries)) {\r\n      const d = this.$q.defer();\r\n      d.resolve({ data: [] });\r\n      return d.promise;\r\n    }\r\n\r\n    const groupByTags = {};\r\n    _.each(queries, function(query) {\r\n      if (query.filters && query.filters.length > 0) {\r\n        _.each(query.filters, function(val) {\r\n          groupByTags[val.tagk] = true;\r\n        });\r\n      } else {\r\n        _.each(query.tags, function(val, key) {\r\n          groupByTags[key] = true;\r\n        });\r\n      }\r\n    });\r\n\r\n    options.targets = _.filter(options.targets, function(query) {\r\n      return query.hide !== true;\r\n    });\r\n\r\n    return this.performTimeSeriesQuery(queries, start, end).then(response => {\r\n      const metricToTargetMapping = this.mapMetricsToTargets(response.data, options, this.tsdbVersion);\r\n      const result = _.map(response.data, (metricData, index) => {\r\n        index = metricToTargetMapping[index];\r\n        if (index === -1) {\r\n          index = 0;\r\n        }\r\n        this._saveTagKeys(metricData);\r\n\r\n        return this.transformMetricData(metricData, groupByTags, options.targets[index], options, this.tsdbResolution);\r\n      });\r\n      return { data: result };\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    const start = this.convertToTSDBTime(options.rangeRaw.from, false);\r\n    const end = this.convertToTSDBTime(options.rangeRaw.to, true);\r\n    const qs = [];\r\n    const eventList = [];\r\n\r\n    qs.push({ aggregator: 'sum', metric: options.annotation.target });\r\n\r\n    const queries = _.compact(qs);\r\n\r\n    return this.performTimeSeriesQuery(queries, start, end).then(\r\n      function(results) {\r\n        if (results.data[0]) {\r\n          let annotationObject = results.data[0].annotations;\r\n          if (options.annotation.isGlobal) {\r\n            annotationObject = results.data[0].globalAnnotations;\r\n          }\r\n          if (annotationObject) {\r\n            _.each(annotationObject, function(annotation) {\r\n              const event = {\r\n                text: annotation.description,\r\n                time: Math.floor(annotation.startTime) * 1000,\r\n                annotation: options.annotation,\r\n              };\r\n\r\n              eventList.push(event);\r\n            });\r\n          }\r\n        }\r\n        return eventList;\r\n      }.bind(this)\r\n    );\r\n  }\r\n\r\n  targetContainsTemplate(target) {\r\n    if (target.filters && target.filters.length > 0) {\r\n      for (let i = 0; i < target.filters.length; i++) {\r\n        if (this.templateSrv.variableExists(target.filters[i].filter)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (target.tags && Object.keys(target.tags).length > 0) {\r\n      for (const tagKey in target.tags) {\r\n        if (this.templateSrv.variableExists(target.tags[tagKey])) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  performTimeSeriesQuery(queries, start, end) {\r\n    let msResolution = false;\r\n    if (this.tsdbResolution === 2) {\r\n      msResolution = true;\r\n    }\r\n    const reqBody: any = {\r\n      start: start,\r\n      queries: queries,\r\n      msResolution: msResolution,\r\n      globalAnnotations: true,\r\n    };\r\n    if (this.tsdbVersion === 3) {\r\n      reqBody.showQuery = true;\r\n    }\r\n\r\n    // Relative queries (e.g. last hour) don't include an end time\r\n    if (end) {\r\n      reqBody.end = end;\r\n    }\r\n\r\n    const options = {\r\n      method: 'POST',\r\n      url: this.url + '/api/query',\r\n      data: reqBody,\r\n    };\r\n\r\n    this._addCredentialOptions(options);\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  suggestTagKeys(metric) {\r\n    return this.$q.when(this.tagKeys[metric] || []);\r\n  }\r\n\r\n  _saveTagKeys(metricData) {\r\n    const tagKeys = Object.keys(metricData.tags);\r\n    _.each(metricData.aggregateTags, function(tag) {\r\n      tagKeys.push(tag);\r\n    });\r\n\r\n    this.tagKeys[metricData.metric] = tagKeys;\r\n  }\r\n\r\n  _performSuggestQuery(query, type) {\r\n    return this._get('/api/suggest', { type: type, q: query, max: 1000 }).then(function(result) {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  _performMetricKeyValueLookup(metric, keys) {\r\n    if (!metric || !keys) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    const keysArray = keys.split(',').map(function(key) {\r\n      return key.trim();\r\n    });\r\n    const key = keysArray[0];\r\n    let keysQuery = key + '=*';\r\n\r\n    if (keysArray.length > 1) {\r\n      keysQuery += ',' + keysArray.splice(1).join(',');\r\n    }\r\n\r\n    const m = metric + '{' + keysQuery + '}';\r\n\r\n    return this._get('/api/search/lookup', { m: m, limit: 3000 }).then(function(result) {\r\n      result = result.data.results;\r\n      const tagvs = [];\r\n      _.each(result, function(r) {\r\n        if (tagvs.indexOf(r.tags[key]) === -1) {\r\n          tagvs.push(r.tags[key]);\r\n        }\r\n      });\r\n      return tagvs;\r\n    });\r\n  }\r\n\r\n  _performMetricKeyLookup(metric) {\r\n    if (!metric) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    return this._get('/api/search/lookup', { m: metric, limit: 1000 }).then(function(result) {\r\n      result = result.data.results;\r\n      const tagks = [];\r\n      _.each(result, function(r) {\r\n        _.each(r.tags, function(tagv, tagk) {\r\n          if (tagks.indexOf(tagk) === -1) {\r\n            tagks.push(tagk);\r\n          }\r\n        });\r\n      });\r\n      return tagks;\r\n    });\r\n  }\r\n\r\n  _get(relativeUrl, params?) {\r\n    const options = {\r\n      method: 'GET',\r\n      url: this.url + relativeUrl,\r\n      params: params,\r\n    };\r\n\r\n    this._addCredentialOptions(options);\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  _addCredentialOptions(options) {\r\n    if (this.basicAuth || this.withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n    if (this.basicAuth) {\r\n      options.headers = { Authorization: this.basicAuth };\r\n    }\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    if (!query) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    let interpolated;\r\n    try {\r\n      interpolated = this.templateSrv.replace(query, {}, 'distributed');\r\n    } catch (err) {\r\n      return this.$q.reject(err);\r\n    }\r\n\r\n    const responseTransform = function(result) {\r\n      return _.map(result, function(value) {\r\n        return { text: value };\r\n      });\r\n    };\r\n\r\n    const metricsRegex = /metrics\\((.*)\\)/;\r\n    const tagNamesRegex = /tag_names\\((.*)\\)/;\r\n    const tagValuesRegex = /tag_values\\((.*?),\\s?(.*)\\)/;\r\n    const tagNamesSuggestRegex = /suggest_tagk\\((.*)\\)/;\r\n    const tagValuesSuggestRegex = /suggest_tagv\\((.*)\\)/;\r\n\r\n    const metricsQuery = interpolated.match(metricsRegex);\r\n    if (metricsQuery) {\r\n      return this._performSuggestQuery(metricsQuery[1], 'metrics').then(responseTransform);\r\n    }\r\n\r\n    const tagNamesQuery = interpolated.match(tagNamesRegex);\r\n    if (tagNamesQuery) {\r\n      return this._performMetricKeyLookup(tagNamesQuery[1]).then(responseTransform);\r\n    }\r\n\r\n    const tagValuesQuery = interpolated.match(tagValuesRegex);\r\n    if (tagValuesQuery) {\r\n      return this._performMetricKeyValueLookup(tagValuesQuery[1], tagValuesQuery[2]).then(responseTransform);\r\n    }\r\n\r\n    const tagNamesSuggestQuery = interpolated.match(tagNamesSuggestRegex);\r\n    if (tagNamesSuggestQuery) {\r\n      return this._performSuggestQuery(tagNamesSuggestQuery[1], 'tagk').then(responseTransform);\r\n    }\r\n\r\n    const tagValuesSuggestQuery = interpolated.match(tagValuesSuggestRegex);\r\n    if (tagValuesSuggestQuery) {\r\n      return this._performSuggestQuery(tagValuesSuggestQuery[1], 'tagv').then(responseTransform);\r\n    }\r\n\r\n    return this.$q.when([]);\r\n  }\r\n\r\n  testDatasource() {\r\n    return this._performSuggestQuery('cpu', 'metrics').then(function() {\r\n      return { status: 'success', message: 'Data source is working' };\r\n    });\r\n  }\r\n\r\n  getAggregators() {\r\n    if (this.aggregatorsPromise) {\r\n      return this.aggregatorsPromise;\r\n    }\r\n\r\n    this.aggregatorsPromise = this._get('/api/aggregators').then(function(result) {\r\n      if (result.data && _.isArray(result.data)) {\r\n        return result.data.sort();\r\n      }\r\n      return [];\r\n    });\r\n    return this.aggregatorsPromise;\r\n  }\r\n\r\n  getFilterTypes() {\r\n    if (this.filterTypesPromise) {\r\n      return this.filterTypesPromise;\r\n    }\r\n\r\n    this.filterTypesPromise = this._get('/api/config/filters').then(function(result) {\r\n      if (result.data) {\r\n        return Object.keys(result.data).sort();\r\n      }\r\n      return [];\r\n    });\r\n    return this.filterTypesPromise;\r\n  }\r\n\r\n  transformMetricData(md, groupByTags, target, options, tsdbResolution) {\r\n    const metricLabel = this.createMetricLabel(md, target, groupByTags, options);\r\n    const dps = [];\r\n\r\n    // TSDB returns datapoints has a hash of ts => value.\r\n    // Can't use _.pairs(invert()) because it stringifies keys/values\r\n    _.each(md.dps, function(v, k) {\r\n      if (tsdbResolution === 2) {\r\n        dps.push([v, k * 1]);\r\n      } else {\r\n        dps.push([v, k * 1000]);\r\n      }\r\n    });\r\n\r\n    return { target: metricLabel, datapoints: dps };\r\n  }\r\n\r\n  createMetricLabel(md, target, groupByTags, options) {\r\n    if (target.alias) {\r\n      const scopedVars = _.clone(options.scopedVars || {});\r\n      _.each(md.tags, function(value, key) {\r\n        scopedVars['tag_' + key] = { value: value };\r\n      });\r\n      return this.templateSrv.replace(target.alias, scopedVars);\r\n    }\r\n\r\n    let label = md.metric;\r\n    const tagData = [];\r\n\r\n    if (!_.isEmpty(md.tags)) {\r\n      _.each(_.toPairs(md.tags), function(tag) {\r\n        if (_.has(groupByTags, tag[0])) {\r\n          tagData.push(tag[0] + '=' + tag[1]);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (!_.isEmpty(tagData)) {\r\n      label += '{' + tagData.join(', ') + '}';\r\n    }\r\n\r\n    return label;\r\n  }\r\n\r\n  convertTargetToQuery(target, options, tsdbVersion) {\r\n    if (!target.metric || target.hide) {\r\n      return null;\r\n    }\r\n\r\n    const query: any = {\r\n      metric: this.templateSrv.replace(target.metric, options.scopedVars, 'pipe'),\r\n      aggregator: 'avg',\r\n    };\r\n\r\n    if (target.aggregator) {\r\n      query.aggregator = this.templateSrv.replace(target.aggregator);\r\n    }\r\n\r\n    if (target.shouldComputeRate) {\r\n      query.rate = true;\r\n      query.rateOptions = {\r\n        counter: !!target.isCounter,\r\n      };\r\n\r\n      if (target.counterMax && target.counterMax.length) {\r\n        query.rateOptions.counterMax = parseInt(target.counterMax);\r\n      }\r\n\r\n      if (target.counterResetValue && target.counterResetValue.length) {\r\n        query.rateOptions.resetValue = parseInt(target.counterResetValue);\r\n      }\r\n\r\n      if (tsdbVersion >= 2) {\r\n        query.rateOptions.dropResets =\r\n          !query.rateOptions.counterMax && (!query.rateOptions.ResetValue || query.rateOptions.ResetValue === 0);\r\n      }\r\n    }\r\n\r\n    if (!target.disableDownsampling) {\r\n      let interval = this.templateSrv.replace(target.downsampleInterval || options.interval);\r\n\r\n      if (interval.match(/\\.[0-9]+s/)) {\r\n        interval = parseFloat(interval) * 1000 + 'ms';\r\n      }\r\n\r\n      query.downsample = interval + '-' + target.downsampleAggregator;\r\n\r\n      if (target.downsampleFillPolicy && target.downsampleFillPolicy !== 'none') {\r\n        query.downsample += '-' + target.downsampleFillPolicy;\r\n      }\r\n    }\r\n\r\n    if (target.filters && target.filters.length > 0) {\r\n      query.filters = angular.copy(target.filters);\r\n      if (query.filters) {\r\n        for (const filterKey in query.filters) {\r\n          query.filters[filterKey].filter = this.templateSrv.replace(\r\n            query.filters[filterKey].filter,\r\n            options.scopedVars,\r\n            'pipe'\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      query.tags = angular.copy(target.tags);\r\n      if (query.tags) {\r\n        for (const tagKey in query.tags) {\r\n          query.tags[tagKey] = this.templateSrv.replace(query.tags[tagKey], options.scopedVars, 'pipe');\r\n        }\r\n      }\r\n    }\r\n\r\n    if (target.explicitTags) {\r\n      query.explicitTags = true;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  mapMetricsToTargets(metrics, options, tsdbVersion) {\r\n    let interpolatedTagValue, arrTagV;\r\n    return _.map(metrics, metricData => {\r\n      if (tsdbVersion === 3) {\r\n        return metricData.query.index;\r\n      } else {\r\n        return _.findIndex(options.targets, target => {\r\n          if (target.filters && target.filters.length > 0) {\r\n            return target.metric === metricData.metric;\r\n          } else {\r\n            return (\r\n              target.metric === metricData.metric &&\r\n              _.every(target.tags, (tagV, tagK) => {\r\n                interpolatedTagValue = this.templateSrv.replace(tagV, options.scopedVars, 'pipe');\r\n                arrTagV = interpolatedTagValue.split('|');\r\n                return _.includes(arrTagV, metricData.tags[tagK]) || interpolatedTagValue === '*';\r\n              })\r\n            );\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  convertToTSDBTime(date, roundUp) {\r\n    if (date === 'now') {\r\n      return null;\r\n    }\r\n\r\n    date = dateMath.parse(date, roundUp);\r\n    return date.valueOf();\r\n  }\r\n}\r\n","import { ElasticDatasource } from './datasource';\r\nimport { ElasticQueryCtrl } from './query_ctrl';\r\nimport { ElasticConfigCtrl } from './config_ctrl';\r\n\r\nclass ElasticAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  ElasticDatasource as Datasource,\r\n  ElasticQueryCtrl as QueryCtrl,\r\n  ElasticConfigCtrl as ConfigCtrl,\r\n  ElasticAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport class OpenTsQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n  aggregators: any;\r\n  fillPolicies: any;\r\n  filterTypes: any;\r\n  tsdbVersion: any;\r\n  aggregator: any;\r\n  downsampleInterval: any;\r\n  downsampleAggregator: any;\r\n  downsampleFillPolicy: any;\r\n  errors: any;\r\n  suggestMetrics: any;\r\n  suggestTagKeys: any;\r\n  suggestTagValues: any;\r\n  addTagMode: boolean;\r\n  addFilterMode: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    this.errors = this.validateTarget();\r\n    this.aggregators = ['avg', 'sum', 'min', 'max', 'dev', 'zimsum', 'mimmin', 'mimmax'];\r\n    this.fillPolicies = ['none', 'nan', 'null', 'zero'];\r\n    this.filterTypes = [\r\n      'wildcard',\r\n      'iliteral_or',\r\n      'not_iliteral_or',\r\n      'not_literal_or',\r\n      'iwildcard',\r\n      'literal_or',\r\n      'regexp',\r\n    ];\r\n\r\n    this.tsdbVersion = this.datasource.tsdbVersion;\r\n\r\n    if (!this.target.aggregator) {\r\n      this.target.aggregator = 'sum';\r\n    }\r\n\r\n    if (!this.target.downsampleAggregator) {\r\n      this.target.downsampleAggregator = 'avg';\r\n    }\r\n\r\n    if (!this.target.downsampleFillPolicy) {\r\n      this.target.downsampleFillPolicy = 'none';\r\n    }\r\n\r\n    this.datasource.getAggregators().then(aggs => {\r\n      if (aggs.length !== 0) {\r\n        this.aggregators = aggs;\r\n      }\r\n    });\r\n\r\n    this.datasource.getFilterTypes().then(filterTypes => {\r\n      if (filterTypes.length !== 0) {\r\n        this.filterTypes = filterTypes;\r\n      }\r\n    });\r\n\r\n    // needs to be defined here as it is called from typeahead\r\n    this.suggestMetrics = (query, callback) => {\r\n      this.datasource\r\n        .metricFindQuery('metrics(' + query + ')')\r\n        .then(this.getTextValues)\r\n        .then(callback);\r\n    };\r\n\r\n    this.suggestTagKeys = (query, callback) => {\r\n      this.datasource.suggestTagKeys(this.target.metric).then(callback);\r\n    };\r\n\r\n    this.suggestTagValues = (query, callback) => {\r\n      this.datasource\r\n        .metricFindQuery('suggest_tagv(' + query + ')')\r\n        .then(this.getTextValues)\r\n        .then(callback);\r\n    };\r\n  }\r\n\r\n  targetBlur() {\r\n    this.errors = this.validateTarget();\r\n    this.refresh();\r\n  }\r\n\r\n  getTextValues(metricFindResult) {\r\n    return _.map(metricFindResult, function(value) {\r\n      return value.text;\r\n    });\r\n  }\r\n\r\n  addTag() {\r\n    if (this.target.filters && this.target.filters.length > 0) {\r\n      this.errors.tags = 'Please remove filters to use tags, tags and filters are mutually exclusive.';\r\n    }\r\n\r\n    if (!this.addTagMode) {\r\n      this.addTagMode = true;\r\n      return;\r\n    }\r\n\r\n    if (!this.target.tags) {\r\n      this.target.tags = {};\r\n    }\r\n\r\n    this.errors = this.validateTarget();\r\n\r\n    if (!this.errors.tags) {\r\n      this.target.tags[this.target.currentTagKey] = this.target.currentTagValue;\r\n      this.target.currentTagKey = '';\r\n      this.target.currentTagValue = '';\r\n      this.targetBlur();\r\n    }\r\n\r\n    this.addTagMode = false;\r\n  }\r\n\r\n  removeTag(key) {\r\n    delete this.target.tags[key];\r\n    this.targetBlur();\r\n  }\r\n\r\n  editTag(key, value) {\r\n    this.removeTag(key);\r\n    this.target.currentTagKey = key;\r\n    this.target.currentTagValue = value;\r\n    this.addTag();\r\n  }\r\n\r\n  closeAddTagMode() {\r\n    this.addTagMode = false;\r\n    return;\r\n  }\r\n\r\n  addFilter() {\r\n    if (this.target.tags && _.size(this.target.tags) > 0) {\r\n      this.errors.filters = 'Please remove tags to use filters, tags and filters are mutually exclusive.';\r\n    }\r\n\r\n    if (!this.addFilterMode) {\r\n      this.addFilterMode = true;\r\n      return;\r\n    }\r\n\r\n    if (!this.target.filters) {\r\n      this.target.filters = [];\r\n    }\r\n\r\n    if (!this.target.currentFilterType) {\r\n      this.target.currentFilterType = 'iliteral_or';\r\n    }\r\n\r\n    if (!this.target.currentFilterGroupBy) {\r\n      this.target.currentFilterGroupBy = false;\r\n    }\r\n\r\n    this.errors = this.validateTarget();\r\n\r\n    if (!this.errors.filters) {\r\n      const currentFilter = {\r\n        type: this.target.currentFilterType,\r\n        tagk: this.target.currentFilterKey,\r\n        filter: this.target.currentFilterValue,\r\n        groupBy: this.target.currentFilterGroupBy,\r\n      };\r\n      this.target.filters.push(currentFilter);\r\n      this.target.currentFilterType = 'literal_or';\r\n      this.target.currentFilterKey = '';\r\n      this.target.currentFilterValue = '';\r\n      this.target.currentFilterGroupBy = false;\r\n      this.targetBlur();\r\n    }\r\n\r\n    this.addFilterMode = false;\r\n  }\r\n\r\n  removeFilter(index) {\r\n    this.target.filters.splice(index, 1);\r\n    this.targetBlur();\r\n  }\r\n\r\n  editFilter(fil, index) {\r\n    this.removeFilter(index);\r\n    this.target.currentFilterKey = fil.tagk;\r\n    this.target.currentFilterValue = fil.filter;\r\n    this.target.currentFilterType = fil.type;\r\n    this.target.currentFilterGroupBy = fil.groupBy;\r\n    this.addFilter();\r\n  }\r\n\r\n  closeAddFilterMode() {\r\n    this.addFilterMode = false;\r\n    return;\r\n  }\r\n\r\n  validateTarget() {\r\n    const errs: any = {};\r\n\r\n    if (this.target.shouldDownsample) {\r\n      try {\r\n        if (this.target.downsampleInterval) {\r\n          kbn.describe_interval(this.target.downsampleInterval);\r\n        } else {\r\n          errs.downsampleInterval = \"You must supply a downsample interval (e.g. '1m' or '1h').\";\r\n        }\r\n      } catch (err) {\r\n        errs.downsampleInterval = err.message;\r\n      }\r\n    }\r\n\r\n    if (this.target.tags && _.has(this.target.tags, this.target.currentTagKey)) {\r\n      errs.tags = \"Duplicate tag key '\" + this.target.currentTagKey + \"'.\";\r\n    }\r\n\r\n    return errs;\r\n  }\r\n}\r\n","export class OpenTsConfigCtrl {\r\n  static templateUrl = 'public/app/plugins/datasource/opentsdb/partials/config.html';\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.current.jsonData = this.current.jsonData || {};\r\n    this.current.jsonData.tsdbVersion = this.current.jsonData.tsdbVersion || 1;\r\n    this.current.jsonData.tsdbResolution = this.current.jsonData.tsdbResolution || 1;\r\n  }\r\n\r\n  tsdbVersions = [{ name: '<=2.1', value: 1 }, { name: '==2.2', value: 2 }, { name: '==2.3', value: 3 }];\r\n\r\n  tsdbResolutions = [{ name: 'second', value: 1 }, { name: 'millisecond', value: 2 }];\r\n}\r\n","import OpenTsDatasource from './datasource';\r\nimport { OpenTsQueryCtrl } from './query_ctrl';\r\nimport { OpenTsConfigCtrl } from './config_ctrl';\r\n\r\nclass AnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  OpenTsDatasource as Datasource,\r\n  OpenTsQueryCtrl as QueryCtrl,\r\n  OpenTsConfigCtrl as ConfigCtrl,\r\n  AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\n\r\nclass GrafanaDatasource {\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $q) {}\r\n\r\n  query(options) {\r\n    return this.backendSrv\r\n      .get('/api/tsdb/testdata/random-walk', {\r\n        from: options.range.from.valueOf(),\r\n        to: options.range.to.valueOf(),\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n      })\r\n      .then(res => {\r\n        const data = [];\r\n\r\n        if (res.results) {\r\n          _.forEach(res.results, queryRes => {\r\n            for (const series of queryRes.series) {\r\n              data.push({\r\n                target: series.name,\r\n                datapoints: series.points,\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        return { data: data };\r\n      });\r\n  }\r\n\r\n  metricFindQuery(options) {\r\n    return this.$q.when({ data: [] });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    const params: any = {\r\n      from: options.range.from.valueOf(),\r\n      to: options.range.to.valueOf(),\r\n      limit: options.annotation.limit,\r\n      tags: options.annotation.tags,\r\n    };\r\n\r\n    if (options.annotation.type === 'dashboard') {\r\n      // if no dashboard id yet return\r\n      if (!options.dashboard.id) {\r\n        return this.$q.when([]);\r\n      }\r\n      // filter by dashboard id\r\n      params.dashboardId = options.dashboard.id;\r\n      // remove tags filter if any\r\n      delete params.tags;\r\n    } else {\r\n      // require at least one tag\r\n      if (!_.isArray(options.annotation.tags) || options.annotation.tags.length === 0) {\r\n        return this.$q.when([]);\r\n      }\r\n    }\r\n\r\n    return this.backendSrv.get('/api/annotations', params);\r\n  }\r\n}\r\n\r\nexport { GrafanaDatasource };\r\n","import { GrafanaDatasource } from './datasource';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nclass GrafanaQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n}\r\n\r\nclass GrafanaAnnotationsQueryCtrl {\r\n  annotation: any;\r\n\r\n  types = [{ text: 'Dashboard', value: 'dashboard' }, { text: 'Tags', value: 'tags' }];\r\n\r\n  constructor() {\r\n    this.annotation.type = this.annotation.type || 'tags';\r\n    this.annotation.limit = this.annotation.limit || 100;\r\n  }\r\n\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  GrafanaDatasource,\r\n  GrafanaDatasource as Datasource,\r\n  GrafanaQueryCtrl as QueryCtrl,\r\n  GrafanaAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nexport default class InfluxSeries {\r\n  series: any;\r\n  alias: any;\r\n  annotation: any;\r\n\r\n  constructor(options) {\r\n    this.series = options.series;\r\n    this.alias = options.alias;\r\n    this.annotation = options.annotation;\r\n  }\r\n\r\n  getTimeSeries() {\r\n    const output = [];\r\n    let i, j;\r\n\r\n    if (this.series.length === 0) {\r\n      return output;\r\n    }\r\n\r\n    _.each(this.series, series => {\r\n      const columns = series.columns.length;\r\n      const tags = _.map(series.tags, function(value, key) {\r\n        return key + ': ' + value;\r\n      });\r\n\r\n      for (j = 1; j < columns; j++) {\r\n        let seriesName = series.name;\r\n        const columnName = series.columns[j];\r\n        if (columnName !== 'value') {\r\n          seriesName = seriesName + '.' + columnName;\r\n        }\r\n\r\n        if (this.alias) {\r\n          seriesName = this._getSeriesName(series, j);\r\n        } else if (series.tags) {\r\n          seriesName = seriesName + ' {' + tags.join(', ') + '}';\r\n        }\r\n\r\n        const datapoints = [];\r\n        if (series.values) {\r\n          for (i = 0; i < series.values.length; i++) {\r\n            datapoints[i] = [series.values[i][j], series.values[i][0]];\r\n          }\r\n        }\r\n\r\n        output.push({ target: seriesName, datapoints: datapoints });\r\n      }\r\n    });\r\n\r\n    return output;\r\n  }\r\n\r\n  _getSeriesName(series, index) {\r\n    const regex = /\\$(\\w+)|\\[\\[([\\s\\S]+?)\\]\\]/g;\r\n    const segments = series.name.split('.');\r\n\r\n    return this.alias.replace(regex, function(match, g1, g2) {\r\n      const group = g1 || g2;\r\n      const segIndex = parseInt(group, 10);\r\n\r\n      if (group === 'm' || group === 'measurement') {\r\n        return series.name;\r\n      }\r\n      if (group === 'col') {\r\n        return series.columns[index];\r\n      }\r\n      if (!isNaN(segIndex)) {\r\n        return segments[segIndex];\r\n      }\r\n      if (group.indexOf('tag_') !== 0) {\r\n        return match;\r\n      }\r\n\r\n      const tag = group.replace('tag_', '');\r\n      if (!series.tags) {\r\n        return match;\r\n      }\r\n      return series.tags[tag];\r\n    });\r\n  }\r\n\r\n  getAnnotations() {\r\n    const list = [];\r\n\r\n    _.each(this.series, series => {\r\n      let titleCol = null;\r\n      let timeCol = null;\r\n      const tagsCol = [];\r\n      let textCol = null;\r\n\r\n      _.each(series.columns, (column, index) => {\r\n        if (column === 'time') {\r\n          timeCol = index;\r\n          return;\r\n        }\r\n        if (column === 'sequence_number') {\r\n          return;\r\n        }\r\n        if (!titleCol) {\r\n          titleCol = index;\r\n        }\r\n        if (column === this.annotation.titleColumn) {\r\n          titleCol = index;\r\n          return;\r\n        }\r\n        if (_.includes((this.annotation.tagsColumn || '').replace(' ', '').split(','), column)) {\r\n          tagsCol.push(index);\r\n          return;\r\n        }\r\n        if (column === this.annotation.textColumn) {\r\n          textCol = index;\r\n          return;\r\n        }\r\n      });\r\n\r\n      _.each(series.values, value => {\r\n        const data = {\r\n          annotation: this.annotation,\r\n          time: +new Date(value[timeCol]),\r\n          title: value[titleCol],\r\n          // Remove empty values, then split in different tags for comma separated values\r\n          tags: _.flatten(\r\n            tagsCol\r\n              .filter(function(t) {\r\n                return value[t];\r\n              })\r\n              .map(function(t) {\r\n                return value[t].split(',');\r\n              })\r\n          ),\r\n          text: value[textCol],\r\n        };\r\n\r\n        list.push(data);\r\n      });\r\n    });\r\n\r\n    return list;\r\n  }\r\n\r\n  getTable() {\r\n    const table = new TableModel();\r\n    let i, j;\r\n\r\n    if (this.series.length === 0) {\r\n      return table;\r\n    }\r\n\r\n    _.each(this.series, (series, seriesIndex) => {\r\n      if (seriesIndex === 0) {\r\n        j = 0;\r\n        // Check that the first column is indeed 'time'\r\n        if (series.columns[0] === 'time') {\r\n          // Push this now before the tags and with the right type\r\n          table.columns.push({ text: 'Time', type: 'time' });\r\n          j++;\r\n        }\r\n        _.each(_.keys(series.tags), function(key) {\r\n          table.columns.push({ text: key });\r\n        });\r\n        for (; j < series.columns.length; j++) {\r\n          table.columns.push({ text: series.columns[j] });\r\n        }\r\n      }\r\n\r\n      if (series.values) {\r\n        for (i = 0; i < series.values.length; i++) {\r\n          const values = series.values[i];\r\n          const reordered = [values[0]];\r\n          if (series.tags) {\r\n            for (const key in series.tags) {\r\n              if (series.tags.hasOwnProperty(key)) {\r\n                reordered.push(series.tags[key]);\r\n              }\r\n            }\r\n          }\r\n          for (j = 1; j < values.length; j++) {\r\n            reordered.push(values[j]);\r\n          }\r\n          table.rows.push(reordered);\r\n        }\r\n      }\r\n    });\r\n\r\n    return table;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport { QueryPartDef, QueryPart, functionRenderer, suffixRenderer } from 'app/core/components/query_part/query_part';\r\n\r\nconst index = [];\r\nconst categories = {\r\n  Aggregations: [],\r\n  Selectors: [],\r\n  Transformations: [],\r\n  Predictors: [],\r\n  Math: [],\r\n  Aliasing: [],\r\n  Fields: [],\r\n};\r\n\r\nfunction createPart(part): any {\r\n  const def = index[part.type];\r\n  if (!def) {\r\n    throw { message: 'Could not find query part ' + part.type };\r\n  }\r\n\r\n  return new QueryPart(part, def);\r\n}\r\n\r\nfunction register(options: any) {\r\n  index[options.type] = new QueryPartDef(options);\r\n  options.category.push(index[options.type]);\r\n}\r\n\r\nconst groupByTimeFunctions = [];\r\n\r\nfunction aliasRenderer(part, innerExpr) {\r\n  return innerExpr + ' AS ' + '\"' + part.params[0] + '\"';\r\n}\r\n\r\nfunction fieldRenderer(part, innerExpr) {\r\n  if (part.params[0] === '*') {\r\n    return '*';\r\n  }\r\n  return '\"' + part.params[0] + '\"';\r\n}\r\n\r\nfunction replaceAggregationAddStrategy(selectParts, partModel) {\r\n  // look for existing aggregation\r\n  for (let i = 0; i < selectParts.length; i++) {\r\n    const part = selectParts[i];\r\n    if (part.def.category === categories.Aggregations) {\r\n      if (part.def.type === partModel.def.type) {\r\n        return;\r\n      }\r\n      // count distinct is allowed\r\n      if (part.def.type === 'count' && partModel.def.type === 'distinct') {\r\n        break;\r\n      }\r\n      // remove next aggregation if distinct was replaced\r\n      if (part.def.type === 'distinct') {\r\n        const morePartsAvailable = selectParts.length >= i + 2;\r\n        if (partModel.def.type !== 'count' && morePartsAvailable) {\r\n          const nextPart = selectParts[i + 1];\r\n          if (nextPart.def.category === categories.Aggregations) {\r\n            selectParts.splice(i + 1, 1);\r\n          }\r\n        } else if (partModel.def.type === 'count') {\r\n          if (!morePartsAvailable || selectParts[i + 1].def.type !== 'count') {\r\n            selectParts.splice(i + 1, 0, partModel);\r\n          }\r\n          return;\r\n        }\r\n      }\r\n      selectParts[i] = partModel;\r\n      return;\r\n    }\r\n    if (part.def.category === categories.Selectors) {\r\n      selectParts[i] = partModel;\r\n      return;\r\n    }\r\n  }\r\n\r\n  selectParts.splice(1, 0, partModel);\r\n}\r\n\r\nfunction addTransformationStrategy(selectParts, partModel) {\r\n  let i;\r\n  // look for index to add transformation\r\n  for (i = 0; i < selectParts.length; i++) {\r\n    const part = selectParts[i];\r\n    if (part.def.category === categories.Math || part.def.category === categories.Aliasing) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  selectParts.splice(i, 0, partModel);\r\n}\r\n\r\nfunction addMathStrategy(selectParts, partModel) {\r\n  const partCount = selectParts.length;\r\n  if (partCount > 0) {\r\n    // if last is math, replace it\r\n    if (selectParts[partCount - 1].def.type === 'math') {\r\n      selectParts[partCount - 1] = partModel;\r\n      return;\r\n    }\r\n    // if next to last is math, replace it\r\n    if (partCount > 1 && selectParts[partCount - 2].def.type === 'math') {\r\n      selectParts[partCount - 2] = partModel;\r\n      return;\r\n    } else if (selectParts[partCount - 1].def.type === 'alias') {\r\n      // if last is alias add it before\r\n      selectParts.splice(partCount - 1, 0, partModel);\r\n      return;\r\n    }\r\n  }\r\n  selectParts.push(partModel);\r\n}\r\n\r\nfunction addAliasStrategy(selectParts, partModel) {\r\n  const partCount = selectParts.length;\r\n  if (partCount > 0) {\r\n    // if last is alias, replace it\r\n    if (selectParts[partCount - 1].def.type === 'alias') {\r\n      selectParts[partCount - 1] = partModel;\r\n      return;\r\n    }\r\n  }\r\n  selectParts.push(partModel);\r\n}\r\n\r\nfunction addFieldStrategy(selectParts, partModel, query) {\r\n  // copy all parts\r\n  const parts = _.map(selectParts, function(part: any) {\r\n    return createPart({ type: part.def.type, params: _.clone(part.params) });\r\n  });\r\n\r\n  query.selectModels.push(parts);\r\n}\r\n\r\nregister({\r\n  type: 'field',\r\n  addStrategy: addFieldStrategy,\r\n  category: categories.Fields,\r\n  params: [{ type: 'field', dynamicLookup: true }],\r\n  defaultParams: ['value'],\r\n  renderer: fieldRenderer,\r\n});\r\n\r\n// Aggregations\r\nregister({\r\n  type: 'count',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'distinct',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'integral',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'mean',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'median',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'mode',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'sum',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Aggregations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\n// transformations\r\n\r\nregister({\r\n  type: 'derivative',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [\r\n    {\r\n      name: 'duration',\r\n      type: 'interval',\r\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\r\n    },\r\n  ],\r\n  defaultParams: ['10s'],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'spread',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'non_negative_derivative',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [\r\n    {\r\n      name: 'duration',\r\n      type: 'interval',\r\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\r\n    },\r\n  ],\r\n  defaultParams: ['10s'],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'difference',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'non_negative_difference',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'moving_average',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [{ name: 'window', type: 'int', options: [5, 10, 20, 30, 40] }],\r\n  defaultParams: [10],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'cumulative_sum',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'stddev',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'time',\r\n  category: groupByTimeFunctions,\r\n  params: [\r\n    {\r\n      name: 'interval',\r\n      type: 'time',\r\n      options: ['$__interval', '1s', '10s', '1m', '5m', '10m', '15m', '1h'],\r\n    },\r\n  ],\r\n  defaultParams: ['$__interval'],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'fill',\r\n  category: groupByTimeFunctions,\r\n  params: [\r\n    {\r\n      name: 'fill',\r\n      type: 'string',\r\n      options: ['none', 'null', '0', 'previous', 'linear'],\r\n    },\r\n  ],\r\n  defaultParams: ['null'],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'elapsed',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Transformations,\r\n  params: [\r\n    {\r\n      name: 'duration',\r\n      type: 'interval',\r\n      options: ['1s', '10s', '1m', '5m', '10m', '15m', '1h'],\r\n    },\r\n  ],\r\n  defaultParams: ['10s'],\r\n  renderer: functionRenderer,\r\n});\r\n\r\n// predictions\r\nregister({\r\n  type: 'holt_winters',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Predictors,\r\n  params: [\r\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\r\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\r\n  ],\r\n  defaultParams: [10, 2],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'holt_winters_with_fit',\r\n  addStrategy: addTransformationStrategy,\r\n  category: categories.Predictors,\r\n  params: [\r\n    { name: 'number', type: 'int', options: [5, 10, 20, 30, 40] },\r\n    { name: 'season', type: 'int', options: [0, 1, 2, 5, 10] },\r\n  ],\r\n  defaultParams: [10, 2],\r\n  renderer: functionRenderer,\r\n});\r\n\r\n// Selectors\r\nregister({\r\n  type: 'bottom',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [3],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'first',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'last',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'max',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'min',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [],\r\n  defaultParams: [],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'percentile',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [{ name: 'nth', type: 'int' }],\r\n  defaultParams: [95],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'top',\r\n  addStrategy: replaceAggregationAddStrategy,\r\n  category: categories.Selectors,\r\n  params: [{ name: 'count', type: 'int' }],\r\n  defaultParams: [3],\r\n  renderer: functionRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'tag',\r\n  category: groupByTimeFunctions,\r\n  params: [{ name: 'tag', type: 'string', dynamicLookup: true }],\r\n  defaultParams: ['tag'],\r\n  renderer: fieldRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'math',\r\n  addStrategy: addMathStrategy,\r\n  category: categories.Math,\r\n  params: [{ name: 'expr', type: 'string' }],\r\n  defaultParams: [' / 100'],\r\n  renderer: suffixRenderer,\r\n});\r\n\r\nregister({\r\n  type: 'alias',\r\n  addStrategy: addAliasStrategy,\r\n  category: categories.Aliasing,\r\n  params: [{ name: 'name', type: 'string', quote: 'double' }],\r\n  defaultParams: ['alias'],\r\n  renderMode: 'suffix',\r\n  renderer: aliasRenderer,\r\n});\r\n\r\nexport default {\r\n  create: createPart,\r\n  getCategories: function() {\r\n    return categories;\r\n  },\r\n  replaceAggregationAdd: replaceAggregationAddStrategy,\r\n};\r\n","import _ from 'lodash';\r\nimport queryPart from './query_part';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nexport default class InfluxQuery {\r\n  target: any;\r\n  selectModels: any[];\r\n  queryBuilder: any;\r\n  groupByParts: any;\r\n  templateSrv: any;\r\n  scopedVars: any;\r\n\r\n  /** @ngInject */\r\n  constructor(target, templateSrv?, scopedVars?) {\r\n    this.target = target;\r\n    this.templateSrv = templateSrv;\r\n    this.scopedVars = scopedVars;\r\n\r\n    target.policy = target.policy || 'default';\r\n    target.resultFormat = target.resultFormat || 'time_series';\r\n    target.orderByTime = target.orderByTime || 'ASC';\r\n    target.tags = target.tags || [];\r\n    target.groupBy = target.groupBy || [{ type: 'time', params: ['$__interval'] }, { type: 'fill', params: ['null'] }];\r\n    target.select = target.select || [[{ type: 'field', params: ['value'] }, { type: 'mean', params: [] }]];\r\n\r\n    this.updateProjection();\r\n  }\r\n\r\n  updateProjection() {\r\n    this.selectModels = _.map(this.target.select, function(parts: any) {\r\n      return _.map(parts, queryPart.create);\r\n    });\r\n    this.groupByParts = _.map(this.target.groupBy, queryPart.create);\r\n  }\r\n\r\n  updatePersistedParts() {\r\n    this.target.select = _.map(this.selectModels, function(selectParts) {\r\n      return _.map(selectParts, function(part: any) {\r\n        return { type: part.def.type, params: part.params };\r\n      });\r\n    });\r\n  }\r\n\r\n  hasGroupByTime() {\r\n    return _.find(this.target.groupBy, (g: any) => g.type === 'time');\r\n  }\r\n\r\n  hasFill() {\r\n    return _.find(this.target.groupBy, (g: any) => g.type === 'fill');\r\n  }\r\n\r\n  addGroupBy(value) {\r\n    const stringParts = value.match(/^(\\w+)\\((.*)\\)$/);\r\n    const typePart = stringParts[1];\r\n    const arg = stringParts[2];\r\n    const partModel = queryPart.create({ type: typePart, params: [arg] });\r\n    const partCount = this.target.groupBy.length;\r\n\r\n    if (partCount === 0) {\r\n      this.target.groupBy.push(partModel.part);\r\n    } else if (typePart === 'time') {\r\n      this.target.groupBy.splice(0, 0, partModel.part);\r\n    } else if (typePart === 'tag') {\r\n      if (this.target.groupBy[partCount - 1].type === 'fill') {\r\n        this.target.groupBy.splice(partCount - 1, 0, partModel.part);\r\n      } else {\r\n        this.target.groupBy.push(partModel.part);\r\n      }\r\n    } else {\r\n      this.target.groupBy.push(partModel.part);\r\n    }\r\n\r\n    this.updateProjection();\r\n  }\r\n\r\n  removeGroupByPart(part, index) {\r\n    const categories = queryPart.getCategories();\r\n\r\n    if (part.def.type === 'time') {\r\n      // remove fill\r\n      this.target.groupBy = _.filter(this.target.groupBy, (g: any) => g.type !== 'fill');\r\n      // remove aggregations\r\n      this.target.select = _.map(this.target.select, (s: any) => {\r\n        return _.filter(s, (part: any) => {\r\n          const partModel = queryPart.create(part);\r\n          if (partModel.def.category === categories.Aggregations) {\r\n            return false;\r\n          }\r\n          if (partModel.def.category === categories.Selectors) {\r\n            return false;\r\n          }\r\n          return true;\r\n        });\r\n      });\r\n    }\r\n\r\n    this.target.groupBy.splice(index, 1);\r\n    this.updateProjection();\r\n  }\r\n\r\n  removeSelect(index: number) {\r\n    this.target.select.splice(index, 1);\r\n    this.updateProjection();\r\n  }\r\n\r\n  removeSelectPart(selectParts, part) {\r\n    // if we remove the field remove the whole statement\r\n    if (part.def.type === 'field') {\r\n      if (this.selectModels.length > 1) {\r\n        const modelsIndex = _.indexOf(this.selectModels, selectParts);\r\n        this.selectModels.splice(modelsIndex, 1);\r\n      }\r\n    } else {\r\n      const partIndex = _.indexOf(selectParts, part);\r\n      selectParts.splice(partIndex, 1);\r\n    }\r\n\r\n    this.updatePersistedParts();\r\n  }\r\n\r\n  addSelectPart(selectParts, type) {\r\n    const partModel = queryPart.create({ type: type });\r\n    partModel.def.addStrategy(selectParts, partModel, this);\r\n    this.updatePersistedParts();\r\n  }\r\n\r\n  private renderTagCondition(tag, index, interpolate) {\r\n    let str = '';\r\n    let operator = tag.operator;\r\n    let value = tag.value;\r\n    if (index > 0) {\r\n      str = (tag.condition || 'AND') + ' ';\r\n    }\r\n\r\n    if (!operator) {\r\n      if (/^\\/.*\\/$/.test(value)) {\r\n        operator = '=~';\r\n      } else {\r\n        operator = '=';\r\n      }\r\n    }\r\n\r\n    // quote value unless regex\r\n    if (operator !== '=~' && operator !== '!~') {\r\n      if (interpolate) {\r\n        value = this.templateSrv.replace(value, this.scopedVars);\r\n      }\r\n      if (operator !== '>' && operator !== '<') {\r\n        value = \"'\" + value.replace(/\\\\/g, '\\\\\\\\') + \"'\";\r\n      }\r\n    } else if (interpolate) {\r\n      value = this.templateSrv.replace(value, this.scopedVars, 'regex');\r\n    }\r\n\r\n    return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\r\n  }\r\n\r\n  getMeasurementAndPolicy(interpolate) {\r\n    let policy = this.target.policy;\r\n    let measurement = this.target.measurement || 'measurement';\r\n\r\n    if (!measurement.match('^/.*/$')) {\r\n      measurement = '\"' + measurement + '\"';\r\n    } else if (interpolate) {\r\n      measurement = this.templateSrv.replace(measurement, this.scopedVars, 'regex');\r\n    }\r\n\r\n    if (policy !== 'default') {\r\n      policy = '\"' + this.target.policy + '\".';\r\n    } else {\r\n      policy = '';\r\n    }\r\n\r\n    return policy + measurement;\r\n  }\r\n\r\n  interpolateQueryStr(value, variable, defaultFormatFn) {\r\n    // if no multi or include all do not regexEscape\r\n    if (!variable.multi && !variable.includeAll) {\r\n      return value;\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return kbn.regexEscape(value);\r\n    }\r\n\r\n    const escapedValues = _.map(value, kbn.regexEscape);\r\n    return '(' + escapedValues.join('|') + ')';\r\n  }\r\n\r\n  render(interpolate?) {\r\n    const target = this.target;\r\n\r\n    if (target.rawQuery) {\r\n      if (interpolate) {\r\n        return this.templateSrv.replace(target.query, this.scopedVars, this.interpolateQueryStr);\r\n      } else {\r\n        return target.query;\r\n      }\r\n    }\r\n\r\n    let query = 'SELECT ';\r\n    let i, y;\r\n    for (i = 0; i < this.selectModels.length; i++) {\r\n      const parts = this.selectModels[i];\r\n      let selectText = '';\r\n      for (y = 0; y < parts.length; y++) {\r\n        const part = parts[y];\r\n        selectText = part.render(selectText);\r\n      }\r\n\r\n      if (i > 0) {\r\n        query += ', ';\r\n      }\r\n      query += selectText;\r\n    }\r\n\r\n    query += ' FROM ' + this.getMeasurementAndPolicy(interpolate) + ' WHERE ';\r\n    const conditions = _.map(target.tags, (tag, index) => {\r\n      return this.renderTagCondition(tag, index, interpolate);\r\n    });\r\n\r\n    if (conditions.length > 0) {\r\n      query += '(' + conditions.join(' ') + ') AND ';\r\n    }\r\n\r\n    query += '$timeFilter';\r\n\r\n    let groupBySection = '';\r\n    for (i = 0; i < this.groupByParts.length; i++) {\r\n      const part = this.groupByParts[i];\r\n      if (i > 0) {\r\n        // for some reason fill has no separator\r\n        groupBySection += part.def.type === 'fill' ? ' ' : ', ';\r\n      }\r\n      groupBySection += part.render('');\r\n    }\r\n\r\n    if (groupBySection.length) {\r\n      query += ' GROUP BY ' + groupBySection;\r\n    }\r\n\r\n    if (target.fill) {\r\n      query += ' fill(' + target.fill + ')';\r\n    }\r\n\r\n    if (target.orderByTime === 'DESC') {\r\n      query += ' ORDER BY time DESC';\r\n    }\r\n\r\n    if (target.limit) {\r\n      query += ' LIMIT ' + target.limit;\r\n    }\r\n\r\n    if (target.slimit) {\r\n      query += ' SLIMIT ' + target.slimit;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  renderAdhocFilters(filters) {\r\n    const conditions = _.map(filters, (tag, index) => {\r\n      return this.renderTagCondition(tag, index, false);\r\n    });\r\n    return conditions.join(' ');\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nfunction renderTagCondition(tag, index) {\r\n  let str = '';\r\n  let operator = tag.operator;\r\n  let value = tag.value;\r\n  if (index > 0) {\r\n    str = (tag.condition || 'AND') + ' ';\r\n  }\r\n\r\n  if (!operator) {\r\n    if (/^\\/.*\\/$/.test(tag.value)) {\r\n      operator = '=~';\r\n    } else {\r\n      operator = '=';\r\n    }\r\n  }\r\n\r\n  // quote value unless regex or number\r\n  if (operator !== '=~' && operator !== '!~' && isNaN(+value)) {\r\n    value = \"'\" + value + \"'\";\r\n  }\r\n\r\n  return str + '\"' + tag.key + '\" ' + operator + ' ' + value;\r\n}\r\n\r\nexport class InfluxQueryBuilder {\r\n  constructor(private target, private database?) {}\r\n\r\n  buildExploreQuery(type: string, withKey?: string, withMeasurementFilter?: string) {\r\n    let query;\r\n    let measurement;\r\n    let policy;\r\n\r\n    if (type === 'TAG_KEYS') {\r\n      query = 'SHOW TAG KEYS';\r\n      measurement = this.target.measurement;\r\n      policy = this.target.policy;\r\n    } else if (type === 'TAG_VALUES') {\r\n      query = 'SHOW TAG VALUES';\r\n      measurement = this.target.measurement;\r\n      policy = this.target.policy;\r\n    } else if (type === 'MEASUREMENTS') {\r\n      query = 'SHOW MEASUREMENTS';\r\n      if (withMeasurementFilter) {\r\n        query += ' WITH MEASUREMENT =~ /' + withMeasurementFilter + '/';\r\n      }\r\n    } else if (type === 'FIELDS') {\r\n      measurement = this.target.measurement;\r\n      policy = this.target.policy;\r\n\r\n      if (!measurement.match('^/.*/')) {\r\n        measurement = '\"' + measurement + '\"';\r\n\r\n        if (policy && policy !== 'default') {\r\n          policy = '\"' + policy + '\"';\r\n          measurement = policy + '.' + measurement;\r\n        }\r\n      }\r\n\r\n      return 'SHOW FIELD KEYS FROM ' + measurement;\r\n    } else if (type === 'RETENTION POLICIES') {\r\n      query = 'SHOW RETENTION POLICIES on \"' + this.database + '\"';\r\n      return query;\r\n    }\r\n\r\n    if (measurement) {\r\n      if (!measurement.match('^/.*/') && !measurement.match(/^merge\\(.*\\)/)) {\r\n        measurement = '\"' + measurement + '\"';\r\n      }\r\n\r\n      if (policy && policy !== 'default') {\r\n        policy = '\"' + policy + '\"';\r\n        measurement = policy + '.' + measurement;\r\n      }\r\n\r\n      query += ' FROM ' + measurement;\r\n    }\r\n\r\n    if (withKey) {\r\n      query += ' WITH KEY = \"' + withKey + '\"';\r\n    }\r\n\r\n    if (this.target.tags && this.target.tags.length > 0) {\r\n      const whereConditions = _.reduce(\r\n        this.target.tags,\r\n        function(memo, tag) {\r\n          // do not add a condition for the key we want to explore for\r\n          if (tag.key === withKey) {\r\n            return memo;\r\n          }\r\n          memo.push(renderTagCondition(tag, memo.length));\r\n          return memo;\r\n        },\r\n        []\r\n      );\r\n\r\n      if (whereConditions.length > 0) {\r\n        query += ' WHERE ' + whereConditions.join(' ');\r\n      }\r\n    }\r\n    if (type === 'MEASUREMENTS') {\r\n      query += ' LIMIT 100';\r\n      //Solve issue #2524 by limiting the number of measurements returned\r\n      //LIMIT must be after WITH MEASUREMENT and WHERE clauses\r\n      //This also could be used for TAG KEYS and TAG VALUES, if desired\r\n    }\r\n    return query;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport default class ResponseParser {\r\n  parse(query, results) {\r\n    if (!results || results.results.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const influxResults = results.results[0];\r\n    if (!influxResults.series) {\r\n      return [];\r\n    }\r\n\r\n    const normalizedQuery = query.toLowerCase();\r\n    const isValueFirst =\r\n      normalizedQuery.indexOf('show field keys') >= 0 || normalizedQuery.indexOf('show retention policies') >= 0;\r\n\r\n    const res = {};\r\n    _.each(influxResults.series, serie => {\r\n      _.each(serie.values, value => {\r\n        if (_.isArray(value)) {\r\n          // In general, there are 2 possible shapes for the returned value.\r\n          // The first one is a two-element array,\r\n          // where the first element is somewhat a metadata value:\r\n          // the tag name for SHOW TAG VALUES queries,\r\n          // the time field for SELECT queries, etc.\r\n          // The second shape is an one-element array,\r\n          // that is containing an immediate value.\r\n          // For example, SHOW FIELD KEYS queries return such shape.\r\n          // Note, pre-0.11 versions return\r\n          // the second shape for SHOW TAG VALUES queries\r\n          // (while the newer versions—first).\r\n\r\n          if (isValueFirst) {\r\n            addUnique(res, value[0]);\r\n          } else if (value[1] !== undefined) {\r\n            addUnique(res, value[1]);\r\n          } else {\r\n            addUnique(res, value[0]);\r\n          }\r\n        } else {\r\n          addUnique(res, value);\r\n        }\r\n      });\r\n    });\r\n\r\n    return _.map(res, value => {\r\n      return { text: value.toString() };\r\n    });\r\n  }\r\n}\r\n\r\nfunction addUnique(arr, value) {\r\n  arr[value] = value;\r\n}\r\n","import _ from 'lodash';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport InfluxSeries from './influx_series';\r\nimport InfluxQuery from './influx_query';\r\nimport ResponseParser from './response_parser';\r\nimport { InfluxQueryBuilder } from './query_builder';\r\n\r\nexport default class InfluxDatasource {\r\n  type: string;\r\n  urls: any;\r\n  username: string;\r\n  password: string;\r\n  name: string;\r\n  database: any;\r\n  basicAuth: any;\r\n  withCredentials: any;\r\n  interval: any;\r\n  supportAnnotations: boolean;\r\n  supportMetrics: boolean;\r\n  responseParser: any;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private $q, private backendSrv, private templateSrv) {\r\n    this.type = 'influxdb';\r\n    this.urls = _.map(instanceSettings.url.split(','), function(url) {\r\n      return url.trim();\r\n    });\r\n\r\n    this.username = instanceSettings.username;\r\n    this.password = instanceSettings.password;\r\n    this.name = instanceSettings.name;\r\n    this.database = instanceSettings.database;\r\n    this.basicAuth = instanceSettings.basicAuth;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.interval = (instanceSettings.jsonData || {}).timeInterval;\r\n    this.supportAnnotations = true;\r\n    this.supportMetrics = true;\r\n    this.responseParser = new ResponseParser();\r\n  }\r\n\r\n  query(options) {\r\n    let timeFilter = this.getTimeFilter(options);\r\n    const scopedVars = options.scopedVars;\r\n    const targets = _.cloneDeep(options.targets);\r\n    const queryTargets = [];\r\n    let queryModel;\r\n    let i, y;\r\n\r\n    let allQueries = _.map(targets, target => {\r\n      if (target.hide) {\r\n        return '';\r\n      }\r\n\r\n      queryTargets.push(target);\r\n\r\n      // backward compatibility\r\n      scopedVars.interval = scopedVars.__interval;\r\n\r\n      queryModel = new InfluxQuery(target, this.templateSrv, scopedVars);\r\n      return queryModel.render(true);\r\n    }).reduce((acc, current) => {\r\n      if (current !== '') {\r\n        acc += ';' + current;\r\n      }\r\n      return acc;\r\n    });\r\n\r\n    if (allQueries === '') {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    // add global adhoc filters to timeFilter\r\n    const adhocFilters = this.templateSrv.getAdhocFilters(this.name);\r\n    if (adhocFilters.length > 0) {\r\n      timeFilter += ' AND ' + queryModel.renderAdhocFilters(adhocFilters);\r\n    }\r\n\r\n    // replace grafana variables\r\n    scopedVars.timeFilter = { value: timeFilter };\r\n\r\n    // replace templated variables\r\n    allQueries = this.templateSrv.replace(allQueries, scopedVars);\r\n\r\n    return this._seriesQuery(allQueries, options).then((data): any => {\r\n      if (!data || !data.results) {\r\n        return [];\r\n      }\r\n\r\n      const seriesList = [];\r\n      for (i = 0; i < data.results.length; i++) {\r\n        const result = data.results[i];\r\n        if (!result || !result.series) {\r\n          continue;\r\n        }\r\n\r\n        const target = queryTargets[i];\r\n        let alias = target.alias;\r\n        if (alias) {\r\n          alias = this.templateSrv.replace(target.alias, options.scopedVars);\r\n        }\r\n\r\n        const influxSeries = new InfluxSeries({\r\n          series: data.results[i].series,\r\n          alias: alias,\r\n        });\r\n\r\n        switch (target.resultFormat) {\r\n          case 'table': {\r\n            seriesList.push(influxSeries.getTable());\r\n            break;\r\n          }\r\n          default: {\r\n            const timeSeries = influxSeries.getTimeSeries();\r\n            for (y = 0; y < timeSeries.length; y++) {\r\n              seriesList.push(timeSeries[y]);\r\n            }\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      return { data: seriesList };\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    if (!options.annotation.query) {\r\n      return this.$q.reject({\r\n        message: 'Query missing in annotation definition',\r\n      });\r\n    }\r\n\r\n    const timeFilter = this.getTimeFilter({ rangeRaw: options.rangeRaw });\r\n    let query = options.annotation.query.replace('$timeFilter', timeFilter);\r\n    query = this.templateSrv.replace(query, null, 'regex');\r\n\r\n    return this._seriesQuery(query, options).then(data => {\r\n      if (!data || !data.results || !data.results[0]) {\r\n        throw { message: 'No results in response from InfluxDB' };\r\n      }\r\n      return new InfluxSeries({\r\n        series: data.results[0].series,\r\n        annotation: options.annotation,\r\n      }).getAnnotations();\r\n    });\r\n  }\r\n\r\n  targetContainsTemplate(target) {\r\n    for (const group of target.groupBy) {\r\n      for (const param of group.params) {\r\n        if (this.templateSrv.variableExists(param)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const i in target.tags) {\r\n      if (this.templateSrv.variableExists(target.tags[i].value)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  metricFindQuery(query: string, options?: any) {\r\n    const interpolated = this.templateSrv.replace(query, null, 'regex');\r\n\r\n    return this._seriesQuery(interpolated, options).then(_.curry(this.responseParser.parse)(query));\r\n  }\r\n\r\n  getTagKeys(options) {\r\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\r\n    const query = queryBuilder.buildExploreQuery('TAG_KEYS');\r\n    return this.metricFindQuery(query, options);\r\n  }\r\n\r\n  getTagValues(options) {\r\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\r\n    const query = queryBuilder.buildExploreQuery('TAG_VALUES', options.key);\r\n    return this.metricFindQuery(query, options);\r\n  }\r\n\r\n  _seriesQuery(query: string, options?: any) {\r\n    if (!query) {\r\n      return this.$q.when({ results: [] });\r\n    }\r\n\r\n    if (options && options.range) {\r\n      const timeFilter = this.getTimeFilter({ rangeRaw: options.range });\r\n      query = query.replace('$timeFilter', timeFilter);\r\n    }\r\n\r\n    return this._influxRequest('GET', '/query', { q: query, epoch: 'ms' }, options);\r\n  }\r\n\r\n  serializeParams(params) {\r\n    if (!params) {\r\n      return '';\r\n    }\r\n\r\n    return _.reduce(\r\n      params,\r\n      (memo, value, key) => {\r\n        if (value === null || value === undefined) {\r\n          return memo;\r\n        }\r\n        memo.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n        return memo;\r\n      },\r\n      []\r\n    ).join('&');\r\n  }\r\n\r\n  testDatasource() {\r\n    const queryBuilder = new InfluxQueryBuilder({ measurement: '', tags: [] }, this.database);\r\n    const query = queryBuilder.buildExploreQuery('RETENTION POLICIES');\r\n\r\n    return this._seriesQuery(query)\r\n      .then(res => {\r\n        const error = _.get(res, 'results[0].error');\r\n        if (error) {\r\n          return { status: 'error', message: error };\r\n        }\r\n        return { status: 'success', message: 'Data source is working' };\r\n      })\r\n      .catch(err => {\r\n        return { status: 'error', message: err.message };\r\n      });\r\n  }\r\n\r\n  _influxRequest(method: string, url: string, data: any, options?: any) {\r\n    const currentUrl = this.urls.shift();\r\n    this.urls.push(currentUrl);\r\n\r\n    const params: any = {};\r\n\r\n    if (this.username) {\r\n      params.u = this.username;\r\n      params.p = this.password;\r\n    }\r\n\r\n    if (options && options.database) {\r\n      params.db = options.database;\r\n    } else if (this.database) {\r\n      params.db = this.database;\r\n    }\r\n\r\n    if (method === 'GET') {\r\n      _.extend(params, data);\r\n      data = null;\r\n    }\r\n\r\n    const req: any = {\r\n      method: method,\r\n      url: currentUrl + url,\r\n      params: params,\r\n      data: data,\r\n      precision: 'ms',\r\n      inspect: { type: 'influxdb' },\r\n      paramSerializer: this.serializeParams,\r\n    };\r\n\r\n    req.headers = req.headers || {};\r\n    if (this.basicAuth || this.withCredentials) {\r\n      req.withCredentials = true;\r\n    }\r\n    if (this.basicAuth) {\r\n      req.headers.Authorization = this.basicAuth;\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest(req).then(\r\n      result => {\r\n        return result.data;\r\n      },\r\n      function(err) {\r\n        if (err.status !== 0 || err.status >= 300) {\r\n          if (err.data && err.data.error) {\r\n            throw {\r\n              message: 'InfluxDB Error: ' + err.data.error,\r\n              data: err.data,\r\n              config: err.config,\r\n            };\r\n          } else {\r\n            throw {\r\n              message: 'Network Error: ' + err.statusText + '(' + err.status + ')',\r\n              data: err.data,\r\n              config: err.config,\r\n            };\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  getTimeFilter(options) {\r\n    const from = this.getInfluxTime(options.rangeRaw.from, false);\r\n    const until = this.getInfluxTime(options.rangeRaw.to, true);\r\n    const fromIsAbsolute = from[from.length - 1] === 'ms';\r\n\r\n    if (until === 'now()' && !fromIsAbsolute) {\r\n      return 'time >= ' + from;\r\n    }\r\n\r\n    return 'time >= ' + from + ' and time <= ' + until;\r\n  }\r\n\r\n  getInfluxTime(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      if (date === 'now') {\r\n        return 'now()';\r\n      }\r\n\r\n      const parts = /^now-(\\d+)([d|h|m|s])$/.exec(date);\r\n      if (parts) {\r\n        const amount = parseInt(parts[1]);\r\n        const unit = parts[2];\r\n        return 'now() - ' + amount + unit;\r\n      }\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n\r\n    return date.valueOf() + 'ms';\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { InfluxQueryBuilder } from './query_builder';\r\nimport InfluxQuery from './influx_query';\r\nimport queryPart from './query_part';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport class InfluxQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  queryModel: InfluxQuery;\r\n  queryBuilder: any;\r\n  groupBySegment: any;\r\n  resultFormats: any[];\r\n  orderByTime: any[];\r\n  policySegment: any;\r\n  tagSegments: any[];\r\n  selectMenu: any;\r\n  measurementSegment: any;\r\n  removeTagFilterSegment: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private templateSrv, private $q, private uiSegmentSrv) {\r\n    super($scope, $injector);\r\n    this.target = this.target;\r\n    this.queryModel = new InfluxQuery(this.target, templateSrv, this.panel.scopedVars);\r\n    this.queryBuilder = new InfluxQueryBuilder(this.target, this.datasource.database);\r\n    this.groupBySegment = this.uiSegmentSrv.newPlusButton();\r\n    this.resultFormats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\r\n    this.policySegment = uiSegmentSrv.newSegment(this.target.policy);\r\n\r\n    if (!this.target.measurement) {\r\n      this.measurementSegment = uiSegmentSrv.newSelectMeasurement();\r\n    } else {\r\n      this.measurementSegment = uiSegmentSrv.newSegment(this.target.measurement);\r\n    }\r\n\r\n    this.tagSegments = [];\r\n    for (const tag of this.target.tags) {\r\n      if (!tag.operator) {\r\n        if (/^\\/.*\\/$/.test(tag.value)) {\r\n          tag.operator = '=~';\r\n        } else {\r\n          tag.operator = '=';\r\n        }\r\n      }\r\n\r\n      if (tag.condition) {\r\n        this.tagSegments.push(uiSegmentSrv.newCondition(tag.condition));\r\n      }\r\n\r\n      this.tagSegments.push(uiSegmentSrv.newKey(tag.key));\r\n      this.tagSegments.push(uiSegmentSrv.newOperator(tag.operator));\r\n      this.tagSegments.push(uiSegmentSrv.newKeyValue(tag.value));\r\n    }\r\n\r\n    this.fixTagSegments();\r\n    this.buildSelectMenu();\r\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\r\n      fake: true,\r\n      value: '-- remove tag filter --',\r\n    });\r\n  }\r\n\r\n  removeOrderByTime() {\r\n    this.target.orderByTime = 'ASC';\r\n  }\r\n\r\n  buildSelectMenu() {\r\n    const categories = queryPart.getCategories();\r\n    this.selectMenu = _.reduce(\r\n      categories,\r\n      function(memo, cat, key) {\r\n        const menu = {\r\n          text: key,\r\n          submenu: cat.map(item => {\r\n            return { text: item.type, value: item.type };\r\n          }),\r\n        };\r\n        memo.push(menu);\r\n        return memo;\r\n      },\r\n      []\r\n    );\r\n  }\r\n\r\n  getGroupByOptions() {\r\n    const query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\r\n\r\n    return this.datasource\r\n      .metricFindQuery(query)\r\n      .then(tags => {\r\n        const options = [];\r\n        if (!this.queryModel.hasFill()) {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'fill(null)' }));\r\n        }\r\n        if (!this.target.limit) {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'LIMIT' }));\r\n        }\r\n        if (!this.target.slimit) {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'SLIMIT' }));\r\n        }\r\n        if (this.target.orderByTime === 'ASC') {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'ORDER BY time DESC' }));\r\n        }\r\n        if (!this.queryModel.hasGroupByTime()) {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'time($interval)' }));\r\n        }\r\n        for (const tag of tags) {\r\n          options.push(this.uiSegmentSrv.newSegment({ value: 'tag(' + tag.text + ')' }));\r\n        }\r\n        return options;\r\n      })\r\n      .catch(this.handleQueryError.bind(this));\r\n  }\r\n\r\n  groupByAction() {\r\n    switch (this.groupBySegment.value) {\r\n      case 'LIMIT': {\r\n        this.target.limit = 10;\r\n        break;\r\n      }\r\n      case 'SLIMIT': {\r\n        this.target.slimit = 10;\r\n        break;\r\n      }\r\n      case 'ORDER BY time DESC': {\r\n        this.target.orderByTime = 'DESC';\r\n        break;\r\n      }\r\n      default: {\r\n        this.queryModel.addGroupBy(this.groupBySegment.value);\r\n      }\r\n    }\r\n\r\n    const plusButton = this.uiSegmentSrv.newPlusButton();\r\n    this.groupBySegment.value = plusButton.value;\r\n    this.groupBySegment.html = plusButton.html;\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  addSelectPart(selectParts, cat, subitem) {\r\n    this.queryModel.addSelectPart(selectParts, subitem.value);\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  handleSelectPartEvent(selectParts, part, evt) {\r\n    switch (evt.name) {\r\n      case 'get-param-options': {\r\n        const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\r\n        return this.datasource\r\n          .metricFindQuery(fieldsQuery)\r\n          .then(this.transformToSegments(true))\r\n          .catch(this.handleQueryError.bind(this));\r\n      }\r\n      case 'part-param-changed': {\r\n        this.panelCtrl.refresh();\r\n        break;\r\n      }\r\n      case 'action': {\r\n        this.queryModel.removeSelectPart(selectParts, part);\r\n        this.panelCtrl.refresh();\r\n        break;\r\n      }\r\n      case 'get-part-actions': {\r\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\r\n      }\r\n    }\r\n  }\r\n\r\n  handleGroupByPartEvent(part, index, evt) {\r\n    switch (evt.name) {\r\n      case 'get-param-options': {\r\n        const tagsQuery = this.queryBuilder.buildExploreQuery('TAG_KEYS');\r\n        return this.datasource\r\n          .metricFindQuery(tagsQuery)\r\n          .then(this.transformToSegments(true))\r\n          .catch(this.handleQueryError.bind(this));\r\n      }\r\n      case 'part-param-changed': {\r\n        this.panelCtrl.refresh();\r\n        break;\r\n      }\r\n      case 'action': {\r\n        this.queryModel.removeGroupByPart(part, index);\r\n        this.panelCtrl.refresh();\r\n        break;\r\n      }\r\n      case 'get-part-actions': {\r\n        return this.$q.when([{ text: 'Remove', value: 'remove-part' }]);\r\n      }\r\n    }\r\n  }\r\n\r\n  fixTagSegments() {\r\n    const count = this.tagSegments.length;\r\n    const lastSegment = this.tagSegments[Math.max(count - 1, 0)];\r\n\r\n    if (!lastSegment || lastSegment.type !== 'plus-button') {\r\n      this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\r\n    }\r\n  }\r\n\r\n  measurementChanged() {\r\n    this.target.measurement = this.measurementSegment.value;\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  getPolicySegments() {\r\n    const policiesQuery = this.queryBuilder.buildExploreQuery('RETENTION POLICIES');\r\n    return this.datasource\r\n      .metricFindQuery(policiesQuery)\r\n      .then(this.transformToSegments(false))\r\n      .catch(this.handleQueryError.bind(this));\r\n  }\r\n\r\n  policyChanged() {\r\n    this.target.policy = this.policySegment.value;\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  toggleEditorMode() {\r\n    try {\r\n      this.target.query = this.queryModel.render(false);\r\n    } catch (err) {\r\n      console.log('query render error');\r\n    }\r\n    this.target.rawQuery = !this.target.rawQuery;\r\n  }\r\n\r\n  getMeasurements(measurementFilter) {\r\n    const query = this.queryBuilder.buildExploreQuery('MEASUREMENTS', undefined, measurementFilter);\r\n    return this.datasource\r\n      .metricFindQuery(query)\r\n      .then(this.transformToSegments(true))\r\n      .catch(this.handleQueryError.bind(this));\r\n  }\r\n\r\n  handleQueryError(err) {\r\n    this.error = err.message || 'Failed to issue metric query';\r\n    return [];\r\n  }\r\n\r\n  transformToSegments(addTemplateVars) {\r\n    return results => {\r\n      const segments = _.map(results, segment => {\r\n        return this.uiSegmentSrv.newSegment({\r\n          value: segment.text,\r\n          expandable: segment.expandable,\r\n        });\r\n      });\r\n\r\n      if (addTemplateVars) {\r\n        for (const variable of this.templateSrv.variables) {\r\n          segments.unshift(\r\n            this.uiSegmentSrv.newSegment({\r\n              type: 'value',\r\n              value: '/^$' + variable.name + '$/',\r\n              expandable: true,\r\n            })\r\n          );\r\n        }\r\n      }\r\n\r\n      return segments;\r\n    };\r\n  }\r\n\r\n  getTagsOrValues(segment, index) {\r\n    if (segment.type === 'condition') {\r\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND'), this.uiSegmentSrv.newSegment('OR')]);\r\n    }\r\n    if (segment.type === 'operator') {\r\n      const nextValue = this.tagSegments[index + 1].value;\r\n      if (/^\\/.*\\/$/.test(nextValue)) {\r\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=~', '!~']));\r\n      } else {\r\n        return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<>', '<', '>']));\r\n      }\r\n    }\r\n\r\n    let query, addTemplateVars;\r\n    if (segment.type === 'key' || segment.type === 'plus-button') {\r\n      query = this.queryBuilder.buildExploreQuery('TAG_KEYS');\r\n      addTemplateVars = false;\r\n    } else if (segment.type === 'value') {\r\n      query = this.queryBuilder.buildExploreQuery('TAG_VALUES', this.tagSegments[index - 2].value);\r\n      addTemplateVars = true;\r\n    }\r\n\r\n    return this.datasource\r\n      .metricFindQuery(query)\r\n      .then(this.transformToSegments(addTemplateVars))\r\n      .then(results => {\r\n        if (segment.type === 'key') {\r\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\r\n        }\r\n        return results;\r\n      })\r\n      .catch(this.handleQueryError.bind(this));\r\n  }\r\n\r\n  getFieldSegments() {\r\n    const fieldsQuery = this.queryBuilder.buildExploreQuery('FIELDS');\r\n    return this.datasource\r\n      .metricFindQuery(fieldsQuery)\r\n      .then(this.transformToSegments(false))\r\n      .catch(this.handleQueryError);\r\n  }\r\n\r\n  tagSegmentUpdated(segment, index) {\r\n    this.tagSegments[index] = segment;\r\n\r\n    // handle remove tag condition\r\n    if (segment.value === this.removeTagFilterSegment.value) {\r\n      this.tagSegments.splice(index, 3);\r\n      if (this.tagSegments.length === 0) {\r\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\r\n      } else if (this.tagSegments.length > 2) {\r\n        this.tagSegments.splice(Math.max(index - 1, 0), 1);\r\n        if (this.tagSegments[this.tagSegments.length - 1].type !== 'plus-button') {\r\n          this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\r\n        }\r\n      }\r\n    } else {\r\n      if (segment.type === 'plus-button') {\r\n        if (index > 2) {\r\n          this.tagSegments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\r\n        }\r\n        this.tagSegments.push(this.uiSegmentSrv.newOperator('='));\r\n        this.tagSegments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\r\n        segment.type = 'key';\r\n        segment.cssClass = 'query-segment-key';\r\n      }\r\n\r\n      if (index + 1 === this.tagSegments.length) {\r\n        this.tagSegments.push(this.uiSegmentSrv.newPlusButton());\r\n      }\r\n    }\r\n\r\n    this.rebuildTargetTagConditions();\r\n  }\r\n\r\n  rebuildTargetTagConditions() {\r\n    const tags = [];\r\n    let tagIndex = 0;\r\n    let tagOperator = '';\r\n\r\n    _.each(this.tagSegments, (segment2, index) => {\r\n      if (segment2.type === 'key') {\r\n        if (tags.length === 0) {\r\n          tags.push({});\r\n        }\r\n        tags[tagIndex].key = segment2.value;\r\n      } else if (segment2.type === 'value') {\r\n        tagOperator = this.getTagValueOperator(segment2.value, tags[tagIndex].operator);\r\n        if (tagOperator) {\r\n          this.tagSegments[index - 1] = this.uiSegmentSrv.newOperator(tagOperator);\r\n          tags[tagIndex].operator = tagOperator;\r\n        }\r\n        tags[tagIndex].value = segment2.value;\r\n      } else if (segment2.type === 'condition') {\r\n        tags.push({ condition: segment2.value });\r\n        tagIndex += 1;\r\n      } else if (segment2.type === 'operator') {\r\n        tags[tagIndex].operator = segment2.value;\r\n      }\r\n    });\r\n\r\n    this.target.tags = tags;\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  getTagValueOperator(tagValue, tagOperator): string {\r\n    if (tagOperator !== '=~' && tagOperator !== '!~' && /^\\/.*\\/$/.test(tagValue)) {\r\n      return '=~';\r\n    } else if ((tagOperator === '=~' || tagOperator === '!~') && /^(?!\\/.*\\/$)/.test(tagValue)) {\r\n      return '=';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  getCollapsedText() {\r\n    return this.queryModel.render(false);\r\n  }\r\n}\r\n","import InfluxDatasource from './datasource';\r\nimport { InfluxQueryCtrl } from './query_ctrl';\r\n\r\nclass InfluxConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n}\r\n\r\nclass InfluxAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  InfluxDatasource as Datasource,\r\n  InfluxQueryCtrl as QueryCtrl,\r\n  InfluxConfigCtrl as ConfigCtrl,\r\n  InfluxAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","export enum LogLevel {\r\n  crit = 'crit',\r\n  warn = 'warn',\r\n  err = 'error',\r\n  error = 'error',\r\n  info = 'info',\r\n  debug = 'debug',\r\n  trace = 'trace',\r\n}\r\n\r\nexport interface LogSearchMatch {\r\n  start: number;\r\n  length: number;\r\n  text?: string;\r\n}\r\n\r\nexport interface LogRow {\r\n  key: string;\r\n  entry: string;\r\n  logLevel: LogLevel;\r\n  timestamp: string;\r\n  timeFromNow: string;\r\n  timeLocal: string;\r\n  searchMatches?: LogSearchMatch[];\r\n}\r\n\r\nexport interface LogsModel {\r\n  rows: LogRow[];\r\n}\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\n\r\nimport { LogLevel, LogsModel, LogRow } from 'app/core/logs_model';\r\n\r\nexport function getLogLevel(line: string): LogLevel {\r\n  if (!line) {\r\n    return undefined;\r\n  }\r\n  let level: LogLevel;\r\n  Object.keys(LogLevel).forEach(key => {\r\n    if (!level) {\r\n      const regexp = new RegExp(`\\\\b${key}\\\\b`, 'i');\r\n      if (regexp.test(line)) {\r\n        level = LogLevel[key];\r\n      }\r\n    }\r\n  });\r\n  return level;\r\n}\r\n\r\nexport function getSearchMatches(line: string, search: string) {\r\n  // Empty search can send re.exec() into infinite loop, exit early\r\n  if (!line || !search) {\r\n    return [];\r\n  }\r\n  const regexp = new RegExp(`(?:${search})`, 'g');\r\n  const matches = [];\r\n  let match;\r\n  while ((match = regexp.exec(line))) {\r\n    matches.push({\r\n      text: match[0],\r\n      start: match.index,\r\n      length: match[0].length,\r\n    });\r\n  }\r\n  return matches;\r\n}\r\n\r\nexport function processEntry(entry: { line: string; timestamp: string }, stream): LogRow {\r\n  const { line, timestamp } = entry;\r\n  const { labels } = stream;\r\n  const key = `EK${timestamp}${labels}`;\r\n  const time = moment(timestamp);\r\n  const timeFromNow = time.fromNow();\r\n  const timeLocal = time.format('YYYY-MM-DD HH:mm:ss');\r\n  const searchMatches = getSearchMatches(line, stream.search);\r\n  const logLevel = getLogLevel(line);\r\n\r\n  return {\r\n    key,\r\n    logLevel,\r\n    searchMatches,\r\n    timeFromNow,\r\n    timeLocal,\r\n    entry: line,\r\n    timestamp: timestamp,\r\n  };\r\n}\r\n\r\nexport function processStreams(streams, limit?: number): LogsModel {\r\n  const combinedEntries = streams.reduce((acc, stream) => {\r\n    return [...acc, ...stream.entries.map(entry => processEntry(entry, stream))];\r\n  }, []);\r\n  const sortedEntries = _.chain(combinedEntries)\r\n    .sortBy('timestamp')\r\n    .reverse()\r\n    .slice(0, limit || combinedEntries.length)\r\n    .value();\r\n  return { rows: sortedEntries };\r\n}\r\n","import _ from 'lodash';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\n\r\nimport { processStreams } from './result_transformer';\r\n\r\nconst DEFAULT_LIMIT = 100;\r\n\r\nconst DEFAULT_QUERY_PARAMS = {\r\n  direction: 'BACKWARD',\r\n  limit: DEFAULT_LIMIT,\r\n  regexp: '',\r\n  query: '',\r\n};\r\n\r\nconst QUERY_REGEXP = /({\\w+=\"[^\"]+\"})?\\s*(\\w[^{]+)?\\s*({\\w+=\"[^\"]+\"})?/;\r\nexport function parseQuery(input: string) {\r\n  const match = input.match(QUERY_REGEXP);\r\n  let query = '';\r\n  let regexp = '';\r\n\r\n  if (match) {\r\n    if (match[1]) {\r\n      query = match[1];\r\n    }\r\n    if (match[2]) {\r\n      regexp = match[2].trim();\r\n    }\r\n    if (match[3]) {\r\n      if (match[1]) {\r\n        query = `${match[1].slice(0, -1)},${match[3].slice(1)}`;\r\n      } else {\r\n        query = match[3];\r\n      }\r\n    }\r\n  }\r\n\r\n  return { query, regexp };\r\n}\r\n\r\nfunction serializeParams(data: any) {\r\n  return Object.keys(data)\r\n    .map(k => {\r\n      const v = data[k];\r\n      return encodeURIComponent(k) + '=' + encodeURIComponent(v);\r\n    })\r\n    .join('&');\r\n}\r\n\r\nexport default class LoggingDatasource {\r\n  /** @ngInject */\r\n  constructor(private instanceSettings, private backendSrv, private templateSrv) {}\r\n\r\n  _request(apiUrl: string, data?, options?: any) {\r\n    const baseUrl = this.instanceSettings.url;\r\n    const params = data ? serializeParams(data) : '';\r\n    const url = `${baseUrl}${apiUrl}?${params}`;\r\n    const req = {\r\n      ...options,\r\n      url,\r\n    };\r\n    return this.backendSrv.datasourceRequest(req);\r\n  }\r\n\r\n  prepareQueryTarget(target, options) {\r\n    const interpolated = this.templateSrv.replace(target.expr);\r\n    const start = this.getTime(options.range.from, false);\r\n    const end = this.getTime(options.range.to, true);\r\n    return {\r\n      ...DEFAULT_QUERY_PARAMS,\r\n      ...parseQuery(interpolated),\r\n      start,\r\n      end,\r\n    };\r\n  }\r\n\r\n  query(options) {\r\n    const queryTargets = options.targets\r\n      .filter(target => target.expr)\r\n      .map(target => this.prepareQueryTarget(target, options));\r\n    if (queryTargets.length === 0) {\r\n      return Promise.resolve({ data: [] });\r\n    }\r\n\r\n    const queries = queryTargets.map(target => this._request('/api/prom/query', target));\r\n\r\n    return Promise.all(queries).then((results: any[]) => {\r\n      // Flatten streams from multiple queries\r\n      const allStreams = results.reduce((acc, response, i) => {\r\n        const streams = response.data.streams || [];\r\n        // Inject search for match highlighting\r\n        const search = queryTargets[i].regexp;\r\n        streams.forEach(s => {\r\n          s.search = search;\r\n        });\r\n        return [...acc, ...streams];\r\n      }, []);\r\n      const model = processStreams(allStreams, DEFAULT_LIMIT);\r\n      return { data: model };\r\n    });\r\n  }\r\n\r\n  metadataRequest(url) {\r\n    // HACK to get label values for {job=|}, will be replaced when implementing LoggingQueryField\r\n    const apiUrl = url.replace('v1', 'prom');\r\n    return this._request(apiUrl, { silent: true }).then(res => {\r\n      const data = { data: { data: res.data.values || [] } };\r\n      return data;\r\n    });\r\n  }\r\n\r\n  getTime(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n    return Math.ceil(date.valueOf() * 1e6);\r\n  }\r\n\r\n  testDatasource() {\r\n    return this._request('/api/prom/label')\r\n      .then(res => {\r\n        if (res && res.data && res.data.values && res.data.values.length > 0) {\r\n          return { status: 'success', message: 'Data source connected and labels found.' };\r\n        }\r\n        return {\r\n          status: 'error',\r\n          message: 'Data source connected, but no labels received. Verify that logging is configured properly.',\r\n        };\r\n      })\r\n      .catch(err => {\r\n        return { status: 'error', message: err.message };\r\n      });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport default class ResponseParser {\r\n  constructor(private $q) {}\r\n\r\n  processQueryResult(res) {\r\n    const data = [];\r\n\r\n    if (!res.data.results) {\r\n      return { data: data };\r\n    }\r\n\r\n    for (const key in res.data.results) {\r\n      const queryRes = res.data.results[key];\r\n\r\n      if (queryRes.series) {\r\n        for (const series of queryRes.series) {\r\n          data.push({\r\n            target: series.name,\r\n            datapoints: series.points,\r\n            refId: queryRes.refId,\r\n            meta: queryRes.meta,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (queryRes.tables) {\r\n        for (const table of queryRes.tables) {\r\n          table.type = 'table';\r\n          table.refId = queryRes.refId;\r\n          table.meta = queryRes.meta;\r\n          data.push(table);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { data: data };\r\n  }\r\n\r\n  parseMetricFindQueryResult(refId, results) {\r\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\r\n      return [];\r\n    }\r\n\r\n    const columns = results.data.results[refId].tables[0].columns;\r\n    const rows = results.data.results[refId].tables[0].rows;\r\n    const textColIndex = this.findColIndex(columns, '__text');\r\n    const valueColIndex = this.findColIndex(columns, '__value');\r\n\r\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\r\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\r\n    }\r\n\r\n    return this.transformToSimpleList(rows);\r\n  }\r\n\r\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      if (!this.containsKey(res, rows[i][textColIndex])) {\r\n        res.push({\r\n          text: rows[i][textColIndex],\r\n          value: rows[i][valueColIndex],\r\n        });\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  transformToSimpleList(rows) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      for (let j = 0; j < rows[i].length; j++) {\r\n        const value = rows[i][j];\r\n        if (res.indexOf(value) === -1) {\r\n          res.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(res, value => {\r\n      return { text: value };\r\n    });\r\n  }\r\n\r\n  findColIndex(columns, colName) {\r\n    for (let i = 0; i < columns.length; i++) {\r\n      if (columns[i].text === colName) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  containsKey(res, key) {\r\n    for (let i = 0; i < res.length; i++) {\r\n      if (res[i].text === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  transformAnnotationResponse(options, data) {\r\n    const table = data.data.results[options.annotation.name].tables[0];\r\n\r\n    let timeColumnIndex = -1;\r\n    let textColumnIndex = -1;\r\n    let tagsColumnIndex = -1;\r\n\r\n    for (let i = 0; i < table.columns.length; i++) {\r\n      if (table.columns[i].text === 'time_sec' || table.columns[i].text === 'time') {\r\n        timeColumnIndex = i;\r\n      } else if (table.columns[i].text === 'title') {\r\n        return this.$q.reject({\r\n          message: 'The title column for annotations is deprecated, now only a column named text is returned',\r\n        });\r\n      } else if (table.columns[i].text === 'text') {\r\n        textColumnIndex = i;\r\n      } else if (table.columns[i].text === 'tags') {\r\n        tagsColumnIndex = i;\r\n      }\r\n    }\r\n\r\n    if (timeColumnIndex === -1) {\r\n      return this.$q.reject({\r\n        message: 'Missing mandatory time column (with time_sec column alias) in annotation query.',\r\n      });\r\n    }\r\n\r\n    const list = [];\r\n    for (let i = 0; i < table.rows.length; i++) {\r\n      const row = table.rows[i];\r\n      list.push({\r\n        annotation: options.annotation,\r\n        time: Math.floor(row[timeColumnIndex]),\r\n        text: row[textColumnIndex] ? row[textColumnIndex].toString() : '',\r\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\r\n      });\r\n    }\r\n\r\n    return list;\r\n  }\r\n}\r\n","import Datasource from './datasource';\r\n\r\nexport class LoggingConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n}\r\n\r\nexport { Datasource, LoggingConfigCtrl as ConfigCtrl };\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nclass MixedDatasource {\r\n  /** @ngInject */\r\n  constructor(private $q, private datasourceSrv) {}\r\n\r\n  query(options) {\r\n    const sets = _.groupBy(options.targets, 'datasource');\r\n    const promises = _.map(sets, targets => {\r\n      const dsName = targets[0].datasource;\r\n      if (dsName === '-- Mixed --') {\r\n        return this.$q([]);\r\n      }\r\n\r\n      return this.datasourceSrv.get(dsName).then(function(ds) {\r\n        const opt = angular.copy(options);\r\n        opt.targets = targets;\r\n        return ds.query(opt);\r\n      });\r\n    });\r\n\r\n    return this.$q.all(promises).then(function(results) {\r\n      return { data: _.flatten(_.map(results, 'data')) };\r\n    });\r\n  }\r\n}\r\n\r\nexport { MixedDatasource, MixedDatasource as Datasource };\r\n","import { MixedDatasource } from './datasource';\r\nexport { MixedDatasource, MixedDatasource as Datasource };\r\n","import _ from 'lodash';\r\nimport ResponseParser from './response_parser';\r\n\r\nexport class MysqlDatasource {\r\n  id: any;\r\n  name: any;\r\n  responseParser: ResponseParser;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\r\n    this.name = instanceSettings.name;\r\n    this.id = instanceSettings.id;\r\n    this.responseParser = new ResponseParser(this.$q);\r\n  }\r\n\r\n  interpolateVariable(value, variable) {\r\n    if (typeof value === 'string') {\r\n      if (variable.multi || variable.includeAll) {\r\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    const quotedValues = _.map(value, function(val) {\r\n      if (typeof value === 'number') {\r\n        return value;\r\n      }\r\n\r\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\r\n    });\r\n    return quotedValues.join(',');\r\n  }\r\n\r\n  query(options) {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map(item => {\r\n      return {\r\n        refId: item.refId,\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n        datasourceId: this.id,\r\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\r\n        format: item.format,\r\n      };\r\n    });\r\n\r\n    if (queries.length === 0) {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: queries,\r\n        },\r\n      })\r\n      .then(this.responseParser.processQueryResult);\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    if (!options.annotation.rawQuery) {\r\n      return this.$q.reject({\r\n        message: 'Query missing in annotation definition',\r\n      });\r\n    }\r\n\r\n    const query = {\r\n      refId: options.annotation.name,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: [query],\r\n        },\r\n      })\r\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\r\n  }\r\n\r\n  metricFindQuery(query, optionalOptions) {\r\n    let refId = 'tempvar';\r\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\r\n      refId = optionalOptions.variable.name;\r\n    }\r\n\r\n    const interpolatedQuery = {\r\n      refId: refId,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    const data = {\r\n      queries: [interpolatedQuery],\r\n    };\r\n\r\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\r\n      data['from'] = optionalOptions.range.from.valueOf().toString();\r\n    }\r\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\r\n      data['to'] = optionalOptions.range.to.valueOf().toString();\r\n    }\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: data,\r\n      })\r\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: '5m',\r\n          to: 'now',\r\n          queries: [\r\n            {\r\n              refId: 'A',\r\n              intervalMs: 1,\r\n              maxDataPoints: 1,\r\n              datasourceId: this.id,\r\n              rawSql: 'SELECT 1',\r\n              format: 'table',\r\n            },\r\n          ],\r\n        },\r\n      })\r\n      .then(res => {\r\n        return { status: 'success', message: 'Database Connection OK' };\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        if (err.data && err.data.message) {\r\n          return { status: 'error', message: err.data.message };\r\n        } else {\r\n          return { status: 'error', message: err.status };\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { MysqlDatasource } from './datasource';\r\nimport { MysqlQueryCtrl } from './query_ctrl';\r\n\r\nclass MysqlConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n    UNIX_TIMESTAMP(<time_column>) as time_sec,\r\n    <text_column> as text,\r\n    <tags_column> as tags\r\n  FROM <table name>\r\n  WHERE $__timeFilter(time_column)\r\n  ORDER BY <time_column> ASC\r\n  LIMIT 100\r\n  `;\r\n\r\nclass MysqlAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n\r\n  annotation: any;\r\n\r\n  /** @ngInject */\r\n  constructor() {\r\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\r\n  }\r\n}\r\n\r\nexport {\r\n  MysqlDatasource,\r\n  MysqlDatasource as Datasource,\r\n  MysqlQueryCtrl as QueryCtrl,\r\n  MysqlConfigCtrl as ConfigCtrl,\r\n  MysqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport interface MysqlQuery {\r\n  refId: string;\r\n  format: string;\r\n  alias: string;\r\n  rawSql: string;\r\n}\r\n\r\nexport interface QueryMeta {\r\n  sql: string;\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n  UNIX_TIMESTAMP(<time_column>) as time_sec,\r\n  <value column> as value,\r\n  <series name column> as metric\r\nFROM <table name>\r\nWHERE $__timeFilter(time_column)\r\nORDER BY <time_column> ASC\r\n`;\r\n\r\nexport class MysqlQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  showLastQuerySQL: boolean;\r\n  formats: any[];\r\n  target: MysqlQuery;\r\n  lastQueryMeta: QueryMeta;\r\n  lastQueryError: string;\r\n  showHelp: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    this.target.format = this.target.format || 'time_series';\r\n    this.target.alias = '';\r\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\r\n\r\n    if (!this.target.rawSql) {\r\n      // special handling when in table panel\r\n      if (this.panelCtrl.panel.type === 'table') {\r\n        this.target.format = 'table';\r\n        this.target.rawSql = 'SELECT 1';\r\n      } else {\r\n        this.target.rawSql = defaultQuery;\r\n      }\r\n    }\r\n\r\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\r\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.lastQueryMeta = null;\r\n    this.lastQueryError = null;\r\n\r\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\r\n    if (anySeriesFromQuery) {\r\n      this.lastQueryMeta = anySeriesFromQuery.meta;\r\n    }\r\n  }\r\n\r\n  onDataError(err) {\r\n    if (err.data && err.data.results) {\r\n      const queryRes = err.data.results[this.target.refId];\r\n      if (queryRes) {\r\n        this.lastQueryMeta = queryRes.meta;\r\n        this.lastQueryError = queryRes.error;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport default class ResponseParser {\r\n  constructor(private $q) {}\r\n\r\n  processQueryResult(res) {\r\n    const data = [];\r\n\r\n    if (!res.data.results) {\r\n      return { data: data };\r\n    }\r\n\r\n    for (const key in res.data.results) {\r\n      const queryRes = res.data.results[key];\r\n\r\n      if (queryRes.series) {\r\n        for (const series of queryRes.series) {\r\n          data.push({\r\n            target: series.name,\r\n            datapoints: series.points,\r\n            refId: queryRes.refId,\r\n            meta: queryRes.meta,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (queryRes.tables) {\r\n        for (const table of queryRes.tables) {\r\n          table.type = 'table';\r\n          table.refId = queryRes.refId;\r\n          table.meta = queryRes.meta;\r\n          data.push(table);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { data: data };\r\n  }\r\n\r\n  parseMetricFindQueryResult(refId, results) {\r\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\r\n      return [];\r\n    }\r\n\r\n    const columns = results.data.results[refId].tables[0].columns;\r\n    const rows = results.data.results[refId].tables[0].rows;\r\n    const textColIndex = this.findColIndex(columns, '__text');\r\n    const valueColIndex = this.findColIndex(columns, '__value');\r\n\r\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\r\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\r\n    }\r\n\r\n    return this.transformToSimpleList(rows);\r\n  }\r\n\r\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      if (!this.containsKey(res, rows[i][textColIndex])) {\r\n        res.push({\r\n          text: rows[i][textColIndex],\r\n          value: rows[i][valueColIndex],\r\n        });\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  transformToSimpleList(rows) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      for (let j = 0; j < rows[i].length; j++) {\r\n        const value = rows[i][j];\r\n        if (res.indexOf(value) === -1) {\r\n          res.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(res, value => {\r\n      return { text: value };\r\n    });\r\n  }\r\n\r\n  findColIndex(columns, colName) {\r\n    for (let i = 0; i < columns.length; i++) {\r\n      if (columns[i].text === colName) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  containsKey(res, key) {\r\n    for (let i = 0; i < res.length; i++) {\r\n      if (res[i].text === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  transformAnnotationResponse(options, data) {\r\n    const table = data.data.results[options.annotation.name].tables[0];\r\n\r\n    let timeColumnIndex = -1;\r\n    const titleColumnIndex = -1;\r\n    let textColumnIndex = -1;\r\n    let tagsColumnIndex = -1;\r\n\r\n    for (let i = 0; i < table.columns.length; i++) {\r\n      if (table.columns[i].text === 'time') {\r\n        timeColumnIndex = i;\r\n      } else if (table.columns[i].text === 'text') {\r\n        textColumnIndex = i;\r\n      } else if (table.columns[i].text === 'tags') {\r\n        tagsColumnIndex = i;\r\n      }\r\n    }\r\n\r\n    if (timeColumnIndex === -1) {\r\n      return this.$q.reject({\r\n        message: 'Missing mandatory time column in annotation query.',\r\n      });\r\n    }\r\n\r\n    const list = [];\r\n    for (let i = 0; i < table.rows.length; i++) {\r\n      const row = table.rows[i];\r\n      list.push({\r\n        annotation: options.annotation,\r\n        time: Math.floor(row[timeColumnIndex]),\r\n        title: row[titleColumnIndex],\r\n        text: row[textColumnIndex],\r\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\r\n      });\r\n    }\r\n\r\n    return list;\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport ResponseParser from './response_parser';\r\n\r\nexport class PostgresDatasource {\r\n  id: any;\r\n  name: any;\r\n  responseParser: ResponseParser;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\r\n    this.name = instanceSettings.name;\r\n    this.id = instanceSettings.id;\r\n    this.responseParser = new ResponseParser(this.$q);\r\n  }\r\n\r\n  interpolateVariable(value, variable) {\r\n    if (typeof value === 'string') {\r\n      if (variable.multi || variable.includeAll) {\r\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    const quotedValues = _.map(value, function(val) {\r\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\r\n    });\r\n    return quotedValues.join(',');\r\n  }\r\n\r\n  query(options) {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map(item => {\r\n      return {\r\n        refId: item.refId,\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n        datasourceId: this.id,\r\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\r\n        format: item.format,\r\n      };\r\n    });\r\n\r\n    if (queries.length === 0) {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: queries,\r\n        },\r\n      })\r\n      .then(this.responseParser.processQueryResult);\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    if (!options.annotation.rawQuery) {\r\n      return this.$q.reject({\r\n        message: 'Query missing in annotation definition',\r\n      });\r\n    }\r\n\r\n    const query = {\r\n      refId: options.annotation.name,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: [query],\r\n        },\r\n      })\r\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\r\n  }\r\n\r\n  metricFindQuery(query, optionalOptions) {\r\n    let refId = 'tempvar';\r\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\r\n      refId = optionalOptions.variable.name;\r\n    }\r\n\r\n    const interpolatedQuery = {\r\n      refId: refId,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    const data = {\r\n      queries: [interpolatedQuery],\r\n    };\r\n\r\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.from) {\r\n      data['from'] = optionalOptions.range.from.valueOf().toString();\r\n    }\r\n    if (optionalOptions && optionalOptions.range && optionalOptions.range.to) {\r\n      data['to'] = optionalOptions.range.to.valueOf().toString();\r\n    }\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: data,\r\n      })\r\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.metricFindQuery('SELECT 1', {})\r\n      .then(res => {\r\n        return { status: 'success', message: 'Database Connection OK' };\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        if (err.data && err.data.message) {\r\n          return { status: 'error', message: err.data.message };\r\n        } else {\r\n          return { status: 'error', message: err.status };\r\n        }\r\n      });\r\n  }\r\n}\r\n","import { PostgresDatasource } from './datasource';\r\nimport { PostgresQueryCtrl } from './query_ctrl';\r\n\r\nclass PostgresConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.current.jsonData.sslmode = this.current.jsonData.sslmode || 'verify-full';\r\n  }\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n  extract(epoch from time_column) AS time,\r\n  text_column as text,\r\n  tags_column as tags\r\nFROM\r\n  metric_table\r\nWHERE\r\n  $__timeFilter(time_column)\r\n`;\r\n\r\nclass PostgresAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n\r\n  annotation: any;\r\n\r\n  /** @ngInject */\r\n  constructor() {\r\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\r\n  }\r\n}\r\n\r\nexport {\r\n  PostgresDatasource,\r\n  PostgresDatasource as Datasource,\r\n  PostgresQueryCtrl as QueryCtrl,\r\n  PostgresConfigCtrl as ConfigCtrl,\r\n  PostgresAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport interface PostgresQuery {\r\n  refId: string;\r\n  format: string;\r\n  alias: string;\r\n  rawSql: string;\r\n}\r\n\r\nexport interface QueryMeta {\r\n  sql: string;\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n  $__time(time_column),\r\n  value1\r\nFROM\r\n  metric_table\r\nWHERE\r\n  $__timeFilter(time_column)\r\n`;\r\n\r\nexport class PostgresQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  showLastQuerySQL: boolean;\r\n  formats: any[];\r\n  target: PostgresQuery;\r\n  lastQueryMeta: QueryMeta;\r\n  lastQueryError: string;\r\n  showHelp: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    this.target.format = this.target.format || 'time_series';\r\n    this.target.alias = '';\r\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\r\n\r\n    if (!this.target.rawSql) {\r\n      // special handling when in table panel\r\n      if (this.panelCtrl.panel.type === 'table') {\r\n        this.target.format = 'table';\r\n        this.target.rawSql = 'SELECT 1';\r\n      } else {\r\n        this.target.rawSql = defaultQuery;\r\n      }\r\n    }\r\n\r\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\r\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.lastQueryMeta = null;\r\n    this.lastQueryError = null;\r\n\r\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\r\n    if (anySeriesFromQuery) {\r\n      this.lastQueryMeta = anySeriesFromQuery.meta;\r\n    }\r\n  }\r\n\r\n  onDataError(err) {\r\n    if (err.data && err.data.results) {\r\n      const queryRes = err.data.results[this.target.refId];\r\n      if (queryRes) {\r\n        this.lastQueryMeta = queryRes.meta;\r\n        this.lastQueryError = queryRes.error;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport default class PrometheusMetricFindQuery {\r\n  datasource: any;\r\n  query: any;\r\n  range: any;\r\n\r\n  constructor(datasource, query, timeSrv) {\r\n    this.datasource = datasource;\r\n    this.query = query;\r\n    this.range = timeSrv.timeRange();\r\n  }\r\n\r\n  process() {\r\n    const labelValuesRegex = /^label_values\\((?:(.+),\\s*)?([a-zA-Z_][a-zA-Z0-9_]+)\\)\\s*$/;\r\n    const metricNamesRegex = /^metrics\\((.+)\\)\\s*$/;\r\n    const queryResultRegex = /^query_result\\((.+)\\)\\s*$/;\r\n\r\n    const labelValuesQuery = this.query.match(labelValuesRegex);\r\n    if (labelValuesQuery) {\r\n      if (labelValuesQuery[1]) {\r\n        return this.labelValuesQuery(labelValuesQuery[2], labelValuesQuery[1]);\r\n      } else {\r\n        return this.labelValuesQuery(labelValuesQuery[2], null);\r\n      }\r\n    }\r\n\r\n    const metricNamesQuery = this.query.match(metricNamesRegex);\r\n    if (metricNamesQuery) {\r\n      return this.metricNameQuery(metricNamesQuery[1]);\r\n    }\r\n\r\n    const queryResultQuery = this.query.match(queryResultRegex);\r\n    if (queryResultQuery) {\r\n      return this.queryResultQuery(queryResultQuery[1]);\r\n    }\r\n\r\n    // if query contains full metric name, return metric name and label list\r\n    return this.metricNameAndLabelsQuery(this.query);\r\n  }\r\n\r\n  labelValuesQuery(label, metric) {\r\n    let url;\r\n\r\n    if (!metric) {\r\n      // return label values globally\r\n      url = '/api/v1/label/' + label + '/values';\r\n\r\n      return this.datasource.metadataRequest(url).then(function(result) {\r\n        return _.map(result.data.data, function(value) {\r\n          return { text: value };\r\n        });\r\n      });\r\n    } else {\r\n      const start = this.datasource.getPrometheusTime(this.range.from, false);\r\n      const end = this.datasource.getPrometheusTime(this.range.to, true);\r\n      url = '/api/v1/series?match[]=' + encodeURIComponent(metric) + '&start=' + start + '&end=' + end;\r\n\r\n      return this.datasource.metadataRequest(url).then(function(result) {\r\n        const _labels = _.map(result.data.data, function(metric) {\r\n          return metric[label] || '';\r\n        }).filter(function(label) {\r\n          return label !== '';\r\n        });\r\n\r\n        return _.uniq(_labels).map(function(metric) {\r\n          return {\r\n            text: metric,\r\n            expandable: true,\r\n          };\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  metricNameQuery(metricFilterPattern) {\r\n    const url = '/api/v1/label/__name__/values';\r\n\r\n    return this.datasource.metadataRequest(url).then(function(result) {\r\n      return _.chain(result.data.data)\r\n        .filter(function(metricName) {\r\n          const r = new RegExp(metricFilterPattern);\r\n          return r.test(metricName);\r\n        })\r\n        .map(function(matchedMetricName) {\r\n          return {\r\n            text: matchedMetricName,\r\n            expandable: true,\r\n          };\r\n        })\r\n        .value();\r\n    });\r\n  }\r\n\r\n  queryResultQuery(query) {\r\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\r\n    return this.datasource.performInstantQuery({ expr: query }, end).then(function(result) {\r\n      return _.map(result.data.data.result, function(metricData) {\r\n        let text = metricData.metric.__name__ || '';\r\n        delete metricData.metric.__name__;\r\n        text +=\r\n          '{' +\r\n          _.map(metricData.metric, function(v, k) {\r\n            return k + '=\"' + v + '\"';\r\n          }).join(',') +\r\n          '}';\r\n        text += ' ' + metricData.value[1] + ' ' + metricData.value[0] * 1000;\r\n\r\n        return {\r\n          text: text,\r\n          expandable: true,\r\n        };\r\n      });\r\n    });\r\n  }\r\n\r\n  metricNameAndLabelsQuery(query) {\r\n    const start = this.datasource.getPrometheusTime(this.range.from, false);\r\n    const end = this.datasource.getPrometheusTime(this.range.to, true);\r\n    const url = '/api/v1/series?match[]=' + encodeURIComponent(query) + '&start=' + start + '&end=' + end;\r\n\r\n    const self = this;\r\n    return this.datasource.metadataRequest(url).then(function(result) {\r\n      return _.map(result.data.data, metric => {\r\n        return {\r\n          text: self.datasource.getOriginalMetricName(metric),\r\n          expandable: true,\r\n        };\r\n      });\r\n    });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport TableModel from 'app/core/table_model';\r\n\r\nexport class ResultTransformer {\r\n  constructor(private templateSrv) {}\r\n\r\n  transform(response: any, options: any): any[] {\r\n    const prometheusResult = response.data.data.result;\r\n\r\n    if (options.format === 'table') {\r\n      return [this.transformMetricDataToTable(prometheusResult, options.responseListLength, options.refId)];\r\n    } else if (options.format === 'heatmap') {\r\n      let seriesList = [];\r\n      prometheusResult.sort(sortSeriesByLabel);\r\n      for (const metricData of prometheusResult) {\r\n        seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\r\n      }\r\n      seriesList = this.transformToHistogramOverTime(seriesList);\r\n      return seriesList;\r\n    } else {\r\n      const seriesList = [];\r\n      for (const metricData of prometheusResult) {\r\n        if (response.data.data.resultType === 'matrix') {\r\n          seriesList.push(this.transformMetricData(metricData, options, options.start, options.end));\r\n        } else if (response.data.data.resultType === 'vector') {\r\n          seriesList.push(this.transformInstantMetricData(metricData, options));\r\n        }\r\n      }\r\n      return seriesList;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  transformMetricData(metricData, options, start, end) {\r\n    const dps = [];\r\n    let metricLabel = null;\r\n\r\n    metricLabel = this.createMetricLabel(metricData.metric, options);\r\n\r\n    const stepMs = parseInt(options.step) * 1000;\r\n    let baseTimestamp = start * 1000;\r\n\r\n    if (metricData.values === undefined) {\r\n      throw new Error('Prometheus heatmap error: data should be a time series');\r\n    }\r\n\r\n    for (const value of metricData.values) {\r\n      let dpValue = parseFloat(value[1]);\r\n      if (_.isNaN(dpValue)) {\r\n        dpValue = null;\r\n      }\r\n\r\n      const timestamp = parseFloat(value[0]) * 1000;\r\n      for (let t = baseTimestamp; t < timestamp; t += stepMs) {\r\n        dps.push([null, t]);\r\n      }\r\n      baseTimestamp = timestamp + stepMs;\r\n      dps.push([dpValue, timestamp]);\r\n    }\r\n\r\n    const endTimestamp = end * 1000;\r\n    for (let t = baseTimestamp; t <= endTimestamp; t += stepMs) {\r\n      dps.push([null, t]);\r\n    }\r\n\r\n    return {\r\n      datapoints: dps,\r\n      query: options.query,\r\n      responseIndex: options.responseIndex,\r\n      target: metricLabel,\r\n    };\r\n  }\r\n\r\n  transformMetricDataToTable(md, resultCount: number, refId: string) {\r\n    const table = new TableModel();\r\n    let i, j;\r\n    const metricLabels = {};\r\n\r\n    if (md.length === 0) {\r\n      return table;\r\n    }\r\n\r\n    // Collect all labels across all metrics\r\n    _.each(md, function(series) {\r\n      for (const label in series.metric) {\r\n        if (!metricLabels.hasOwnProperty(label)) {\r\n          metricLabels[label] = 1;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Sort metric labels, create columns for them and record their index\r\n    const sortedLabels = _.keys(metricLabels).sort();\r\n    table.columns.push({ text: 'Time', type: 'time' });\r\n    _.each(sortedLabels, function(label, labelIndex) {\r\n      metricLabels[label] = labelIndex + 1;\r\n      table.columns.push({ text: label, filterable: !label.startsWith('__') });\r\n    });\r\n    const valueText = resultCount > 1 ? `Value #${refId}` : 'Value';\r\n    table.columns.push({ text: valueText });\r\n\r\n    // Populate rows, set value to empty string when label not present.\r\n    _.each(md, function(series) {\r\n      if (series.value) {\r\n        series.values = [series.value];\r\n      }\r\n      if (series.values) {\r\n        for (i = 0; i < series.values.length; i++) {\r\n          const values = series.values[i];\r\n          const reordered: any = [values[0] * 1000];\r\n          if (series.metric) {\r\n            for (j = 0; j < sortedLabels.length; j++) {\r\n              const label = sortedLabels[j];\r\n              if (series.metric.hasOwnProperty(label)) {\r\n                reordered.push(series.metric[label]);\r\n              } else {\r\n                reordered.push('');\r\n              }\r\n            }\r\n          }\r\n          reordered.push(parseFloat(values[1]));\r\n          table.rows.push(reordered);\r\n        }\r\n      }\r\n    });\r\n\r\n    return table;\r\n  }\r\n\r\n  transformInstantMetricData(md, options) {\r\n    const dps = [];\r\n    let metricLabel = null;\r\n    metricLabel = this.createMetricLabel(md.metric, options);\r\n    dps.push([parseFloat(md.value[1]), md.value[0] * 1000]);\r\n    return { target: metricLabel, datapoints: dps, labels: md.metric };\r\n  }\r\n\r\n  createMetricLabel(labelData, options) {\r\n    let label = '';\r\n    if (_.isUndefined(options) || _.isEmpty(options.legendFormat)) {\r\n      label = this.getOriginalMetricName(labelData);\r\n    } else {\r\n      label = this.renderTemplate(this.templateSrv.replace(options.legendFormat), labelData);\r\n    }\r\n    if (!label || label === '{}') {\r\n      label = options.query;\r\n    }\r\n    return label;\r\n  }\r\n\r\n  renderTemplate(aliasPattern, aliasData) {\r\n    const aliasRegex = /\\{\\{\\s*(.+?)\\s*\\}\\}/g;\r\n    return aliasPattern.replace(aliasRegex, function(match, g1) {\r\n      if (aliasData[g1]) {\r\n        return aliasData[g1];\r\n      }\r\n      return g1;\r\n    });\r\n  }\r\n\r\n  getOriginalMetricName(labelData) {\r\n    const metricName = labelData.__name__ || '';\r\n    delete labelData.__name__;\r\n    const labelPart = _.map(_.toPairs(labelData), function(label) {\r\n      return label[0] + '=\"' + label[1] + '\"';\r\n    }).join(',');\r\n    return metricName + '{' + labelPart + '}';\r\n  }\r\n\r\n  transformToHistogramOverTime(seriesList) {\r\n    /*      t1 = timestamp1, t2 = timestamp2 etc.\r\n            t1  t2  t3          t1  t2  t3\r\n    le10    10  10  0     =>    10  10  0\r\n    le20    20  10  30    =>    10  0   30\r\n    le30    30  10  35    =>    10  0   5\r\n    */\r\n    for (let i = seriesList.length - 1; i > 0; i--) {\r\n      const topSeries = seriesList[i].datapoints;\r\n      const bottomSeries = seriesList[i - 1].datapoints;\r\n      if (!topSeries || !bottomSeries) {\r\n        throw new Error('Prometheus heatmap transform error: data should be a time series');\r\n      }\r\n\r\n      for (let j = 0; j < topSeries.length; j++) {\r\n        const bottomPoint = bottomSeries[j] || [0];\r\n        topSeries[j][0] -= bottomPoint[0];\r\n      }\r\n    }\r\n\r\n    return seriesList;\r\n  }\r\n}\r\n\r\nfunction sortSeriesByLabel(s1, s2): number {\r\n  let le1, le2;\r\n\r\n  try {\r\n    // fail if not integer. might happen with bad queries\r\n    le1 = parseHistogramLabel(s1.metric.le);\r\n    le2 = parseHistogramLabel(s2.metric.le);\r\n  } catch (err) {\r\n    console.log(err);\r\n    return 0;\r\n  }\r\n\r\n  if (le1 > le2) {\r\n    return 1;\r\n  }\r\n\r\n  if (le1 < le2) {\r\n    return -1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction parseHistogramLabel(le: string): number {\r\n  if (le === '+Inf') {\r\n    return +Infinity;\r\n  }\r\n  return Number(le);\r\n}\r\n","import _ from 'lodash';\r\n\r\nimport $ from 'jquery';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport PrometheusMetricFindQuery from './metric_find_query';\r\nimport { ResultTransformer } from './result_transformer';\r\nimport { BackendSrv } from 'app/core/services/backend_srv';\r\n\r\nexport function alignRange(start, end, step) {\r\n  const alignedEnd = Math.ceil(end / step) * step;\r\n  const alignedStart = Math.floor(start / step) * step;\r\n  return {\r\n    end: alignedEnd,\r\n    start: alignedStart,\r\n  };\r\n}\r\n\r\nconst keywords = 'by|without|on|ignoring|group_left|group_right';\r\n\r\n// Duplicate from mode-prometheus.js, which can't be used in tests due to global ace not being loaded.\r\nconst builtInWords = [\r\n  keywords,\r\n  'count|count_values|min|max|avg|sum|stddev|stdvar|bottomk|topk|quantile',\r\n  'true|false|null|__name__|job',\r\n  'abs|absent|ceil|changes|clamp_max|clamp_min|count_scalar|day_of_month|day_of_week|days_in_month|delta|deriv',\r\n  'drop_common_labels|exp|floor|histogram_quantile|holt_winters|hour|idelta|increase|irate|label_replace|ln|log2',\r\n  'log10|minute|month|predict_linear|rate|resets|round|scalar|sort|sort_desc|sqrt|time|vector|year|avg_over_time',\r\n  'min_over_time|max_over_time|sum_over_time|count_over_time|quantile_over_time|stddev_over_time|stdvar_over_time',\r\n]\r\n  .join('|')\r\n  .split('|');\r\n\r\n// addLabelToQuery('foo', 'bar', 'baz') => 'foo{bar=\"baz\"}'\r\nexport function addLabelToQuery(query: string, key: string, value: string): string {\r\n  if (!key || !value) {\r\n    throw new Error('Need label to add to query.');\r\n  }\r\n\r\n  // Add empty selector to bare metric name\r\n  let previousWord;\r\n  query = query.replace(/(\\w+)\\b(?![\\(\\]{=\",])/g, (match, word, offset) => {\r\n    // Check if inside a selector\r\n    const nextSelectorStart = query.slice(offset).indexOf('{');\r\n    const nextSelectorEnd = query.slice(offset).indexOf('}');\r\n    const insideSelector = nextSelectorEnd > -1 && (nextSelectorStart === -1 || nextSelectorStart > nextSelectorEnd);\r\n    // Handle \"sum by (key) (metric)\"\r\n    const previousWordIsKeyWord = previousWord && keywords.split('|').indexOf(previousWord) > -1;\r\n    previousWord = word;\r\n    if (!insideSelector && !previousWordIsKeyWord && builtInWords.indexOf(word) === -1) {\r\n      return `${word}{}`;\r\n    }\r\n    return word;\r\n  });\r\n\r\n  // Adding label to existing selectors\r\n  const selectorRegexp = /{([^{]*)}/g;\r\n  let match = null;\r\n  const parts = [];\r\n  let lastIndex = 0;\r\n  let suffix = '';\r\n  while ((match = selectorRegexp.exec(query))) {\r\n    const prefix = query.slice(lastIndex, match.index);\r\n    const selectorParts = match[1].split(',');\r\n    const labels = selectorParts.reduce((acc, label) => {\r\n      const labelParts = label.split('=');\r\n      if (labelParts.length === 2) {\r\n        acc[labelParts[0]] = labelParts[1];\r\n      }\r\n      return acc;\r\n    }, {});\r\n    labels[key] = `\"${value}\"`;\r\n    const selector = Object.keys(labels)\r\n      .sort()\r\n      .map(key => `${key}=${labels[key]}`)\r\n      .join(',');\r\n    lastIndex = match.index + match[1].length + 2;\r\n    suffix = query.slice(match.index + match[0].length);\r\n    parts.push(prefix, '{', selector, '}');\r\n  }\r\n  parts.push(suffix);\r\n  return parts.join('');\r\n}\r\n\r\nexport function determineQueryHints(series: any[], datasource?: any): any[] {\r\n  const hints = series.map((s, i) => {\r\n    const query: string = s.query;\r\n    const index: number = s.responseIndex;\r\n    if (query === undefined || index === undefined) {\r\n      return null;\r\n    }\r\n\r\n    // ..._bucket metric needs a histogram_quantile()\r\n    const histogramMetric = query.trim().match(/^\\w+_bucket$/);\r\n    if (histogramMetric) {\r\n      const label = 'Time series has buckets, you probably wanted a histogram.';\r\n      return {\r\n        index,\r\n        label,\r\n        fix: {\r\n          label: 'Fix by adding histogram_quantile().',\r\n          action: {\r\n            type: 'ADD_HISTOGRAM_QUANTILE',\r\n            query,\r\n            index,\r\n          },\r\n        },\r\n      };\r\n    }\r\n\r\n    // Check for monotony\r\n    const datapoints: number[][] = s.datapoints;\r\n    if (datapoints.length > 1) {\r\n      let increasing = false;\r\n      const monotonic = datapoints.filter(dp => dp[0] !== null).every((dp, index) => {\r\n        if (index === 0) {\r\n          return true;\r\n        }\r\n        increasing = increasing || dp[0] > datapoints[index - 1][0];\r\n        // monotonic?\r\n        return dp[0] >= datapoints[index - 1][0];\r\n      });\r\n      if (increasing && monotonic) {\r\n        const simpleMetric = query.trim().match(/^\\w+$/);\r\n        let label = 'Time series is monotonously increasing.';\r\n        let fix;\r\n        if (simpleMetric) {\r\n          fix = {\r\n            label: 'Fix by adding rate().',\r\n            action: {\r\n              type: 'ADD_RATE',\r\n              query,\r\n              index,\r\n            },\r\n          };\r\n        } else {\r\n          label = `${label} Try applying a rate() function.`;\r\n        }\r\n        return {\r\n          label,\r\n          index,\r\n          fix,\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check for recording rules expansion\r\n    if (datasource && datasource.ruleMappings) {\r\n      const mapping = datasource.ruleMappings;\r\n      const mappingForQuery = Object.keys(mapping).reduce((acc, ruleName) => {\r\n        if (query.search(ruleName) > -1) {\r\n          return {\r\n            ...acc,\r\n            [ruleName]: mapping[ruleName],\r\n          };\r\n        }\r\n        return acc;\r\n      }, {});\r\n      if (_.size(mappingForQuery) > 0) {\r\n        const label = 'Query contains recording rules.';\r\n        return {\r\n          label,\r\n          index,\r\n          fix: {\r\n            label: 'Expand rules',\r\n            action: {\r\n              type: 'EXPAND_RULES',\r\n              query,\r\n              index,\r\n              mapping: mappingForQuery,\r\n            },\r\n          },\r\n        };\r\n      }\r\n    }\r\n\r\n    // No hint found\r\n    return null;\r\n  });\r\n  return hints;\r\n}\r\n\r\nexport function extractRuleMappingFromGroups(groups: any[]) {\r\n  return groups.reduce(\r\n    (mapping, group) =>\r\n      group.rules.filter(rule => rule.type === 'recording').reduce(\r\n        (acc, rule) => ({\r\n          ...acc,\r\n          [rule.name]: rule.query,\r\n        }),\r\n        mapping\r\n      ),\r\n    {}\r\n  );\r\n}\r\n\r\nexport function prometheusRegularEscape(value) {\r\n  if (typeof value === 'string') {\r\n    return value.replace(/'/g, \"\\\\\\\\'\");\r\n  }\r\n  return value;\r\n}\r\n\r\nexport function prometheusSpecialRegexEscape(value) {\r\n  if (typeof value === 'string') {\r\n    return prometheusRegularEscape(value.replace(/\\\\/g, '\\\\\\\\\\\\\\\\').replace(/[$^*{}\\[\\]+?.()]/g, '\\\\\\\\$&'));\r\n  }\r\n  return value;\r\n}\r\n\r\nexport class PrometheusDatasource {\r\n  type: string;\r\n  editorSrc: string;\r\n  name: string;\r\n  ruleMappings: { [index: string]: string };\r\n  supportsExplore: boolean;\r\n  supportMetrics: boolean;\r\n  url: string;\r\n  directUrl: string;\r\n  basicAuth: any;\r\n  withCredentials: any;\r\n  metricsNameCache: any;\r\n  interval: string;\r\n  queryTimeout: string;\r\n  httpMethod: string;\r\n  resultTransformer: ResultTransformer;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private $q, private backendSrv: BackendSrv, private templateSrv, private timeSrv) {\r\n    this.type = 'prometheus';\r\n    this.editorSrc = 'app/features/prometheus/partials/query.editor.html';\r\n    this.name = instanceSettings.name;\r\n    this.supportsExplore = true;\r\n    this.supportMetrics = true;\r\n    this.url = instanceSettings.url;\r\n    this.directUrl = instanceSettings.directUrl;\r\n    this.basicAuth = instanceSettings.basicAuth;\r\n    this.withCredentials = instanceSettings.withCredentials;\r\n    this.interval = instanceSettings.jsonData.timeInterval || '15s';\r\n    this.queryTimeout = instanceSettings.jsonData.queryTimeout;\r\n    this.httpMethod = instanceSettings.jsonData.httpMethod || 'GET';\r\n    this.resultTransformer = new ResultTransformer(templateSrv);\r\n    this.ruleMappings = {};\r\n  }\r\n\r\n  init() {\r\n    this.loadRules();\r\n  }\r\n\r\n  _request(url, data?, options?: any) {\r\n    options = _.defaults(options || {}, {\r\n      url: this.url + url,\r\n      method: this.httpMethod,\r\n    });\r\n\r\n    if (options.method === 'GET') {\r\n      if (!_.isEmpty(data)) {\r\n        options.url =\r\n          options.url +\r\n          '?' +\r\n          _.map(data, (v, k) => {\r\n            return encodeURIComponent(k) + '=' + encodeURIComponent(v);\r\n          }).join('&');\r\n      }\r\n    } else {\r\n      options.headers = {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n      };\r\n      options.transformRequest = data => {\r\n        return $.param(data);\r\n      };\r\n      options.data = data;\r\n    }\r\n\r\n    if (this.basicAuth || this.withCredentials) {\r\n      options.withCredentials = true;\r\n    }\r\n\r\n    if (this.basicAuth) {\r\n      options.headers = {\r\n        Authorization: this.basicAuth,\r\n      };\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest(options);\r\n  }\r\n\r\n  // Use this for tab completion features, wont publish response to other components\r\n  metadataRequest(url) {\r\n    return this._request(url, null, { method: 'GET', silent: true });\r\n  }\r\n\r\n  interpolateQueryExpr(value, variable, defaultFormatFn) {\r\n    // if no multi or include all do not regexEscape\r\n    if (!variable.multi && !variable.includeAll) {\r\n      return prometheusRegularEscape(value);\r\n    }\r\n\r\n    if (typeof value === 'string') {\r\n      return prometheusSpecialRegexEscape(value);\r\n    }\r\n\r\n    const escapedValues = _.map(value, prometheusSpecialRegexEscape);\r\n    return escapedValues.join('|');\r\n  }\r\n\r\n  targetContainsTemplate(target) {\r\n    return this.templateSrv.variableExists(target.expr);\r\n  }\r\n\r\n  query(options) {\r\n    const start = this.getPrometheusTime(options.range.from, false);\r\n    const end = this.getPrometheusTime(options.range.to, true);\r\n\r\n    const queries = [];\r\n    const activeTargets = [];\r\n\r\n    options = _.clone(options);\r\n\r\n    for (const target of options.targets) {\r\n      if (!target.expr || target.hide) {\r\n        continue;\r\n      }\r\n\r\n      activeTargets.push(target);\r\n      queries.push(this.createQuery(target, options, start, end));\r\n    }\r\n\r\n    // No valid targets, return the empty result to save a round trip.\r\n    if (_.isEmpty(queries)) {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    const allQueryPromise = _.map(queries, query => {\r\n      if (!query.instant) {\r\n        return this.performTimeSeriesQuery(query, query.start, query.end);\r\n      } else {\r\n        return this.performInstantQuery(query, end);\r\n      }\r\n    });\r\n\r\n    return this.$q.all(allQueryPromise).then(responseList => {\r\n      let result = [];\r\n      let hints = [];\r\n\r\n      _.each(responseList, (response, index) => {\r\n        if (response.status === 'error') {\r\n          const error = {\r\n            index,\r\n            ...response.error,\r\n          };\r\n          throw error;\r\n        }\r\n\r\n        // Keeping original start/end for transformers\r\n        const transformerOptions = {\r\n          format: activeTargets[index].format,\r\n          step: queries[index].step,\r\n          legendFormat: activeTargets[index].legendFormat,\r\n          start: queries[index].start,\r\n          end: queries[index].end,\r\n          query: queries[index].expr,\r\n          responseListLength: responseList.length,\r\n          responseIndex: index,\r\n          refId: activeTargets[index].refId,\r\n        };\r\n        const series = this.resultTransformer.transform(response, transformerOptions);\r\n        result = [...result, ...series];\r\n\r\n        if (queries[index].hinting) {\r\n          const queryHints = determineQueryHints(series, this);\r\n          hints = [...hints, ...queryHints];\r\n        }\r\n      });\r\n\r\n      return { data: result, hints };\r\n    });\r\n  }\r\n\r\n  createQuery(target, options, start, end) {\r\n    const query: any = {\r\n      hinting: target.hinting,\r\n      instant: target.instant,\r\n    };\r\n    const range = Math.ceil(end - start);\r\n\r\n    let interval = kbn.interval_to_seconds(options.interval);\r\n    // Minimum interval (\"Min step\"), if specified for the query. or same as interval otherwise\r\n    const minInterval = kbn.interval_to_seconds(\r\n      this.templateSrv.replace(target.interval, options.scopedVars) || options.interval\r\n    );\r\n    const intervalFactor = target.intervalFactor || 1;\r\n    // Adjust the interval to take into account any specified minimum and interval factor plus Prometheus limits\r\n    const adjustedInterval = this.adjustInterval(interval, minInterval, range, intervalFactor);\r\n    let scopedVars = { ...options.scopedVars, ...this.getRangeScopedVars() };\r\n    // If the interval was adjusted, make a shallow copy of scopedVars with updated interval vars\r\n    if (interval !== adjustedInterval) {\r\n      interval = adjustedInterval;\r\n      scopedVars = Object.assign({}, options.scopedVars, {\r\n        __interval: { text: interval + 's', value: interval + 's' },\r\n        __interval_ms: { text: interval * 1000, value: interval * 1000 },\r\n        ...this.getRangeScopedVars(),\r\n      });\r\n    }\r\n    query.step = interval;\r\n\r\n    // Only replace vars in expression after having (possibly) updated interval vars\r\n    query.expr = this.templateSrv.replace(target.expr, scopedVars, this.interpolateQueryExpr);\r\n    query.requestId = options.panelId + target.refId;\r\n\r\n    // Align query interval with step\r\n    const adjusted = alignRange(start, end, query.step);\r\n    query.start = adjusted.start;\r\n    query.end = adjusted.end;\r\n\r\n    return query;\r\n  }\r\n\r\n  adjustInterval(interval, minInterval, range, intervalFactor) {\r\n    // Prometheus will drop queries that might return more than 11000 data points.\r\n    // Calibrate interval if it is too small.\r\n    if (interval !== 0 && range / intervalFactor / interval > 11000) {\r\n      interval = Math.ceil(range / intervalFactor / 11000);\r\n    }\r\n    return Math.max(interval * intervalFactor, minInterval, 1);\r\n  }\r\n\r\n  performTimeSeriesQuery(query, start, end) {\r\n    if (start > end) {\r\n      throw { message: 'Invalid time range' };\r\n    }\r\n\r\n    const url = '/api/v1/query_range';\r\n    const data = {\r\n      query: query.expr,\r\n      start: start,\r\n      end: end,\r\n      step: query.step,\r\n    };\r\n    if (this.queryTimeout) {\r\n      data['timeout'] = this.queryTimeout;\r\n    }\r\n    return this._request(url, data, { requestId: query.requestId });\r\n  }\r\n\r\n  performInstantQuery(query, time) {\r\n    const url = '/api/v1/query';\r\n    const data = {\r\n      query: query.expr,\r\n      time: time,\r\n    };\r\n    if (this.queryTimeout) {\r\n      data['timeout'] = this.queryTimeout;\r\n    }\r\n    return this._request(url, data, { requestId: query.requestId });\r\n  }\r\n\r\n  performSuggestQuery(query, cache = false) {\r\n    const url = '/api/v1/label/__name__/values';\r\n\r\n    if (cache && this.metricsNameCache && this.metricsNameCache.expire > Date.now()) {\r\n      return this.$q.when(\r\n        _.filter(this.metricsNameCache.data, metricName => {\r\n          return metricName.indexOf(query) !== 1;\r\n        })\r\n      );\r\n    }\r\n\r\n    return this.metadataRequest(url).then(result => {\r\n      this.metricsNameCache = {\r\n        data: result.data.data,\r\n        expire: Date.now() + 60 * 1000,\r\n      };\r\n      return _.filter(result.data.data, metricName => {\r\n        return metricName.indexOf(query) !== 1;\r\n      });\r\n    });\r\n  }\r\n\r\n  metricFindQuery(query) {\r\n    if (!query) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    const scopedVars = {\r\n      __interval: { text: this.interval, value: this.interval },\r\n      __interval_ms: { text: kbn.interval_to_ms(this.interval), value: kbn.interval_to_ms(this.interval) },\r\n      ...this.getRangeScopedVars(),\r\n    };\r\n    const interpolated = this.templateSrv.replace(query, scopedVars, this.interpolateQueryExpr);\r\n    const metricFindQuery = new PrometheusMetricFindQuery(this, interpolated, this.timeSrv);\r\n    return metricFindQuery.process();\r\n  }\r\n\r\n  getRangeScopedVars() {\r\n    const range = this.timeSrv.timeRange();\r\n    const msRange = range.to.diff(range.from);\r\n    const sRange = Math.round(msRange / 1000);\r\n    const regularRange = kbn.secondsToHms(msRange / 1000);\r\n    return {\r\n      __range_ms: { text: msRange, value: msRange },\r\n      __range_s: { text: sRange, value: sRange },\r\n      __range: { text: regularRange, value: regularRange },\r\n    };\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    const annotation = options.annotation;\r\n    const expr = annotation.expr || '';\r\n    let tagKeys = annotation.tagKeys || '';\r\n    const titleFormat = annotation.titleFormat || '';\r\n    const textFormat = annotation.textFormat || '';\r\n\r\n    if (!expr) {\r\n      return this.$q.when([]);\r\n    }\r\n\r\n    const step = annotation.step || '60s';\r\n    const start = this.getPrometheusTime(options.range.from, false);\r\n    const end = this.getPrometheusTime(options.range.to, true);\r\n    // Unsetting min interval\r\n    const queryOptions = {\r\n      ...options,\r\n      interval: '0s',\r\n    };\r\n    const query = this.createQuery({ expr, interval: step }, queryOptions, start, end);\r\n\r\n    const self = this;\r\n    return this.performTimeSeriesQuery(query, query.start, query.end).then(function(results) {\r\n      const eventList = [];\r\n      tagKeys = tagKeys.split(',');\r\n\r\n      _.each(results.data.data.result, function(series) {\r\n        const tags = _.chain(series.metric)\r\n          .filter(function(v, k) {\r\n            return _.includes(tagKeys, k);\r\n          })\r\n          .value();\r\n\r\n        for (const value of series.values) {\r\n          if (value[1] === '1') {\r\n            const event = {\r\n              annotation: annotation,\r\n              time: Math.floor(parseFloat(value[0])) * 1000,\r\n              title: self.resultTransformer.renderTemplate(titleFormat, series.metric),\r\n              tags: tags,\r\n              text: self.resultTransformer.renderTemplate(textFormat, series.metric),\r\n            };\r\n\r\n            eventList.push(event);\r\n          }\r\n        }\r\n      });\r\n\r\n      return eventList;\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    const now = new Date().getTime();\r\n    return this.performInstantQuery({ expr: '1+1' }, now / 1000).then(response => {\r\n      if (response.data.status === 'success') {\r\n        return { status: 'success', message: 'Data source is working' };\r\n      } else {\r\n        return { status: 'error', message: response.error };\r\n      }\r\n    });\r\n  }\r\n\r\n  getExploreState(panel) {\r\n    let state = {};\r\n    if (panel.targets) {\r\n      const queries = panel.targets.map(t => ({\r\n        query: this.templateSrv.replace(t.expr, {}, this.interpolateQueryExpr),\r\n        format: t.format,\r\n      }));\r\n      state = {\r\n        ...state,\r\n        queries,\r\n        datasource: this.name,\r\n      };\r\n    }\r\n    return state;\r\n  }\r\n\r\n  loadRules() {\r\n    this.metadataRequest('/api/v1/rules')\r\n      .then(res => res.data || res.json())\r\n      .then(body => {\r\n        const groups = _.get(body, ['data', 'groups']);\r\n        if (groups) {\r\n          this.ruleMappings = extractRuleMappingFromGroups(groups);\r\n        }\r\n      })\r\n      .catch(e => {\r\n        console.log('Rules API is experimental. Ignore next error.');\r\n        console.error(e);\r\n      });\r\n  }\r\n\r\n  modifyQuery(query: string, action: any): string {\r\n    switch (action.type) {\r\n      case 'ADD_FILTER': {\r\n        return addLabelToQuery(query, action.key, action.value);\r\n      }\r\n      case 'ADD_HISTOGRAM_QUANTILE': {\r\n        return `histogram_quantile(0.95, sum(rate(${query}[5m])) by (le))`;\r\n      }\r\n      case 'ADD_RATE': {\r\n        return `rate(${query}[5m])`;\r\n      }\r\n      case 'EXPAND_RULES': {\r\n        const mapping = action.mapping;\r\n        if (mapping) {\r\n          const ruleNames = Object.keys(mapping);\r\n          const rulesRegex = new RegExp(`(\\\\s|^)(${ruleNames.join('|')})(\\\\s|$|\\\\()`, 'ig');\r\n          return query.replace(rulesRegex, (match, pre, name, post) => mapping[name]);\r\n        }\r\n      }\r\n      default:\r\n        return query;\r\n    }\r\n  }\r\n\r\n  getPrometheusTime(date, roundUp) {\r\n    if (_.isString(date)) {\r\n      date = dateMath.parse(date, roundUp);\r\n    }\r\n    return Math.ceil(date.valueOf() / 1000);\r\n  }\r\n\r\n  getOriginalMetricName(labelData) {\r\n    return this.resultTransformer.getOriginalMetricName(labelData);\r\n  }\r\n}\r\n","import { PrometheusDatasource } from './datasource';\r\nimport _ from 'lodash';\r\n\r\nexport class PromCompleter {\r\n  labelQueryCache: any;\r\n  labelNameCache: any;\r\n  labelValueCache: any;\r\n  templateVariableCompletions: any;\r\n\r\n  identifierRegexps = [/\\[/, /[a-zA-Z0-9_:]/];\r\n\r\n  constructor(private datasource: PrometheusDatasource, private templateSrv) {\r\n    this.labelQueryCache = {};\r\n    this.labelNameCache = {};\r\n    this.labelValueCache = {};\r\n    this.templateVariableCompletions = this.templateSrv.variables.map(variable => {\r\n      return {\r\n        caption: '$' + variable.name,\r\n        value: '$' + variable.name,\r\n        meta: 'variable',\r\n        score: Number.MAX_VALUE,\r\n      };\r\n    });\r\n  }\r\n\r\n  getCompletions(editor, session, pos, prefix, callback) {\r\n    const wrappedCallback = (err, completions) => {\r\n      completions = completions.concat(this.templateVariableCompletions);\r\n      return callback(err, completions);\r\n    };\r\n\r\n    const token = session.getTokenAt(pos.row, pos.column);\r\n\r\n    switch (token.type) {\r\n      case 'entity.name.tag.label-matcher':\r\n        this.getCompletionsForLabelMatcherName(session, pos).then(completions => {\r\n          wrappedCallback(null, completions);\r\n        });\r\n        return;\r\n      case 'string.quoted.label-matcher':\r\n        this.getCompletionsForLabelMatcherValue(session, pos).then(completions => {\r\n          wrappedCallback(null, completions);\r\n        });\r\n        return;\r\n      case 'entity.name.tag.label-list-matcher':\r\n        this.getCompletionsForBinaryOperator(session, pos).then(completions => {\r\n          wrappedCallback(null, completions);\r\n        });\r\n        return;\r\n    }\r\n\r\n    if (token.type === 'paren.lparen' && token.value === '[') {\r\n      const vectors = [];\r\n      for (const unit of ['s', 'm', 'h']) {\r\n        for (const value of [1, 5, 10, 30]) {\r\n          vectors.push({\r\n            caption: value + unit,\r\n            value: '[' + value + unit,\r\n            meta: 'range vector',\r\n          });\r\n        }\r\n      }\r\n\r\n      vectors.unshift({\r\n        caption: '$__interval_ms',\r\n        value: '[$__interval_ms',\r\n        meta: 'range vector',\r\n      });\r\n\r\n      vectors.unshift({\r\n        caption: '$__interval',\r\n        value: '[$__interval',\r\n        meta: 'range vector',\r\n      });\r\n\r\n      wrappedCallback(null, vectors);\r\n      return;\r\n    }\r\n\r\n    const query = prefix;\r\n\r\n    return this.datasource.performSuggestQuery(query, true).then(metricNames => {\r\n      wrappedCallback(\r\n        null,\r\n        metricNames.map(name => {\r\n          let value = name;\r\n          if (prefix === '(') {\r\n            value = '(' + name;\r\n          }\r\n\r\n          return {\r\n            caption: name,\r\n            value: value,\r\n            meta: 'metric',\r\n          };\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  getCompletionsForLabelMatcherName(session, pos) {\r\n    const metricName = this.findMetricName(session, pos.row, pos.column);\r\n    if (!metricName) {\r\n      return Promise.resolve(this.transformToCompletions(['__name__', 'instance', 'job'], 'label name'));\r\n    }\r\n\r\n    if (this.labelNameCache[metricName]) {\r\n      return Promise.resolve(this.labelNameCache[metricName]);\r\n    }\r\n\r\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\r\n      const labelNames = this.transformToCompletions(\r\n        _.uniq(\r\n          _.flatten(\r\n            result.map(r => {\r\n              return Object.keys(r.metric);\r\n            })\r\n          )\r\n        ),\r\n        'label name'\r\n      );\r\n      this.labelNameCache[metricName] = labelNames;\r\n      return Promise.resolve(labelNames);\r\n    });\r\n  }\r\n\r\n  getCompletionsForLabelMatcherValue(session, pos) {\r\n    const metricName = this.findMetricName(session, pos.row, pos.column);\r\n    if (!metricName) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    const labelNameToken = this.findToken(\r\n      session,\r\n      pos.row,\r\n      pos.column,\r\n      'entity.name.tag.label-matcher',\r\n      null,\r\n      'paren.lparen.label-matcher'\r\n    );\r\n    if (!labelNameToken) {\r\n      return Promise.resolve([]);\r\n    }\r\n    const labelName = labelNameToken.value;\r\n\r\n    if (this.labelValueCache[metricName] && this.labelValueCache[metricName][labelName]) {\r\n      return Promise.resolve(this.labelValueCache[metricName][labelName]);\r\n    }\r\n\r\n    return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\r\n      const labelValues = this.transformToCompletions(\r\n        _.uniq(\r\n          result.map(r => {\r\n            return r.metric[labelName];\r\n          })\r\n        ),\r\n        'label value'\r\n      );\r\n      this.labelValueCache[metricName] = this.labelValueCache[metricName] || {};\r\n      this.labelValueCache[metricName][labelName] = labelValues;\r\n      return Promise.resolve(labelValues);\r\n    });\r\n  }\r\n\r\n  getCompletionsForBinaryOperator(session, pos) {\r\n    const keywordOperatorToken = this.findToken(session, pos.row, pos.column, 'keyword.control', null, 'identifier');\r\n    if (!keywordOperatorToken) {\r\n      return Promise.resolve([]);\r\n    }\r\n    let rparenToken, expr;\r\n    switch (keywordOperatorToken.value) {\r\n      case 'by':\r\n      case 'without':\r\n        rparenToken = this.findToken(\r\n          session,\r\n          keywordOperatorToken.row,\r\n          keywordOperatorToken.column,\r\n          'paren.rparen',\r\n          null,\r\n          'identifier'\r\n        );\r\n        if (!rparenToken) {\r\n          return Promise.resolve([]);\r\n        }\r\n        expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\r\n        if (expr === '') {\r\n          return Promise.resolve([]);\r\n        }\r\n        return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\r\n          const labelNames = this.transformToCompletions(\r\n            _.uniq(\r\n              _.flatten(\r\n                result.map(r => {\r\n                  return Object.keys(r.metric);\r\n                })\r\n              )\r\n            ),\r\n            'label name'\r\n          );\r\n          this.labelNameCache[expr] = labelNames;\r\n          return labelNames;\r\n        });\r\n      case 'on':\r\n      case 'ignoring':\r\n      case 'group_left':\r\n      case 'group_right':\r\n        const binaryOperatorToken = this.findToken(\r\n          session,\r\n          keywordOperatorToken.row,\r\n          keywordOperatorToken.column,\r\n          'keyword.operator.binary',\r\n          null,\r\n          'identifier'\r\n        );\r\n        if (!binaryOperatorToken) {\r\n          return Promise.resolve([]);\r\n        }\r\n        rparenToken = this.findToken(\r\n          session,\r\n          binaryOperatorToken.row,\r\n          binaryOperatorToken.column,\r\n          'paren.rparen',\r\n          null,\r\n          'identifier'\r\n        );\r\n        if (rparenToken) {\r\n          expr = this.findExpressionMatchedParen(session, rparenToken.row, rparenToken.column);\r\n          if (expr === '') {\r\n            return Promise.resolve([]);\r\n          }\r\n          return this.getLabelNameAndValueForExpression(expr, 'expression').then(result => {\r\n            const labelNames = this.transformToCompletions(\r\n              _.uniq(\r\n                _.flatten(\r\n                  result.map(r => {\r\n                    return Object.keys(r.metric);\r\n                  })\r\n                )\r\n              ),\r\n              'label name'\r\n            );\r\n            this.labelNameCache[expr] = labelNames;\r\n            return labelNames;\r\n          });\r\n        } else {\r\n          const metricName = this.findMetricName(session, binaryOperatorToken.row, binaryOperatorToken.column);\r\n          return this.getLabelNameAndValueForExpression(metricName, 'metricName').then(result => {\r\n            const labelNames = this.transformToCompletions(\r\n              _.uniq(\r\n                _.flatten(\r\n                  result.map(r => {\r\n                    return Object.keys(r.metric);\r\n                  })\r\n                )\r\n              ),\r\n              'label name'\r\n            );\r\n            this.labelNameCache[metricName] = labelNames;\r\n            return Promise.resolve(labelNames);\r\n          });\r\n        }\r\n    }\r\n\r\n    return Promise.resolve([]);\r\n  }\r\n\r\n  getLabelNameAndValueForExpression(expr, type) {\r\n    if (this.labelQueryCache[expr]) {\r\n      return Promise.resolve(this.labelQueryCache[expr]);\r\n    }\r\n    let query = expr;\r\n    if (type === 'metricName') {\r\n      let op = '=~';\r\n      if (/[a-zA-Z_:][a-zA-Z0-9_:]*/.test(expr)) {\r\n        op = '=';\r\n      }\r\n      query = '{__name__' + op + '\"' + expr + '\"}';\r\n    }\r\n    return this.datasource.performInstantQuery({ expr: query }, new Date().getTime() / 1000).then(response => {\r\n      this.labelQueryCache[expr] = response.data.data.result;\r\n      return response.data.data.result;\r\n    });\r\n  }\r\n\r\n  transformToCompletions(words, meta) {\r\n    return words.map(name => {\r\n      return {\r\n        caption: name,\r\n        value: name,\r\n        meta: meta,\r\n        score: Number.MAX_VALUE,\r\n      };\r\n    });\r\n  }\r\n\r\n  findMetricName(session, row, column) {\r\n    let metricName = '';\r\n\r\n    let tokens;\r\n    const nameLabelNameToken = this.findToken(\r\n      session,\r\n      row,\r\n      column,\r\n      'entity.name.tag.label-matcher',\r\n      '__name__',\r\n      'paren.lparen.label-matcher'\r\n    );\r\n    if (nameLabelNameToken) {\r\n      tokens = session.getTokens(nameLabelNameToken.row);\r\n      const nameLabelValueToken = tokens[nameLabelNameToken.index + 2];\r\n      if (nameLabelValueToken && nameLabelValueToken.type === 'string.quoted.label-matcher') {\r\n        metricName = nameLabelValueToken.value.slice(1, -1); // cut begin/end quotation\r\n      }\r\n    } else {\r\n      const metricNameToken = this.findToken(session, row, column, 'identifier', null, null);\r\n      if (metricNameToken) {\r\n        tokens = session.getTokens(metricNameToken.row);\r\n        metricName = metricNameToken.value;\r\n      }\r\n    }\r\n\r\n    return metricName;\r\n  }\r\n\r\n  findToken(session, row, column, target, value, guard) {\r\n    let tokens, idx;\r\n    // find index and get column of previous token\r\n    for (let r = row; r >= 0; r--) {\r\n      let c;\r\n      tokens = session.getTokens(r);\r\n      if (r === row) {\r\n        // current row\r\n        c = 0;\r\n        for (idx = 0; idx < tokens.length; idx++) {\r\n          const nc = c + tokens[idx].value.length;\r\n          if (nc >= column) {\r\n            break;\r\n          }\r\n          c = nc;\r\n        }\r\n      } else {\r\n        idx = tokens.length - 1;\r\n        c =\r\n          _.sum(\r\n            tokens.map(t => {\r\n              return t.value.length;\r\n            })\r\n          ) - tokens[tokens.length - 1].value.length;\r\n      }\r\n\r\n      for (; idx >= 0; idx--) {\r\n        if (tokens[idx].type === guard) {\r\n          return null;\r\n        }\r\n\r\n        if (tokens[idx].type === target && (!value || tokens[idx].value === value)) {\r\n          tokens[idx].row = r;\r\n          tokens[idx].column = c;\r\n          tokens[idx].index = idx;\r\n          return tokens[idx];\r\n        }\r\n        c -= tokens[idx].value.length;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  findExpressionMatchedParen(session, row, column) {\r\n    let tokens, idx;\r\n    let deep = 1;\r\n    let expression = ')';\r\n    for (let r = row; r >= 0; r--) {\r\n      tokens = session.getTokens(r);\r\n      if (r === row) {\r\n        // current row\r\n        let c = 0;\r\n        for (idx = 0; idx < tokens.length; idx++) {\r\n          c += tokens[idx].value.length;\r\n          if (c >= column) {\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        idx = tokens.length - 1;\r\n      }\r\n\r\n      for (; idx >= 0; idx--) {\r\n        expression = tokens[idx].value + expression;\r\n        if (tokens[idx].type === 'paren.rparen') {\r\n          deep++;\r\n        } else if (tokens[idx].type === 'paren.lparen') {\r\n          deep--;\r\n          if (deep === 0) {\r\n            return expression;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return expression;\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\nimport { PromCompleter } from './completer';\r\nimport './mode-prometheus';\r\nimport './snippets/prometheus';\r\n\r\nclass PrometheusQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  metric: any;\r\n  resolutions: any;\r\n  formats: any;\r\n  instant: any;\r\n  oldTarget: any;\r\n  suggestMetrics: any;\r\n  getMetricsAutocomplete: any;\r\n  linkToPrometheus: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private templateSrv) {\r\n    super($scope, $injector);\r\n\r\n    const target = this.target;\r\n    target.expr = target.expr || '';\r\n    target.intervalFactor = target.intervalFactor || 1;\r\n    target.format = target.format || this.getDefaultFormat();\r\n\r\n    this.metric = '';\r\n    this.resolutions = _.map([1, 2, 3, 4, 5, 10], function(f) {\r\n      return { factor: f, label: '1/' + f };\r\n    });\r\n\r\n    this.formats = [\r\n      { text: 'Time series', value: 'time_series' },\r\n      { text: 'Table', value: 'table' },\r\n      { text: 'Heatmap', value: 'heatmap' },\r\n    ];\r\n\r\n    this.instant = false;\r\n\r\n    this.updateLink();\r\n  }\r\n\r\n  getCompleter(query) {\r\n    return new PromCompleter(this.datasource, this.templateSrv);\r\n  }\r\n\r\n  getDefaultFormat() {\r\n    if (this.panelCtrl.panel.type === 'table') {\r\n      return 'table';\r\n    } else if (this.panelCtrl.panel.type === 'heatmap') {\r\n      return 'heatmap';\r\n    }\r\n\r\n    return 'time_series';\r\n  }\r\n\r\n  refreshMetricData() {\r\n    if (!_.isEqual(this.oldTarget, this.target)) {\r\n      this.oldTarget = angular.copy(this.target);\r\n      this.panelCtrl.refresh();\r\n      this.updateLink();\r\n    }\r\n  }\r\n\r\n  updateLink() {\r\n    const range = this.panelCtrl.range;\r\n    if (!range) {\r\n      return;\r\n    }\r\n\r\n    const rangeDiff = Math.ceil((range.to.valueOf() - range.from.valueOf()) / 1000);\r\n    const endTime = range.to.utc().format('YYYY-MM-DD HH:mm');\r\n    const expr = {\r\n      'g0.expr': this.templateSrv.replace(\r\n        this.target.expr,\r\n        this.panelCtrl.panel.scopedVars,\r\n        this.datasource.interpolateQueryExpr\r\n      ),\r\n      'g0.range_input': rangeDiff + 's',\r\n      'g0.end_input': endTime,\r\n      'g0.step_input': this.target.step,\r\n      'g0.stacked': this.panelCtrl.panel.stack ? 1 : 0,\r\n      'g0.tab': 0,\r\n    };\r\n    const args = _.map(expr, (v, k) => {\r\n      return k + '=' + encodeURIComponent(v);\r\n    }).join('&');\r\n    this.linkToPrometheus = this.datasource.directUrl + '/graph?' + args;\r\n  }\r\n\r\n  getCollapsedText() {\r\n    return this.target.expr;\r\n  }\r\n}\r\n\r\nexport { PrometheusQueryCtrl };\r\n","export class PrometheusConfigCtrl {\r\n  static templateUrl = 'public/app/plugins/datasource/prometheus/partials/config.html';\r\n  current: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.current.jsonData.httpMethod = this.current.jsonData.httpMethod || 'GET';\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nexport default class ResponseParser {\r\n  constructor(private $q) {}\r\n\r\n  processQueryResult(res) {\r\n    const data = [];\r\n\r\n    if (!res.data.results) {\r\n      return { data: data };\r\n    }\r\n\r\n    for (const key in res.data.results) {\r\n      const queryRes = res.data.results[key];\r\n\r\n      if (queryRes.series) {\r\n        for (const series of queryRes.series) {\r\n          data.push({\r\n            target: series.name,\r\n            datapoints: series.points,\r\n            refId: queryRes.refId,\r\n            meta: queryRes.meta,\r\n          });\r\n        }\r\n      }\r\n\r\n      if (queryRes.tables) {\r\n        for (const table of queryRes.tables) {\r\n          table.type = 'table';\r\n          table.refId = queryRes.refId;\r\n          table.meta = queryRes.meta;\r\n          data.push(table);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { data: data };\r\n  }\r\n\r\n  parseMetricFindQueryResult(refId, results) {\r\n    if (!results || results.data.length === 0 || results.data.results[refId].meta.rowCount === 0) {\r\n      return [];\r\n    }\r\n\r\n    const columns = results.data.results[refId].tables[0].columns;\r\n    const rows = results.data.results[refId].tables[0].rows;\r\n    const textColIndex = this.findColIndex(columns, '__text');\r\n    const valueColIndex = this.findColIndex(columns, '__value');\r\n\r\n    if (columns.length === 2 && textColIndex !== -1 && valueColIndex !== -1) {\r\n      return this.transformToKeyValueList(rows, textColIndex, valueColIndex);\r\n    }\r\n\r\n    return this.transformToSimpleList(rows);\r\n  }\r\n\r\n  transformToKeyValueList(rows, textColIndex, valueColIndex) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      if (!this.containsKey(res, rows[i][textColIndex])) {\r\n        res.push({ text: rows[i][textColIndex], value: rows[i][valueColIndex] });\r\n      }\r\n    }\r\n\r\n    return res;\r\n  }\r\n\r\n  transformToSimpleList(rows) {\r\n    const res = [];\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      for (let j = 0; j < rows[i].length; j++) {\r\n        const value = rows[i][j];\r\n        if (res.indexOf(value) === -1) {\r\n          res.push(value);\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(res, value => {\r\n      return { text: value };\r\n    });\r\n  }\r\n\r\n  findColIndex(columns, colName) {\r\n    for (let i = 0; i < columns.length; i++) {\r\n      if (columns[i].text === colName) {\r\n        return i;\r\n      }\r\n    }\r\n\r\n    return -1;\r\n  }\r\n\r\n  containsKey(res, key) {\r\n    for (let i = 0; i < res.length; i++) {\r\n      if (res[i].text === key) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  transformAnnotationResponse(options, data) {\r\n    const table = data.data.results[options.annotation.name].tables[0];\r\n\r\n    let timeColumnIndex = -1;\r\n    let textColumnIndex = -1;\r\n    let tagsColumnIndex = -1;\r\n\r\n    for (let i = 0; i < table.columns.length; i++) {\r\n      if (table.columns[i].text === 'time') {\r\n        timeColumnIndex = i;\r\n      } else if (table.columns[i].text === 'text') {\r\n        textColumnIndex = i;\r\n      } else if (table.columns[i].text === 'tags') {\r\n        tagsColumnIndex = i;\r\n      }\r\n    }\r\n\r\n    if (timeColumnIndex === -1) {\r\n      return this.$q.reject({ message: 'Missing mandatory time column (with time column alias) in annotation query.' });\r\n    }\r\n\r\n    const list = [];\r\n    for (let i = 0; i < table.rows.length; i++) {\r\n      const row = table.rows[i];\r\n      list.push({\r\n        annotation: options.annotation,\r\n        time: Math.floor(row[timeColumnIndex]),\r\n        text: row[textColumnIndex],\r\n        tags: row[tagsColumnIndex] ? row[tagsColumnIndex].trim().split(/\\s*,\\s*/) : [],\r\n      });\r\n    }\r\n\r\n    return list;\r\n  }\r\n}\r\n","import { PrometheusDatasource } from './datasource';\r\nimport { PrometheusQueryCtrl } from './query_ctrl';\r\nimport { PrometheusConfigCtrl } from './config_ctrl';\r\n\r\nclass PrometheusAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n}\r\n\r\nexport {\r\n  PrometheusDatasource as Datasource,\r\n  PrometheusQueryCtrl as QueryCtrl,\r\n  PrometheusConfigCtrl as ConfigCtrl,\r\n  PrometheusAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport ResponseParser from './response_parser';\r\n\r\nexport class MssqlDatasource {\r\n  id: any;\r\n  name: any;\r\n  responseParser: ResponseParser;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private backendSrv, private $q, private templateSrv) {\r\n    this.name = instanceSettings.name;\r\n    this.id = instanceSettings.id;\r\n    this.responseParser = new ResponseParser(this.$q);\r\n  }\r\n\r\n  interpolateVariable(value, variable) {\r\n    if (typeof value === 'string') {\r\n      if (variable.multi || variable.includeAll) {\r\n        return \"'\" + value.replace(/'/g, `''`) + \"'\";\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value;\r\n    }\r\n\r\n    const quotedValues = _.map(value, function(val) {\r\n      if (typeof value === 'number') {\r\n        return value;\r\n      }\r\n\r\n      return \"'\" + val.replace(/'/g, `''`) + \"'\";\r\n    });\r\n    return quotedValues.join(',');\r\n  }\r\n\r\n  query(options) {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map(item => {\r\n      return {\r\n        refId: item.refId,\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n        datasourceId: this.id,\r\n        rawSql: this.templateSrv.replace(item.rawSql, options.scopedVars, this.interpolateVariable),\r\n        format: item.format,\r\n      };\r\n    });\r\n\r\n    if (queries.length === 0) {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: queries,\r\n        },\r\n      })\r\n      .then(this.responseParser.processQueryResult);\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    if (!options.annotation.rawQuery) {\r\n      return this.$q.reject({ message: 'Query missing in annotation definition' });\r\n    }\r\n\r\n    const query = {\r\n      refId: options.annotation.name,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(options.annotation.rawQuery, options.scopedVars, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: options.range.from.valueOf().toString(),\r\n          to: options.range.to.valueOf().toString(),\r\n          queries: [query],\r\n        },\r\n      })\r\n      .then(data => this.responseParser.transformAnnotationResponse(options, data));\r\n  }\r\n\r\n  metricFindQuery(query, optionalOptions) {\r\n    let refId = 'tempvar';\r\n    if (optionalOptions && optionalOptions.variable && optionalOptions.variable.name) {\r\n      refId = optionalOptions.variable.name;\r\n    }\r\n\r\n    const interpolatedQuery = {\r\n      refId: refId,\r\n      datasourceId: this.id,\r\n      rawSql: this.templateSrv.replace(query, {}, this.interpolateVariable),\r\n      format: 'table',\r\n    };\r\n\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          queries: [interpolatedQuery],\r\n        },\r\n      })\r\n      .then(data => this.responseParser.parseMetricFindQueryResult(refId, data));\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv\r\n      .datasourceRequest({\r\n        url: '/api/tsdb/query',\r\n        method: 'POST',\r\n        data: {\r\n          from: '5m',\r\n          to: 'now',\r\n          queries: [\r\n            {\r\n              refId: 'A',\r\n              intervalMs: 1,\r\n              maxDataPoints: 1,\r\n              datasourceId: this.id,\r\n              rawSql: 'SELECT 1',\r\n              format: 'table',\r\n            },\r\n          ],\r\n        },\r\n      })\r\n      .then(res => {\r\n        return { status: 'success', message: 'Database Connection OK' };\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        if (err.data && err.data.message) {\r\n          return { status: 'error', message: err.data.message };\r\n        } else {\r\n          return { status: 'error', message: err.status };\r\n        }\r\n      });\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\nclass TestDataDatasource {\r\n  id: any;\r\n\r\n  /** @ngInject */\r\n  constructor(instanceSettings, private backendSrv, private $q) {\r\n    this.id = instanceSettings.id;\r\n  }\r\n\r\n  query(options) {\r\n    const queries = _.filter(options.targets, item => {\r\n      return item.hide !== true;\r\n    }).map(item => {\r\n      return {\r\n        refId: item.refId,\r\n        scenarioId: item.scenarioId,\r\n        intervalMs: options.intervalMs,\r\n        maxDataPoints: options.maxDataPoints,\r\n        stringInput: item.stringInput,\r\n        points: item.points,\r\n        alias: item.alias,\r\n        datasourceId: this.id,\r\n      };\r\n    });\r\n\r\n    if (queries.length === 0) {\r\n      return this.$q.when({ data: [] });\r\n    }\r\n\r\n    return this.backendSrv\r\n      .post('/api/tsdb/query', {\r\n        from: options.range.from.valueOf().toString(),\r\n        to: options.range.to.valueOf().toString(),\r\n        queries: queries,\r\n      })\r\n      .then(res => {\r\n        const data = [];\r\n\r\n        if (res.results) {\r\n          _.forEach(res.results, queryRes => {\r\n            for (const series of queryRes.series) {\r\n              data.push({\r\n                target: series.name,\r\n                datapoints: series.points,\r\n              });\r\n            }\r\n          });\r\n        }\r\n\r\n        return { data: data };\r\n      });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    return this.backendSrv.get('/api/annotations', {\r\n      from: options.range.from.valueOf(),\r\n      to: options.range.to.valueOf(),\r\n      limit: options.limit,\r\n      type: options.type,\r\n    });\r\n  }\r\n}\r\n\r\nexport { TestDataDatasource };\r\n","import _ from 'lodash';\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\n\r\nexport interface MssqlQuery {\r\n  refId: string;\r\n  format: string;\r\n  alias: string;\r\n  rawSql: string;\r\n}\r\n\r\nexport interface QueryMeta {\r\n  sql: string;\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n  $__timeEpoch(<time_column>),\r\n  <value column> as value,\r\n  <series name column> as metric\r\nFROM\r\n  <table name>\r\nWHERE\r\n  $__timeFilter(time_column)\r\nORDER BY\r\n  <time_column> ASC`;\r\n\r\nexport class MssqlQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  showLastQuerySQL: boolean;\r\n  formats: any[];\r\n  target: MssqlQuery;\r\n  lastQueryMeta: QueryMeta;\r\n  lastQueryError: string;\r\n  showHelp: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n\r\n    this.target.format = this.target.format || 'time_series';\r\n    this.target.alias = '';\r\n    this.formats = [{ text: 'Time series', value: 'time_series' }, { text: 'Table', value: 'table' }];\r\n\r\n    if (!this.target.rawSql) {\r\n      // special handling when in table panel\r\n      if (this.panelCtrl.panel.type === 'table') {\r\n        this.target.format = 'table';\r\n        this.target.rawSql = 'SELECT 1';\r\n      } else {\r\n        this.target.rawSql = defaultQuery;\r\n      }\r\n    }\r\n\r\n    this.panelCtrl.events.on('data-received', this.onDataReceived.bind(this), $scope);\r\n    this.panelCtrl.events.on('data-error', this.onDataError.bind(this), $scope);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.lastQueryMeta = null;\r\n    this.lastQueryError = null;\r\n\r\n    const anySeriesFromQuery = _.find(dataList, { refId: this.target.refId });\r\n    if (anySeriesFromQuery) {\r\n      this.lastQueryMeta = anySeriesFromQuery.meta;\r\n    }\r\n  }\r\n\r\n  onDataError(err) {\r\n    if (err.data && err.data.results) {\r\n      const queryRes = err.data.results[this.target.refId];\r\n      if (queryRes) {\r\n        this.lastQueryMeta = queryRes.meta;\r\n        this.lastQueryError = queryRes.error;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { MssqlDatasource } from './datasource';\r\nimport { MssqlQueryCtrl } from './query_ctrl';\r\n\r\nclass MssqlConfigCtrl {\r\n  static templateUrl = 'partials/config.html';\r\n}\r\n\r\nconst defaultQuery = `SELECT\r\n    <time_column> as time,\r\n    <text_column> as text,\r\n    <tags_column> as tags\r\n  FROM\r\n    <table name>\r\n  WHERE\r\n    $__timeFilter(time_column)\r\n  ORDER BY\r\n    <time_column> ASC`;\r\n\r\nclass MssqlAnnotationsQueryCtrl {\r\n  static templateUrl = 'partials/annotations.editor.html';\r\n\r\n  annotation: any;\r\n\r\n  /** @ngInject */\r\n  constructor() {\r\n    this.annotation.rawQuery = this.annotation.rawQuery || defaultQuery;\r\n  }\r\n}\r\n\r\nexport {\r\n  MssqlDatasource,\r\n  MssqlDatasource as Datasource,\r\n  MssqlQueryCtrl as QueryCtrl,\r\n  MssqlConfigCtrl as ConfigCtrl,\r\n  MssqlAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\n\r\nimport { QueryCtrl } from 'app/plugins/sdk';\r\nimport moment from 'moment';\r\n\r\nexport class TestDataQueryCtrl extends QueryCtrl {\r\n  static templateUrl = 'partials/query.editor.html';\r\n\r\n  scenarioList: any;\r\n  scenario: any;\r\n  newPointValue: number;\r\n  newPointTime: any;\r\n  selectedPoint: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private backendSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.target.scenarioId = this.target.scenarioId || 'random_walk';\r\n    this.scenarioList = [];\r\n    this.newPointTime = moment();\r\n    this.selectedPoint = { text: 'Select point', value: null };\r\n  }\r\n\r\n  getPoints() {\r\n    return _.map(this.target.points, (point, index) => {\r\n      return {\r\n        text: moment(point[1]).format('MMMM Do YYYY, H:mm:ss') + ' : ' + point[0],\r\n        value: index,\r\n      };\r\n    });\r\n  }\r\n\r\n  pointSelected(option) {\r\n    this.selectedPoint = option;\r\n  }\r\n\r\n  deletePoint() {\r\n    this.target.points.splice(this.selectedPoint.value, 1);\r\n    this.selectedPoint = { text: 'Select point', value: null };\r\n    this.refresh();\r\n  }\r\n\r\n  addPoint() {\r\n    this.target.points = this.target.points || [];\r\n    this.target.points.push([this.newPointValue, this.newPointTime.valueOf()]);\r\n    this.target.points = _.sortBy(this.target.points, p => p[1]);\r\n    this.refresh();\r\n  }\r\n\r\n  $onInit() {\r\n    return this.backendSrv.get('/api/tsdb/testdata/scenarios').then(res => {\r\n      this.scenarioList = res;\r\n      this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\r\n    });\r\n  }\r\n\r\n  scenarioChanged() {\r\n    this.scenario = _.find(this.scenarioList, { id: this.target.scenarioId });\r\n    this.target.stringInput = this.scenario.stringInput;\r\n\r\n    if (this.target.scenarioId === 'manual_entry') {\r\n      this.target.points = this.target.points || [];\r\n    } else {\r\n      delete this.target.points;\r\n    }\r\n\r\n    this.refresh();\r\n  }\r\n}\r\n","import { TestDataDatasource } from './datasource';\r\nimport { TestDataQueryCtrl } from './query_ctrl';\r\n\r\nclass TestDataAnnotationsQueryCtrl {\r\n  annotation: any;\r\n\r\n  constructor() {}\r\n\r\n  static template = '<h2>test data</h2>';\r\n}\r\n\r\nexport {\r\n  TestDataDatasource,\r\n  TestDataDatasource as Datasource,\r\n  TestDataQueryCtrl as QueryCtrl,\r\n  TestDataAnnotationsQueryCtrl as AnnotationsQueryCtrl,\r\n};\r\n","import _ from 'lodash';\r\nimport { PanelCtrl } from 'app/plugins/sdk';\r\nimport Remarkable from 'remarkable';\r\n\r\nexport class TextPanelCtrl extends PanelCtrl {\r\n  static templateUrl = `public/app/plugins/panel/text/module.html`;\r\n  static scrollable = true;\r\n\r\n  remarkable: any;\r\n  content: string;\r\n  // Set and populate defaults\r\n  panelDefaults = {\r\n    mode: 'markdown', // 'html', 'markdown', 'text'\r\n    content: '# title',\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private templateSrv, private $sce) {\r\n    super($scope, $injector);\r\n\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n    this.events.on('render', this.onRender.bind(this));\r\n\r\n    $scope.$watch(\r\n      'ctrl.panel.content',\r\n      _.throttle(() => {\r\n        this.render();\r\n      }, 1000)\r\n    );\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/app/plugins/panel/text/editor.html');\r\n    this.editorTabIndex = 1;\r\n\r\n    if (this.panel.mode === 'text') {\r\n      this.panel.mode = 'markdown';\r\n    }\r\n  }\r\n\r\n  onRefresh() {\r\n    this.render();\r\n  }\r\n\r\n  onRender() {\r\n    if (this.panel.mode === 'markdown') {\r\n      this.renderMarkdown(this.panel.content);\r\n    } else if (this.panel.mode === 'html') {\r\n      this.updateContent(this.panel.content);\r\n    }\r\n    this.renderingCompleted();\r\n  }\r\n\r\n  renderText(content) {\r\n    content = content\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/\\n/g, '<br/>');\r\n    this.updateContent(content);\r\n  }\r\n\r\n  renderMarkdown(content) {\r\n    if (!this.remarkable) {\r\n      this.remarkable = new Remarkable();\r\n    }\r\n\r\n    this.$scope.$applyAsync(() => {\r\n      this.updateContent(this.remarkable.render(content));\r\n    });\r\n  }\r\n\r\n  updateContent(html) {\r\n    try {\r\n      this.content = this.$sce.trustAsHtml(this.templateSrv.replace(html, this.panel.scopedVars));\r\n    } catch (e) {\r\n      console.log('Text panel error: ', e);\r\n      this.content = this.$sce.trustAsHtml(html);\r\n    }\r\n  }\r\n}\r\n\r\nexport { TextPanelCtrl as PanelCtrl };\r\n","import angular from 'angular';\r\nimport $ from 'jquery';\r\nimport _ from 'lodash';\r\nimport Drop from 'tether-drop';\r\n\r\n/** @ngInject */\r\nexport function createAnnotationToolip(element, event, plot) {\r\n  const injector = angular.element(document).injector();\r\n  const content = document.createElement('div');\r\n  content.innerHTML = '<annotation-tooltip event=\"event\" on-edit=\"onEdit()\"></annotation-tooltip>';\r\n\r\n  injector.invoke([\r\n    '$compile',\r\n    '$rootScope',\r\n    function($compile, $rootScope) {\r\n      const eventManager = plot.getOptions().events.manager;\r\n      const tmpScope = $rootScope.$new(true);\r\n      tmpScope.event = event;\r\n      tmpScope.onEdit = function() {\r\n        eventManager.editEvent(event);\r\n      };\r\n\r\n      $compile(content)(tmpScope);\r\n      tmpScope.$digest();\r\n      tmpScope.$destroy();\r\n\r\n      const drop = new Drop({\r\n        target: element[0],\r\n        content: content,\r\n        position: 'bottom center',\r\n        classes: 'drop-popover drop-popover--annotation',\r\n        openOn: 'hover',\r\n        hoverCloseDelay: 200,\r\n        tetherOptions: {\r\n          constraints: [{ to: 'window', pin: true, attachment: 'both' }],\r\n        },\r\n      });\r\n\r\n      drop.open();\r\n\r\n      drop.on('close', function() {\r\n        setTimeout(function() {\r\n          drop.destroy();\r\n        });\r\n      });\r\n    },\r\n  ]);\r\n}\r\n\r\nlet markerElementToAttachTo = null;\r\n\r\n/** @ngInject */\r\nexport function createEditPopover(element, event, plot) {\r\n  const eventManager = plot.getOptions().events.manager;\r\n  if (eventManager.editorOpen) {\r\n    // update marker element to attach to (needed in case of legend on the right\r\n    // when there is a double render pass and the inital marker element is removed)\r\n    markerElementToAttachTo = element;\r\n    return;\r\n  }\r\n\r\n  // mark as openend\r\n  eventManager.editorOpened();\r\n  // set marker elment to attache to\r\n  markerElementToAttachTo = element;\r\n\r\n  // wait for element to be attached and positioned\r\n  setTimeout(function() {\r\n    const injector = angular.element(document).injector();\r\n    const content = document.createElement('div');\r\n    content.innerHTML = '<event-editor panel-ctrl=\"panelCtrl\" event=\"event\" close=\"close()\"></event-editor>';\r\n\r\n    injector.invoke([\r\n      '$compile',\r\n      '$rootScope',\r\n      function($compile, $rootScope) {\r\n        const scope = $rootScope.$new(true);\r\n        let drop;\r\n\r\n        scope.event = event;\r\n        scope.panelCtrl = eventManager.panelCtrl;\r\n        scope.close = function() {\r\n          drop.close();\r\n        };\r\n\r\n        $compile(content)(scope);\r\n        scope.$digest();\r\n\r\n        drop = new Drop({\r\n          target: markerElementToAttachTo[0],\r\n          content: content,\r\n          position: 'bottom center',\r\n          classes: 'drop-popover drop-popover--form',\r\n          openOn: 'click',\r\n          tetherOptions: {\r\n            constraints: [{ to: 'window', pin: true, attachment: 'both' }],\r\n          },\r\n        });\r\n\r\n        drop.open();\r\n        eventManager.editorOpened();\r\n\r\n        drop.on('close', function() {\r\n          // need timeout here in order call drop.destroy\r\n          setTimeout(function() {\r\n            eventManager.editorClosed();\r\n            scope.$destroy();\r\n            drop.destroy();\r\n          });\r\n        });\r\n      },\r\n    ]);\r\n  }, 100);\r\n}\r\n\r\n/*\r\n * jquery.flot.events\r\n *\r\n * description: Flot plugin for adding events/markers to the plot\r\n * version: 0.2.5\r\n * authors:\r\n *    Alexander Wunschik <alex@wunschik.net>\r\n *    Joel Oughton <joeloughton@gmail.com>\r\n *    Nicolas Joseph <www.nicolasjoseph.com>\r\n *\r\n * website: https://github.com/mojoaxel/flot-events\r\n *\r\n * released under MIT License and GPLv2+\r\n */\r\n\r\n/**\r\n * A class that allows for the drawing an remove of some object\r\n */\r\nexport class DrawableEvent {\r\n  _object: any;\r\n  _drawFunc: any;\r\n  _clearFunc: any;\r\n  _moveFunc: any;\r\n  _position: any;\r\n  _width: any;\r\n  _height: any;\r\n\r\n  /** @ngInject */\r\n  constructor(object, drawFunc, clearFunc, moveFunc, left, top, width, height) {\r\n    this._object = object;\r\n    this._drawFunc = drawFunc;\r\n    this._clearFunc = clearFunc;\r\n    this._moveFunc = moveFunc;\r\n    this._position = { left: left, top: top };\r\n    this._width = width;\r\n    this._height = height;\r\n  }\r\n\r\n  width() {\r\n    return this._width;\r\n  }\r\n  height() {\r\n    return this._height;\r\n  }\r\n  position() {\r\n    return this._position;\r\n  }\r\n  draw() {\r\n    this._drawFunc(this._object);\r\n  }\r\n  clear() {\r\n    this._clearFunc(this._object);\r\n  }\r\n  getObject() {\r\n    return this._object;\r\n  }\r\n  moveTo(position) {\r\n    this._position = position;\r\n    this._moveFunc(this._object, this._position);\r\n  }\r\n}\r\n\r\n/**\r\n * Event class that stores options (eventType, min, max, title, description) and the object to draw.\r\n */\r\nexport class VisualEvent {\r\n  _parent: any;\r\n  _options: any;\r\n  _drawableEvent: any;\r\n  _hidden: any;\r\n\r\n  /** @ngInject */\r\n  constructor(options, drawableEvent) {\r\n    this._options = options;\r\n    this._drawableEvent = drawableEvent;\r\n    this._hidden = false;\r\n  }\r\n\r\n  visual() {\r\n    return this._drawableEvent;\r\n  }\r\n  getOptions() {\r\n    return this._options;\r\n  }\r\n  getParent() {\r\n    return this._parent;\r\n  }\r\n  isHidden() {\r\n    return this._hidden;\r\n  }\r\n  hide() {\r\n    this._hidden = true;\r\n  }\r\n  unhide() {\r\n    this._hidden = false;\r\n  }\r\n}\r\n\r\n/**\r\n * A Class that handles the event-markers inside the given plot\r\n */\r\nexport class EventMarkers {\r\n  _events: any;\r\n  _types: any;\r\n  _plot: any;\r\n  eventsEnabled: any;\r\n\r\n  /** @ngInject */\r\n  constructor(plot) {\r\n    this._events = [];\r\n    this._types = [];\r\n    this._plot = plot;\r\n    this.eventsEnabled = false;\r\n  }\r\n\r\n  getEvents() {\r\n    return this._events;\r\n  }\r\n\r\n  setTypes(types) {\r\n    return (this._types = types);\r\n  }\r\n\r\n  /**\r\n   * create internal objects for the given events\r\n   */\r\n  setupEvents(events) {\r\n    const parts = _.partition(events, 'isRegion');\r\n    const regions = parts[0];\r\n    events = parts[1];\r\n\r\n    $.each(events, (index, event) => {\r\n      const ve = new VisualEvent(event, this._buildDiv(event));\r\n      this._events.push(ve);\r\n    });\r\n\r\n    $.each(regions, (index, event) => {\r\n      const vre = new VisualEvent(event, this._buildRegDiv(event));\r\n      this._events.push(vre);\r\n    });\r\n\r\n    this._events.sort((a, b) => {\r\n      const ao = a.getOptions(),\r\n        bo = b.getOptions();\r\n      if (ao.min > bo.min) {\r\n        return 1;\r\n      }\r\n      if (ao.min < bo.min) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * draw the events to the plot\r\n   */\r\n  drawEvents() {\r\n    // var o = this._plot.getPlotOffset();\r\n\r\n    $.each(this._events, (index, event) => {\r\n      // check event is inside the graph range\r\n      if (this._insidePlot(event.getOptions().min) && !event.isHidden()) {\r\n        event.visual().draw();\r\n      } else {\r\n        event\r\n          .visual()\r\n          .getObject()\r\n          .hide();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * update the position of the event-markers (e.g. after scrolling or zooming)\r\n   */\r\n  updateEvents() {\r\n    const o = this._plot.getPlotOffset();\r\n    let left;\r\n    let top;\r\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\r\n\r\n    $.each(this._events, (index, event) => {\r\n      top = o.top + this._plot.height() - event.visual().height();\r\n      left = xaxis.p2c(event.getOptions().min) + o.left - event.visual().width() / 2;\r\n      event.visual().moveTo({ top: top, left: left });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * remove all events from the plot\r\n   */\r\n  _clearEvents() {\r\n    $.each(this._events, (index, val) => {\r\n      val.visual().clear();\r\n    });\r\n    this._events = [];\r\n  }\r\n\r\n  /**\r\n   * create a DOM element for the given event\r\n   */\r\n  _buildDiv(event) {\r\n    const that = this;\r\n\r\n    const container = this._plot.getPlaceholder();\r\n    const o = this._plot.getPlotOffset();\r\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\r\n    let top, left, color, markerSize, markerShow, lineStyle, lineWidth;\r\n    let markerTooltip;\r\n\r\n    // map the eventType to a types object\r\n    const eventTypeId = event.eventType;\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\r\n      color = '#666';\r\n    } else {\r\n      color = this._types[eventTypeId].color;\r\n    }\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].markerSize) {\r\n      markerSize = 8; //default marker size\r\n    } else {\r\n      markerSize = this._types[eventTypeId].markerSize;\r\n    }\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerShow === undefined) {\r\n      markerShow = true;\r\n    } else {\r\n      markerShow = this._types[eventTypeId].markerShow;\r\n    }\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\r\n      markerTooltip = true;\r\n    } else {\r\n      markerTooltip = this._types[eventTypeId].markerTooltip;\r\n    }\r\n\r\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\r\n      lineStyle = 'dashed'; //default line style\r\n    } else {\r\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\r\n    }\r\n\r\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\r\n      lineWidth = 1; //default line width\r\n    } else {\r\n      lineWidth = this._types[eventTypeId].lineWidth;\r\n    }\r\n\r\n    let topOffset = xaxis.options.eventSectionHeight || 0;\r\n    topOffset = topOffset / 3;\r\n\r\n    top = o.top + this._plot.height() + topOffset;\r\n    left = xaxis.p2c(event.min) + o.left;\r\n\r\n    const line = $('<div class=\"events_line flot-temp-elem\"></div>')\r\n      .css({\r\n        position: 'absolute',\r\n        opacity: 0.8,\r\n        left: left + 'px',\r\n        top: 8,\r\n        width: lineWidth + 'px',\r\n        height: this._plot.height() + topOffset * 0.8,\r\n        'border-left-width': lineWidth + 'px',\r\n        'border-left-style': lineStyle,\r\n        'border-left-color': color,\r\n        color: color,\r\n      })\r\n      .appendTo(container);\r\n\r\n    if (markerShow) {\r\n      const marker = $('<div class=\"events_marker\"></div>').css({\r\n        position: 'absolute',\r\n        left: -markerSize - Math.round(lineWidth / 2) + 'px',\r\n        'font-size': 0,\r\n        'line-height': 0,\r\n        width: 0,\r\n        height: 0,\r\n        'border-left': markerSize + 'px solid transparent',\r\n        'border-right': markerSize + 'px solid transparent',\r\n      });\r\n\r\n      marker.appendTo(line);\r\n\r\n      if (\r\n        this._types[eventTypeId] &&\r\n        this._types[eventTypeId].position &&\r\n        this._types[eventTypeId].position.toUpperCase() === 'BOTTOM'\r\n      ) {\r\n        marker.css({\r\n          top: top - markerSize - 8 + 'px',\r\n          'border-top': 'none',\r\n          'border-bottom': markerSize + 'px solid ' + color,\r\n        });\r\n      } else {\r\n        marker.css({\r\n          top: '0px',\r\n          'border-top': markerSize + 'px solid ' + color,\r\n          'border-bottom': 'none',\r\n        });\r\n      }\r\n\r\n      marker.data({\r\n        event: event,\r\n      });\r\n\r\n      const mouseenter = function(this: any) {\r\n        createAnnotationToolip(marker, $(this).data('event'), that._plot);\r\n      };\r\n\r\n      if (event.editModel) {\r\n        createEditPopover(marker, event.editModel, that._plot);\r\n      }\r\n\r\n      const mouseleave = function() {\r\n        that._plot.clearSelection();\r\n      };\r\n\r\n      if (markerTooltip) {\r\n        marker.css({ cursor: 'help' });\r\n        marker.hover(mouseenter, mouseleave);\r\n      }\r\n    }\r\n\r\n    const drawableEvent = new DrawableEvent(\r\n      line,\r\n      function drawFunc(obj) {\r\n        obj.show();\r\n      },\r\n      function(obj) {\r\n        obj.remove();\r\n      },\r\n      function(obj, position) {\r\n        obj.css({\r\n          top: position.top,\r\n          left: position.left,\r\n        });\r\n      },\r\n      left,\r\n      top,\r\n      line.width(),\r\n      line.height()\r\n    );\r\n\r\n    return drawableEvent;\r\n  }\r\n\r\n  /**\r\n   * create a DOM element for the given region\r\n   */\r\n  _buildRegDiv(event) {\r\n    const that = this;\r\n\r\n    const container = this._plot.getPlaceholder();\r\n    const o = this._plot.getPlotOffset();\r\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\r\n    let top, left, lineWidth, regionWidth, lineStyle, color, markerTooltip;\r\n\r\n    // map the eventType to a types object\r\n    const eventTypeId = event.eventType;\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || !this._types[eventTypeId].color) {\r\n      color = '#666';\r\n    } else {\r\n      color = this._types[eventTypeId].color;\r\n    }\r\n\r\n    if (this._types === null || !this._types[eventTypeId] || this._types[eventTypeId].markerTooltip === undefined) {\r\n      markerTooltip = true;\r\n    } else {\r\n      markerTooltip = this._types[eventTypeId].markerTooltip;\r\n    }\r\n\r\n    if (this._types == null || !this._types[eventTypeId] || this._types[eventTypeId].lineWidth === undefined) {\r\n      lineWidth = 1; //default line width\r\n    } else {\r\n      lineWidth = this._types[eventTypeId].lineWidth;\r\n    }\r\n\r\n    if (this._types == null || !this._types[eventTypeId] || !this._types[eventTypeId].lineStyle) {\r\n      lineStyle = 'dashed'; //default line style\r\n    } else {\r\n      lineStyle = this._types[eventTypeId].lineStyle.toLowerCase();\r\n    }\r\n\r\n    const topOffset = 2;\r\n    top = o.top + this._plot.height() + topOffset;\r\n\r\n    const timeFrom = Math.min(event.min, event.timeEnd);\r\n    const timeTo = Math.max(event.min, event.timeEnd);\r\n    left = xaxis.p2c(timeFrom) + o.left;\r\n    const right = xaxis.p2c(timeTo) + o.left;\r\n    regionWidth = right - left;\r\n\r\n    _.each([left, right], position => {\r\n      const line = $('<div class=\"events_line flot-temp-elem\"></div>').css({\r\n        position: 'absolute',\r\n        opacity: 0.8,\r\n        left: position + 'px',\r\n        top: 8,\r\n        width: lineWidth + 'px',\r\n        height: this._plot.height() + topOffset,\r\n        'border-left-width': lineWidth + 'px',\r\n        'border-left-style': lineStyle,\r\n        'border-left-color': color,\r\n        color: color,\r\n      });\r\n      line.appendTo(container);\r\n    });\r\n\r\n    const region = $('<div class=\"events_marker region_marker flot-temp-elem\"></div>').css({\r\n      position: 'absolute',\r\n      opacity: 0.5,\r\n      left: left + 'px',\r\n      top: top,\r\n      width: Math.round(regionWidth + lineWidth) + 'px',\r\n      height: '0.5rem',\r\n      'border-left-color': color,\r\n      color: color,\r\n      'background-color': color,\r\n    });\r\n    region.appendTo(container);\r\n\r\n    region.data({\r\n      event: event,\r\n    });\r\n\r\n    const mouseenter = function(this: any) {\r\n      createAnnotationToolip(region, $(this).data('event'), that._plot);\r\n    };\r\n\r\n    if (event.editModel) {\r\n      createEditPopover(region, event.editModel, that._plot);\r\n    }\r\n\r\n    const mouseleave = function() {\r\n      that._plot.clearSelection();\r\n    };\r\n\r\n    if (markerTooltip) {\r\n      region.css({ cursor: 'help' });\r\n      region.hover(mouseenter, mouseleave);\r\n    }\r\n\r\n    const drawableEvent = new DrawableEvent(\r\n      region,\r\n      function drawFunc(obj) {\r\n        obj.show();\r\n      },\r\n      function(obj) {\r\n        obj.remove();\r\n      },\r\n      function(obj, position) {\r\n        obj.css({\r\n          top: position.top,\r\n          left: position.left,\r\n        });\r\n      },\r\n      left,\r\n      top,\r\n      region.width(),\r\n      region.height()\r\n    );\r\n\r\n    return drawableEvent;\r\n  }\r\n\r\n  /**\r\n   * check if the event is inside visible range\r\n   */\r\n  _insidePlot(x) {\r\n    const xaxis = this._plot.getXAxes()[this._plot.getOptions().events.xaxis - 1];\r\n    const xc = xaxis.p2c(x);\r\n    return xc > 0 && xc < xaxis.p2c(xaxis.max);\r\n  }\r\n}\r\n\r\n/**\r\n * initialize the plugin for the given plot\r\n */\r\n\r\n/** @ngInject */\r\nexport function init(this: any, plot) {\r\n  /*jshint validthis:true */\r\n  const that = this;\r\n  const eventMarkers = new EventMarkers(plot);\r\n\r\n  plot.getEvents = function() {\r\n    return eventMarkers._events;\r\n  };\r\n\r\n  plot.hideEvents = function() {\r\n    $.each(eventMarkers._events, (index, event) => {\r\n      event\r\n        .visual()\r\n        .getObject()\r\n        .hide();\r\n    });\r\n  };\r\n\r\n  plot.showEvents = function() {\r\n    plot.hideEvents();\r\n    $.each(eventMarkers._events, (index, event) => {\r\n      event.hide();\r\n    });\r\n\r\n    that.eventMarkers.drawEvents();\r\n  };\r\n\r\n  // change events on an existing plot\r\n  plot.setEvents = function(events) {\r\n    if (eventMarkers.eventsEnabled) {\r\n      eventMarkers.setupEvents(events);\r\n    }\r\n  };\r\n\r\n  plot.hooks.processOptions.push(function(plot, options) {\r\n    // enable the plugin\r\n    if (options.events.data != null) {\r\n      eventMarkers.eventsEnabled = true;\r\n    }\r\n  });\r\n\r\n  plot.hooks.draw.push(function(plot) {\r\n    const options = plot.getOptions();\r\n\r\n    if (eventMarkers.eventsEnabled) {\r\n      // check for first run\r\n      if (eventMarkers.getEvents().length < 1) {\r\n        eventMarkers.setTypes(options.events.types);\r\n        eventMarkers.setupEvents(options.events.data);\r\n      } else {\r\n        eventMarkers.updateEvents();\r\n      }\r\n    }\r\n\r\n    eventMarkers.drawEvents();\r\n  });\r\n}\r\n\r\nconst defaultOptions = {\r\n  events: {\r\n    data: null,\r\n    types: null,\r\n    xaxis: 1,\r\n    position: 'BOTTOM',\r\n  },\r\n};\r\n\r\n$.plot.plugins.push({\r\n  init: init,\r\n  options: defaultOptions,\r\n  name: 'events',\r\n  version: '0.2.5',\r\n});\r\n","import $ from 'jquery';\r\nimport { appEvents } from 'app/core/core';\r\n\r\nexport default function GraphTooltip(this: any, elem, dashboard, scope, getSeriesFn) {\r\n  const self = this;\r\n  const ctrl = scope.ctrl;\r\n  const panel = ctrl.panel;\r\n\r\n  const $tooltip = $('<div class=\"graph-tooltip\">');\r\n\r\n  this.destroy = function() {\r\n    $tooltip.remove();\r\n  };\r\n\r\n  this.findHoverIndexFromDataPoints = function(posX, series, last) {\r\n    const ps = series.datapoints.pointsize;\r\n    const initial = last * ps;\r\n    const len = series.datapoints.points.length;\r\n    let j;\r\n    for (j = initial; j < len; j += ps) {\r\n      // Special case of a non stepped line, highlight the very last point just before a null point\r\n      if (\r\n        (!series.lines.steps && series.datapoints.points[initial] != null && series.datapoints.points[j] == null) ||\r\n        //normal case\r\n        series.datapoints.points[j] > posX\r\n      ) {\r\n        return Math.max(j - ps, 0) / ps;\r\n      }\r\n    }\r\n    return j / ps - 1;\r\n  };\r\n\r\n  this.findHoverIndexFromData = function(posX, series) {\r\n    let lower = 0;\r\n    let upper = series.data.length - 1;\r\n    let middle;\r\n    while (true) {\r\n      if (lower > upper) {\r\n        return Math.max(upper, 0);\r\n      }\r\n      middle = Math.floor((lower + upper) / 2);\r\n      if (series.data[middle][0] === posX) {\r\n        return middle;\r\n      } else if (series.data[middle][0] < posX) {\r\n        lower = middle + 1;\r\n      } else {\r\n        upper = middle - 1;\r\n      }\r\n    }\r\n  };\r\n\r\n  this.renderAndShow = function(absoluteTime, innerHtml, pos, xMode) {\r\n    if (xMode === 'time') {\r\n      innerHtml = '<div class=\"graph-tooltip-time\">' + absoluteTime + '</div>' + innerHtml;\r\n    }\r\n    $tooltip.html(innerHtml).place_tt(pos.pageX + 20, pos.pageY);\r\n  };\r\n\r\n  this.getMultiSeriesPlotHoverInfo = function(seriesList, pos) {\r\n    let value, i, series, hoverIndex, hoverDistance, pointTime, yaxis;\r\n    // 3 sub-arrays, 1st for hidden series, 2nd for left yaxis, 3rd for right yaxis.\r\n    let results: any = [[], [], []];\r\n\r\n    //now we know the current X (j) position for X and Y values\r\n    let lastValue = 0; //needed for stacked values\r\n\r\n    let minDistance, minTime;\r\n\r\n    for (i = 0; i < seriesList.length; i++) {\r\n      series = seriesList[i];\r\n\r\n      if (!series.data.length || (panel.legend.hideEmpty && series.allIsNull)) {\r\n        // Init value so that it does not brake series sorting\r\n        results[0].push({ hidden: true, value: 0 });\r\n        continue;\r\n      }\r\n\r\n      if (!series.data.length || (panel.legend.hideZero && series.allIsZero)) {\r\n        // Init value so that it does not brake series sorting\r\n        results[0].push({ hidden: true, value: 0 });\r\n        continue;\r\n      }\r\n\r\n      if (series.hideTooltip) {\r\n        results[0].push({ hidden: true, value: 0 });\r\n        continue;\r\n      }\r\n\r\n      hoverIndex = this.findHoverIndexFromData(pos.x, series);\r\n      hoverDistance = pos.x - series.data[hoverIndex][0];\r\n      pointTime = series.data[hoverIndex][0];\r\n\r\n      // Take the closest point before the cursor, or if it does not exist, the closest after\r\n      if (\r\n        !minDistance ||\r\n        (hoverDistance >= 0 && (hoverDistance < minDistance || minDistance < 0)) ||\r\n        (hoverDistance < 0 && hoverDistance > minDistance)\r\n      ) {\r\n        minDistance = hoverDistance;\r\n        minTime = pointTime;\r\n      }\r\n\r\n      if (series.stack) {\r\n        if (panel.tooltip.value_type === 'individual') {\r\n          value = series.data[hoverIndex][1];\r\n        } else if (!series.stack) {\r\n          value = series.data[hoverIndex][1];\r\n        } else {\r\n          lastValue += series.data[hoverIndex][1];\r\n          value = lastValue;\r\n        }\r\n      } else {\r\n        value = series.data[hoverIndex][1];\r\n      }\r\n\r\n      // Highlighting multiple Points depending on the plot type\r\n      if (series.lines.steps || series.stack) {\r\n        // stacked and steppedLine plots can have series with different length.\r\n        // Stacked series can increase its length on each new stacked serie if null points found,\r\n        // to speed the index search we begin always on the last found hoverIndex.\r\n        hoverIndex = this.findHoverIndexFromDataPoints(pos.x, series, hoverIndex);\r\n      }\r\n\r\n      // Be sure we have a yaxis so that it does not brake series sorting\r\n      yaxis = 0;\r\n      if (series.yaxis) {\r\n        yaxis = series.yaxis.n;\r\n      }\r\n\r\n      results[yaxis].push({\r\n        value: value,\r\n        hoverIndex: hoverIndex,\r\n        color: series.color,\r\n        label: series.aliasEscaped,\r\n        time: pointTime,\r\n        distance: hoverDistance,\r\n        index: i,\r\n      });\r\n    }\r\n\r\n    // Contat the 3 sub-arrays\r\n    results = results[0].concat(results[1], results[2]);\r\n\r\n    // Time of the point closer to pointer\r\n    results.time = minTime;\r\n\r\n    return results;\r\n  };\r\n\r\n  elem.mouseleave(function() {\r\n    if (panel.tooltip.shared) {\r\n      const plot = elem.data().plot;\r\n      if (plot) {\r\n        $tooltip.detach();\r\n        plot.unhighlight();\r\n      }\r\n    }\r\n    appEvents.emit('graph-hover-clear');\r\n  });\r\n\r\n  elem.bind('plothover', function(event, pos, item) {\r\n    self.show(pos, item);\r\n\r\n    // broadcast to other graph panels that we are hovering!\r\n    pos.panelRelY = (pos.pageY - elem.offset().top) / elem.height();\r\n    appEvents.emit('graph-hover', { pos: pos, panel: panel });\r\n  });\r\n\r\n  elem.bind('plotclick', function(event, pos, item) {\r\n    appEvents.emit('graph-click', { pos: pos, panel: panel, item: item });\r\n  });\r\n\r\n  this.clear = function(plot) {\r\n    $tooltip.detach();\r\n    plot.clearCrosshair();\r\n    plot.unhighlight();\r\n  };\r\n\r\n  this.show = function(pos, item) {\r\n    const plot = elem.data().plot;\r\n    const plotData = plot.getData();\r\n    const xAxes = plot.getXAxes();\r\n    const xMode = xAxes[0].options.mode;\r\n    const seriesList = getSeriesFn();\r\n    let allSeriesMode = panel.tooltip.shared;\r\n    let group, value, absoluteTime, hoverInfo, i, series, seriesHtml, tooltipFormat;\r\n\r\n    // if panelRelY is defined another panel wants us to show a tooltip\r\n    // get pageX from position on x axis and pageY from relative position in original panel\r\n    if (pos.panelRelY) {\r\n      const pointOffset = plot.pointOffset({ x: pos.x });\r\n      if (Number.isNaN(pointOffset.left) || pointOffset.left < 0 || pointOffset.left > elem.width()) {\r\n        self.clear(plot);\r\n        return;\r\n      }\r\n      pos.pageX = elem.offset().left + pointOffset.left;\r\n      pos.pageY = elem.offset().top + elem.height() * pos.panelRelY;\r\n      const isVisible =\r\n        pos.pageY >= $(window).scrollTop() && pos.pageY <= $(window).innerHeight() + $(window).scrollTop();\r\n      if (!isVisible) {\r\n        self.clear(plot);\r\n        return;\r\n      }\r\n      plot.setCrosshair(pos);\r\n      allSeriesMode = true;\r\n\r\n      if (dashboard.sharedCrosshairModeOnly()) {\r\n        // if only crosshair mode we are done\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (seriesList.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (seriesList[0].hasMsResolution) {\r\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss.SSS';\r\n    } else {\r\n      tooltipFormat = 'YYYY-MM-DD HH:mm:ss';\r\n    }\r\n\r\n    if (allSeriesMode) {\r\n      plot.unhighlight();\r\n\r\n      const seriesHoverInfo = self.getMultiSeriesPlotHoverInfo(plotData, pos);\r\n\r\n      seriesHtml = '';\r\n\r\n      absoluteTime = dashboard.formatDate(seriesHoverInfo.time, tooltipFormat);\r\n\r\n      // Dynamically reorder the hovercard for the current time point if the\r\n      // option is enabled.\r\n      if (panel.tooltip.sort === 2) {\r\n        seriesHoverInfo.sort(function(a, b) {\r\n          return b.value - a.value;\r\n        });\r\n      } else if (panel.tooltip.sort === 1) {\r\n        seriesHoverInfo.sort(function(a, b) {\r\n          return a.value - b.value;\r\n        });\r\n      }\r\n\r\n      for (i = 0; i < seriesHoverInfo.length; i++) {\r\n        hoverInfo = seriesHoverInfo[i];\r\n\r\n        if (hoverInfo.hidden) {\r\n          continue;\r\n        }\r\n\r\n        let highlightClass = '';\r\n        if (item && hoverInfo.index === item.seriesIndex) {\r\n          highlightClass = 'graph-tooltip-list-item--highlight';\r\n        }\r\n\r\n        series = seriesList[hoverInfo.index];\r\n\r\n        value = series.formatValue(hoverInfo.value);\r\n\r\n        seriesHtml +=\r\n          '<div class=\"graph-tooltip-list-item ' + highlightClass + '\"><div class=\"graph-tooltip-series-name\">';\r\n        seriesHtml +=\r\n          '<i class=\"fa fa-minus\" style=\"color:' + hoverInfo.color + ';\"></i> ' + hoverInfo.label + ':</div>';\r\n        seriesHtml += '<div class=\"graph-tooltip-value\">' + value + '</div></div>';\r\n        plot.highlight(hoverInfo.index, hoverInfo.hoverIndex);\r\n      }\r\n\r\n      self.renderAndShow(absoluteTime, seriesHtml, pos, xMode);\r\n    } else if (item) {\r\n      // single series tooltip\r\n      series = seriesList[item.seriesIndex];\r\n      group = '<div class=\"graph-tooltip-list-item\"><div class=\"graph-tooltip-series-name\">';\r\n      group +=\r\n        '<i class=\"fa fa-minus\" style=\"color:' + item.series.color + ';\"></i> ' + series.aliasEscaped + ':</div>';\r\n\r\n      if (panel.stack && panel.tooltip.value_type === 'individual') {\r\n        value = item.datapoint[1] - item.datapoint[2];\r\n      } else {\r\n        value = item.datapoint[1];\r\n      }\r\n\r\n      value = series.formatValue(value);\r\n\r\n      absoluteTime = dashboard.formatDate(item.datapoint[0], tooltipFormat);\r\n\r\n      group += '<div class=\"graph-tooltip-value\">' + value + '</div>';\r\n\r\n      self.renderAndShow(absoluteTime, group, pos, xMode);\r\n    } else {\r\n      // no hit\r\n      $tooltip.detach();\r\n    }\r\n  };\r\n}\r\n","import 'vendor/flot/jquery.flot';\r\nimport $ from 'jquery';\r\nimport _ from 'lodash';\r\n\r\nexport class ThresholdManager {\r\n  plot: any;\r\n  placeholder: any;\r\n  height: any;\r\n  thresholds: any;\r\n  needsCleanup: boolean;\r\n  hasSecondYAxis: any;\r\n\r\n  constructor(private panelCtrl) {}\r\n\r\n  getHandleHtml(handleIndex, model, valueStr) {\r\n    let stateClass = model.colorMode;\r\n    if (model.colorMode === 'custom') {\r\n      stateClass = 'critical';\r\n    }\r\n\r\n    return `\r\n    <div class=\"alert-handle-wrapper alert-handle-wrapper--T${handleIndex}\">\r\n      <div class=\"alert-handle-line alert-handle-line--${stateClass}\">\r\n      </div>\r\n      <div class=\"alert-handle\" data-handle-index=\"${handleIndex}\">\r\n        <i class=\"icon-gf icon-gf-${stateClass} alert-state-${stateClass}\"></i>\r\n        <span class=\"alert-handle-value\">${valueStr}<i class=\"alert-handle-grip\"></i></span>\r\n      </div>\r\n    </div>`;\r\n  }\r\n\r\n  initDragging(evt) {\r\n    const handleElem = $(evt.currentTarget).parents('.alert-handle-wrapper');\r\n    const handleIndex = $(evt.currentTarget).data('handleIndex');\r\n\r\n    let lastY = null;\r\n    let posTop;\r\n    const plot = this.plot;\r\n    const panelCtrl = this.panelCtrl;\r\n    const model = this.thresholds[handleIndex];\r\n\r\n    function dragging(evt) {\r\n      if (lastY === null) {\r\n        lastY = evt.clientY;\r\n      } else {\r\n        const diff = evt.clientY - lastY;\r\n        posTop = posTop + diff;\r\n        lastY = evt.clientY;\r\n        handleElem.css({ top: posTop + diff });\r\n      }\r\n    }\r\n\r\n    function stopped() {\r\n      // calculate graph level\r\n      let graphValue = plot.c2p({ left: 0, top: posTop }).y;\r\n      graphValue = parseInt(graphValue.toFixed(0));\r\n      model.value = graphValue;\r\n\r\n      handleElem.off('mousemove', dragging);\r\n      handleElem.off('mouseup', dragging);\r\n      handleElem.off('mouseleave', dragging);\r\n\r\n      // trigger digest and render\r\n      panelCtrl.$scope.$apply(function() {\r\n        panelCtrl.render();\r\n        panelCtrl.events.emit('threshold-changed', {\r\n          threshold: model,\r\n          handleIndex: handleIndex,\r\n        });\r\n      });\r\n    }\r\n\r\n    lastY = null;\r\n    posTop = handleElem.position().top;\r\n\r\n    handleElem.on('mousemove', dragging);\r\n    handleElem.on('mouseup', stopped);\r\n    handleElem.on('mouseleave', stopped);\r\n  }\r\n\r\n  cleanUp() {\r\n    this.placeholder.find('.alert-handle-wrapper').remove();\r\n    this.needsCleanup = false;\r\n  }\r\n\r\n  renderHandle(handleIndex, defaultHandleTopPos) {\r\n    const model = this.thresholds[handleIndex];\r\n    const value = model.value;\r\n    let valueStr = value;\r\n    let handleTopPos = 0;\r\n\r\n    // handle no value\r\n    if (!_.isNumber(value)) {\r\n      valueStr = '';\r\n      handleTopPos = defaultHandleTopPos;\r\n    } else {\r\n      const valueCanvasPos = this.plot.p2c({ x: 0, y: value });\r\n      handleTopPos = Math.round(Math.min(Math.max(valueCanvasPos.top, 0), this.height) - 6);\r\n    }\r\n\r\n    const handleElem = $(this.getHandleHtml(handleIndex, model, valueStr));\r\n    this.placeholder.append(handleElem);\r\n\r\n    handleElem.toggleClass('alert-handle-wrapper--no-value', valueStr === '');\r\n    handleElem.css({ top: handleTopPos });\r\n  }\r\n\r\n  shouldDrawHandles() {\r\n    return !this.hasSecondYAxis && this.panelCtrl.editingThresholds && this.panelCtrl.panel.thresholds.length > 0;\r\n  }\r\n\r\n  prepare(elem, data) {\r\n    this.hasSecondYAxis = false;\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (data[i].yaxis > 1) {\r\n        this.hasSecondYAxis = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (this.shouldDrawHandles()) {\r\n      const thresholdMargin = this.panelCtrl.panel.thresholds.length > 1 ? '220px' : '110px';\r\n      elem.css('margin-right', thresholdMargin);\r\n    } else if (this.needsCleanup) {\r\n      elem.css('margin-right', '0');\r\n    }\r\n  }\r\n\r\n  draw(plot) {\r\n    this.thresholds = this.panelCtrl.panel.thresholds;\r\n    this.plot = plot;\r\n    this.placeholder = plot.getPlaceholder();\r\n\r\n    if (this.needsCleanup) {\r\n      this.cleanUp();\r\n    }\r\n\r\n    if (!this.shouldDrawHandles()) {\r\n      return;\r\n    }\r\n\r\n    this.height = plot.height();\r\n\r\n    if (this.thresholds.length > 0) {\r\n      this.renderHandle(0, 10);\r\n    }\r\n    if (this.thresholds.length > 1) {\r\n      this.renderHandle(1, this.height - 30);\r\n    }\r\n\r\n    this.placeholder.off('mousedown', '.alert-handle');\r\n    this.placeholder.on('mousedown', '.alert-handle', this.initDragging.bind(this));\r\n    this.needsCleanup = true;\r\n  }\r\n\r\n  addFlotOptions(options, panel) {\r\n    if (!panel.thresholds || panel.thresholds.length === 0) {\r\n      return;\r\n    }\r\n\r\n    let gtLimit = Infinity;\r\n    let ltLimit = -Infinity;\r\n    let i, threshold, other;\r\n\r\n    for (i = 0; i < panel.thresholds.length; i++) {\r\n      threshold = panel.thresholds[i];\r\n      if (!_.isNumber(threshold.value)) {\r\n        continue;\r\n      }\r\n\r\n      let limit;\r\n      switch (threshold.op) {\r\n        case 'gt': {\r\n          limit = gtLimit;\r\n          // if next threshold is less then op and greater value, then use that as limit\r\n          if (panel.thresholds.length > i + 1) {\r\n            other = panel.thresholds[i + 1];\r\n            if (other.value > threshold.value) {\r\n              limit = other.value;\r\n              ltLimit = limit;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n        case 'lt': {\r\n          limit = ltLimit;\r\n          // if next threshold is less then op and greater value, then use that as limit\r\n          if (panel.thresholds.length > i + 1) {\r\n            other = panel.thresholds[i + 1];\r\n            if (other.value < threshold.value) {\r\n              limit = other.value;\r\n              gtLimit = limit;\r\n            }\r\n          }\r\n          break;\r\n        }\r\n      }\r\n\r\n      let fillColor, lineColor;\r\n      switch (threshold.colorMode) {\r\n        case 'critical': {\r\n          fillColor = 'rgba(234, 112, 112, 0.12)';\r\n          lineColor = 'rgba(237, 46, 24, 0.60)';\r\n          break;\r\n        }\r\n        case 'warning': {\r\n          fillColor = 'rgba(235, 138, 14, 0.12)';\r\n          lineColor = 'rgba(247, 149, 32, 0.60)';\r\n          break;\r\n        }\r\n        case 'ok': {\r\n          fillColor = 'rgba(11, 237, 50, 0.090)';\r\n          lineColor = 'rgba(6,163,69, 0.60)';\r\n          break;\r\n        }\r\n        case 'custom': {\r\n          fillColor = threshold.fillColor;\r\n          lineColor = threshold.lineColor;\r\n          break;\r\n        }\r\n      }\r\n\r\n      // fill\r\n      if (threshold.fill) {\r\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\r\n          options.grid.markings.push({\r\n            y2axis: { from: threshold.value, to: limit },\r\n            color: fillColor,\r\n          });\r\n        } else {\r\n          options.grid.markings.push({\r\n            yaxis: { from: threshold.value, to: limit },\r\n            color: fillColor,\r\n          });\r\n        }\r\n      }\r\n      if (threshold.line) {\r\n        if (threshold.yaxis === 'right' && this.hasSecondYAxis) {\r\n          options.grid.markings.push({\r\n            y2axis: { from: threshold.value, to: threshold.value },\r\n            color: lineColor,\r\n          });\r\n        } else {\r\n          options.grid.markings.push({\r\n            yaxis: { from: threshold.value, to: threshold.value },\r\n            color: lineColor,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import _ from 'lodash';\r\n\r\n/**\r\n * To align two Y axes by Y level\r\n * @param yAxes data [{min: min_y1, min: max_y1}, {min: min_y2, max: max_y2}]\r\n * @param level Y level\r\n */\r\nexport function alignYLevel(yAxes, level) {\r\n  if (isNaN(level) || !checkCorrectAxis(yAxes)) {\r\n    return;\r\n  }\r\n\r\n  const [yLeft, yRight] = yAxes;\r\n  moveLevelToZero(yLeft, yRight, level);\r\n\r\n  expandStuckValues(yLeft, yRight);\r\n\r\n  // one of graphs on zero\r\n  const zero = yLeft.min === 0 || yRight.min === 0 || yLeft.max === 0 || yRight.max === 0;\r\n\r\n  const oneSide = checkOneSide(yLeft, yRight);\r\n\r\n  if (zero && oneSide) {\r\n    yLeft.min = yLeft.max > 0 ? 0 : yLeft.min;\r\n    yLeft.max = yLeft.max > 0 ? yLeft.max : 0;\r\n    yRight.min = yRight.max > 0 ? 0 : yRight.min;\r\n    yRight.max = yRight.max > 0 ? yRight.max : 0;\r\n  } else {\r\n    if (checkOppositeSides(yLeft, yRight)) {\r\n      if (yLeft.min >= 0) {\r\n        yLeft.min = -yLeft.max;\r\n        yRight.max = -yRight.min;\r\n      } else {\r\n        yLeft.max = -yLeft.min;\r\n        yRight.min = -yRight.max;\r\n      }\r\n    } else {\r\n      const rate = getRate(yLeft, yRight);\r\n\r\n      if (oneSide) {\r\n        // all graphs above the Y level\r\n        if (yLeft.min > 0) {\r\n          yLeft.min = yLeft.max / rate;\r\n          yRight.min = yRight.max / rate;\r\n        } else {\r\n          yLeft.max = yLeft.min / rate;\r\n          yRight.max = yRight.min / rate;\r\n        }\r\n      } else {\r\n        if (checkTwoCross(yLeft, yRight)) {\r\n          yLeft.min = yRight.min ? yRight.min * rate : yLeft.min;\r\n          yRight.min = yLeft.min ? yLeft.min / rate : yRight.min;\r\n          yLeft.max = yRight.max ? yRight.max * rate : yLeft.max;\r\n          yRight.max = yLeft.max ? yLeft.max / rate : yRight.max;\r\n        } else {\r\n          yLeft.min = yLeft.min > 0 ? yRight.min * rate : yLeft.min;\r\n          yRight.min = yRight.min > 0 ? yLeft.min / rate : yRight.min;\r\n          yLeft.max = yLeft.max < 0 ? yRight.max * rate : yLeft.max;\r\n          yRight.max = yRight.max < 0 ? yLeft.max / rate : yRight.max;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  restoreLevelFromZero(yLeft, yRight, level);\r\n}\r\n\r\nfunction expandStuckValues(yLeft, yRight) {\r\n  // wide Y min and max using increased wideFactor\r\n  const wideFactor = 0.25;\r\n  if (yLeft.max === yLeft.min) {\r\n    yLeft.min -= wideFactor;\r\n    yLeft.max += wideFactor;\r\n  }\r\n  if (yRight.max === yRight.min) {\r\n    yRight.min -= wideFactor;\r\n    yRight.max += wideFactor;\r\n  }\r\n}\r\n\r\nfunction moveLevelToZero(yLeft, yRight, level) {\r\n  if (level !== 0) {\r\n    yLeft.min -= level;\r\n    yLeft.max -= level;\r\n    yRight.min -= level;\r\n    yRight.max -= level;\r\n  }\r\n}\r\n\r\nfunction restoreLevelFromZero(yLeft, yRight, level) {\r\n  if (level !== 0) {\r\n    yLeft.min += level;\r\n    yLeft.max += level;\r\n    yRight.min += level;\r\n    yRight.max += level;\r\n  }\r\n}\r\n\r\nfunction checkCorrectAxis(axis) {\r\n  return axis.length === 2 && checkCorrectAxes(axis[0]) && checkCorrectAxes(axis[1]);\r\n}\r\n\r\nfunction checkCorrectAxes(axes) {\r\n  return 'min' in axes && 'max' in axes;\r\n}\r\n\r\nfunction checkOneSide(yLeft, yRight) {\r\n  // on the one hand with respect to zero\r\n  return (yLeft.min >= 0 && yRight.min >= 0) || (yLeft.max <= 0 && yRight.max <= 0);\r\n}\r\n\r\nfunction checkTwoCross(yLeft, yRight) {\r\n  // both across zero\r\n  return yLeft.min <= 0 && yLeft.max >= 0 && yRight.min <= 0 && yRight.max >= 0;\r\n}\r\n\r\nfunction checkOppositeSides(yLeft, yRight) {\r\n  // on the opposite sides with respect to zero\r\n  return (yLeft.min >= 0 && yRight.max <= 0) || (yLeft.max <= 0 && yRight.min >= 0);\r\n}\r\n\r\nfunction getRate(yLeft, yRight) {\r\n  let rateLeft, rateRight, rate;\r\n  if (checkTwoCross(yLeft, yRight)) {\r\n    rateLeft = yRight.min ? yLeft.min / yRight.min : 0;\r\n    rateRight = yRight.max ? yLeft.max / yRight.max : 0;\r\n  } else {\r\n    if (checkOneSide(yLeft, yRight)) {\r\n      const absLeftMin = Math.abs(yLeft.min);\r\n      const absLeftMax = Math.abs(yLeft.max);\r\n      const absRightMin = Math.abs(yRight.min);\r\n      const absRightMax = Math.abs(yRight.max);\r\n      const upLeft = _.max([absLeftMin, absLeftMax]);\r\n      const downLeft = _.min([absLeftMin, absLeftMax]);\r\n      const upRight = _.max([absRightMin, absRightMax]);\r\n      const downRight = _.min([absRightMin, absRightMax]);\r\n\r\n      rateLeft = downLeft ? upLeft / downLeft : upLeft;\r\n      rateRight = downRight ? upRight / downRight : upRight;\r\n    } else {\r\n      if (yLeft.min > 0 || yRight.min > 0) {\r\n        rateLeft = yLeft.max / yRight.max;\r\n        rateRight = 0;\r\n      } else {\r\n        rateLeft = 0;\r\n        rateRight = yLeft.min / yRight.min;\r\n      }\r\n    }\r\n  }\r\n\r\n  rate = rateLeft > rateRight ? rateLeft : rateRight;\r\n\r\n  return rate;\r\n}\r\n","import _ from 'lodash';\r\nimport TimeSeries from 'app/core/time_series2';\r\n\r\n/**\r\n * Convert series into array of series values.\r\n * @param data Array of series\r\n */\r\nexport function getSeriesValues(dataList: TimeSeries[]): number[] {\r\n  const VALUE_INDEX = 0;\r\n  const values = [];\r\n\r\n  // Count histogam stats\r\n  for (let i = 0; i < dataList.length; i++) {\r\n    const series = dataList[i];\r\n    const datapoints = series.datapoints;\r\n    for (let j = 0; j < datapoints.length; j++) {\r\n      if (datapoints[j][VALUE_INDEX] !== null) {\r\n        values.push(datapoints[j][VALUE_INDEX]);\r\n      }\r\n    }\r\n  }\r\n\r\n  return values;\r\n}\r\n\r\n/**\r\n * Convert array of values into timeseries-like histogram:\r\n * [[val_1, count_1], [val_2, count_2], ..., [val_n, count_n]]\r\n * @param values\r\n * @param bucketSize\r\n */\r\nexport function convertValuesToHistogram(values: number[], bucketSize: number, min: number, max: number): any[] {\r\n  const histogram = {};\r\n\r\n  const minBound = getBucketBound(min, bucketSize);\r\n  const maxBound = getBucketBound(max, bucketSize);\r\n  let bound = minBound;\r\n  let n = 0;\r\n  while (bound <= maxBound) {\r\n    histogram[bound] = 0;\r\n    bound = minBound + bucketSize * n;\r\n    n++;\r\n  }\r\n\r\n  for (let i = 0; i < values.length; i++) {\r\n    const bound = getBucketBound(values[i], bucketSize);\r\n    histogram[bound] = histogram[bound] + 1;\r\n  }\r\n\r\n  const histogamSeries = _.map(histogram, (count, bound) => {\r\n    return [Number(bound), count];\r\n  });\r\n\r\n  // Sort by Y axis values\r\n  return _.sortBy(histogamSeries, point => point[0]);\r\n}\r\n\r\n/**\r\n * Convert series into array of histogram data.\r\n * @param data Array of series\r\n * @param bucketSize\r\n */\r\nexport function convertToHistogramData(\r\n  data: any,\r\n  bucketSize: number,\r\n  hiddenSeries: any,\r\n  min: number,\r\n  max: number\r\n): any[] {\r\n  return data.map(series => {\r\n    const values = getSeriesValues([series]);\r\n    series.histogram = true;\r\n    if (!hiddenSeries[series.alias]) {\r\n      const histogram = convertValuesToHistogram(values, bucketSize, min, max);\r\n      series.data = histogram;\r\n    } else {\r\n      series.data = [];\r\n    }\r\n    return series;\r\n  });\r\n}\r\n\r\nfunction getBucketBound(value: number, bucketSize: number): number {\r\n  return Math.floor(value / bucketSize) * bucketSize;\r\n}\r\n","import 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.selection';\r\nimport 'vendor/flot/jquery.flot.time';\r\nimport 'vendor/flot/jquery.flot.stack';\r\nimport 'vendor/flot/jquery.flot.stackpercent';\r\nimport 'vendor/flot/jquery.flot.fillbelow';\r\nimport 'vendor/flot/jquery.flot.crosshair';\r\nimport 'vendor/flot/jquery.flot.dashes';\r\nimport './jquery.flot.events';\r\n\r\nimport $ from 'jquery';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { tickStep } from 'app/core/utils/ticks';\r\nimport { appEvents, coreModule, updateLegendValues } from 'app/core/core';\r\nimport GraphTooltip from './graph_tooltip';\r\nimport { ThresholdManager } from './threshold_manager';\r\nimport { EventManager } from 'app/features/annotations/all';\r\nimport { convertToHistogramData } from './histogram';\r\nimport { alignYLevel } from './align_yaxes';\r\nimport config from 'app/core/config';\r\n\r\nimport { GraphCtrl } from './module';\r\n\r\nclass GraphElement {\r\n  ctrl: GraphCtrl;\r\n  tooltip: any;\r\n  dashboard: any;\r\n  annotations: object[];\r\n  panel: any;\r\n  plot: any;\r\n  sortedSeries: any[];\r\n  data: any[];\r\n  panelWidth: number;\r\n  eventManager: EventManager;\r\n  thresholdManager: ThresholdManager;\r\n\r\n  constructor(private scope, private elem, private timeSrv) {\r\n    this.ctrl = scope.ctrl;\r\n    this.dashboard = this.ctrl.dashboard;\r\n    this.panel = this.ctrl.panel;\r\n    this.annotations = [];\r\n\r\n    this.panelWidth = 0;\r\n    this.eventManager = new EventManager(this.ctrl);\r\n    this.thresholdManager = new ThresholdManager(this.ctrl);\r\n    this.tooltip = new GraphTooltip(this.elem, this.ctrl.dashboard, this.scope, () => {\r\n      return this.sortedSeries;\r\n    });\r\n\r\n    // panel events\r\n    this.ctrl.events.on('panel-teardown', this.onPanelteardown.bind(this));\r\n\r\n    /**\r\n     * Split graph rendering into two parts.\r\n     * First, calculate series stats in buildFlotPairs() function. Then legend rendering started\r\n     * (see ctrl.events.on('render') in legend.ts).\r\n     * When legend is rendered it emits 'legend-rendering-complete' and graph rendered.\r\n     */\r\n    this.ctrl.events.on('render', this.onRender.bind(this));\r\n    this.ctrl.events.on('legend-rendering-complete', this.onLegendRenderingComplete.bind(this));\r\n\r\n    // global events\r\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), scope);\r\n\r\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), scope);\r\n\r\n    this.elem.bind('plotselected', this.onPlotSelected.bind(this));\r\n\r\n    this.elem.bind('plotclick', this.onPlotClick.bind(this));\r\n    scope.$on('$destroy', this.onScopeDestroy.bind(this));\r\n  }\r\n\r\n  onRender(renderData) {\r\n    this.data = renderData || this.data;\r\n    if (!this.data) {\r\n      return;\r\n    }\r\n    this.annotations = this.ctrl.annotations || [];\r\n    this.buildFlotPairs(this.data);\r\n    const graphHeight = this.elem.height();\r\n    updateLegendValues(this.data, this.panel, graphHeight);\r\n\r\n    this.ctrl.events.emit('render-legend');\r\n  }\r\n\r\n  onGraphHover(evt) {\r\n    // ignore other graph hover events if shared tooltip is disabled\r\n    if (!this.dashboard.sharedTooltipModeEnabled()) {\r\n      return;\r\n    }\r\n\r\n    // ignore if we are the emitter\r\n    if (!this.plot || evt.panel.id === this.panel.id || this.ctrl.otherPanelInFullscreenMode()) {\r\n      return;\r\n    }\r\n\r\n    this.tooltip.show(evt.pos);\r\n  }\r\n\r\n  onPanelteardown() {\r\n    this.thresholdManager = null;\r\n\r\n    if (this.plot) {\r\n      this.plot.destroy();\r\n      this.plot = null;\r\n    }\r\n  }\r\n\r\n  onLegendRenderingComplete() {\r\n    this.render_panel();\r\n  }\r\n\r\n  onGraphHoverClear(event, info) {\r\n    if (this.plot) {\r\n      this.tooltip.clear(this.plot);\r\n    }\r\n  }\r\n\r\n  onPlotSelected(event, ranges) {\r\n    if (this.panel.xaxis.mode !== 'time') {\r\n      // Skip if panel in histogram or series mode\r\n      this.plot.clearSelection();\r\n      return;\r\n    }\r\n\r\n    if ((ranges.ctrlKey || ranges.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\r\n      // Add annotation\r\n      setTimeout(() => {\r\n        this.eventManager.updateTime(ranges.xaxis);\r\n      }, 100);\r\n    } else {\r\n      this.scope.$apply(() => {\r\n        this.timeSrv.setTime({\r\n          from: moment.utc(ranges.xaxis.from),\r\n          to: moment.utc(ranges.xaxis.to),\r\n        });\r\n      });\r\n    }\r\n  }\r\n\r\n  onPlotClick(event, pos, item) {\r\n    if (this.panel.xaxis.mode !== 'time') {\r\n      // Skip if panel in histogram or series mode\r\n      return;\r\n    }\r\n\r\n    if ((pos.ctrlKey || pos.metaKey) && (this.dashboard.meta.canEdit || this.dashboard.meta.canMakeEditable)) {\r\n      // Skip if range selected (added in \"plotselected\" event handler)\r\n      const isRangeSelection = pos.x !== pos.x1;\r\n      if (!isRangeSelection) {\r\n        setTimeout(() => {\r\n          this.eventManager.updateTime({ from: pos.x, to: null });\r\n        }, 100);\r\n      }\r\n    }\r\n  }\r\n\r\n  onScopeDestroy() {\r\n    this.tooltip.destroy();\r\n    this.elem.off();\r\n    this.elem.remove();\r\n  }\r\n\r\n  shouldAbortRender() {\r\n    if (!this.data) {\r\n      return true;\r\n    }\r\n\r\n    if (this.panelWidth === 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  drawHook(plot) {\r\n    // add left axis labels\r\n    if (this.panel.yaxes[0].label && this.panel.yaxes[0].show) {\r\n      $(\"<div class='axisLabel left-yaxis-label flot-temp-elem'></div>\")\r\n        .text(this.panel.yaxes[0].label)\r\n        .appendTo(this.elem);\r\n    }\r\n\r\n    // add right axis labels\r\n    if (this.panel.yaxes[1].label && this.panel.yaxes[1].show) {\r\n      $(\"<div class='axisLabel right-yaxis-label flot-temp-elem'></div>\")\r\n        .text(this.panel.yaxes[1].label)\r\n        .appendTo(this.elem);\r\n    }\r\n\r\n    if (this.ctrl.dataWarning) {\r\n      $(`<div class=\"datapoints-warning flot-temp-elem\">${this.ctrl.dataWarning.title}</div>`).appendTo(this.elem);\r\n    }\r\n\r\n    this.thresholdManager.draw(plot);\r\n  }\r\n\r\n  processOffsetHook(plot, gridMargin) {\r\n    const left = this.panel.yaxes[0];\r\n    const right = this.panel.yaxes[1];\r\n    if (left.show && left.label) {\r\n      gridMargin.left = 20;\r\n    }\r\n    if (right.show && right.label) {\r\n      gridMargin.right = 20;\r\n    }\r\n\r\n    // apply y-axis min/max options\r\n    const yaxis = plot.getYAxes();\r\n    for (let i = 0; i < yaxis.length; i++) {\r\n      const axis = yaxis[i];\r\n      const panelOptions = this.panel.yaxes[i];\r\n      axis.options.max = axis.options.max !== null ? axis.options.max : panelOptions.max;\r\n      axis.options.min = axis.options.min !== null ? axis.options.min : panelOptions.min;\r\n    }\r\n  }\r\n\r\n  processRangeHook(plot) {\r\n    const yAxes = plot.getYAxes();\r\n    const align = this.panel.yaxis.align || false;\r\n\r\n    if (yAxes.length > 1 && align === true) {\r\n      const level = this.panel.yaxis.alignLevel || 0;\r\n      alignYLevel(yAxes, parseFloat(level));\r\n    }\r\n  }\r\n\r\n  // Series could have different timeSteps,\r\n  // let's find the smallest one so that bars are correctly rendered.\r\n  // In addition, only take series which are rendered as bars for this.\r\n  getMinTimeStepOfSeries(data) {\r\n    let min = Number.MAX_VALUE;\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (!data[i].stats.timeStep) {\r\n        continue;\r\n      }\r\n      if (this.panel.bars) {\r\n        if (data[i].bars && data[i].bars.show === false) {\r\n          continue;\r\n        }\r\n      } else {\r\n        if (typeof data[i].bars === 'undefined' || typeof data[i].bars.show === 'undefined' || !data[i].bars.show) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (data[i].stats.timeStep < min) {\r\n        min = data[i].stats.timeStep;\r\n      }\r\n    }\r\n\r\n    return min;\r\n  }\r\n\r\n  // Function for rendering panel\r\n  render_panel() {\r\n    this.panelWidth = this.elem.width();\r\n    if (this.shouldAbortRender()) {\r\n      return;\r\n    }\r\n\r\n    // give space to alert editing\r\n    this.thresholdManager.prepare(this.elem, this.data);\r\n\r\n    // un-check dashes if lines are unchecked\r\n    this.panel.dashes = this.panel.lines ? this.panel.dashes : false;\r\n\r\n    // Populate element\r\n    const options: any = this.buildFlotOptions(this.panel);\r\n    this.prepareXAxis(options, this.panel);\r\n    this.configureYAxisOptions(this.data, options);\r\n    this.thresholdManager.addFlotOptions(options, this.panel);\r\n    this.eventManager.addFlotEvents(this.annotations, options);\r\n\r\n    this.sortedSeries = this.sortSeries(this.data, this.panel);\r\n    this.callPlot(options, true);\r\n  }\r\n\r\n  buildFlotPairs(data) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i];\r\n      series.data = series.getFlotPairs(series.nullPointMode || this.panel.nullPointMode);\r\n\r\n      // if hidden remove points and disable stack\r\n      if (this.ctrl.hiddenSeries[series.alias]) {\r\n        series.data = [];\r\n        series.stack = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  prepareXAxis(options, panel) {\r\n    switch (panel.xaxis.mode) {\r\n      case 'series': {\r\n        options.series.bars.barWidth = 0.7;\r\n        options.series.bars.align = 'center';\r\n\r\n        for (let i = 0; i < this.data.length; i++) {\r\n          const series = this.data[i];\r\n          series.data = [[i + 1, series.stats[panel.xaxis.values[0]]]];\r\n        }\r\n\r\n        this.addXSeriesAxis(options);\r\n        break;\r\n      }\r\n      case 'histogram': {\r\n        let bucketSize: number;\r\n\r\n        if (this.data.length) {\r\n          const histMin = _.min(_.map(this.data, s => s.stats.min));\r\n          const histMax = _.max(_.map(this.data, s => s.stats.max));\r\n          const ticks = panel.xaxis.buckets || this.panelWidth / 50;\r\n          bucketSize = tickStep(histMin, histMax, ticks);\r\n          options.series.bars.barWidth = bucketSize * 0.8;\r\n          this.data = convertToHistogramData(this.data, bucketSize, this.ctrl.hiddenSeries, histMin, histMax);\r\n        } else {\r\n          bucketSize = 0;\r\n        }\r\n\r\n        this.addXHistogramAxis(options, bucketSize);\r\n        break;\r\n      }\r\n      case 'table': {\r\n        options.series.bars.barWidth = 0.7;\r\n        options.series.bars.align = 'center';\r\n        this.addXTableAxis(options);\r\n        break;\r\n      }\r\n      default: {\r\n        options.series.bars.barWidth = this.getMinTimeStepOfSeries(this.data) / 1.5;\r\n        this.addTimeAxis(options);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  callPlot(options, incrementRenderCounter) {\r\n    try {\r\n      this.plot = $.plot(this.elem, this.sortedSeries, options);\r\n      if (this.ctrl.renderError) {\r\n        delete this.ctrl.error;\r\n        delete this.ctrl.inspector;\r\n      }\r\n    } catch (e) {\r\n      console.log('flotcharts error', e);\r\n      this.ctrl.error = e.message || 'Render Error';\r\n      this.ctrl.renderError = true;\r\n      this.ctrl.inspector = { error: e };\r\n    }\r\n\r\n    if (incrementRenderCounter) {\r\n      this.ctrl.renderingCompleted();\r\n    }\r\n  }\r\n\r\n  buildFlotOptions(panel) {\r\n    let gridColor = '#c8c8c8';\r\n    if (config.bootData.user.lightTheme === true) {\r\n      gridColor = '#a1a1a1';\r\n    }\r\n    const stack = panel.stack ? true : null;\r\n    const options = {\r\n      hooks: {\r\n        draw: [this.drawHook.bind(this)],\r\n        processOffset: [this.processOffsetHook.bind(this)],\r\n        processRange: [this.processRangeHook.bind(this)],\r\n      },\r\n      legend: { show: false },\r\n      series: {\r\n        stackpercent: panel.stack ? panel.percentage : false,\r\n        stack: panel.percentage ? null : stack,\r\n        lines: {\r\n          show: panel.lines,\r\n          zero: false,\r\n          fill: this.translateFillOption(panel.fill),\r\n          lineWidth: panel.dashes ? 0 : panel.linewidth,\r\n          steps: panel.steppedLine,\r\n        },\r\n        dashes: {\r\n          show: panel.dashes,\r\n          lineWidth: panel.linewidth,\r\n          dashLength: [panel.dashLength, panel.spaceLength],\r\n        },\r\n        bars: {\r\n          show: panel.bars,\r\n          fill: 1,\r\n          barWidth: 1,\r\n          zero: false,\r\n          lineWidth: 0,\r\n        },\r\n        points: {\r\n          show: panel.points,\r\n          fill: 1,\r\n          fillColor: false,\r\n          radius: panel.points ? panel.pointradius : 2,\r\n        },\r\n        shadowSize: 0,\r\n      },\r\n      yaxes: [],\r\n      xaxis: {},\r\n      grid: {\r\n        minBorderMargin: 0,\r\n        markings: [],\r\n        backgroundColor: null,\r\n        borderWidth: 0,\r\n        hoverable: true,\r\n        clickable: true,\r\n        color: gridColor,\r\n        margin: { left: 0, right: 0 },\r\n        labelMarginX: 0,\r\n      },\r\n      selection: {\r\n        mode: 'x',\r\n        color: '#666',\r\n      },\r\n      crosshair: {\r\n        mode: 'x',\r\n      },\r\n    };\r\n    return options;\r\n  }\r\n\r\n  sortSeries(series, panel) {\r\n    const sortBy = panel.legend.sort;\r\n    const sortOrder = panel.legend.sortDesc;\r\n    const haveSortBy = sortBy !== null && sortBy !== undefined;\r\n    const haveSortOrder = sortOrder !== null && sortOrder !== undefined;\r\n    const shouldSortBy = panel.stack && haveSortBy && haveSortOrder;\r\n    const sortDesc = panel.legend.sortDesc === true ? -1 : 1;\r\n\r\n    if (shouldSortBy) {\r\n      return _.sortBy(series, s => s.stats[sortBy] * sortDesc);\r\n    } else {\r\n      return _.sortBy(series, s => s.zindex);\r\n    }\r\n  }\r\n\r\n  translateFillOption(fill) {\r\n    if (this.panel.percentage && this.panel.stack) {\r\n      return fill === 0 ? 0.001 : fill / 10;\r\n    } else {\r\n      return fill / 10;\r\n    }\r\n  }\r\n\r\n  addTimeAxis(options) {\r\n    const ticks = this.panelWidth / 100;\r\n    const min = _.isUndefined(this.ctrl.range.from) ? null : this.ctrl.range.from.valueOf();\r\n    const max = _.isUndefined(this.ctrl.range.to) ? null : this.ctrl.range.to.valueOf();\r\n\r\n    options.xaxis = {\r\n      timezone: this.dashboard.getTimezone(),\r\n      show: this.panel.xaxis.show,\r\n      mode: 'time',\r\n      min: min,\r\n      max: max,\r\n      label: 'Datetime',\r\n      ticks: ticks,\r\n      timeformat: this.time_format(ticks, min, max),\r\n    };\r\n  }\r\n\r\n  addXSeriesAxis(options) {\r\n    const ticks = _.map(this.data, function(series, index) {\r\n      return [index + 1, series.alias];\r\n    });\r\n\r\n    options.xaxis = {\r\n      timezone: this.dashboard.getTimezone(),\r\n      show: this.panel.xaxis.show,\r\n      mode: null,\r\n      min: 0,\r\n      max: ticks.length + 1,\r\n      label: 'Datetime',\r\n      ticks: ticks,\r\n    };\r\n  }\r\n\r\n  addXHistogramAxis(options, bucketSize) {\r\n    let ticks, min, max;\r\n    const defaultTicks = this.panelWidth / 50;\r\n\r\n    if (this.data.length && bucketSize) {\r\n      const tickValues = [];\r\n      for (const d of this.data) {\r\n        for (const point of d.data) {\r\n          tickValues[point[0]] = true;\r\n        }\r\n      }\r\n      ticks = Object.keys(tickValues).map(v => Number(v));\r\n      min = _.min(ticks);\r\n      max = _.max(ticks);\r\n\r\n      // Adjust tick step\r\n      let tickStep = bucketSize;\r\n      let ticksNum = Math.floor((max - min) / tickStep);\r\n      while (ticksNum > defaultTicks) {\r\n        tickStep = tickStep * 2;\r\n        ticksNum = Math.ceil((max - min) / tickStep);\r\n      }\r\n\r\n      // Expand ticks for pretty view\r\n      min = Math.floor(min / tickStep) * tickStep;\r\n      // 1.01 is 101% - ensure we have enough space for last bar\r\n      max = Math.ceil(max * 1.01 / tickStep) * tickStep;\r\n\r\n      ticks = [];\r\n      for (let i = min; i <= max; i += tickStep) {\r\n        ticks.push(i);\r\n      }\r\n    } else {\r\n      // Set defaults if no data\r\n      ticks = defaultTicks / 2;\r\n      min = 0;\r\n      max = 1;\r\n    }\r\n\r\n    options.xaxis = {\r\n      timezone: this.dashboard.getTimezone(),\r\n      show: this.panel.xaxis.show,\r\n      mode: null,\r\n      min: min,\r\n      max: max,\r\n      label: 'Histogram',\r\n      ticks: ticks,\r\n    };\r\n\r\n    // Use 'short' format for histogram values\r\n    this.configureAxisMode(options.xaxis, 'short');\r\n  }\r\n\r\n  addXTableAxis(options) {\r\n    let ticks = _.map(this.data, function(series, seriesIndex) {\r\n      return _.map(series.datapoints, function(point, pointIndex) {\r\n        const tickIndex = seriesIndex * series.datapoints.length + pointIndex;\r\n        return [tickIndex + 1, point[1]];\r\n      });\r\n    });\r\n    ticks = _.flatten(ticks, true);\r\n\r\n    options.xaxis = {\r\n      timezone: this.dashboard.getTimezone(),\r\n      show: this.panel.xaxis.show,\r\n      mode: null,\r\n      min: 0,\r\n      max: ticks.length + 1,\r\n      label: 'Datetime',\r\n      ticks: ticks,\r\n    };\r\n  }\r\n\r\n  configureYAxisOptions(data, options) {\r\n    const defaults = {\r\n      position: 'left',\r\n      show: this.panel.yaxes[0].show,\r\n      index: 1,\r\n      logBase: this.panel.yaxes[0].logBase || 1,\r\n      min: this.parseNumber(this.panel.yaxes[0].min),\r\n      max: this.parseNumber(this.panel.yaxes[0].max),\r\n      tickDecimals: this.panel.yaxes[0].decimals,\r\n    };\r\n\r\n    options.yaxes.push(defaults);\r\n\r\n    if (_.find(data, { yaxis: 2 })) {\r\n      const secondY = _.clone(defaults);\r\n      secondY.index = 2;\r\n      secondY.show = this.panel.yaxes[1].show;\r\n      secondY.logBase = this.panel.yaxes[1].logBase || 1;\r\n      secondY.position = 'right';\r\n      secondY.min = this.parseNumber(this.panel.yaxes[1].min);\r\n      secondY.max = this.parseNumber(this.panel.yaxes[1].max);\r\n      secondY.tickDecimals = this.panel.yaxes[1].decimals;\r\n      options.yaxes.push(secondY);\r\n\r\n      this.applyLogScale(options.yaxes[1], data);\r\n      this.configureAxisMode(\r\n        options.yaxes[1],\r\n        this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[1].format\r\n      );\r\n    }\r\n    this.applyLogScale(options.yaxes[0], data);\r\n    this.configureAxisMode(\r\n      options.yaxes[0],\r\n      this.panel.percentage && this.panel.stack ? 'percent' : this.panel.yaxes[0].format\r\n    );\r\n  }\r\n\r\n  parseNumber(value: any) {\r\n    if (value === null || typeof value === 'undefined') {\r\n      return null;\r\n    }\r\n\r\n    return _.toNumber(value);\r\n  }\r\n\r\n  applyLogScale(axis, data) {\r\n    if (axis.logBase === 1) {\r\n      return;\r\n    }\r\n\r\n    const minSetToZero = axis.min === 0;\r\n\r\n    if (axis.min < Number.MIN_VALUE) {\r\n      axis.min = null;\r\n    }\r\n    if (axis.max < Number.MIN_VALUE) {\r\n      axis.max = null;\r\n    }\r\n\r\n    let series, i;\r\n    let max = axis.max,\r\n      min = axis.min;\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      series = data[i];\r\n      if (series.yaxis === axis.index) {\r\n        if (!max || max < series.stats.max) {\r\n          max = series.stats.max;\r\n        }\r\n        if (!min || min > series.stats.logmin) {\r\n          min = series.stats.logmin;\r\n        }\r\n      }\r\n    }\r\n\r\n    axis.transform = function(v) {\r\n      return v < Number.MIN_VALUE ? null : Math.log(v) / Math.log(axis.logBase);\r\n    };\r\n    axis.inverseTransform = function(v) {\r\n      return Math.pow(axis.logBase, v);\r\n    };\r\n\r\n    if (!max && !min) {\r\n      max = axis.inverseTransform(+2);\r\n      min = axis.inverseTransform(-2);\r\n    } else if (!max) {\r\n      max = min * axis.inverseTransform(+4);\r\n    } else if (!min) {\r\n      min = max * axis.inverseTransform(-4);\r\n    }\r\n\r\n    if (axis.min) {\r\n      min = axis.inverseTransform(Math.ceil(axis.transform(axis.min)));\r\n    } else {\r\n      min = axis.min = axis.inverseTransform(Math.floor(axis.transform(min)));\r\n    }\r\n    if (axis.max) {\r\n      max = axis.inverseTransform(Math.floor(axis.transform(axis.max)));\r\n    } else {\r\n      max = axis.max = axis.inverseTransform(Math.ceil(axis.transform(max)));\r\n    }\r\n\r\n    if (!min || min < Number.MIN_VALUE || !max || max < Number.MIN_VALUE) {\r\n      return;\r\n    }\r\n\r\n    if (Number.isFinite(min) && Number.isFinite(max)) {\r\n      if (minSetToZero) {\r\n        axis.min = 0.1;\r\n        min = 1;\r\n      }\r\n\r\n      axis.ticks = this.generateTicksForLogScaleYAxis(min, max, axis.logBase);\r\n      if (minSetToZero) {\r\n        axis.ticks.unshift(0.1);\r\n      }\r\n      if (axis.ticks[axis.ticks.length - 1] > axis.max) {\r\n        axis.max = axis.ticks[axis.ticks.length - 1];\r\n      }\r\n    } else {\r\n      axis.ticks = [1, 2];\r\n      delete axis.min;\r\n      delete axis.max;\r\n    }\r\n  }\r\n\r\n  generateTicksForLogScaleYAxis(min, max, logBase) {\r\n    let ticks = [];\r\n\r\n    let nextTick;\r\n    for (nextTick = min; nextTick <= max; nextTick *= logBase) {\r\n      ticks.push(nextTick);\r\n    }\r\n\r\n    const maxNumTicks = Math.ceil(this.ctrl.height / 25);\r\n    const numTicks = ticks.length;\r\n    if (numTicks > maxNumTicks) {\r\n      const factor = Math.ceil(numTicks / maxNumTicks) * logBase;\r\n      ticks = [];\r\n\r\n      for (nextTick = min; nextTick <= max * factor; nextTick *= factor) {\r\n        ticks.push(nextTick);\r\n      }\r\n    }\r\n\r\n    return ticks;\r\n  }\r\n\r\n  configureAxisMode(axis, format) {\r\n    axis.tickFormatter = function(val, axis) {\r\n      if (!kbn.valueFormats[format]) {\r\n        throw new Error(`Unit '${format}' is not supported`);\r\n      }\r\n      return kbn.valueFormats[format](val, axis.tickDecimals, axis.scaledDecimals);\r\n    };\r\n  }\r\n\r\n  time_format(ticks, min, max) {\r\n    if (min && max && ticks) {\r\n      const range = max - min;\r\n      const secPerTick = range / ticks / 1000;\r\n      const oneDay = 86400000;\r\n      const oneYear = 31536000000;\r\n\r\n      if (secPerTick <= 45) {\r\n        return '%H:%M:%S';\r\n      }\r\n      if (secPerTick <= 7200 || range <= oneDay) {\r\n        return '%H:%M';\r\n      }\r\n      if (secPerTick <= 80000) {\r\n        return '%m/%d %H:%M';\r\n      }\r\n      if (secPerTick <= 2419200 || range <= oneYear) {\r\n        return '%m/%d';\r\n      }\r\n      return '%Y-%m';\r\n    }\r\n\r\n    return '%H:%M';\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nfunction graphDirective(timeSrv, popoverSrv, contextSrv) {\r\n  return {\r\n    restrict: 'A',\r\n    template: '',\r\n    link: (scope, elem) => {\r\n      return new GraphElement(scope, elem, timeSrv);\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('grafanaGraph', graphDirective);\r\nexport { GraphElement, graphDirective };\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport baron from 'baron';\r\n\r\nconst module = angular.module('grafana.directives');\r\n\r\nmodule.directive('graphLegend', function(popoverSrv, $timeout) {\r\n  return {\r\n    link: function(scope, elem) {\r\n      let firstRender = true;\r\n      const ctrl = scope.ctrl;\r\n      const panel = ctrl.panel;\r\n      let data;\r\n      let seriesList;\r\n      let i;\r\n      let legendScrollbar;\r\n      const legendRightDefaultWidth = 10;\r\n      const legendElem = elem.parent();\r\n\r\n      scope.$on('$destroy', function() {\r\n        destroyScrollbar();\r\n      });\r\n\r\n      ctrl.events.on('render-legend', () => {\r\n        data = ctrl.seriesList;\r\n        if (data) {\r\n          render();\r\n        }\r\n        ctrl.events.emit('legend-rendering-complete');\r\n      });\r\n\r\n      function getSeriesIndexForElement(el) {\r\n        return el.parents('[data-series-index]').data('series-index');\r\n      }\r\n\r\n      function openColorSelector(e) {\r\n        // if we clicked inside poup container ignore click\r\n        if ($(e.target).parents('.popover').length) {\r\n          return;\r\n        }\r\n\r\n        const el = $(e.currentTarget).find('.fa-minus');\r\n        const index = getSeriesIndexForElement(el);\r\n        const series = seriesList[index];\r\n\r\n        $timeout(function() {\r\n          popoverSrv.show({\r\n            element: el[0],\r\n            position: 'bottom left',\r\n            targetAttachment: 'top left',\r\n            template:\r\n              '<series-color-picker series=\"series\" onToggleAxis=\"toggleAxis\" onColorChange=\"colorSelected\">' +\r\n              '</series-color-picker>',\r\n            openOn: 'hover',\r\n            model: {\r\n              series: series,\r\n              toggleAxis: function() {\r\n                ctrl.toggleAxis(series);\r\n              },\r\n              colorSelected: function(color) {\r\n                ctrl.changeSeriesColor(series, color);\r\n              },\r\n            },\r\n          });\r\n        });\r\n      }\r\n\r\n      function toggleSeries(e) {\r\n        const el = $(e.currentTarget);\r\n        const index = getSeriesIndexForElement(el);\r\n        const seriesInfo = seriesList[index];\r\n        const scrollPosition = legendScrollbar.scroller.scrollTop;\r\n        ctrl.toggleSeries(seriesInfo, e);\r\n        legendScrollbar.scroller.scrollTop = scrollPosition;\r\n      }\r\n\r\n      function sortLegend(e) {\r\n        const el = $(e.currentTarget);\r\n        const stat = el.data('stat');\r\n\r\n        if (stat !== panel.legend.sort) {\r\n          panel.legend.sortDesc = null;\r\n        }\r\n\r\n        // if already sort ascending, disable sorting\r\n        if (panel.legend.sortDesc === false) {\r\n          panel.legend.sort = null;\r\n          panel.legend.sortDesc = null;\r\n          ctrl.render();\r\n          return;\r\n        }\r\n\r\n        panel.legend.sortDesc = !panel.legend.sortDesc;\r\n        panel.legend.sort = stat;\r\n        ctrl.render();\r\n      }\r\n\r\n      function getTableHeaderHtml(statName) {\r\n        if (!panel.legend[statName]) {\r\n          return '';\r\n        }\r\n        let html = '<th class=\"pointer\" data-stat=\"' + statName + '\">' + statName;\r\n\r\n        if (panel.legend.sort === statName) {\r\n          const cssClass = panel.legend.sortDesc ? 'fa fa-caret-down' : 'fa fa-caret-up';\r\n          html += ' <span class=\"' + cssClass + '\"></span>';\r\n        }\r\n\r\n        return html + '</th>';\r\n      }\r\n\r\n      function render() {\r\n        const legendWidth = legendElem.width();\r\n        if (!ctrl.panel.legend.show) {\r\n          elem.empty();\r\n          firstRender = true;\r\n          return;\r\n        }\r\n\r\n        if (firstRender) {\r\n          elem.on('click', '.graph-legend-icon', openColorSelector);\r\n          elem.on('click', '.graph-legend-alias', toggleSeries);\r\n          elem.on('click', 'th', sortLegend);\r\n          firstRender = false;\r\n        }\r\n\r\n        seriesList = data;\r\n\r\n        elem.empty();\r\n\r\n        // Set min-width if side style and there is a value, otherwise remove the CSS property\r\n        // Set width so it works with IE11\r\n        const width: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth + 'px' : '';\r\n        const ieWidth: any = panel.legend.rightSide && panel.legend.sideWidth ? panel.legend.sideWidth - 1 + 'px' : '';\r\n        legendElem.css('min-width', width);\r\n        legendElem.css('width', ieWidth);\r\n\r\n        elem.toggleClass('graph-legend-table', panel.legend.alignAsTable === true);\r\n\r\n        let tableHeaderElem;\r\n        if (panel.legend.alignAsTable) {\r\n          let header = '<tr>';\r\n          header += '<th colspan=\"2\" style=\"text-align:left\"></th>';\r\n          if (panel.legend.values) {\r\n            header += getTableHeaderHtml('min');\r\n            header += getTableHeaderHtml('max');\r\n            header += getTableHeaderHtml('avg');\r\n            header += getTableHeaderHtml('current');\r\n            header += getTableHeaderHtml('total');\r\n          }\r\n          header += '</tr>';\r\n          tableHeaderElem = $(header);\r\n        }\r\n\r\n        if (panel.legend.sort) {\r\n          seriesList = _.sortBy(seriesList, function(series) {\r\n            let sort = series.stats[panel.legend.sort];\r\n            if (sort === null) {\r\n              sort = -Infinity;\r\n            }\r\n            return sort;\r\n          });\r\n          if (panel.legend.sortDesc) {\r\n            seriesList = seriesList.reverse();\r\n          }\r\n        }\r\n\r\n        // render first time for getting proper legend height\r\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\r\n          renderLegendElement(tableHeaderElem);\r\n          elem.empty();\r\n        }\r\n\r\n        renderLegendElement(tableHeaderElem);\r\n      }\r\n\r\n      function renderSeriesLegendElements() {\r\n        const seriesElements = [];\r\n        for (i = 0; i < seriesList.length; i++) {\r\n          const series = seriesList[i];\r\n\r\n          if (series.hideFromLegend(panel.legend)) {\r\n            continue;\r\n          }\r\n\r\n          let html = '<div class=\"graph-legend-series';\r\n\r\n          if (series.yaxis === 2) {\r\n            html += ' graph-legend-series--right-y';\r\n          }\r\n          if (ctrl.hiddenSeries[series.alias]) {\r\n            html += ' graph-legend-series-hidden';\r\n          }\r\n          html += '\" data-series-index=\"' + i + '\">';\r\n          html += '<div class=\"graph-legend-icon\">';\r\n          html += '<i class=\"fa fa-minus pointer\" style=\"color:' + series.color + '\"></i>';\r\n          html += '</div>';\r\n\r\n          html +=\r\n            '<a class=\"graph-legend-alias pointer\" title=\"' + series.aliasEscaped + '\">' + series.aliasEscaped + '</a>';\r\n\r\n          if (panel.legend.values) {\r\n            const avg = series.formatValue(series.stats.avg);\r\n            const current = series.formatValue(series.stats.current);\r\n            const min = series.formatValue(series.stats.min);\r\n            const max = series.formatValue(series.stats.max);\r\n            const total = series.formatValue(series.stats.total);\r\n\r\n            if (panel.legend.min) {\r\n              html += '<div class=\"graph-legend-value min\">' + min + '</div>';\r\n            }\r\n            if (panel.legend.max) {\r\n              html += '<div class=\"graph-legend-value max\">' + max + '</div>';\r\n            }\r\n            if (panel.legend.avg) {\r\n              html += '<div class=\"graph-legend-value avg\">' + avg + '</div>';\r\n            }\r\n            if (panel.legend.current) {\r\n              html += '<div class=\"graph-legend-value current\">' + current + '</div>';\r\n            }\r\n            if (panel.legend.total) {\r\n              html += '<div class=\"graph-legend-value total\">' + total + '</div>';\r\n            }\r\n          }\r\n\r\n          html += '</div>';\r\n          seriesElements.push($(html));\r\n        }\r\n        return seriesElements;\r\n      }\r\n\r\n      function renderLegendElement(tableHeaderElem) {\r\n        const legendWidth = elem.width();\r\n\r\n        const seriesElements = renderSeriesLegendElements();\r\n\r\n        if (panel.legend.alignAsTable) {\r\n          const tbodyElem = $('<tbody></tbody>');\r\n          tbodyElem.append(tableHeaderElem);\r\n          tbodyElem.append(seriesElements);\r\n          elem.append(tbodyElem);\r\n          tbodyElem.wrap('<div class=\"graph-legend-scroll\"></div>');\r\n        } else {\r\n          elem.append('<div class=\"graph-legend-scroll\"></div>');\r\n          elem.find('.graph-legend-scroll').append(seriesElements);\r\n        }\r\n\r\n        if (!panel.legend.rightSide || (panel.legend.rightSide && legendWidth !== legendRightDefaultWidth)) {\r\n          addScrollbar();\r\n        } else {\r\n          destroyScrollbar();\r\n        }\r\n      }\r\n\r\n      function addScrollbar() {\r\n        const scrollRootClass = 'baron baron__root';\r\n        const scrollerClass = 'baron__scroller';\r\n        const scrollBarHTML = `\r\n          <div class=\"baron__track\">\r\n            <div class=\"baron__bar\"></div>\r\n          </div>\r\n        `;\r\n\r\n        const scrollRoot = elem;\r\n        const scroller = elem.find('.graph-legend-scroll');\r\n\r\n        // clear existing scroll bar track to prevent duplication\r\n        scrollRoot.find('.baron__track').remove();\r\n\r\n        scrollRoot.addClass(scrollRootClass);\r\n        $(scrollBarHTML).appendTo(scrollRoot);\r\n        scroller.addClass(scrollerClass);\r\n\r\n        const scrollbarParams = {\r\n          root: scrollRoot[0],\r\n          scroller: scroller[0],\r\n          bar: '.baron__bar',\r\n          track: '.baron__track',\r\n          barOnCls: '_scrollbar',\r\n          scrollingCls: '_scrolling',\r\n        };\r\n\r\n        if (!legendScrollbar) {\r\n          legendScrollbar = baron(scrollbarParams);\r\n        } else {\r\n          destroyScrollbar();\r\n          legendScrollbar = baron(scrollbarParams);\r\n        }\r\n\r\n        // #11830 - compensates for Firefox scrollbar calculation error in the baron framework\r\n        scroller[0].style.marginRight = '-' + (scroller[0].offsetWidth - scroller[0].clientWidth) + 'px';\r\n\r\n        legendScrollbar.scroll();\r\n      }\r\n\r\n      function destroyScrollbar() {\r\n        if (legendScrollbar) {\r\n          legendScrollbar.dispose();\r\n          legendScrollbar = undefined;\r\n        }\r\n      }\r\n    },\r\n  };\r\n});\r\n","import _ from 'lodash';\r\nimport angular from 'angular';\r\n\r\n/** @ngInject */\r\nexport function SeriesOverridesCtrl($scope, $element, popoverSrv) {\r\n  $scope.overrideMenu = [];\r\n  $scope.currentOverrides = [];\r\n  $scope.override = $scope.override || {};\r\n\r\n  $scope.addOverrideOption = function(name, propertyName, values) {\r\n    const option = {\r\n      text: name,\r\n      propertyName: propertyName,\r\n      index: $scope.overrideMenu.lenght,\r\n      values: values,\r\n      submenu: _.map(values, function(value) {\r\n        return { text: String(value), value: value };\r\n      }),\r\n    };\r\n\r\n    $scope.overrideMenu.push(option);\r\n  };\r\n\r\n  $scope.setOverride = function(item, subItem) {\r\n    // handle color overrides\r\n    if (item.propertyName === 'color') {\r\n      $scope.openColorSelector($scope.override['color']);\r\n      return;\r\n    }\r\n\r\n    $scope.override[item.propertyName] = subItem.value;\r\n\r\n    // automatically disable lines for this series and the fill below to series\r\n    // can be removed by the user if they still want lines\r\n    if (item.propertyName === 'fillBelowTo') {\r\n      $scope.override['lines'] = false;\r\n      $scope.ctrl.addSeriesOverride({ alias: subItem.value, lines: false });\r\n    }\r\n\r\n    $scope.updateCurrentOverrides();\r\n    $scope.ctrl.render();\r\n  };\r\n\r\n  $scope.colorSelected = function(color) {\r\n    $scope.override['color'] = color;\r\n    $scope.updateCurrentOverrides();\r\n    $scope.ctrl.render();\r\n  };\r\n\r\n  $scope.openColorSelector = function(color) {\r\n    const fakeSeries = { color: color };\r\n    popoverSrv.show({\r\n      element: $element.find('.dropdown')[0],\r\n      position: 'top center',\r\n      openOn: 'click',\r\n      template: '<series-color-picker series=\"series\" onColorChange=\"colorSelected\" />',\r\n      model: {\r\n        autoClose: true,\r\n        colorSelected: $scope.colorSelected,\r\n        series: fakeSeries,\r\n      },\r\n      onClose: function() {\r\n        $scope.ctrl.render();\r\n      },\r\n    });\r\n  };\r\n\r\n  $scope.removeOverride = function(option) {\r\n    delete $scope.override[option.propertyName];\r\n    $scope.updateCurrentOverrides();\r\n    $scope.ctrl.refresh();\r\n  };\r\n\r\n  $scope.getSeriesNames = function() {\r\n    return _.map($scope.ctrl.seriesList, function(series) {\r\n      return series.alias;\r\n    });\r\n  };\r\n\r\n  $scope.updateCurrentOverrides = function() {\r\n    $scope.currentOverrides = [];\r\n    _.each($scope.overrideMenu, function(option) {\r\n      const value = $scope.override[option.propertyName];\r\n      if (_.isUndefined(value)) {\r\n        return;\r\n      }\r\n      $scope.currentOverrides.push({\r\n        name: option.text,\r\n        propertyName: option.propertyName,\r\n        value: String(value),\r\n      });\r\n    });\r\n  };\r\n\r\n  $scope.addOverrideOption('Bars', 'bars', [true, false]);\r\n  $scope.addOverrideOption('Lines', 'lines', [true, false]);\r\n  $scope.addOverrideOption('Line fill', 'fill', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n  $scope.addOverrideOption('Line width', 'linewidth', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\r\n  $scope.addOverrideOption('Null point mode', 'nullPointMode', ['connected', 'null', 'null as zero']);\r\n  $scope.addOverrideOption('Fill below to', 'fillBelowTo', $scope.getSeriesNames());\r\n  $scope.addOverrideOption('Staircase line', 'steppedLine', [true, false]);\r\n  $scope.addOverrideOption('Dashes', 'dashes', [true, false]);\r\n  $scope.addOverrideOption('Dash Length', 'dashLength', [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    15,\r\n    16,\r\n    17,\r\n    18,\r\n    19,\r\n    20,\r\n  ]);\r\n  $scope.addOverrideOption('Dash Space', 'spaceLength', [\r\n    1,\r\n    2,\r\n    3,\r\n    4,\r\n    5,\r\n    6,\r\n    7,\r\n    8,\r\n    9,\r\n    10,\r\n    11,\r\n    12,\r\n    13,\r\n    14,\r\n    15,\r\n    16,\r\n    17,\r\n    18,\r\n    19,\r\n    20,\r\n  ]);\r\n  $scope.addOverrideOption('Points', 'points', [true, false]);\r\n  $scope.addOverrideOption('Points Radius', 'pointradius', [1, 2, 3, 4, 5]);\r\n  $scope.addOverrideOption('Stack', 'stack', [true, false, 'A', 'B', 'C', 'D']);\r\n  $scope.addOverrideOption('Color', 'color', ['change']);\r\n  $scope.addOverrideOption('Y-axis', 'yaxis', [1, 2]);\r\n  $scope.addOverrideOption('Z-index', 'zindex', [-3, -2, -1, 0, 1, 2, 3]);\r\n  $scope.addOverrideOption('Transform', 'transform', ['negative-Y']);\r\n  $scope.addOverrideOption('Legend', 'legend', [true, false]);\r\n  $scope.addOverrideOption('Hide in tooltip', 'hideTooltip', [true, false]);\r\n  $scope.updateCurrentOverrides();\r\n}\r\n\r\nangular.module('grafana.controllers').controller('SeriesOverridesCtrl', SeriesOverridesCtrl);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nexport class ThresholdFormCtrl {\r\n  panelCtrl: any;\r\n  panel: any;\r\n  disabled: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    this.panel = this.panelCtrl.panel;\r\n\r\n    if (this.panel.alert) {\r\n      this.disabled = true;\r\n    }\r\n\r\n    const unbindDestroy = $scope.$on('$destroy', () => {\r\n      this.panelCtrl.editingThresholds = false;\r\n      this.panelCtrl.render();\r\n      unbindDestroy();\r\n    });\r\n\r\n    this.panelCtrl.editingThresholds = true;\r\n  }\r\n\r\n  addThreshold() {\r\n    this.panel.thresholds.push({\r\n      value: undefined,\r\n      colorMode: 'critical',\r\n      op: 'gt',\r\n      fill: true,\r\n      line: true,\r\n      yaxis: 'left',\r\n    });\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  removeThreshold(index) {\r\n    this.panel.thresholds.splice(index, 1);\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  render() {\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  onFillColorChange(index) {\r\n    return newColor => {\r\n      this.panel.thresholds[index].fillColor = newColor;\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  onLineColorChange(index) {\r\n    return newColor => {\r\n      this.panel.thresholds[index].lineColor = newColor;\r\n      this.render();\r\n    };\r\n  }\r\n}\r\n\r\nconst template = `\r\n<div class=\"gf-form-group\">\r\n  <h5>Thresholds</h5>\r\n  <p class=\"muted\" ng-show=\"ctrl.disabled\">\r\n    Visual thresholds options <strong>disabled.</strong>\r\n    Visit the Alert tab update your thresholds. <br>\r\n    To re-enable thresholds, the alert rule must be deleted from this panel.\r\n  </p>\r\n  <div ng-class=\"{'thresholds-form-disabled': ctrl.disabled}\">\r\n    <div class=\"gf-form-inline\" ng-repeat=\"threshold in ctrl.panel.thresholds\">\r\n      <div class=\"gf-form\">\r\n        <label class=\"gf-form-label\">T{{$index+1}}</label>\r\n      </div>\r\n\r\n      <div class=\"gf-form\">\r\n        <div class=\"gf-form-select-wrapper\">\r\n          <select class=\"gf-form-input\" ng-model=\"threshold.op\"\r\n                  ng-options=\"f for f in ['gt', 'lt']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></select>\r\n        </div>\r\n        <input type=\"number\" ng-model=\"threshold.value\" class=\"gf-form-input width-8\"\r\n               ng-change=\"ctrl.render()\" placeholder=\"value\" ng-disabled=\"ctrl.disabled\">\r\n      </div>\r\n\r\n      <div class=\"gf-form\">\r\n        <label class=\"gf-form-label\">Color</label>\r\n        <div class=\"gf-form-select-wrapper\">\r\n          <select class=\"gf-form-input\" ng-model=\"threshold.colorMode\"\r\n                  ng-options=\"f for f in ['custom', 'critical', 'warning', 'ok']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <gf-form-switch class=\"gf-form\" label=\"Fill\" checked=\"threshold.fill\"\r\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\r\n\r\n      <div class=\"gf-form\" ng-if=\"threshold.fill && threshold.colorMode === 'custom'\">\r\n        <label class=\"gf-form-label\">Fill color</label>\r\n        <span class=\"gf-form-label\">\r\n          <color-picker color=\"threshold.fillColor\" onChange=\"ctrl.onFillColorChange($index)\"></color-picker>\r\n        </span>\r\n      </div>\r\n\r\n      <gf-form-switch class=\"gf-form\" label=\"Line\" checked=\"threshold.line\"\r\n                      on-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\"></gf-form-switch>\r\n\r\n      <div class=\"gf-form\" ng-if=\"threshold.line && threshold.colorMode === 'custom'\">\r\n        <label class=\"gf-form-label\">Line color</label>\r\n        <span class=\"gf-form-label\">\r\n          <color-picker color=\"threshold.lineColor\" onChange=\"ctrl.onLineColorChange($index)\"></color-picker>\r\n        </span>\r\n      </div>\r\n\r\n      <div class=\"gf-form\">\r\n        <label class=\"gf-form-label\">Y-Axis</label>\r\n        <div class=\"gf-form-select-wrapper\">\r\n          <select class=\"gf-form-input\" ng-model=\"threshold.yaxis\"\r\n                  ng-init=\"threshold.yaxis = threshold.yaxis === 'left' || threshold.yaxis === 'right' ? threshold.yaxis : 'left'\"\r\n                  ng-options=\"f for f in ['left', 'right']\" ng-change=\"ctrl.render()\" ng-disabled=\"ctrl.disabled\">\r\n          </select>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"gf-form\">\r\n        <label class=\"gf-form-label\">\r\n          <a class=\"pointer\" ng-click=\"ctrl.removeThreshold($index)\" ng-disabled=\"ctrl.disabled\">\r\n            <i class=\"fa fa-trash\"></i>\r\n          </a>\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"gf-form-button-row\">\r\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.addThreshold()\" ng-disabled=\"ctrl.disabled\">\r\n        <i class=\"fa fa-plus\"></i>&nbsp;Add Threshold\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\ncoreModule.directive('graphThresholdForm', function() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: ThresholdFormCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      panelCtrl: '=',\r\n    },\r\n  };\r\n});\r\n","const template = `\r\n<div class=\"graph-panel\" ng-class=\"{'graph-panel--legend-right': ctrl.panel.legend.rightSide}\">\r\n  <div class=\"graph-panel__chart\" grafana-graph ng-dblclick=\"ctrl.zoomOut()\">\r\n  </div>\r\n\r\n  <div class=\"graph-legend\">\r\n    <div class=\"graph-legend-content\" graph-legend></div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport default template;\r\n","import _ from 'lodash';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport colors from 'app/core/utils/colors';\r\n\r\nexport class DataProcessor {\r\n  constructor(private panel) {}\r\n\r\n  getSeriesList(options) {\r\n    if (!options.dataList || options.dataList.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // auto detect xaxis mode\r\n    let firstItem;\r\n    if (options.dataList && options.dataList.length > 0) {\r\n      firstItem = options.dataList[0];\r\n      const autoDetectMode = this.getAutoDetectXAxisMode(firstItem);\r\n      if (this.panel.xaxis.mode !== autoDetectMode) {\r\n        this.panel.xaxis.mode = autoDetectMode;\r\n        this.setPanelDefaultsForNewXAxisMode();\r\n      }\r\n    }\r\n\r\n    switch (this.panel.xaxis.mode) {\r\n      case 'series':\r\n      case 'time': {\r\n        return options.dataList.map((item, index) => {\r\n          return this.timeSeriesHandler(item, index, options);\r\n        });\r\n      }\r\n      case 'histogram': {\r\n        let histogramDataList;\r\n        if (this.panel.stack) {\r\n          histogramDataList = options.dataList;\r\n        } else {\r\n          histogramDataList = [\r\n            {\r\n              target: 'count',\r\n              datapoints: _.concat([], _.flatten(_.map(options.dataList, 'datapoints'))),\r\n            },\r\n          ];\r\n        }\r\n        return histogramDataList.map((item, index) => {\r\n          return this.timeSeriesHandler(item, index, options);\r\n        });\r\n      }\r\n      case 'field': {\r\n        return this.customHandler(firstItem);\r\n      }\r\n    }\r\n  }\r\n\r\n  getAutoDetectXAxisMode(firstItem) {\r\n    switch (firstItem.type) {\r\n      case 'docs':\r\n        return 'field';\r\n      case 'table':\r\n        return 'field';\r\n      default: {\r\n        if (this.panel.xaxis.mode === 'series') {\r\n          return 'series';\r\n        }\r\n        if (this.panel.xaxis.mode === 'histogram') {\r\n          return 'histogram';\r\n        }\r\n        return 'time';\r\n      }\r\n    }\r\n  }\r\n\r\n  setPanelDefaultsForNewXAxisMode() {\r\n    switch (this.panel.xaxis.mode) {\r\n      case 'time': {\r\n        this.panel.bars = false;\r\n        this.panel.lines = true;\r\n        this.panel.points = false;\r\n        this.panel.legend.show = true;\r\n        this.panel.tooltip.shared = true;\r\n        this.panel.xaxis.values = [];\r\n        break;\r\n      }\r\n      case 'series': {\r\n        this.panel.bars = true;\r\n        this.panel.lines = false;\r\n        this.panel.points = false;\r\n        this.panel.stack = false;\r\n        this.panel.legend.show = false;\r\n        this.panel.tooltip.shared = false;\r\n        this.panel.xaxis.values = ['total'];\r\n        break;\r\n      }\r\n      case 'histogram': {\r\n        this.panel.bars = true;\r\n        this.panel.lines = false;\r\n        this.panel.points = false;\r\n        this.panel.stack = false;\r\n        this.panel.legend.show = false;\r\n        this.panel.tooltip.shared = false;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  timeSeriesHandler(seriesData, index, options) {\r\n    const datapoints = seriesData.datapoints || [];\r\n    const alias = seriesData.target;\r\n\r\n    const colorIndex = index % colors.length;\r\n    const color = this.panel.aliasColors[alias] || colors[colorIndex];\r\n\r\n    const series = new TimeSeries({\r\n      datapoints: datapoints,\r\n      alias: alias,\r\n      color: color,\r\n      unit: seriesData.unit,\r\n    });\r\n\r\n    if (datapoints && datapoints.length > 0) {\r\n      const last = datapoints[datapoints.length - 1][1];\r\n      const from = options.range.from;\r\n      if (last - from < -10000) {\r\n        series.isOutsideRange = true;\r\n      }\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n  customHandler(dataItem) {\r\n    const nameField = this.panel.xaxis.name;\r\n    if (!nameField) {\r\n      throw {\r\n        message: 'No field name specified to use for x-axis, check your axes settings',\r\n      };\r\n    }\r\n    return [];\r\n  }\r\n\r\n  validateXAxisSeriesValue() {\r\n    switch (this.panel.xaxis.mode) {\r\n      case 'series': {\r\n        if (this.panel.xaxis.values.length === 0) {\r\n          this.panel.xaxis.values = ['total'];\r\n          return;\r\n        }\r\n\r\n        const validOptions = this.getXAxisValueOptions({});\r\n        const found = _.find(validOptions, { value: this.panel.xaxis.values[0] });\r\n        if (!found) {\r\n          this.panel.xaxis.values = ['total'];\r\n        }\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  getDataFieldNames(dataList, onlyNumbers) {\r\n    if (dataList.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const fields = [];\r\n    const firstItem = dataList[0];\r\n    const fieldParts = [];\r\n\r\n    function getPropertiesRecursive(obj) {\r\n      _.forEach(obj, (value, key) => {\r\n        if (_.isObject(value)) {\r\n          fieldParts.push(key);\r\n          getPropertiesRecursive(value);\r\n        } else {\r\n          if (!onlyNumbers || _.isNumber(value)) {\r\n            const field = fieldParts.concat(key).join('.');\r\n            fields.push(field);\r\n          }\r\n        }\r\n      });\r\n      fieldParts.pop();\r\n    }\r\n\r\n    if (firstItem.type === 'docs') {\r\n      if (firstItem.datapoints.length === 0) {\r\n        return [];\r\n      }\r\n      getPropertiesRecursive(firstItem.datapoints[0]);\r\n    }\r\n\r\n    return fields;\r\n  }\r\n\r\n  getXAxisValueOptions(options) {\r\n    switch (this.panel.xaxis.mode) {\r\n      case 'series': {\r\n        return [\r\n          { text: 'Avg', value: 'avg' },\r\n          { text: 'Min', value: 'min' },\r\n          { text: 'Max', value: 'max' },\r\n          { text: 'Total', value: 'total' },\r\n          { text: 'Count', value: 'count' },\r\n        ];\r\n      }\r\n    }\r\n\r\n    return [];\r\n  }\r\n\r\n  pluckDeep(obj: any, property: string) {\r\n    const propertyParts = property.split('.');\r\n    let value = obj;\r\n    for (let i = 0; i < propertyParts.length; ++i) {\r\n      if (value[propertyParts[i]]) {\r\n        value = value[propertyParts[i]];\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n    return value;\r\n  }\r\n}\r\n","import './graph';\r\nimport './legend';\r\nimport './series_overrides_ctrl';\r\nimport './thresholds_form';\r\n\r\nimport template from './template';\r\nimport _ from 'lodash';\r\nimport config from 'app/core/config';\r\nimport { MetricsPanelCtrl, alertTab } from 'app/plugins/sdk';\r\nimport { DataProcessor } from './data_processor';\r\nimport { axesEditorComponent } from './axes_editor';\r\n\r\nclass GraphCtrl extends MetricsPanelCtrl {\r\n  static template = template;\r\n\r\n  renderError: boolean;\r\n  hiddenSeries: any = {};\r\n  seriesList: any = [];\r\n  dataList: any = [];\r\n  annotations: any = [];\r\n  alertState: any;\r\n\r\n  annotationsPromise: any;\r\n  dataWarning: any;\r\n  colors: any = [];\r\n  subTabIndex: number;\r\n  processor: DataProcessor;\r\n\r\n  panelDefaults = {\r\n    // datasource name, null = default datasource\r\n    datasource: null,\r\n    // sets client side (flot) or native graphite png renderer (png)\r\n    renderer: 'flot',\r\n    yaxes: [\r\n      {\r\n        label: null,\r\n        show: true,\r\n        logBase: 1,\r\n        min: null,\r\n        max: null,\r\n        format: 'short',\r\n      },\r\n      {\r\n        label: null,\r\n        show: true,\r\n        logBase: 1,\r\n        min: null,\r\n        max: null,\r\n        format: 'short',\r\n      },\r\n    ],\r\n    xaxis: {\r\n      show: true,\r\n      mode: 'time',\r\n      name: null,\r\n      values: [],\r\n      buckets: null,\r\n    },\r\n    yaxis: {\r\n      align: false,\r\n      alignLevel: null,\r\n    },\r\n    // show/hide lines\r\n    lines: true,\r\n    // fill factor\r\n    fill: 1,\r\n    // line width in pixels\r\n    linewidth: 1,\r\n    // show/hide dashed line\r\n    dashes: false,\r\n    // length of a dash\r\n    dashLength: 10,\r\n    // length of space between two dashes\r\n    spaceLength: 10,\r\n    // show hide points\r\n    points: false,\r\n    // point radius in pixels\r\n    pointradius: 5,\r\n    // show hide bars\r\n    bars: false,\r\n    // enable/disable stacking\r\n    stack: false,\r\n    // stack percentage mode\r\n    percentage: false,\r\n    // legend options\r\n    legend: {\r\n      show: true, // disable/enable legend\r\n      values: false, // disable/enable legend values\r\n      min: false,\r\n      max: false,\r\n      current: false,\r\n      total: false,\r\n      avg: false,\r\n    },\r\n    // how null points should be handled\r\n    nullPointMode: 'null',\r\n    // staircase line mode\r\n    steppedLine: false,\r\n    // tooltip options\r\n    tooltip: {\r\n      value_type: 'individual',\r\n      shared: true,\r\n      sort: 0,\r\n    },\r\n    // time overrides\r\n    timeFrom: null,\r\n    timeShift: null,\r\n    // metric queries\r\n    targets: [{}],\r\n    // series color overrides\r\n    aliasColors: {},\r\n    // other style overrides\r\n    seriesOverrides: [],\r\n    thresholds: [],\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private annotationsSrv) {\r\n    super($scope, $injector);\r\n\r\n    _.defaults(this.panel, this.panelDefaults);\r\n    _.defaults(this.panel.tooltip, this.panelDefaults.tooltip);\r\n    _.defaults(this.panel.legend, this.panelDefaults.legend);\r\n    _.defaults(this.panel.xaxis, this.panelDefaults.xaxis);\r\n\r\n    this.processor = new DataProcessor(this.panel);\r\n\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataSnapshotLoad.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Axes', axesEditorComponent, 2);\r\n    this.addEditorTab('Legend', 'public/app/plugins/panel/graph/tab_legend.html', 3);\r\n    this.addEditorTab('Display', 'public/app/plugins/panel/graph/tab_display.html', 4);\r\n\r\n    if (config.alertingEnabled) {\r\n      this.addEditorTab('Alert', alertTab, 5);\r\n    }\r\n\r\n    this.subTabIndex = 0;\r\n  }\r\n\r\n  onInitPanelActions(actions) {\r\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\r\n    actions.push({ text: 'Toggle legend', click: 'ctrl.toggleLegend()' });\r\n  }\r\n\r\n  issueQueries(datasource) {\r\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\r\n      dashboard: this.dashboard,\r\n      panel: this.panel,\r\n      range: this.range,\r\n    });\r\n    return super.issueQueries(datasource);\r\n  }\r\n\r\n  zoomOut(evt) {\r\n    this.publishAppEvent('zoom-out', 2);\r\n  }\r\n\r\n  onDataSnapshotLoad(snapshotData) {\r\n    this.annotationsPromise = this.annotationsSrv.getAnnotations({\r\n      dashboard: this.dashboard,\r\n      panel: this.panel,\r\n      range: this.range,\r\n    });\r\n    this.onDataReceived(snapshotData);\r\n  }\r\n\r\n  onDataError(err) {\r\n    this.seriesList = [];\r\n    this.annotations = [];\r\n    this.render([]);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.dataList = dataList;\r\n    this.seriesList = this.processor.getSeriesList({\r\n      dataList: dataList,\r\n      range: this.range,\r\n    });\r\n\r\n    this.dataWarning = null;\r\n    const datapointsCount = this.seriesList.reduce((prev, series) => {\r\n      return prev + series.datapoints.length;\r\n    }, 0);\r\n\r\n    if (datapointsCount === 0) {\r\n      this.dataWarning = {\r\n        title: 'No data points',\r\n        tip: 'No datapoints returned from data query',\r\n      };\r\n    } else {\r\n      for (const series of this.seriesList) {\r\n        if (series.isOutsideRange) {\r\n          this.dataWarning = {\r\n            title: 'Data points outside time range',\r\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\r\n          };\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.annotationsPromise.then(\r\n      result => {\r\n        this.loading = false;\r\n        this.alertState = result.alertState;\r\n        this.annotations = result.annotations;\r\n        this.render(this.seriesList);\r\n      },\r\n      () => {\r\n        this.loading = false;\r\n        this.render(this.seriesList);\r\n      }\r\n    );\r\n  }\r\n\r\n  onRender() {\r\n    if (!this.seriesList) {\r\n      return;\r\n    }\r\n\r\n    for (const series of this.seriesList) {\r\n      series.applySeriesOverrides(this.panel.seriesOverrides);\r\n\r\n      if (series.unit) {\r\n        this.panel.yaxes[series.yaxis - 1].format = series.unit;\r\n      }\r\n    }\r\n  }\r\n\r\n  changeSeriesColor(series, color) {\r\n    series.setColor(color);\r\n    this.panel.aliasColors[series.alias] = series.color;\r\n    this.render();\r\n  }\r\n\r\n  toggleSeries(serie, event) {\r\n    if (event.ctrlKey || event.metaKey || event.shiftKey) {\r\n      if (this.hiddenSeries[serie.alias]) {\r\n        delete this.hiddenSeries[serie.alias];\r\n      } else {\r\n        this.hiddenSeries[serie.alias] = true;\r\n      }\r\n    } else {\r\n      this.toggleSeriesExclusiveMode(serie);\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  toggleSeriesExclusiveMode(serie) {\r\n    const hidden = this.hiddenSeries;\r\n\r\n    if (hidden[serie.alias]) {\r\n      delete hidden[serie.alias];\r\n    }\r\n\r\n    // check if every other series is hidden\r\n    const alreadyExclusive = _.every(this.seriesList, value => {\r\n      if (value.alias === serie.alias) {\r\n        return true;\r\n      }\r\n\r\n      return hidden[value.alias];\r\n    });\r\n\r\n    if (alreadyExclusive) {\r\n      // remove all hidden series\r\n      _.each(this.seriesList, value => {\r\n        delete this.hiddenSeries[value.alias];\r\n      });\r\n    } else {\r\n      // hide all but this serie\r\n      _.each(this.seriesList, value => {\r\n        if (value.alias === serie.alias) {\r\n          return;\r\n        }\r\n\r\n        this.hiddenSeries[value.alias] = true;\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleAxis(info) {\r\n    let override = _.find(this.panel.seriesOverrides, { alias: info.alias });\r\n    if (!override) {\r\n      override = { alias: info.alias };\r\n      this.panel.seriesOverrides.push(override);\r\n    }\r\n    info.yaxis = override.yaxis = info.yaxis === 2 ? 1 : 2;\r\n    this.render();\r\n  }\r\n\r\n  addSeriesOverride(override) {\r\n    this.panel.seriesOverrides.push(override || {});\r\n  }\r\n\r\n  removeSeriesOverride(override) {\r\n    this.panel.seriesOverrides = _.without(this.panel.seriesOverrides, override);\r\n    this.render();\r\n  }\r\n\r\n  toggleLegend() {\r\n    this.panel.legend.show = !this.panel.legend.show;\r\n    this.refresh();\r\n  }\r\n\r\n  legendValuesOptionChanged() {\r\n    const legend = this.panel.legend;\r\n    legend.values = legend.min || legend.max || legend.avg || legend.current || legend.total;\r\n    this.render();\r\n  }\r\n\r\n  exportCsv() {\r\n    const scope = this.$scope.$new(true);\r\n    scope.seriesList = this.seriesList;\r\n    this.publishAppEvent('show-modal', {\r\n      templateHtml: '<export-data-modal data=\"seriesList\"></export-data-modal>',\r\n      scope,\r\n      modalClass: 'modal--narrow',\r\n    });\r\n  }\r\n}\r\n\r\nexport { GraphCtrl, GraphCtrl as PanelCtrl };\r\n","import kbn from 'app/core/utils/kbn';\r\n\r\nexport class AxesEditorCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n  unitFormats: any;\r\n  logScales: any;\r\n  xAxisModes: any;\r\n  xAxisStatOptions: any;\r\n  xNameSegment: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private $q) {\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.$scope.ctrl = this;\r\n\r\n    this.unitFormats = kbn.getUnitFormats();\r\n\r\n    this.logScales = {\r\n      linear: 1,\r\n      'log (base 2)': 2,\r\n      'log (base 10)': 10,\r\n      'log (base 32)': 32,\r\n      'log (base 1024)': 1024,\r\n    };\r\n\r\n    this.xAxisModes = {\r\n      Time: 'time',\r\n      Series: 'series',\r\n      Histogram: 'histogram',\r\n      // 'Data field': 'field',\r\n    };\r\n\r\n    this.xAxisStatOptions = [\r\n      { text: 'Avg', value: 'avg' },\r\n      { text: 'Min', value: 'min' },\r\n      { text: 'Max', value: 'max' },\r\n      { text: 'Total', value: 'total' },\r\n      { text: 'Count', value: 'count' },\r\n      { text: 'Current', value: 'current' },\r\n    ];\r\n\r\n    if (this.panel.xaxis.mode === 'custom') {\r\n      if (!this.panel.xaxis.name) {\r\n        this.panel.xaxis.name = 'specify field';\r\n      }\r\n    }\r\n  }\r\n\r\n  setUnitFormat(axis, subItem) {\r\n    axis.format = subItem.value;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  render() {\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  xAxisModeChanged() {\r\n    this.panelCtrl.processor.setPanelDefaultsForNewXAxisMode();\r\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\r\n  }\r\n\r\n  xAxisValueChanged() {\r\n    this.panelCtrl.onDataReceived(this.panelCtrl.dataList);\r\n  }\r\n\r\n  getDataFieldNames(onlyNumbers) {\r\n    const props = this.panelCtrl.processor.getDataFieldNames(this.panelCtrl.dataList, onlyNumbers);\r\n    const items = props.map(prop => {\r\n      return { text: prop, value: prop };\r\n    });\r\n\r\n    return this.$q.when(items);\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function axesEditorComponent() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/plugins/panel/graph/axes_editor.html',\r\n    controller: AxesEditorCtrl,\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport { PanelCtrl } from 'app/plugins/sdk';\r\nimport impressionSrv from 'app/core/services/impression_srv';\r\n\r\nclass DashListCtrl extends PanelCtrl {\r\n  static templateUrl = 'module.html';\r\n  static scrollable = true;\r\n\r\n  groups: any[];\r\n  modes: any[];\r\n\r\n  panelDefaults = {\r\n    query: '',\r\n    limit: 10,\r\n    tags: [],\r\n    recent: false,\r\n    search: false,\r\n    starred: true,\r\n    headings: true,\r\n    folderId: null,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private backendSrv, private dashboardSrv) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    if (this.panel.tag) {\r\n      this.panel.tags = [this.panel.tag];\r\n      delete this.panel.tag;\r\n    }\r\n\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\r\n    this.groups = [\r\n      { list: [], show: false, header: 'Starred dashboards' },\r\n      { list: [], show: false, header: 'Recently viewed dashboards' },\r\n      { list: [], show: false, header: 'Search' },\r\n    ];\r\n\r\n    // update capability\r\n    if (this.panel.mode) {\r\n      if (this.panel.mode === 'starred') {\r\n        this.panel.starred = true;\r\n        this.panel.headings = false;\r\n      }\r\n      if (this.panel.mode === 'recently viewed') {\r\n        this.panel.recent = true;\r\n        this.panel.starred = false;\r\n        this.panel.headings = false;\r\n      }\r\n      if (this.panel.mode === 'search') {\r\n        this.panel.search = true;\r\n        this.panel.starred = false;\r\n        this.panel.headings = false;\r\n      }\r\n      delete this.panel.mode;\r\n    }\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.editorTabIndex = 1;\r\n    this.modes = ['starred', 'search', 'recently viewed'];\r\n    this.addEditorTab('Options', 'public/app/plugins/panel/dashlist/editor.html');\r\n  }\r\n\r\n  onRefresh() {\r\n    const promises = [];\r\n\r\n    promises.push(this.getRecentDashboards());\r\n    promises.push(this.getStarred());\r\n    promises.push(this.getSearch());\r\n\r\n    return Promise.all(promises).then(this.renderingCompleted.bind(this));\r\n  }\r\n\r\n  getSearch() {\r\n    this.groups[2].show = this.panel.search;\r\n    if (!this.panel.search) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const params = {\r\n      limit: this.panel.limit,\r\n      query: this.panel.query,\r\n      tag: this.panel.tags,\r\n      folderIds: this.panel.folderId,\r\n      type: 'dash-db',\r\n    };\r\n\r\n    return this.backendSrv.search(params).then(result => {\r\n      this.groups[2].list = result;\r\n    });\r\n  }\r\n\r\n  getStarred() {\r\n    this.groups[0].show = this.panel.starred;\r\n    if (!this.panel.starred) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const params = { limit: this.panel.limit, starred: 'true' };\r\n    return this.backendSrv.search(params).then(result => {\r\n      this.groups[0].list = result;\r\n    });\r\n  }\r\n\r\n  starDashboard(dash, evt) {\r\n    this.dashboardSrv.starDashboard(dash.id, dash.isStarred).then(newState => {\r\n      dash.isStarred = newState;\r\n    });\r\n\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n  }\r\n\r\n  getRecentDashboards() {\r\n    this.groups[1].show = this.panel.recent;\r\n    if (!this.panel.recent) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    const dashIds = _.take(impressionSrv.getDashboardOpened(), this.panel.limit);\r\n    return this.backendSrv.search({ dashboardIds: dashIds, limit: this.panel.limit }).then(result => {\r\n      this.groups[1].list = dashIds\r\n        .map(orderId => {\r\n          return _.find(result, dashboard => {\r\n            return dashboard.id === orderId;\r\n          });\r\n        })\r\n        .filter(el => {\r\n          return el !== undefined;\r\n        });\r\n    });\r\n  }\r\n\r\n  onFolderChange(folder: any) {\r\n    this.panel.folderId = folder.id;\r\n    this.refresh();\r\n  }\r\n}\r\n\r\nexport { DashListCtrl, DashListCtrl as PanelCtrl };\r\n","import _ from 'lodash';\r\nimport { PanelCtrl } from '../../../features/panel/panel_ctrl';\r\n\r\nclass PluginListCtrl extends PanelCtrl {\r\n  static templateUrl = 'module.html';\r\n  static scrollable = true;\r\n\r\n  pluginList: any[];\r\n  viewModel: any;\r\n\r\n  // Set and populate defaults\r\n  panelDefaults = {};\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private backendSrv) {\r\n    super($scope, $injector);\r\n\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.pluginList = [];\r\n    this.viewModel = [\r\n      { header: 'Installed Apps', list: [], type: 'app' },\r\n      { header: 'Installed Panels', list: [], type: 'panel' },\r\n      { header: 'Installed Datasources', list: [], type: 'datasource' },\r\n    ];\r\n\r\n    this.update();\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.editorTabIndex = 1;\r\n    this.addEditorTab('Options', 'public/app/plugins/panel/pluginlist/editor.html');\r\n  }\r\n\r\n  gotoPlugin(plugin, evt) {\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n    }\r\n    this.$location.url(`plugins/${plugin.id}/edit`);\r\n  }\r\n\r\n  updateAvailable(plugin, $event) {\r\n    $event.stopPropagation();\r\n    $event.preventDefault();\r\n\r\n    const modalScope = this.$scope.$new(true);\r\n    modalScope.plugin = plugin;\r\n\r\n    this.publishAppEvent('show-modal', {\r\n      src: 'public/app/features/plugins/partials/update_instructions.html',\r\n      scope: modalScope,\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.backendSrv.get('api/plugins', { embedded: 0, core: 0 }).then(plugins => {\r\n      this.pluginList = plugins;\r\n      this.viewModel[0].list = _.filter(plugins, { type: 'app' });\r\n      this.viewModel[1].list = _.filter(plugins, { type: 'panel' });\r\n      this.viewModel[2].list = _.filter(plugins, { type: 'datasource' });\r\n\r\n      for (const plugin of this.pluginList) {\r\n        if (plugin.hasUpdate) {\r\n          plugin.state = 'has-update';\r\n        } else if (!plugin.enabled) {\r\n          plugin.state = 'not-enabled';\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport { PluginListCtrl, PluginListCtrl as PanelCtrl };\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport alertDef from '../../../features/alerting/alert_def';\r\nimport { PanelCtrl } from 'app/plugins/sdk';\r\n\r\nimport * as dateMath from 'app/core/utils/datemath';\r\n\r\nclass AlertListPanel extends PanelCtrl {\r\n  static templateUrl = 'module.html';\r\n  static scrollable = true;\r\n\r\n  showOptions = [{ text: 'Current state', value: 'current' }, { text: 'Recent state changes', value: 'changes' }];\r\n\r\n  sortOrderOptions = [\r\n    { text: 'Alphabetical (asc)', value: 1 },\r\n    { text: 'Alphabetical (desc)', value: 2 },\r\n    { text: 'Importance', value: 3 },\r\n  ];\r\n\r\n  stateFilter: any = {};\r\n  currentAlerts: any = [];\r\n  alertHistory: any = [];\r\n  noAlertsMessage: string;\r\n\r\n  // Set and populate defaults\r\n  panelDefaults = {\r\n    show: 'current',\r\n    limit: 10,\r\n    stateFilter: [],\r\n    onlyAlertsOnDashboard: false,\r\n    sortOrder: 1,\r\n    dashboardFilter: '',\r\n    nameFilter: '',\r\n    folderId: null,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private backendSrv) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('refresh', this.onRefresh.bind(this));\r\n\r\n    for (const key in this.panel.stateFilter) {\r\n      this.stateFilter[this.panel.stateFilter[key]] = true;\r\n    }\r\n  }\r\n\r\n  sortResult(alerts) {\r\n    if (this.panel.sortOrder === 3) {\r\n      return _.sortBy(alerts, a => {\r\n        return alertDef.alertStateSortScore[a.state];\r\n      });\r\n    }\r\n\r\n    const result = _.sortBy(alerts, a => {\r\n      return a.name.toLowerCase();\r\n    });\r\n    if (this.panel.sortOrder === 2) {\r\n      result.reverse();\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  updateStateFilter() {\r\n    const result = [];\r\n\r\n    for (const key in this.stateFilter) {\r\n      if (this.stateFilter[key]) {\r\n        result.push(key);\r\n      }\r\n    }\r\n\r\n    this.panel.stateFilter = result;\r\n    this.onRefresh();\r\n  }\r\n\r\n  onRefresh() {\r\n    let getAlertsPromise;\r\n\r\n    if (this.panel.show === 'current') {\r\n      getAlertsPromise = this.getCurrentAlertState();\r\n    }\r\n\r\n    if (this.panel.show === 'changes') {\r\n      getAlertsPromise = this.getStateChanges();\r\n    }\r\n\r\n    getAlertsPromise.then(() => {\r\n      this.renderingCompleted();\r\n    });\r\n  }\r\n\r\n  onFolderChange(folder: any) {\r\n    this.panel.folderId = folder.id;\r\n    this.refresh();\r\n  }\r\n\r\n  getStateChanges() {\r\n    const params: any = {\r\n      limit: this.panel.limit,\r\n      type: 'alert',\r\n      newState: this.panel.stateFilter,\r\n    };\r\n\r\n    if (this.panel.onlyAlertsOnDashboard) {\r\n      params.dashboardId = this.dashboard.id;\r\n    }\r\n\r\n    params.from = dateMath.parse(this.dashboard.time.from).unix() * 1000;\r\n    params.to = dateMath.parse(this.dashboard.time.to).unix() * 1000;\r\n\r\n    return this.backendSrv.get(`/api/annotations`, params).then(res => {\r\n      this.alertHistory = _.map(res, al => {\r\n        al.time = this.dashboard.formatDate(al.time, 'MMM D, YYYY HH:mm:ss');\r\n        al.stateModel = alertDef.getStateDisplayModel(al.newState);\r\n        al.info = alertDef.getAlertAnnotationInfo(al);\r\n        return al;\r\n      });\r\n\r\n      this.noAlertsMessage = this.alertHistory.length === 0 ? 'No alerts in current time range' : '';\r\n\r\n      return this.alertHistory;\r\n    });\r\n  }\r\n\r\n  getCurrentAlertState() {\r\n    const params: any = {\r\n      state: this.panel.stateFilter,\r\n    };\r\n\r\n    if (this.panel.nameFilter) {\r\n      params.query = this.panel.nameFilter;\r\n    }\r\n\r\n    if (this.panel.folderId >= 0) {\r\n      params.folderId = this.panel.folderId;\r\n    }\r\n\r\n    if (this.panel.dashboardFilter) {\r\n      params.dashboardQuery = this.panel.dashboardFilter;\r\n    }\r\n\r\n    if (this.panel.onlyAlertsOnDashboard) {\r\n      params.dashboardId = this.dashboard.id;\r\n    }\r\n\r\n    if (this.panel.dashboardTags) {\r\n      params.dashboardTag = this.panel.dashboardTags;\r\n    }\r\n\r\n    return this.backendSrv.get(`/api/alerts`, params).then(res => {\r\n      this.currentAlerts = this.sortResult(\r\n        _.map(res, al => {\r\n          al.stateModel = alertDef.getStateDisplayModel(al.state);\r\n          al.newStateDateAgo = moment(al.newStateDate)\r\n            .locale('en')\r\n            .fromNow(true);\r\n          return al;\r\n        })\r\n      );\r\n      if (this.currentAlerts.length > this.panel.limit) {\r\n        this.currentAlerts = this.currentAlerts.slice(0, this.panel.limit);\r\n      }\r\n      this.noAlertsMessage = this.currentAlerts.length === 0 ? 'No alerts' : '';\r\n\r\n      return this.currentAlerts;\r\n    });\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', 'public/app/plugins/panel/alertlist/editor.html');\r\n  }\r\n}\r\n\r\nexport { AlertListPanel, AlertListPanel as PanelCtrl };\r\n","import * as d3 from 'd3';\r\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\r\n\r\nexport function getColorScale(colorScheme: any, lightTheme: boolean, maxValue: number, minValue = 0): (d: any) => any {\r\n  const colorInterpolator = d3ScaleChromatic[colorScheme.value];\r\n  const colorScaleInverted = colorScheme.invert === 'always' || colorScheme.invert === (lightTheme ? 'light' : 'dark');\r\n\r\n  const start = colorScaleInverted ? maxValue : minValue;\r\n  const end = colorScaleInverted ? minValue : maxValue;\r\n\r\n  return d3.scaleSequential(colorInterpolator).domain([start, end]);\r\n}\r\n\r\nexport function getOpacityScale(options, maxValue, minValue = 0) {\r\n  let legendOpacityScale;\r\n  if (options.colorScale === 'linear') {\r\n    legendOpacityScale = d3\r\n      .scaleLinear()\r\n      .domain([minValue, maxValue])\r\n      .range([0, 1]);\r\n  } else if (options.colorScale === 'sqrt') {\r\n    legendOpacityScale = d3\r\n      .scalePow()\r\n      .exponent(options.exponent)\r\n      .domain([minValue, maxValue])\r\n      .range([0, 1]);\r\n  }\r\n  return legendOpacityScale;\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport * as d3 from 'd3';\r\nimport { contextSrv } from 'app/core/core';\r\nimport { tickStep } from 'app/core/utils/ticks';\r\nimport { getColorScale, getOpacityScale } from './color_scale';\r\n\r\nconst module = angular.module('grafana.directives');\r\n\r\nconst LEGEND_HEIGHT_PX = 6;\r\nconst LEGEND_WIDTH_PX = 100;\r\nconst LEGEND_TICK_SIZE = 0;\r\nconst LEGEND_VALUE_MARGIN = 0;\r\n\r\n/**\r\n * Color legend for heatmap editor.\r\n */\r\nmodule.directive('colorLegend', function() {\r\n  return {\r\n    restrict: 'E',\r\n    template: '<div class=\"heatmap-color-legend\"><svg width=\"16.5rem\" height=\"24px\"></svg></div>',\r\n    link: function(scope, elem, attrs) {\r\n      const ctrl = scope.ctrl;\r\n      const panel = scope.ctrl.panel;\r\n\r\n      render();\r\n\r\n      ctrl.events.on('render', function() {\r\n        render();\r\n      });\r\n\r\n      function render() {\r\n        const legendElem = $(elem).find('svg');\r\n        const legendWidth = Math.floor(legendElem.outerWidth());\r\n\r\n        if (panel.color.mode === 'spectrum') {\r\n          const colorScheme = _.find(ctrl.colorSchemes, {\r\n            value: panel.color.colorScheme,\r\n          });\r\n          const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, legendWidth);\r\n          drawSimpleColorLegend(elem, colorScale);\r\n        } else if (panel.color.mode === 'opacity') {\r\n          const colorOptions = panel.color;\r\n          drawSimpleOpacityLegend(elem, colorOptions);\r\n        }\r\n      }\r\n    },\r\n  };\r\n});\r\n\r\n/**\r\n * Heatmap legend with scale values.\r\n */\r\nmodule.directive('heatmapLegend', function() {\r\n  return {\r\n    restrict: 'E',\r\n    template: `<div class=\"heatmap-color-legend\"><svg width=\"${LEGEND_WIDTH_PX}px\" height=\"${LEGEND_HEIGHT_PX}px\"></svg></div>`,\r\n    link: function(scope, elem, attrs) {\r\n      const ctrl = scope.ctrl;\r\n      const panel = scope.ctrl.panel;\r\n\r\n      render();\r\n      ctrl.events.on('render', function() {\r\n        render();\r\n      });\r\n\r\n      function render() {\r\n        clearLegend(elem);\r\n        if (!_.isEmpty(ctrl.data) && !_.isEmpty(ctrl.data.cards)) {\r\n          const rangeFrom = 0;\r\n          const rangeTo = ctrl.data.cardStats.max;\r\n          const maxValue = panel.color.max || rangeTo;\r\n          const minValue = panel.color.min || 0;\r\n\r\n          if (panel.color.mode === 'spectrum') {\r\n            const colorScheme = _.find(ctrl.colorSchemes, {\r\n              value: panel.color.colorScheme,\r\n            });\r\n            drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue);\r\n          } else if (panel.color.mode === 'opacity') {\r\n            const colorOptions = panel.color;\r\n            drawOpacityLegend(elem, colorOptions, rangeFrom, rangeTo, maxValue, minValue);\r\n          }\r\n        }\r\n      }\r\n    },\r\n  };\r\n});\r\n\r\nfunction drawColorLegend(elem, colorScheme, rangeFrom, rangeTo, maxValue, minValue) {\r\n  const legendElem = $(elem).find('svg');\r\n  const legend = d3.select(legendElem.get(0));\r\n  clearLegend(elem);\r\n\r\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\r\n  const legendHeight = legendElem.attr('height');\r\n\r\n  let rangeStep = 1;\r\n  if (rangeTo - rangeFrom > legendWidth) {\r\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\r\n  }\r\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\r\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\r\n\r\n  const colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\r\n  legend\r\n    .selectAll('.heatmap-color-legend-rect')\r\n    .data(valuesRange)\r\n    .enter()\r\n    .append('rect')\r\n    .attr('x', d => d * widthFactor)\r\n    .attr('y', 0)\r\n    .attr('width', rangeStep * widthFactor + 1) // Overlap rectangles to prevent gaps\r\n    .attr('height', legendHeight)\r\n    .attr('stroke-width', 0)\r\n    .attr('fill', d => colorScale(d));\r\n\r\n  drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\r\n}\r\n\r\nfunction drawOpacityLegend(elem, options, rangeFrom, rangeTo, maxValue, minValue) {\r\n  const legendElem = $(elem).find('svg');\r\n  const legend = d3.select(legendElem.get(0));\r\n  clearLegend(elem);\r\n\r\n  const legendWidth = Math.floor(legendElem.outerWidth()) - 30;\r\n  const legendHeight = legendElem.attr('height');\r\n\r\n  let rangeStep = 1;\r\n  if (rangeTo - rangeFrom > legendWidth) {\r\n    rangeStep = Math.floor((rangeTo - rangeFrom) / legendWidth);\r\n  }\r\n  const widthFactor = legendWidth / (rangeTo - rangeFrom);\r\n  const valuesRange = d3.range(rangeFrom, rangeTo, rangeStep);\r\n\r\n  const opacityScale = getOpacityScale(options, maxValue, minValue);\r\n  legend\r\n    .selectAll('.heatmap-opacity-legend-rect')\r\n    .data(valuesRange)\r\n    .enter()\r\n    .append('rect')\r\n    .attr('x', d => d * widthFactor)\r\n    .attr('y', 0)\r\n    .attr('width', rangeStep * widthFactor)\r\n    .attr('height', legendHeight)\r\n    .attr('stroke-width', 0)\r\n    .attr('fill', options.cardColor)\r\n    .style('opacity', d => opacityScale(d));\r\n\r\n  drawLegendValues(elem, opacityScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth);\r\n}\r\n\r\nfunction drawLegendValues(elem, colorScale, rangeFrom, rangeTo, maxValue, minValue, legendWidth) {\r\n  const legendElem = $(elem).find('svg');\r\n  const legend = d3.select(legendElem.get(0));\r\n\r\n  if (legendWidth <= 0 || legendElem.get(0).childNodes.length === 0) {\r\n    return;\r\n  }\r\n\r\n  const legendValueScale = d3\r\n    .scaleLinear()\r\n    .domain([0, rangeTo])\r\n    .range([0, legendWidth]);\r\n\r\n  const ticks = buildLegendTicks(0, rangeTo, maxValue, minValue);\r\n  const xAxis = d3\r\n    .axisBottom(legendValueScale)\r\n    .tickValues(ticks)\r\n    .tickSize(LEGEND_TICK_SIZE);\r\n\r\n  const colorRect = legendElem.find(':first-child');\r\n  const posY = getSvgElemHeight(legendElem) + LEGEND_VALUE_MARGIN;\r\n  const posX = getSvgElemX(colorRect);\r\n\r\n  d3\r\n    .select(legendElem.get(0))\r\n    .append('g')\r\n    .attr('class', 'axis')\r\n    .attr('transform', 'translate(' + posX + ',' + posY + ')')\r\n    .call(xAxis);\r\n\r\n  legend\r\n    .select('.axis')\r\n    .select('.domain')\r\n    .remove();\r\n}\r\n\r\nfunction drawSimpleColorLegend(elem, colorScale) {\r\n  const legendElem = $(elem).find('svg');\r\n  clearLegend(elem);\r\n\r\n  const legendWidth = Math.floor(legendElem.outerWidth());\r\n  const legendHeight = legendElem.attr('height');\r\n\r\n  if (legendWidth) {\r\n    const valuesNumber = Math.floor(legendWidth / 2);\r\n    const rangeStep = Math.floor(legendWidth / valuesNumber);\r\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\r\n\r\n    const legend = d3.select(legendElem.get(0));\r\n    const legendRects = legend.selectAll('.heatmap-color-legend-rect').data(valuesRange);\r\n\r\n    legendRects\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', d => d)\r\n      .attr('y', 0)\r\n      .attr('width', rangeStep + 1) // Overlap rectangles to prevent gaps\r\n      .attr('height', legendHeight)\r\n      .attr('stroke-width', 0)\r\n      .attr('fill', d => colorScale(d));\r\n  }\r\n}\r\n\r\nfunction drawSimpleOpacityLegend(elem, options) {\r\n  const legendElem = $(elem).find('svg');\r\n  clearLegend(elem);\r\n\r\n  const legend = d3.select(legendElem.get(0));\r\n  const legendWidth = Math.floor(legendElem.outerWidth());\r\n  const legendHeight = legendElem.attr('height');\r\n\r\n  if (legendWidth) {\r\n    let legendOpacityScale;\r\n    if (options.colorScale === 'linear') {\r\n      legendOpacityScale = d3\r\n        .scaleLinear()\r\n        .domain([0, legendWidth])\r\n        .range([0, 1]);\r\n    } else if (options.colorScale === 'sqrt') {\r\n      legendOpacityScale = d3\r\n        .scalePow()\r\n        .exponent(options.exponent)\r\n        .domain([0, legendWidth])\r\n        .range([0, 1]);\r\n    }\r\n\r\n    const rangeStep = 10;\r\n    const valuesRange = d3.range(0, legendWidth, rangeStep);\r\n    const legendRects = legend.selectAll('.heatmap-opacity-legend-rect').data(valuesRange);\r\n\r\n    legendRects\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', d => d)\r\n      .attr('y', 0)\r\n      .attr('width', rangeStep)\r\n      .attr('height', legendHeight)\r\n      .attr('stroke-width', 0)\r\n      .attr('fill', options.cardColor)\r\n      .style('opacity', d => legendOpacityScale(d));\r\n  }\r\n}\r\n\r\nfunction clearLegend(elem) {\r\n  const legendElem = $(elem).find('svg');\r\n  legendElem.empty();\r\n}\r\n\r\nfunction getSvgElemX(elem) {\r\n  const svgElem = elem.get(0);\r\n  if (svgElem && svgElem.x && svgElem.x.baseVal) {\r\n    return svgElem.x.baseVal.value;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction getSvgElemHeight(elem) {\r\n  const svgElem = elem.get(0);\r\n  if (svgElem && svgElem.height && svgElem.height.baseVal) {\r\n    return svgElem.height.baseVal.value;\r\n  } else {\r\n    return 0;\r\n  }\r\n}\r\n\r\nfunction buildLegendTicks(rangeFrom, rangeTo, maxValue, minValue) {\r\n  const range = rangeTo - rangeFrom;\r\n  const tickStepSize = tickStep(rangeFrom, rangeTo, 3);\r\n  const ticksNum = Math.round(range / tickStepSize);\r\n  let ticks = [];\r\n\r\n  for (let i = 0; i < ticksNum; i++) {\r\n    const current = tickStepSize * i;\r\n    // Add user-defined min and max if it had been set\r\n    if (isValueCloseTo(minValue, current, tickStepSize)) {\r\n      ticks.push(minValue);\r\n      continue;\r\n    } else if (minValue < current) {\r\n      ticks.push(minValue);\r\n    }\r\n    if (isValueCloseTo(maxValue, current, tickStepSize)) {\r\n      ticks.push(maxValue);\r\n      continue;\r\n    } else if (maxValue < current) {\r\n      ticks.push(maxValue);\r\n    }\r\n    ticks.push(tickStepSize * i);\r\n  }\r\n  if (!isValueCloseTo(maxValue, rangeTo, tickStepSize)) {\r\n    ticks.push(maxValue);\r\n  }\r\n  ticks.push(rangeTo);\r\n  ticks = _.sortBy(_.uniq(ticks));\r\n  return ticks;\r\n}\r\n\r\nfunction isValueCloseTo(val, valueTo, step) {\r\n  const diff = Math.abs(val - valueTo);\r\n  return diff < step * 0.3;\r\n}\r\n","export class HeatmapDisplayEditorCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    $scope.editor = this;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n\r\n    this.panelCtrl.render();\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function heatmapDisplayEditor() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/display_editor.html',\r\n    controller: HeatmapDisplayEditorCtrl,\r\n  };\r\n}\r\n","import _ from 'lodash';\r\n\r\nconst VALUE_INDEX = 0;\r\nconst TIME_INDEX = 1;\r\n\r\ninterface XBucket {\r\n  x: number;\r\n  buckets: any;\r\n}\r\n\r\ninterface YBucket {\r\n  y: number;\r\n  values: number[];\r\n}\r\n\r\n/**\r\n * Convert histogram represented by the list of series to heatmap object.\r\n * @param seriesList List of time series\r\n */\r\nfunction histogramToHeatmap(seriesList) {\r\n  const heatmap = {};\r\n\r\n  for (let i = 0; i < seriesList.length; i++) {\r\n    const series = seriesList[i];\r\n    const bound = i;\r\n    if (isNaN(bound)) {\r\n      return heatmap;\r\n    }\r\n\r\n    for (const point of series.datapoints) {\r\n      const count = point[VALUE_INDEX];\r\n      const time = point[TIME_INDEX];\r\n\r\n      if (!_.isNumber(count)) {\r\n        continue;\r\n      }\r\n\r\n      let bucket = heatmap[time];\r\n      if (!bucket) {\r\n        bucket = heatmap[time] = { x: time, buckets: {} };\r\n      }\r\n\r\n      bucket.buckets[bound] = {\r\n        y: bound,\r\n        count: count,\r\n        bounds: {\r\n          top: null,\r\n          bottom: bound,\r\n        },\r\n        values: [],\r\n        points: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  return heatmap;\r\n}\r\n\r\n/**\r\n * Sort series representing histogram by label value.\r\n */\r\nfunction sortSeriesByLabel(s1, s2) {\r\n  let label1, label2;\r\n\r\n  try {\r\n    // fail if not integer. might happen with bad queries\r\n    label1 = parseHistogramLabel(s1.label);\r\n    label2 = parseHistogramLabel(s2.label);\r\n  } catch (err) {\r\n    console.log(err.message || err);\r\n    return 0;\r\n  }\r\n\r\n  if (label1 > label2) {\r\n    return 1;\r\n  }\r\n\r\n  if (label1 < label2) {\r\n    return -1;\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\nfunction parseHistogramLabel(label: string): number {\r\n  if (label === '+Inf' || label === 'inf') {\r\n    return +Infinity;\r\n  }\r\n  const value = Number(label);\r\n  if (isNaN(value)) {\r\n    throw new Error(`Error parsing histogram label: ${label} is not a number`);\r\n  }\r\n  return value;\r\n}\r\n\r\n/**\r\n * Convert buckets into linear array of \"cards\" - objects, represented heatmap elements.\r\n * @param  {Object} buckets\r\n * @return {Array}          Array of \"card\" objects\r\n */\r\nfunction convertToCards(buckets) {\r\n  let min = 0,\r\n    max = 0;\r\n  const cards = [];\r\n  _.forEach(buckets, xBucket => {\r\n    _.forEach(xBucket.buckets, yBucket => {\r\n      const card = {\r\n        x: xBucket.x,\r\n        y: yBucket.y,\r\n        yBounds: yBucket.bounds,\r\n        values: yBucket.values,\r\n        count: yBucket.count,\r\n      };\r\n      cards.push(card);\r\n\r\n      if (cards.length === 1) {\r\n        min = yBucket.count;\r\n        max = yBucket.count;\r\n      }\r\n\r\n      min = yBucket.count < min ? yBucket.count : min;\r\n      max = yBucket.count > max ? yBucket.count : max;\r\n    });\r\n  });\r\n\r\n  const cardStats = { min, max };\r\n  return { cards, cardStats };\r\n}\r\n\r\n/**\r\n * Special method for log scales. When series converted into buckets with log scale,\r\n * for simplification, 0 values are converted into 0, not into -Infinity. On the other hand, we mean\r\n * that all values less than series minimum, is 0 values, and we create special \"minimum\" bucket for\r\n * that values (actually, there're no values less than minimum, so this bucket is empty).\r\n *  8-16|    | ** |    |  * |  **|\r\n *   4-8|  * |*  *|*   |** *| *  |\r\n *   2-4| * *|    | ***|    |*   |\r\n *   1-2|*   |    |    |    |    | This bucket contains minimum series value\r\n * 0.5-1|____|____|____|____|____| This bucket should be displayed as 0 on graph\r\n *     0|____|____|____|____|____| This bucket is for 0 values (should actually be -Infinity)\r\n * So we should merge two bottom buckets into one (0-value bucket).\r\n *\r\n * @param  {Object} buckets  Heatmap buckets\r\n * @param  {Number} minValue Minimum series value\r\n * @return {Object}          Transformed buckets\r\n */\r\nfunction mergeZeroBuckets(buckets, minValue) {\r\n  _.forEach(buckets, xBucket => {\r\n    const yBuckets = xBucket.buckets;\r\n\r\n    const emptyBucket = {\r\n      bounds: { bottom: 0, top: 0 },\r\n      values: [],\r\n      points: [],\r\n      count: 0,\r\n    };\r\n\r\n    const nullBucket = yBuckets[0] || emptyBucket;\r\n    const minBucket = yBuckets[minValue] || emptyBucket;\r\n\r\n    const newBucket = {\r\n      y: 0,\r\n      bounds: { bottom: minValue, top: minBucket.bounds.top || minValue },\r\n      values: [],\r\n      points: [],\r\n      count: 0,\r\n    };\r\n\r\n    newBucket.points = nullBucket.points.concat(minBucket.points);\r\n    newBucket.values = nullBucket.values.concat(minBucket.values);\r\n    newBucket.count = newBucket.values.length;\r\n\r\n    if (newBucket.count === 0) {\r\n      return;\r\n    }\r\n\r\n    delete yBuckets[minValue];\r\n    yBuckets[0] = newBucket;\r\n  });\r\n\r\n  return buckets;\r\n}\r\n\r\n/**\r\n * Convert set of time series into heatmap buckets\r\n * @return {Object}    Heatmap object:\r\n * {\r\n *   xBucketBound_1: {\r\n *     x: xBucketBound_1,\r\n *     buckets: {\r\n *       yBucketBound_1: {\r\n *         y: yBucketBound_1,\r\n *         bounds: {bottom, top}\r\n *         values: [val_1, val_2, ..., val_K],\r\n *         points: [[val_Y, val_X, series_name], ..., [...]],\r\n *         seriesStat: {seriesName_1: val_1, seriesName_2: val_2}\r\n *       },\r\n *       ...\r\n *       yBucketBound_M: {}\r\n *     },\r\n *     values: [val_1, val_2, ..., val_K],\r\n *     points: [\r\n *       [val_Y, val_X, series_name], (point_1)\r\n *       ...\r\n *       [...] (point_K)\r\n *     ]\r\n *   },\r\n *   xBucketBound_2: {},\r\n *   ...\r\n *   xBucketBound_N: {}\r\n * }\r\n */\r\nfunction convertToHeatMap(seriesList, yBucketSize, xBucketSize, logBase = 1) {\r\n  const heatmap = {};\r\n\r\n  for (const series of seriesList) {\r\n    const datapoints = series.datapoints;\r\n    const seriesName = series.label;\r\n\r\n    // Slice series into X axis buckets\r\n    // |    | ** |    |  * |  **|\r\n    // |  * |*  *|*   |** *| *  |\r\n    // |** *|    | ***|    |*   |\r\n    // |____|____|____|____|____|_\r\n    //\r\n    _.forEach(datapoints, point => {\r\n      const bucketBound = getBucketBound(point[TIME_INDEX], xBucketSize);\r\n      pushToXBuckets(heatmap, point, bucketBound, seriesName);\r\n    });\r\n  }\r\n\r\n  // Slice X axis buckets into Y (value) buckets\r\n  // |  **|     |2|,\r\n  // | *  | --\\ |1|,\r\n  // |*   | --/ |1|,\r\n  // |____|     |0|\r\n  //\r\n  _.forEach(heatmap, xBucket => {\r\n    if (logBase !== 1) {\r\n      xBucket.buckets = convertToLogScaleValueBuckets(xBucket, yBucketSize, logBase);\r\n    } else {\r\n      xBucket.buckets = convertToValueBuckets(xBucket, yBucketSize);\r\n    }\r\n  });\r\n\r\n  return heatmap;\r\n}\r\n\r\nfunction pushToXBuckets(buckets, point, bucketNum, seriesName) {\r\n  const value = point[VALUE_INDEX];\r\n  if (value === null || value === undefined || isNaN(value)) {\r\n    return;\r\n  }\r\n\r\n  // Add series name to point for future identification\r\n  const pointExt = _.concat(point, seriesName);\r\n\r\n  if (buckets[bucketNum] && buckets[bucketNum].values) {\r\n    buckets[bucketNum].values.push(value);\r\n    buckets[bucketNum].points.push(pointExt);\r\n  } else {\r\n    buckets[bucketNum] = {\r\n      x: bucketNum,\r\n      values: [value],\r\n      points: [pointExt],\r\n    };\r\n  }\r\n}\r\n\r\nfunction pushToYBuckets(buckets, bucketNum, value, point, bounds) {\r\n  let count = 1;\r\n  // Use the 3rd argument as scale/count\r\n  if (point.length > 3) {\r\n    count = parseInt(point[2]);\r\n  }\r\n  if (buckets[bucketNum]) {\r\n    buckets[bucketNum].values.push(value);\r\n    buckets[bucketNum].points.push(point);\r\n    buckets[bucketNum].count += count;\r\n  } else {\r\n    buckets[bucketNum] = {\r\n      y: bucketNum,\r\n      bounds: bounds,\r\n      values: [value],\r\n      points: [point],\r\n      count: count,\r\n    };\r\n  }\r\n}\r\n\r\nfunction getValueBucketBound(value, yBucketSize, logBase) {\r\n  if (logBase === 1) {\r\n    return getBucketBound(value, yBucketSize);\r\n  } else {\r\n    return getLogScaleBucketBound(value, yBucketSize, logBase);\r\n  }\r\n}\r\n\r\n/**\r\n * Find bucket for given value (for linear scale)\r\n */\r\nfunction getBucketBounds(value, bucketSize) {\r\n  let bottom, top;\r\n  bottom = Math.floor(value / bucketSize) * bucketSize;\r\n  top = (Math.floor(value / bucketSize) + 1) * bucketSize;\r\n\r\n  return { bottom, top };\r\n}\r\n\r\nfunction getBucketBound(value, bucketSize) {\r\n  const bounds = getBucketBounds(value, bucketSize);\r\n  return bounds.bottom;\r\n}\r\n\r\nfunction convertToValueBuckets(xBucket, bucketSize) {\r\n  const values = xBucket.values;\r\n  const points = xBucket.points;\r\n  const buckets = {};\r\n\r\n  _.forEach(values, (val, index) => {\r\n    const bounds = getBucketBounds(val, bucketSize);\r\n    const bucketNum = bounds.bottom;\r\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\r\n  });\r\n\r\n  return buckets;\r\n}\r\n\r\n/**\r\n * Find bucket for given value (for log scales)\r\n */\r\nfunction getLogScaleBucketBounds(value, yBucketSplitFactor, logBase) {\r\n  let top, bottom;\r\n  if (value === 0) {\r\n    return { bottom: 0, top: 0 };\r\n  }\r\n\r\n  const valueLog = logp(value, logBase);\r\n  let pow, powTop;\r\n  if (yBucketSplitFactor === 1 || !yBucketSplitFactor) {\r\n    pow = Math.floor(valueLog);\r\n    powTop = pow + 1;\r\n  } else {\r\n    const additionalBucketSize = 1 / yBucketSplitFactor;\r\n    let additionalLog = valueLog - Math.floor(valueLog);\r\n    additionalLog = Math.floor(additionalLog / additionalBucketSize) * additionalBucketSize;\r\n    pow = Math.floor(valueLog) + additionalLog;\r\n    powTop = pow + additionalBucketSize;\r\n  }\r\n  bottom = Math.pow(logBase, pow);\r\n  top = Math.pow(logBase, powTop);\r\n\r\n  return { bottom, top };\r\n}\r\n\r\nfunction getLogScaleBucketBound(value, yBucketSplitFactor, logBase) {\r\n  const bounds = getLogScaleBucketBounds(value, yBucketSplitFactor, logBase);\r\n  return bounds.bottom;\r\n}\r\n\r\nfunction convertToLogScaleValueBuckets(xBucket, yBucketSplitFactor, logBase) {\r\n  const values = xBucket.values;\r\n  const points = xBucket.points;\r\n\r\n  const buckets = {};\r\n  _.forEach(values, (val, index) => {\r\n    const bounds = getLogScaleBucketBounds(val, yBucketSplitFactor, logBase);\r\n    const bucketNum = bounds.bottom;\r\n    pushToYBuckets(buckets, bucketNum, val, points[index], bounds);\r\n  });\r\n\r\n  return buckets;\r\n}\r\n\r\n/**\r\n * Logarithm for custom base\r\n * @param value\r\n * @param base logarithm base\r\n */\r\nfunction logp(value, base) {\r\n  return Math.log(value) / Math.log(base);\r\n}\r\n\r\n/**\r\n * Calculate size of Y bucket from given buckets bounds.\r\n * @param bounds Array of Y buckets bounds\r\n * @param logBase Logarithm base\r\n */\r\nfunction calculateBucketSize(bounds: number[], logBase = 1): number {\r\n  let bucketSize = Infinity;\r\n\r\n  if (bounds.length === 0) {\r\n    return 0;\r\n  } else if (bounds.length === 1) {\r\n    return bounds[0];\r\n  } else {\r\n    bounds = _.sortBy(bounds);\r\n    for (let i = 1; i < bounds.length; i++) {\r\n      const distance = getDistance(bounds[i], bounds[i - 1], logBase);\r\n      bucketSize = distance < bucketSize ? distance : bucketSize;\r\n    }\r\n  }\r\n\r\n  return bucketSize;\r\n}\r\n\r\n/**\r\n * Calculate distance between two numbers in given scale (linear or logarithmic).\r\n * @param a\r\n * @param b\r\n * @param logBase\r\n */\r\nfunction getDistance(a: number, b: number, logBase = 1): number {\r\n  if (logBase === 1) {\r\n    // Linear distance\r\n    return Math.abs(b - a);\r\n  } else {\r\n    // logarithmic distance\r\n    const ratio = Math.max(a, b) / Math.min(a, b);\r\n    return logp(ratio, logBase);\r\n  }\r\n}\r\n\r\n/**\r\n * Compare two heatmap data objects\r\n * @param objA\r\n * @param objB\r\n */\r\nfunction isHeatmapDataEqual(objA: any, objB: any): boolean {\r\n  let isEql = !emptyXOR(objA, objB);\r\n\r\n  _.forEach(objA, (xBucket: XBucket, x) => {\r\n    if (objB[x]) {\r\n      if (emptyXOR(xBucket.buckets, objB[x].buckets)) {\r\n        isEql = false;\r\n        return false;\r\n      }\r\n\r\n      _.forEach(xBucket.buckets, (yBucket: YBucket, y) => {\r\n        if (objB[x].buckets && objB[x].buckets[y]) {\r\n          if (objB[x].buckets[y].values) {\r\n            isEql = _.isEqual(_.sortBy(yBucket.values), _.sortBy(objB[x].buckets[y].values));\r\n            if (!isEql) {\r\n              return false;\r\n            } else {\r\n              return true;\r\n            }\r\n          } else {\r\n            isEql = false;\r\n            return false;\r\n          }\r\n        } else {\r\n          isEql = false;\r\n          return false;\r\n        }\r\n      });\r\n\r\n      if (!isEql) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    } else {\r\n      isEql = false;\r\n      return false;\r\n    }\r\n  });\r\n\r\n  return isEql;\r\n}\r\n\r\nfunction emptyXOR(foo: any, bar: any): boolean {\r\n  return (_.isEmpty(foo) || _.isEmpty(bar)) && !(_.isEmpty(foo) && _.isEmpty(bar));\r\n}\r\n\r\nexport {\r\n  convertToHeatMap,\r\n  histogramToHeatmap,\r\n  convertToCards,\r\n  mergeZeroBuckets,\r\n  getValueBucketBound,\r\n  isHeatmapDataEqual,\r\n  calculateBucketSize,\r\n  sortSeriesByLabel,\r\n};\r\n","import kbn from 'app/core/utils/kbn';\r\n\r\nexport class AxesEditorCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n  unitFormats: any;\r\n  logScales: any;\r\n  dataFormats: any;\r\n  yBucketBoundModes: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, uiSegmentSrv) {\r\n    $scope.editor = this;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.unitFormats = kbn.getUnitFormats();\r\n\r\n    this.logScales = {\r\n      linear: 1,\r\n      'log (base 2)': 2,\r\n      'log (base 10)': 10,\r\n      'log (base 32)': 32,\r\n      'log (base 1024)': 1024,\r\n    };\r\n\r\n    this.dataFormats = {\r\n      'Time series': 'timeseries',\r\n      'Time series buckets': 'tsbuckets',\r\n    };\r\n\r\n    this.yBucketBoundModes = {\r\n      Auto: 'auto',\r\n      Upper: 'upper',\r\n      Lower: 'lower',\r\n    };\r\n  }\r\n\r\n  setUnitFormat(subItem) {\r\n    this.panel.yAxis.format = subItem.value;\r\n    this.panelCtrl.render();\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function axesEditor() {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/plugins/panel/heatmap/partials/axes_editor.html',\r\n    controller: AxesEditorCtrl,\r\n  };\r\n}\r\n","import * as d3 from 'd3';\r\nimport $ from 'jquery';\r\nimport _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { getValueBucketBound } from './heatmap_data_converter';\r\n\r\nconst TOOLTIP_PADDING_X = 30;\r\nconst TOOLTIP_PADDING_Y = 5;\r\nconst HISTOGRAM_WIDTH = 160;\r\nconst HISTOGRAM_HEIGHT = 40;\r\n\r\nexport class HeatmapTooltip {\r\n  tooltip: any;\r\n  scope: any;\r\n  dashboard: any;\r\n  panelCtrl: any;\r\n  panel: any;\r\n  heatmapPanel: any;\r\n  mouseOverBucket: boolean;\r\n  originalFillColor: any;\r\n\r\n  constructor(elem, scope) {\r\n    this.scope = scope;\r\n    this.dashboard = scope.ctrl.dashboard;\r\n    this.panelCtrl = scope.ctrl;\r\n    this.panel = scope.ctrl.panel;\r\n    this.heatmapPanel = elem;\r\n    this.mouseOverBucket = false;\r\n    this.originalFillColor = null;\r\n\r\n    elem.on('mouseleave', this.onMouseLeave.bind(this));\r\n  }\r\n\r\n  onMouseLeave() {\r\n    this.destroy();\r\n  }\r\n\r\n  onMouseMove(e) {\r\n    if (!this.panel.tooltip.show) {\r\n      return;\r\n    }\r\n\r\n    this.move(e);\r\n  }\r\n\r\n  add() {\r\n    this.tooltip = d3\r\n      .select('body')\r\n      .append('div')\r\n      .attr('class', 'heatmap-tooltip graph-tooltip grafana-tooltip');\r\n  }\r\n\r\n  destroy() {\r\n    if (this.tooltip) {\r\n      this.tooltip.remove();\r\n    }\r\n\r\n    this.tooltip = null;\r\n  }\r\n\r\n  show(pos, data) {\r\n    if (!this.panel.tooltip.show || !data) {\r\n      return;\r\n    }\r\n    // shared tooltip mode\r\n    if (pos.panelRelY) {\r\n      return;\r\n    }\r\n\r\n    const { xBucketIndex, yBucketIndex } = this.getBucketIndexes(pos, data);\r\n\r\n    if (!data.buckets[xBucketIndex]) {\r\n      this.destroy();\r\n      return;\r\n    }\r\n\r\n    if (!this.tooltip) {\r\n      this.add();\r\n    }\r\n\r\n    let boundBottom, boundTop, valuesNumber;\r\n    const xData = data.buckets[xBucketIndex];\r\n    // Search in special 'zero' bucket also\r\n    const yData = _.find(xData.buckets, (bucket, bucketIndex) => {\r\n      return bucket.bounds.bottom === yBucketIndex || bucketIndex === yBucketIndex.toString();\r\n    });\r\n\r\n    const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\r\n    const time = this.dashboard.formatDate(xData.x, tooltipTimeFormat);\r\n\r\n    // Decimals override. Code from panel/graph/graph.ts\r\n    let countValueFormatter, bucketBoundFormatter;\r\n    if (_.isNumber(this.panel.tooltipDecimals)) {\r\n      countValueFormatter = this.countValueFormatter(this.panel.tooltipDecimals, null);\r\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(this.panelCtrl.decimals, null);\r\n    } else {\r\n      // auto decimals\r\n      // legend and tooltip gets one more decimal precision\r\n      // than graph legend ticks\r\n      const decimals = (this.panelCtrl.decimals || -1) + 1;\r\n      countValueFormatter = this.countValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\r\n      bucketBoundFormatter = this.panelCtrl.tickValueFormatter(decimals, this.panelCtrl.scaledDecimals + 2);\r\n    }\r\n\r\n    let tooltipHtml = `<div class=\"graph-tooltip-time\">${time}</div>\r\n      <div class=\"heatmap-histogram\"></div>`;\r\n\r\n    if (yData) {\r\n      if (yData.bounds) {\r\n        if (data.tsBuckets) {\r\n          // Use Y-axis labels\r\n          const tickFormatter = valIndex => {\r\n            return data.tsBucketsFormatted ? data.tsBucketsFormatted[valIndex] : data.tsBuckets[valIndex];\r\n          };\r\n\r\n          boundBottom = tickFormatter(yBucketIndex);\r\n          boundTop = yBucketIndex < data.tsBuckets.length - 1 ? tickFormatter(yBucketIndex + 1) : '';\r\n        } else {\r\n          // Display 0 if bucket is a special 'zero' bucket\r\n          const bottom = yData.y ? yData.bounds.bottom : 0;\r\n          boundBottom = bucketBoundFormatter(bottom);\r\n          boundTop = bucketBoundFormatter(yData.bounds.top);\r\n        }\r\n        valuesNumber = countValueFormatter(yData.count);\r\n        tooltipHtml += `<div>\r\n          bucket: <b>${boundBottom} - ${boundTop}</b> <br>\r\n          count: <b>${valuesNumber}</b> <br>\r\n        </div>`;\r\n      } else {\r\n        // currently no bounds for pre bucketed data\r\n        tooltipHtml += `<div>count: <b>${yData.count}</b><br></div>`;\r\n      }\r\n    } else {\r\n      if (!this.panel.tooltip.showHistogram) {\r\n        this.destroy();\r\n        return;\r\n      }\r\n      boundBottom = yBucketIndex;\r\n      boundTop = '';\r\n      valuesNumber = 0;\r\n    }\r\n\r\n    this.tooltip.html(tooltipHtml);\r\n\r\n    if (this.panel.tooltip.showHistogram) {\r\n      this.addHistogram(xData);\r\n    }\r\n\r\n    this.move(pos);\r\n  }\r\n\r\n  getBucketIndexes(pos, data) {\r\n    const xBucketIndex = this.getXBucketIndex(pos.x, data);\r\n    const yBucketIndex = this.getYBucketIndex(pos.y, data);\r\n    return { xBucketIndex, yBucketIndex };\r\n  }\r\n\r\n  getXBucketIndex(x, data) {\r\n    // First try to find X bucket by checking x pos is in the\r\n    // [bucket.x, bucket.x + xBucketSize] interval\r\n    const xBucket = _.find(data.buckets, bucket => {\r\n      return x > bucket.x && x - bucket.x <= data.xBucketSize;\r\n    });\r\n    return xBucket ? xBucket.x : getValueBucketBound(x, data.xBucketSize, 1);\r\n  }\r\n\r\n  getYBucketIndex(y, data) {\r\n    if (data.tsBuckets) {\r\n      return Math.floor(y);\r\n    }\r\n    const yBucketIndex = getValueBucketBound(y, data.yBucketSize, this.panel.yAxis.logBase);\r\n    return yBucketIndex;\r\n  }\r\n\r\n  getSharedTooltipPos(pos) {\r\n    // get pageX from position on x axis and pageY from relative position in original panel\r\n    pos.pageX = this.heatmapPanel.offset().left + this.scope.xScale(pos.x);\r\n    pos.pageY = this.heatmapPanel.offset().top + this.scope.chartHeight * pos.panelRelY;\r\n    return pos;\r\n  }\r\n\r\n  addHistogram(data) {\r\n    const xBucket = this.scope.ctrl.data.buckets[data.x];\r\n    const yBucketSize = this.scope.ctrl.data.yBucketSize;\r\n    let min, max, ticks;\r\n    if (this.scope.ctrl.data.tsBuckets) {\r\n      min = 0;\r\n      max = this.scope.ctrl.data.tsBuckets.length - 1;\r\n      ticks = this.scope.ctrl.data.tsBuckets.length;\r\n    } else {\r\n      min = this.scope.ctrl.data.yAxis.min;\r\n      max = this.scope.ctrl.data.yAxis.max;\r\n      ticks = this.scope.ctrl.data.yAxis.ticks;\r\n    }\r\n    let histogramData = _.map(xBucket.buckets, bucket => {\r\n      const count = bucket.count !== undefined ? bucket.count : bucket.values.length;\r\n      return [bucket.bounds.bottom, count];\r\n    });\r\n    histogramData = _.filter(histogramData, d => {\r\n      return d[0] >= min && d[0] <= max;\r\n    });\r\n\r\n    const scale = this.scope.yScale.copy();\r\n    const histXScale = scale.domain([min, max]).range([0, HISTOGRAM_WIDTH]);\r\n\r\n    let barWidth;\r\n    if (this.panel.yAxis.logBase === 1) {\r\n      barWidth = Math.floor(HISTOGRAM_WIDTH / (max - min) * yBucketSize * 0.9);\r\n    } else {\r\n      const barNumberFactor = yBucketSize ? yBucketSize : 1;\r\n      barWidth = Math.floor(HISTOGRAM_WIDTH / ticks / barNumberFactor * 0.9);\r\n    }\r\n    barWidth = Math.max(barWidth, 1);\r\n\r\n    // Normalize histogram Y axis\r\n    const histogramDomain = _.reduce(_.map(histogramData, d => d[1]), (sum, val) => sum + val, 0);\r\n    const histYScale = d3\r\n      .scaleLinear()\r\n      .domain([0, histogramDomain])\r\n      .range([0, HISTOGRAM_HEIGHT]);\r\n\r\n    const histogram = this.tooltip\r\n      .select('.heatmap-histogram')\r\n      .append('svg')\r\n      .attr('width', HISTOGRAM_WIDTH)\r\n      .attr('height', HISTOGRAM_HEIGHT);\r\n\r\n    histogram\r\n      .selectAll('.bar')\r\n      .data(histogramData)\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', d => {\r\n        return histXScale(d[0]);\r\n      })\r\n      .attr('width', barWidth)\r\n      .attr('y', d => {\r\n        return HISTOGRAM_HEIGHT - histYScale(d[1]);\r\n      })\r\n      .attr('height', d => {\r\n        return histYScale(d[1]);\r\n      });\r\n  }\r\n\r\n  move(pos) {\r\n    if (!this.tooltip) {\r\n      return;\r\n    }\r\n\r\n    const elem = $(this.tooltip.node())[0];\r\n    const tooltipWidth = elem.clientWidth;\r\n    const tooltipHeight = elem.clientHeight;\r\n\r\n    let left = pos.pageX + TOOLTIP_PADDING_X;\r\n    let top = pos.pageY + TOOLTIP_PADDING_Y;\r\n\r\n    if (pos.pageX + tooltipWidth + 40 > window.innerWidth) {\r\n      left = pos.pageX - tooltipWidth - TOOLTIP_PADDING_X;\r\n    }\r\n\r\n    if (pos.pageY - window.pageYOffset + tooltipHeight + 20 > window.innerHeight) {\r\n      top = pos.pageY - tooltipHeight - TOOLTIP_PADDING_Y;\r\n    }\r\n\r\n    return this.tooltip.style('left', left + 'px').style('top', top + 'px');\r\n  }\r\n\r\n  countValueFormatter(decimals, scaledDecimals = null) {\r\n    const format = 'short';\r\n    return function(value) {\r\n      return kbn.valueFormats[format](value, decimals, scaledDecimals);\r\n    };\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport moment from 'moment';\r\nimport * as d3 from 'd3';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport { appEvents, contextSrv } from 'app/core/core';\r\nimport * as ticksUtils from 'app/core/utils/ticks';\r\nimport { HeatmapTooltip } from './heatmap_tooltip';\r\nimport { mergeZeroBuckets } from './heatmap_data_converter';\r\nimport { getColorScale, getOpacityScale } from './color_scale';\r\n\r\nconst MIN_CARD_SIZE = 1,\r\n  CARD_PADDING = 1,\r\n  CARD_ROUND = 0,\r\n  DATA_RANGE_WIDING_FACTOR = 1.2,\r\n  DEFAULT_X_TICK_SIZE_PX = 100,\r\n  DEFAULT_Y_TICK_SIZE_PX = 50,\r\n  X_AXIS_TICK_PADDING = 10,\r\n  Y_AXIS_TICK_PADDING = 5,\r\n  MIN_SELECTION_WIDTH = 2;\r\n\r\nexport default function rendering(scope, elem, attrs, ctrl) {\r\n  return new HeatmapRenderer(scope, elem, attrs, ctrl);\r\n}\r\nexport class HeatmapRenderer {\r\n  width: number;\r\n  height: number;\r\n  yScale: any;\r\n  xScale: any;\r\n  chartWidth: number;\r\n  chartHeight: number;\r\n  chartTop: number;\r\n  chartBottom: number;\r\n  yAxisWidth: number;\r\n  xAxisHeight: number;\r\n  cardPadding: number;\r\n  cardRound: number;\r\n  cardWidth: number;\r\n  cardHeight: number;\r\n  colorScale: any;\r\n  opacityScale: any;\r\n  mouseUpHandler: any;\r\n  data: any;\r\n  panel: any;\r\n  $heatmap: any;\r\n  tooltip: HeatmapTooltip;\r\n  heatmap: any;\r\n  timeRange: any;\r\n\r\n  selection: any;\r\n  padding: any;\r\n  margin: any;\r\n  dataRangeWidingFactor: number;\r\n  constructor(private scope, private elem, attrs, private ctrl) {\r\n    // $heatmap is JQuery object, but heatmap is D3\r\n    this.$heatmap = this.elem.find('.heatmap-panel');\r\n    this.tooltip = new HeatmapTooltip(this.$heatmap, this.scope);\r\n\r\n    this.selection = {\r\n      active: false,\r\n      x1: -1,\r\n      x2: -1,\r\n    };\r\n\r\n    this.padding = { left: 0, right: 0, top: 0, bottom: 0 };\r\n    this.margin = { left: 25, right: 15, top: 10, bottom: 20 };\r\n    this.dataRangeWidingFactor = DATA_RANGE_WIDING_FACTOR;\r\n\r\n    this.ctrl.events.on('render', this.onRender.bind(this));\r\n\r\n    this.ctrl.tickValueFormatter = this.tickValueFormatter.bind(this);\r\n\r\n    /////////////////////////////\r\n    // Selection and crosshair //\r\n    /////////////////////////////\r\n\r\n    // Shared crosshair and tooltip\r\n    appEvents.on('graph-hover', this.onGraphHover.bind(this), this.scope);\r\n\r\n    appEvents.on('graph-hover-clear', this.onGraphHoverClear.bind(this), this.scope);\r\n\r\n    // Register selection listeners\r\n    this.$heatmap.on('mousedown', this.onMouseDown.bind(this));\r\n    this.$heatmap.on('mousemove', this.onMouseMove.bind(this));\r\n    this.$heatmap.on('mouseleave', this.onMouseLeave.bind(this));\r\n  }\r\n\r\n  onGraphHoverClear() {\r\n    this.clearCrosshair();\r\n  }\r\n\r\n  onGraphHover(event) {\r\n    this.drawSharedCrosshair(event.pos);\r\n  }\r\n\r\n  onRender() {\r\n    this.render();\r\n    this.ctrl.renderingCompleted();\r\n  }\r\n\r\n  setElementHeight() {\r\n    try {\r\n      let height = this.ctrl.height || this.panel.height || this.ctrl.row.height;\r\n      if (_.isString(height)) {\r\n        height = parseInt(height.replace('px', ''), 10);\r\n      }\r\n\r\n      height -= this.panel.legend.show ? 28 : 11; // bottom padding and space for legend\r\n\r\n      this.$heatmap.css('height', height + 'px');\r\n\r\n      return true;\r\n    } catch (e) {\r\n      // IE throws errors sometimes\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getYAxisWidth(elem) {\r\n    const axisText = elem.selectAll('.axis-y text').nodes();\r\n    const maxTextWidth = _.max(\r\n      _.map(axisText, text => {\r\n        // Use SVG getBBox method\r\n        return text.getBBox().width;\r\n      })\r\n    );\r\n\r\n    return maxTextWidth;\r\n  }\r\n\r\n  getXAxisHeight(elem) {\r\n    const axisLine = elem.select('.axis-x line');\r\n    if (!axisLine.empty()) {\r\n      const axisLinePosition = parseFloat(elem.select('.axis-x line').attr('y2'));\r\n      const canvasWidth = parseFloat(elem.attr('height'));\r\n      return canvasWidth - axisLinePosition;\r\n    } else {\r\n      // Default height\r\n      return 30;\r\n    }\r\n  }\r\n\r\n  addXAxis() {\r\n    this.scope.xScale = this.xScale = d3\r\n      .scaleTime()\r\n      .domain([this.timeRange.from, this.timeRange.to])\r\n      .range([0, this.chartWidth]);\r\n\r\n    const ticks = this.chartWidth / DEFAULT_X_TICK_SIZE_PX;\r\n    const grafanaTimeFormatter = ticksUtils.grafanaTimeFormat(ticks, this.timeRange.from, this.timeRange.to);\r\n    let timeFormat;\r\n    const dashboardTimeZone = this.ctrl.dashboard.getTimezone();\r\n    if (dashboardTimeZone === 'utc') {\r\n      timeFormat = d3.utcFormat(grafanaTimeFormatter);\r\n    } else {\r\n      timeFormat = d3.timeFormat(grafanaTimeFormatter);\r\n    }\r\n\r\n    const xAxis = d3\r\n      .axisBottom(this.xScale)\r\n      .ticks(ticks)\r\n      .tickFormat(timeFormat)\r\n      .tickPadding(X_AXIS_TICK_PADDING)\r\n      .tickSize(this.chartHeight);\r\n\r\n    const posY = this.margin.top;\r\n    const posX = this.yAxisWidth;\r\n    this.heatmap\r\n      .append('g')\r\n      .attr('class', 'axis axis-x')\r\n      .attr('transform', 'translate(' + posX + ',' + posY + ')')\r\n      .call(xAxis);\r\n\r\n    // Remove horizontal line in the top of axis labels (called domain in d3)\r\n    this.heatmap\r\n      .select('.axis-x')\r\n      .select('.domain')\r\n      .remove();\r\n  }\r\n\r\n  addYAxis() {\r\n    let ticks = Math.ceil(this.chartHeight / DEFAULT_Y_TICK_SIZE_PX);\r\n    let tickInterval = ticksUtils.tickStep(this.data.heatmapStats.min, this.data.heatmapStats.max, ticks);\r\n    let { yMin, yMax } = this.wideYAxisRange(this.data.heatmapStats.min, this.data.heatmapStats.max, tickInterval);\r\n\r\n    // Rewrite min and max if it have been set explicitly\r\n    yMin = this.panel.yAxis.min !== null ? this.panel.yAxis.min : yMin;\r\n    yMax = this.panel.yAxis.max !== null ? this.panel.yAxis.max : yMax;\r\n\r\n    // Adjust ticks after Y range widening\r\n    tickInterval = ticksUtils.tickStep(yMin, yMax, ticks);\r\n    ticks = Math.ceil((yMax - yMin) / tickInterval);\r\n\r\n    const decimalsAuto = ticksUtils.getPrecision(tickInterval);\r\n    let decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\r\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\r\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, ticks, decimalsAuto);\r\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\r\n    this.ctrl.decimals = decimals;\r\n    this.ctrl.scaledDecimals = scaledDecimals;\r\n\r\n    // Set default Y min and max if no data\r\n    if (_.isEmpty(this.data.buckets)) {\r\n      yMax = 1;\r\n      yMin = -1;\r\n      ticks = 3;\r\n      decimals = 1;\r\n    }\r\n\r\n    this.data.yAxis = {\r\n      min: yMin,\r\n      max: yMax,\r\n      ticks: ticks,\r\n    };\r\n\r\n    this.scope.yScale = this.yScale = d3\r\n      .scaleLinear()\r\n      .domain([yMin, yMax])\r\n      .range([this.chartHeight, 0]);\r\n\r\n    const yAxis = d3\r\n      .axisLeft(this.yScale)\r\n      .ticks(ticks)\r\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\r\n      .tickSizeInner(0 - this.width)\r\n      .tickSizeOuter(0)\r\n      .tickPadding(Y_AXIS_TICK_PADDING);\r\n\r\n    this.heatmap\r\n      .append('g')\r\n      .attr('class', 'axis axis-y')\r\n      .call(yAxis);\r\n\r\n    // Calculate Y axis width first, then move axis into visible area\r\n    const posY = this.margin.top;\r\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\r\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\r\n\r\n    // Remove vertical line in the right of axis labels (called domain in d3)\r\n    this.heatmap\r\n      .select('.axis-y')\r\n      .select('.domain')\r\n      .remove();\r\n  }\r\n\r\n  // Wide Y values range and anjust to bucket size\r\n  wideYAxisRange(min, max, tickInterval) {\r\n    const yWiding = (max * (this.dataRangeWidingFactor - 1) - min * (this.dataRangeWidingFactor - 1)) / 2;\r\n    let yMin, yMax;\r\n\r\n    if (tickInterval === 0) {\r\n      yMax = max * this.dataRangeWidingFactor;\r\n      yMin = min - min * (this.dataRangeWidingFactor - 1);\r\n      tickInterval = (yMax - yMin) / 2;\r\n    } else {\r\n      yMax = Math.ceil((max + yWiding) / tickInterval) * tickInterval;\r\n      yMin = Math.floor((min - yWiding) / tickInterval) * tickInterval;\r\n    }\r\n\r\n    // Don't wide axis below 0 if all values are positive\r\n    if (min >= 0 && yMin < 0) {\r\n      yMin = 0;\r\n    }\r\n\r\n    return { yMin, yMax };\r\n  }\r\n\r\n  addLogYAxis() {\r\n    const logBase = this.panel.yAxis.logBase;\r\n    let { yMin, yMax } = this.adjustLogRange(this.data.heatmapStats.minLog, this.data.heatmapStats.max, logBase);\r\n\r\n    yMin =\r\n      this.panel.yAxis.min && this.panel.yAxis.min !== '0' ? this.adjustLogMin(this.panel.yAxis.min, logBase) : yMin;\r\n    yMax = this.panel.yAxis.max !== null ? this.adjustLogMax(this.panel.yAxis.max, logBase) : yMax;\r\n\r\n    // Set default Y min and max if no data\r\n    if (_.isEmpty(this.data.buckets)) {\r\n      yMax = Math.pow(logBase, 2);\r\n      yMin = 1;\r\n    }\r\n\r\n    this.scope.yScale = this.yScale = d3\r\n      .scaleLog()\r\n      .base(this.panel.yAxis.logBase)\r\n      .domain([yMin, yMax])\r\n      .range([this.chartHeight, 0]);\r\n\r\n    const domain = this.yScale.domain();\r\n    const tickValues = this.logScaleTickValues(domain, logBase);\r\n\r\n    const decimalsAuto = ticksUtils.getPrecision(yMin);\r\n    const decimals = this.panel.yAxis.decimals || decimalsAuto;\r\n\r\n    // Calculate scaledDecimals for log scales using tick size (as in jquery.flot.js)\r\n    const flotTickSize = ticksUtils.getFlotTickSize(yMin, yMax, tickValues.length, decimalsAuto);\r\n    const scaledDecimals = ticksUtils.getScaledDecimals(decimals, flotTickSize);\r\n    this.ctrl.decimals = decimals;\r\n    this.ctrl.scaledDecimals = scaledDecimals;\r\n\r\n    this.data.yAxis = {\r\n      min: yMin,\r\n      max: yMax,\r\n      ticks: tickValues.length,\r\n    };\r\n\r\n    const yAxis = d3\r\n      .axisLeft(this.yScale)\r\n      .tickValues(tickValues)\r\n      .tickFormat(this.tickValueFormatter(decimals, scaledDecimals))\r\n      .tickSizeInner(0 - this.width)\r\n      .tickSizeOuter(0)\r\n      .tickPadding(Y_AXIS_TICK_PADDING);\r\n\r\n    this.heatmap\r\n      .append('g')\r\n      .attr('class', 'axis axis-y')\r\n      .call(yAxis);\r\n\r\n    // Calculate Y axis width first, then move axis into visible area\r\n    const posY = this.margin.top;\r\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\r\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\r\n\r\n    // Set first tick as pseudo 0\r\n    if (yMin < 1) {\r\n      this.heatmap\r\n        .select('.axis-y')\r\n        .select('.tick text')\r\n        .text('0');\r\n    }\r\n\r\n    // Remove vertical line in the right of axis labels (called domain in d3)\r\n    this.heatmap\r\n      .select('.axis-y')\r\n      .select('.domain')\r\n      .remove();\r\n  }\r\n\r\n  addYAxisFromBuckets() {\r\n    const tsBuckets = this.data.tsBuckets;\r\n\r\n    this.scope.yScale = this.yScale = d3\r\n      .scaleLinear()\r\n      .domain([0, tsBuckets.length - 1])\r\n      .range([this.chartHeight, 0]);\r\n\r\n    const tickValues = _.map(tsBuckets, (b, i) => i);\r\n    const decimalsAuto = _.max(_.map(tsBuckets, ticksUtils.getStringPrecision));\r\n    const decimals = this.panel.yAxis.decimals === null ? decimalsAuto : this.panel.yAxis.decimals;\r\n    this.ctrl.decimals = decimals;\r\n\r\n    const tickValueFormatter = this.tickValueFormatter.bind(this);\r\n    function tickFormatter(valIndex) {\r\n      let valueFormatted = tsBuckets[valIndex];\r\n      if (!_.isNaN(_.toNumber(valueFormatted)) && valueFormatted !== '') {\r\n        // Try to format numeric tick labels\r\n        valueFormatted = tickValueFormatter(decimals)(_.toNumber(valueFormatted));\r\n      }\r\n      return valueFormatted;\r\n    }\r\n\r\n    const tsBucketsFormatted = _.map(tsBuckets, (v, i) => tickFormatter(i));\r\n    this.data.tsBucketsFormatted = tsBucketsFormatted;\r\n\r\n    const yAxis = d3\r\n      .axisLeft(this.yScale)\r\n      .tickValues(tickValues)\r\n      .tickFormat(tickFormatter)\r\n      .tickSizeInner(0 - this.width)\r\n      .tickSizeOuter(0)\r\n      .tickPadding(Y_AXIS_TICK_PADDING);\r\n\r\n    this.heatmap\r\n      .append('g')\r\n      .attr('class', 'axis axis-y')\r\n      .call(yAxis);\r\n\r\n    // Calculate Y axis width first, then move axis into visible area\r\n    const posY = this.margin.top;\r\n    const posX = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\r\n    this.heatmap.select('.axis-y').attr('transform', 'translate(' + posX + ',' + posY + ')');\r\n\r\n    // Remove vertical line in the right of axis labels (called domain in d3)\r\n    this.heatmap\r\n      .select('.axis-y')\r\n      .select('.domain')\r\n      .remove();\r\n  }\r\n\r\n  // Adjust data range to log base\r\n  adjustLogRange(min, max, logBase) {\r\n    let yMin, yMax;\r\n\r\n    yMin = this.data.heatmapStats.minLog;\r\n    if (this.data.heatmapStats.minLog > 1 || !this.data.heatmapStats.minLog) {\r\n      yMin = 1;\r\n    } else {\r\n      yMin = this.adjustLogMin(this.data.heatmapStats.minLog, logBase);\r\n    }\r\n\r\n    // Adjust max Y value to log base\r\n    yMax = this.adjustLogMax(this.data.heatmapStats.max, logBase);\r\n\r\n    return { yMin, yMax };\r\n  }\r\n\r\n  adjustLogMax(max, base) {\r\n    return Math.pow(base, Math.ceil(ticksUtils.logp(max, base)));\r\n  }\r\n\r\n  adjustLogMin(min, base) {\r\n    return Math.pow(base, Math.floor(ticksUtils.logp(min, base)));\r\n  }\r\n\r\n  logScaleTickValues(domain, base) {\r\n    const domainMin = domain[0];\r\n    const domainMax = domain[1];\r\n    const tickValues = [];\r\n\r\n    if (domainMin < 1) {\r\n      const underOneTicks = Math.floor(ticksUtils.logp(domainMin, base));\r\n      for (let i = underOneTicks; i < 0; i++) {\r\n        const tickValue = Math.pow(base, i);\r\n        tickValues.push(tickValue);\r\n      }\r\n    }\r\n\r\n    const ticks = Math.ceil(ticksUtils.logp(domainMax, base));\r\n    for (let i = 0; i <= ticks; i++) {\r\n      const tickValue = Math.pow(base, i);\r\n      tickValues.push(tickValue);\r\n    }\r\n\r\n    return tickValues;\r\n  }\r\n\r\n  tickValueFormatter(decimals, scaledDecimals = null) {\r\n    const format = this.panel.yAxis.format;\r\n    return function(value) {\r\n      try {\r\n        return format !== 'none' ? kbn.valueFormats[format](value, decimals, scaledDecimals) : value;\r\n      } catch (err) {\r\n        console.error(err.message || err);\r\n        return value;\r\n      }\r\n    };\r\n  }\r\n\r\n  fixYAxisTickSize() {\r\n    this.heatmap\r\n      .select('.axis-y')\r\n      .selectAll('.tick line')\r\n      .attr('x2', this.chartWidth);\r\n  }\r\n\r\n  addAxes() {\r\n    this.chartHeight = this.height - this.margin.top - this.margin.bottom;\r\n    this.chartTop = this.margin.top;\r\n    this.chartBottom = this.chartTop + this.chartHeight;\r\n    if (this.panel.dataFormat === 'tsbuckets') {\r\n      this.addYAxisFromBuckets();\r\n    } else {\r\n      if (this.panel.yAxis.logBase === 1) {\r\n        this.addYAxis();\r\n      } else {\r\n        this.addLogYAxis();\r\n      }\r\n    }\r\n\r\n    this.yAxisWidth = this.getYAxisWidth(this.heatmap) + Y_AXIS_TICK_PADDING;\r\n    this.chartWidth = this.width - this.yAxisWidth - this.margin.right;\r\n    this.fixYAxisTickSize();\r\n\r\n    this.addXAxis();\r\n    this.xAxisHeight = this.getXAxisHeight(this.heatmap);\r\n\r\n    if (!this.panel.yAxis.show) {\r\n      this.heatmap\r\n        .select('.axis-y')\r\n        .selectAll('line')\r\n        .style('opacity', 0);\r\n    }\r\n\r\n    if (!this.panel.xAxis.show) {\r\n      this.heatmap\r\n        .select('.axis-x')\r\n        .selectAll('line')\r\n        .style('opacity', 0);\r\n    }\r\n  }\r\n\r\n  addHeatmapCanvas() {\r\n    const heatmapElem = this.$heatmap[0];\r\n\r\n    this.width = Math.floor(this.$heatmap.width()) - this.padding.right;\r\n    this.height = Math.floor(this.$heatmap.height()) - this.padding.bottom;\r\n\r\n    this.cardPadding = this.panel.cards.cardPadding !== null ? this.panel.cards.cardPadding : CARD_PADDING;\r\n    this.cardRound = this.panel.cards.cardRound !== null ? this.panel.cards.cardRound : CARD_ROUND;\r\n\r\n    if (this.heatmap) {\r\n      this.heatmap.remove();\r\n    }\r\n\r\n    this.heatmap = d3\r\n      .select(heatmapElem)\r\n      .append('svg')\r\n      .attr('width', this.width)\r\n      .attr('height', this.height);\r\n  }\r\n\r\n  addHeatmap() {\r\n    this.addHeatmapCanvas();\r\n    this.addAxes();\r\n\r\n    if (this.panel.yAxis.logBase !== 1 && this.panel.dataFormat !== 'tsbuckets') {\r\n      const logBase = this.panel.yAxis.logBase;\r\n      const domain = this.yScale.domain();\r\n      const tickValues = this.logScaleTickValues(domain, logBase);\r\n      this.data.buckets = mergeZeroBuckets(this.data.buckets, _.min(tickValues));\r\n    }\r\n\r\n    const cardsData = this.data.cards;\r\n    const maxValueAuto = this.data.cardStats.max;\r\n    const maxValue = this.panel.color.max || maxValueAuto;\r\n    const minValue = this.panel.color.min || 0;\r\n\r\n    const colorScheme = _.find(this.ctrl.colorSchemes, {\r\n      value: this.panel.color.colorScheme,\r\n    });\r\n    this.colorScale = getColorScale(colorScheme, contextSrv.user.lightTheme, maxValue, minValue);\r\n    this.opacityScale = getOpacityScale(this.panel.color, maxValue);\r\n    this.setCardSize();\r\n\r\n    let cards = this.heatmap.selectAll('.heatmap-card').data(cardsData);\r\n    cards.append('title');\r\n    cards = cards\r\n      .enter()\r\n      .append('rect')\r\n      .attr('x', this.getCardX.bind(this))\r\n      .attr('width', this.getCardWidth.bind(this))\r\n      .attr('y', this.getCardY.bind(this))\r\n      .attr('height', this.getCardHeight.bind(this))\r\n      .attr('rx', this.cardRound)\r\n      .attr('ry', this.cardRound)\r\n      .attr('class', 'bordered heatmap-card')\r\n      .style('fill', this.getCardColor.bind(this))\r\n      .style('stroke', this.getCardColor.bind(this))\r\n      .style('stroke-width', 0)\r\n      .style('opacity', this.getCardOpacity.bind(this));\r\n\r\n    const $cards = this.$heatmap.find('.heatmap-card');\r\n    $cards\r\n      .on('mouseenter', event => {\r\n        this.tooltip.mouseOverBucket = true;\r\n        this.highlightCard(event);\r\n      })\r\n      .on('mouseleave', event => {\r\n        this.tooltip.mouseOverBucket = false;\r\n        this.resetCardHighLight(event);\r\n      });\r\n  }\r\n\r\n  highlightCard(event) {\r\n    const color = d3.select(event.target).style('fill');\r\n    const highlightColor = d3.color(color).darker(2);\r\n    const strokeColor = d3.color(color).brighter(4);\r\n    const currentCard = d3.select(event.target);\r\n    this.tooltip.originalFillColor = color;\r\n    currentCard\r\n      .style('fill', highlightColor.toString())\r\n      .style('stroke', strokeColor.toString())\r\n      .style('stroke-width', 1);\r\n  }\r\n\r\n  resetCardHighLight(event) {\r\n    d3\r\n      .select(event.target)\r\n      .style('fill', this.tooltip.originalFillColor)\r\n      .style('stroke', this.tooltip.originalFillColor)\r\n      .style('stroke-width', 0);\r\n  }\r\n\r\n  setCardSize() {\r\n    const xGridSize = Math.floor(this.xScale(this.data.xBucketSize) - this.xScale(0));\r\n    let yGridSize = Math.floor(this.yScale(this.yScale.invert(0) - this.data.yBucketSize));\r\n\r\n    if (this.panel.yAxis.logBase !== 1) {\r\n      const base = this.panel.yAxis.logBase;\r\n      const splitFactor = this.data.yBucketSize || 1;\r\n      yGridSize = Math.floor((this.yScale(1) - this.yScale(base)) / splitFactor);\r\n    }\r\n\r\n    this.cardWidth = xGridSize - this.cardPadding * 2;\r\n    this.cardHeight = yGridSize ? yGridSize - this.cardPadding * 2 : 0;\r\n  }\r\n\r\n  getCardX(d) {\r\n    let x;\r\n    if (this.xScale(d.x) < 0) {\r\n      // Cut card left to prevent overlay\r\n      x = this.yAxisWidth + this.cardPadding;\r\n    } else {\r\n      x = this.xScale(d.x) + this.yAxisWidth + this.cardPadding;\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n  getCardWidth(d) {\r\n    let w;\r\n    if (this.xScale(d.x) < 0) {\r\n      // Cut card left to prevent overlay\r\n      const cuttedWidth = this.xScale(d.x) + this.cardWidth;\r\n      w = cuttedWidth > 0 ? cuttedWidth : 0;\r\n    } else if (this.xScale(d.x) + this.cardWidth > this.chartWidth) {\r\n      // Cut card right to prevent overlay\r\n      w = this.chartWidth - this.xScale(d.x) - this.cardPadding;\r\n    } else {\r\n      w = this.cardWidth;\r\n    }\r\n\r\n    // Card width should be MIN_CARD_SIZE at least\r\n    w = Math.max(w, MIN_CARD_SIZE);\r\n    return w;\r\n  }\r\n\r\n  getCardY(d) {\r\n    let y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\r\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\r\n      y = this.chartBottom - this.cardHeight - this.cardPadding;\r\n    } else {\r\n      if (y < this.chartTop) {\r\n        y = this.chartTop;\r\n      }\r\n    }\r\n\r\n    return y;\r\n  }\r\n\r\n  getCardHeight(d) {\r\n    const y = this.yScale(d.y) + this.chartTop - this.cardHeight - this.cardPadding;\r\n    let h = this.cardHeight;\r\n\r\n    if (this.panel.yAxis.logBase !== 1 && d.y === 0) {\r\n      return this.cardHeight;\r\n    }\r\n\r\n    // Cut card height to prevent overlay\r\n    if (y < this.chartTop) {\r\n      h = this.yScale(d.y) - this.cardPadding;\r\n    } else if (this.yScale(d.y) > this.chartBottom) {\r\n      h = this.chartBottom - y;\r\n    } else if (y + this.cardHeight > this.chartBottom) {\r\n      h = this.chartBottom - y;\r\n    }\r\n\r\n    // Height can't be more than chart height\r\n    h = Math.min(h, this.chartHeight);\r\n    // Card height should be MIN_CARD_SIZE at least\r\n    h = Math.max(h, MIN_CARD_SIZE);\r\n\r\n    return h;\r\n  }\r\n\r\n  getCardColor(d) {\r\n    if (this.panel.color.mode === 'opacity') {\r\n      return this.panel.color.cardColor;\r\n    } else {\r\n      return this.colorScale(d.count);\r\n    }\r\n  }\r\n\r\n  getCardOpacity(d) {\r\n    if (this.panel.color.mode === 'opacity') {\r\n      return this.opacityScale(d.count);\r\n    } else {\r\n      return 1;\r\n    }\r\n  }\r\n\r\n  getEventOffset(event) {\r\n    const elemOffset = this.$heatmap.offset();\r\n    const x = Math.floor(event.clientX - elemOffset.left);\r\n    const y = Math.floor(event.clientY - elemOffset.top);\r\n    return { x, y };\r\n  }\r\n\r\n  onMouseDown(event) {\r\n    const offset = this.getEventOffset(event);\r\n    this.selection.active = true;\r\n    this.selection.x1 = offset.x;\r\n\r\n    this.mouseUpHandler = () => {\r\n      this.onMouseUp();\r\n    };\r\n\r\n    $(document).one('mouseup', this.mouseUpHandler.bind(this));\r\n  }\r\n\r\n  onMouseUp() {\r\n    $(document).unbind('mouseup', this.mouseUpHandler.bind(this));\r\n    this.mouseUpHandler = null;\r\n    this.selection.active = false;\r\n\r\n    const selectionRange = Math.abs(this.selection.x2 - this.selection.x1);\r\n    if (this.selection.x2 >= 0 && selectionRange > MIN_SELECTION_WIDTH) {\r\n      const timeFrom = this.xScale.invert(Math.min(this.selection.x1, this.selection.x2) - this.yAxisWidth);\r\n      const timeTo = this.xScale.invert(Math.max(this.selection.x1, this.selection.x2) - this.yAxisWidth);\r\n\r\n      this.ctrl.timeSrv.setTime({\r\n        from: moment.utc(timeFrom),\r\n        to: moment.utc(timeTo),\r\n      });\r\n    }\r\n\r\n    this.clearSelection();\r\n  }\r\n\r\n  onMouseLeave() {\r\n    appEvents.emit('graph-hover-clear');\r\n    this.clearCrosshair();\r\n  }\r\n\r\n  onMouseMove(event) {\r\n    if (!this.heatmap) {\r\n      return;\r\n    }\r\n\r\n    const offset = this.getEventOffset(event);\r\n    if (this.selection.active) {\r\n      // Clear crosshair and tooltip\r\n      this.clearCrosshair();\r\n      this.tooltip.destroy();\r\n\r\n      this.selection.x2 = this.limitSelection(offset.x);\r\n      this.drawSelection(this.selection.x1, this.selection.x2);\r\n    } else {\r\n      const pos = this.getEventPos(event, offset);\r\n      this.drawCrosshair(offset.x);\r\n      this.tooltip.show(pos, this.data);\r\n      this.emitGraphHoverEvent(pos);\r\n    }\r\n  }\r\n\r\n  getEventPos(event, offset) {\r\n    const x = this.xScale.invert(offset.x - this.yAxisWidth).valueOf();\r\n    const y = this.yScale.invert(offset.y - this.chartTop);\r\n    const pos = {\r\n      pageX: event.pageX,\r\n      pageY: event.pageY,\r\n      x: x,\r\n      x1: x,\r\n      y: y,\r\n      y1: y,\r\n      panelRelY: null,\r\n      offset,\r\n    };\r\n\r\n    return pos;\r\n  }\r\n\r\n  emitGraphHoverEvent(pos) {\r\n    // Set minimum offset to prevent showing legend from another panel\r\n    pos.panelRelY = Math.max(pos.offset.y / this.height, 0.001);\r\n    // broadcast to other graph panels that we are hovering\r\n    appEvents.emit('graph-hover', { pos: pos, panel: this.panel });\r\n  }\r\n\r\n  limitSelection(x2) {\r\n    x2 = Math.max(x2, this.yAxisWidth);\r\n    x2 = Math.min(x2, this.chartWidth + this.yAxisWidth);\r\n    return x2;\r\n  }\r\n\r\n  drawSelection(posX1, posX2) {\r\n    if (this.heatmap) {\r\n      this.heatmap.selectAll('.heatmap-selection').remove();\r\n      const selectionX = Math.min(posX1, posX2);\r\n      const selectionWidth = Math.abs(posX1 - posX2);\r\n\r\n      if (selectionWidth > MIN_SELECTION_WIDTH) {\r\n        this.heatmap\r\n          .append('rect')\r\n          .attr('class', 'heatmap-selection')\r\n          .attr('x', selectionX)\r\n          .attr('width', selectionWidth)\r\n          .attr('y', this.chartTop)\r\n          .attr('height', this.chartHeight);\r\n      }\r\n    }\r\n  }\r\n\r\n  clearSelection() {\r\n    this.selection.x1 = -1;\r\n    this.selection.x2 = -1;\r\n\r\n    if (this.heatmap) {\r\n      this.heatmap.selectAll('.heatmap-selection').remove();\r\n    }\r\n  }\r\n\r\n  drawCrosshair(position) {\r\n    if (this.heatmap) {\r\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\r\n\r\n      let posX = position;\r\n      posX = Math.max(posX, this.yAxisWidth);\r\n      posX = Math.min(posX, this.chartWidth + this.yAxisWidth);\r\n\r\n      this.heatmap\r\n        .append('g')\r\n        .attr('class', 'heatmap-crosshair')\r\n        .attr('transform', 'translate(' + posX + ',0)')\r\n        .append('line')\r\n        .attr('x1', 1)\r\n        .attr('y1', this.chartTop)\r\n        .attr('x2', 1)\r\n        .attr('y2', this.chartBottom)\r\n        .attr('stroke-width', 1);\r\n    }\r\n  }\r\n\r\n  drawSharedCrosshair(pos) {\r\n    if (this.heatmap && this.ctrl.dashboard.graphTooltip !== 0) {\r\n      const posX = this.xScale(pos.x) + this.yAxisWidth;\r\n      this.drawCrosshair(posX);\r\n    }\r\n  }\r\n\r\n  clearCrosshair() {\r\n    if (this.heatmap) {\r\n      this.heatmap.selectAll('.heatmap-crosshair').remove();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    this.data = this.ctrl.data;\r\n    this.panel = this.ctrl.panel;\r\n    this.timeRange = this.ctrl.range;\r\n\r\n    if (!this.setElementHeight() || !this.data) {\r\n      return;\r\n    }\r\n\r\n    // Draw default axes and return if no data\r\n    if (_.isEmpty(this.data.buckets)) {\r\n      this.addHeatmapCanvas();\r\n      this.addAxes();\r\n      return;\r\n    }\r\n\r\n    this.addHeatmap();\r\n    this.scope.yAxisWidth = this.yAxisWidth;\r\n    this.scope.xAxisHeight = this.xAxisHeight;\r\n    this.scope.chartHeight = this.chartHeight;\r\n    this.scope.chartWidth = this.chartWidth;\r\n    this.scope.chartTop = this.chartTop;\r\n  }\r\n}\r\n","import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport { axesEditor } from './axes_editor';\r\nimport { heatmapDisplayEditor } from './display_editor';\r\nimport rendering from './rendering';\r\nimport {\r\n  convertToHeatMap,\r\n  convertToCards,\r\n  histogramToHeatmap,\r\n  calculateBucketSize,\r\n  sortSeriesByLabel,\r\n} from './heatmap_data_converter';\r\n\r\nconst X_BUCKET_NUMBER_DEFAULT = 30;\r\nconst Y_BUCKET_NUMBER_DEFAULT = 10;\r\n\r\nconst panelDefaults = {\r\n  heatmap: {},\r\n  cards: {\r\n    cardPadding: null,\r\n    cardRound: null,\r\n  },\r\n  color: {\r\n    mode: 'spectrum',\r\n    cardColor: '#b4ff00',\r\n    colorScale: 'sqrt',\r\n    exponent: 0.5,\r\n    colorScheme: 'interpolateOranges',\r\n  },\r\n  legend: {\r\n    show: false,\r\n  },\r\n  dataFormat: 'timeseries',\r\n  yBucketBound: 'auto',\r\n  xAxis: {\r\n    show: true,\r\n  },\r\n  yAxis: {\r\n    show: true,\r\n    format: 'short',\r\n    decimals: null,\r\n    logBase: 1,\r\n    splitFactor: null,\r\n    min: null,\r\n    max: null,\r\n  },\r\n  xBucketSize: null,\r\n  xBucketNumber: null,\r\n  yBucketSize: null,\r\n  yBucketNumber: null,\r\n  tooltip: {\r\n    show: true,\r\n    showHistogram: false,\r\n  },\r\n  highlightCards: true,\r\n};\r\n\r\nconst colorModes = ['opacity', 'spectrum'];\r\nconst opacityScales = ['linear', 'sqrt'];\r\n\r\n// Schemes from d3-scale-chromatic\r\n// https://github.com/d3/d3-scale-chromatic\r\nconst colorSchemes = [\r\n  // Diverging\r\n  { name: 'Spectral', value: 'interpolateSpectral', invert: 'always' },\r\n  { name: 'RdYlGn', value: 'interpolateRdYlGn', invert: 'always' },\r\n\r\n  // Sequential (Single Hue)\r\n  { name: 'Blues', value: 'interpolateBlues', invert: 'dark' },\r\n  { name: 'Greens', value: 'interpolateGreens', invert: 'dark' },\r\n  { name: 'Greys', value: 'interpolateGreys', invert: 'dark' },\r\n  { name: 'Oranges', value: 'interpolateOranges', invert: 'dark' },\r\n  { name: 'Purples', value: 'interpolatePurples', invert: 'dark' },\r\n  { name: 'Reds', value: 'interpolateReds', invert: 'dark' },\r\n\r\n  // Sequential (Multi-Hue)\r\n  { name: 'Viridis', value: 'interpolateViridis', invert: 'light' },\r\n  { name: 'Magma', value: 'interpolateMagma', invert: 'light' },\r\n  { name: 'Inferno', value: 'interpolateInferno', invert: 'light' },\r\n  { name: 'Plasma', value: 'interpolatePlasma', invert: 'light' },\r\n  { name: 'Warm', value: 'interpolateWarm', invert: 'light' },\r\n  { name: 'Cool', value: 'interpolateCool', invert: 'light' },\r\n  { name: 'Cubehelix', value: 'interpolateCubehelixDefault', invert: 'light' },\r\n  { name: 'BuGn', value: 'interpolateBuGn', invert: 'dark' },\r\n  { name: 'BuPu', value: 'interpolateBuPu', invert: 'dark' },\r\n  { name: 'GnBu', value: 'interpolateGnBu', invert: 'dark' },\r\n  { name: 'OrRd', value: 'interpolateOrRd', invert: 'dark' },\r\n  { name: 'PuBuGn', value: 'interpolatePuBuGn', invert: 'dark' },\r\n  { name: 'PuBu', value: 'interpolatePuBu', invert: 'dark' },\r\n  { name: 'PuRd', value: 'interpolatePuRd', invert: 'dark' },\r\n  { name: 'RdPu', value: 'interpolateRdPu', invert: 'dark' },\r\n  { name: 'YlGnBu', value: 'interpolateYlGnBu', invert: 'dark' },\r\n  { name: 'YlGn', value: 'interpolateYlGn', invert: 'dark' },\r\n  { name: 'YlOrBr', value: 'interpolateYlOrBr', invert: 'dark' },\r\n  { name: 'YlOrRd', value: 'interpolateYlOrRd', invert: 'dark' },\r\n];\r\n\r\nconst dsSupportHistogramSort = ['prometheus', 'elasticsearch'];\r\n\r\nexport class HeatmapCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  opacityScales: any = [];\r\n  colorModes: any = [];\r\n  colorSchemes: any = [];\r\n  selectionActivated: boolean;\r\n  unitFormats: any;\r\n  data: any;\r\n  series: any;\r\n  timeSrv: any;\r\n  dataWarning: any;\r\n  decimals: number;\r\n  scaledDecimals: number;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, timeSrv) {\r\n    super($scope, $injector);\r\n    this.timeSrv = timeSrv;\r\n    this.selectionActivated = false;\r\n\r\n    _.defaultsDeep(this.panel, panelDefaults);\r\n    this.opacityScales = opacityScales;\r\n    this.colorModes = colorModes;\r\n    this.colorSchemes = colorSchemes;\r\n\r\n    // Bind grafana panel events\r\n    this.events.on('render', this.onRender.bind(this));\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\r\n    this.onCardColorChange = this.onCardColorChange.bind(this);\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Axes', axesEditor, 2);\r\n    this.addEditorTab('Display', heatmapDisplayEditor, 3);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  }\r\n\r\n  zoomOut(evt) {\r\n    this.publishAppEvent('zoom-out', 2);\r\n  }\r\n\r\n  onRender() {\r\n    if (!this.range) {\r\n      return;\r\n    }\r\n\r\n    if (this.panel.dataFormat === 'tsbuckets') {\r\n      this.convertHistogramToHeatmapData();\r\n    } else {\r\n      this.convertTimeSeriesToHeatmapData();\r\n    }\r\n  }\r\n\r\n  convertTimeSeriesToHeatmapData() {\r\n    let xBucketSize, yBucketSize, bucketsData, heatmapStats;\r\n    const logBase = this.panel.yAxis.logBase;\r\n\r\n    const xBucketNumber = this.panel.xBucketNumber || X_BUCKET_NUMBER_DEFAULT;\r\n    const xBucketSizeByNumber = Math.floor((this.range.to - this.range.from) / xBucketNumber);\r\n\r\n    // Parse X bucket size (number or interval)\r\n    const isIntervalString = kbn.interval_regex.test(this.panel.xBucketSize);\r\n    if (isIntervalString) {\r\n      xBucketSize = kbn.interval_to_ms(this.panel.xBucketSize);\r\n    } else if (\r\n      isNaN(Number(this.panel.xBucketSize)) ||\r\n      this.panel.xBucketSize === '' ||\r\n      this.panel.xBucketSize === null\r\n    ) {\r\n      xBucketSize = xBucketSizeByNumber;\r\n    } else {\r\n      xBucketSize = Number(this.panel.xBucketSize);\r\n    }\r\n\r\n    // Calculate Y bucket size\r\n    heatmapStats = this.parseSeries(this.series);\r\n    const yBucketNumber = this.panel.yBucketNumber || Y_BUCKET_NUMBER_DEFAULT;\r\n    if (logBase !== 1) {\r\n      yBucketSize = this.panel.yAxis.splitFactor;\r\n    } else {\r\n      if (heatmapStats.max === heatmapStats.min) {\r\n        if (heatmapStats.max) {\r\n          yBucketSize = heatmapStats.max / Y_BUCKET_NUMBER_DEFAULT;\r\n        } else {\r\n          yBucketSize = 1;\r\n        }\r\n      } else {\r\n        yBucketSize = (heatmapStats.max - heatmapStats.min) / yBucketNumber;\r\n      }\r\n      yBucketSize = this.panel.yBucketSize || yBucketSize;\r\n    }\r\n\r\n    bucketsData = convertToHeatMap(this.series, yBucketSize, xBucketSize, logBase);\r\n\r\n    // Set default Y range if no data\r\n    if (!heatmapStats.min && !heatmapStats.max) {\r\n      heatmapStats = { min: -1, max: 1, minLog: 1 };\r\n      yBucketSize = 1;\r\n    }\r\n\r\n    const { cards, cardStats } = convertToCards(bucketsData);\r\n\r\n    this.data = {\r\n      buckets: bucketsData,\r\n      heatmapStats: heatmapStats,\r\n      xBucketSize: xBucketSize,\r\n      yBucketSize: yBucketSize,\r\n      cards: cards,\r\n      cardStats: cardStats,\r\n    };\r\n  }\r\n\r\n  convertHistogramToHeatmapData() {\r\n    const panelDatasource = this.getPanelDataSourceType();\r\n    let xBucketSize, yBucketSize, bucketsData, tsBuckets;\r\n\r\n    // Try to sort series by bucket bound, if datasource doesn't do it.\r\n    if (!_.includes(dsSupportHistogramSort, panelDatasource)) {\r\n      this.series.sort(sortSeriesByLabel);\r\n    }\r\n\r\n    // Convert histogram to heatmap. Each histogram bucket represented by the series which name is\r\n    // a top (or bottom, depends of datasource) bucket bound. Further, these values will be used as X axis labels.\r\n    bucketsData = histogramToHeatmap(this.series);\r\n\r\n    tsBuckets = _.map(this.series, 'label');\r\n    const yBucketBound = this.panel.yBucketBound;\r\n    if ((panelDatasource === 'prometheus' && yBucketBound !== 'lower') || yBucketBound === 'upper') {\r\n      // Prometheus labels are upper inclusive bounds, so add empty bottom bucket label.\r\n      tsBuckets = [''].concat(tsBuckets);\r\n    } else {\r\n      // Elasticsearch uses labels as lower bucket bounds, so add empty top bucket label.\r\n      // Use this as a default mode as well.\r\n      tsBuckets.push('');\r\n    }\r\n\r\n    // Calculate bucket size based on heatmap data\r\n    const xBucketBoundSet = _.map(_.keys(bucketsData), key => Number(key));\r\n    xBucketSize = calculateBucketSize(xBucketBoundSet);\r\n    // Always let yBucketSize=1 in 'tsbuckets' mode\r\n    yBucketSize = 1;\r\n\r\n    const { cards, cardStats } = convertToCards(bucketsData);\r\n\r\n    this.data = {\r\n      buckets: bucketsData,\r\n      xBucketSize: xBucketSize,\r\n      yBucketSize: yBucketSize,\r\n      tsBuckets: tsBuckets,\r\n      cards: cards,\r\n      cardStats: cardStats,\r\n    };\r\n  }\r\n\r\n  getPanelDataSourceType() {\r\n    if (this.datasource.meta && this.datasource.meta.id) {\r\n      return this.datasource.meta.id;\r\n    } else {\r\n      return 'unknown';\r\n    }\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.series = dataList.map(this.seriesHandler.bind(this));\r\n\r\n    this.dataWarning = null;\r\n    const datapointsCount = _.reduce(\r\n      this.series,\r\n      (sum, series) => {\r\n        return sum + series.datapoints.length;\r\n      },\r\n      0\r\n    );\r\n\r\n    if (datapointsCount === 0) {\r\n      this.dataWarning = {\r\n        title: 'No data points',\r\n        tip: 'No datapoints returned from data query',\r\n      };\r\n    } else {\r\n      for (const series of this.series) {\r\n        if (series.isOutsideRange) {\r\n          this.dataWarning = {\r\n            title: 'Data points outside time range',\r\n            tip: 'Can be caused by timezone mismatch or missing time filter in query',\r\n          };\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  onDataError() {\r\n    this.series = [];\r\n    this.render();\r\n  }\r\n\r\n  onCardColorChange(newColor) {\r\n    this.panel.color.cardColor = newColor;\r\n    this.render();\r\n  }\r\n\r\n  seriesHandler(seriesData) {\r\n    if (seriesData.datapoints === undefined) {\r\n      throw new Error('Heatmap error: data should be a time series');\r\n    }\r\n\r\n    const series = new TimeSeries({\r\n      datapoints: seriesData.datapoints,\r\n      alias: seriesData.target,\r\n    });\r\n\r\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n\r\n    const datapoints = seriesData.datapoints || [];\r\n    if (datapoints && datapoints.length > 0) {\r\n      const last = datapoints[datapoints.length - 1][1];\r\n      const from = this.range.from;\r\n      if (last - from < -10000) {\r\n        series.isOutsideRange = true;\r\n      }\r\n    }\r\n\r\n    return series;\r\n  }\r\n\r\n  parseSeries(series) {\r\n    const min = _.min(_.map(series, s => s.stats.min));\r\n    const minLog = _.min(_.map(series, s => s.stats.logmin));\r\n    const max = _.max(_.map(series, s => s.stats.max));\r\n\r\n    return {\r\n      max: max,\r\n      min: min,\r\n      minLog: minLog,\r\n    };\r\n  }\r\n\r\n  parseHistogramSeries(series) {\r\n    const bounds = _.map(series, s => Number(s.alias));\r\n    const min = _.min(bounds);\r\n    const minLog = _.min(bounds);\r\n    const max = _.max(bounds);\r\n\r\n    return {\r\n      max: max,\r\n      min: min,\r\n      minLog: minLog,\r\n    };\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    rendering(scope, elem, attrs, ctrl);\r\n  }\r\n}\r\n","import './color_legend';\r\nimport { HeatmapCtrl } from './heatmap_ctrl';\r\n\r\nexport { HeatmapCtrl as PanelCtrl };\r\n","import _ from 'lodash';\r\nimport flatten from '../../../core/utils/flatten';\r\nimport TimeSeries from '../../../core/time_series2';\r\nimport TableModel from '../../../core/table_model';\r\n\r\nconst transformers = {};\r\n\r\ntransformers['timeseries_to_rows'] = {\r\n  description: 'Time series to rows',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns = [{ text: 'Time', type: 'date' }, { text: 'Metric' }, { text: 'Value' }];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i];\r\n      for (let y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y];\r\n        model.rows.push([dp[1], series.target, dp[0]]);\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\ntransformers['timeseries_to_columns'] = {\r\n  description: 'Time series to columns',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns.push({ text: 'Time', type: 'date' });\r\n\r\n    // group by time\r\n    const points = {};\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i];\r\n      model.columns.push({ text: series.target });\r\n\r\n      for (let y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y];\r\n        const timeKey = dp[1].toString();\r\n\r\n        if (!points[timeKey]) {\r\n          points[timeKey] = { time: dp[1] };\r\n          points[timeKey][i] = dp[0];\r\n        } else {\r\n          points[timeKey][i] = dp[0];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (const time in points) {\r\n      const point = points[time];\r\n      const values = [point.time];\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const value = point[i];\r\n        values.push(value);\r\n      }\r\n\r\n      model.rows.push(values);\r\n    }\r\n  },\r\n};\r\n\r\ntransformers['timeseries_aggregations'] = {\r\n  description: 'Time series aggregations',\r\n  getColumns: function() {\r\n    return [\r\n      { text: 'Avg', value: 'avg' },\r\n      { text: 'Min', value: 'min' },\r\n      { text: 'Max', value: 'max' },\r\n      { text: 'Total', value: 'total' },\r\n      { text: 'Current', value: 'current' },\r\n      { text: 'Count', value: 'count' },\r\n    ];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    let i, y;\r\n    model.columns.push({ text: 'Metric' });\r\n\r\n    for (i = 0; i < panel.columns.length; i++) {\r\n      model.columns.push({ text: panel.columns[i].text });\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      const series = new TimeSeries({\r\n        datapoints: data[i].datapoints,\r\n        alias: data[i].target,\r\n      });\r\n\r\n      series.getFlotPairs('connected');\r\n      const cells = [series.alias];\r\n\r\n      for (y = 0; y < panel.columns.length; y++) {\r\n        cells.push(series.stats[panel.columns[y].value]);\r\n      }\r\n\r\n      model.rows.push(cells);\r\n    }\r\n  },\r\n};\r\n\r\ntransformers['annotations'] = {\r\n  description: 'Annotations',\r\n  getColumns: function() {\r\n    return [];\r\n  },\r\n  transform: function(data, panel, model) {\r\n    model.columns.push({ text: 'Time', type: 'date' });\r\n    model.columns.push({ text: 'Title' });\r\n    model.columns.push({ text: 'Text' });\r\n    model.columns.push({ text: 'Tags' });\r\n\r\n    if (!data || !data.annotations || data.annotations.length === 0) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < data.annotations.length; i++) {\r\n      const evt = data.annotations[i];\r\n      model.rows.push([evt.time, evt.title, evt.text, evt.tags]);\r\n    }\r\n  },\r\n};\r\n\r\ntransformers['table'] = {\r\n  description: 'Table',\r\n  getColumns: function(data) {\r\n    if (!data || data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Single query returns data columns as is\r\n    if (data.length === 1) {\r\n      return [...data[0].columns];\r\n    }\r\n\r\n    // Track column indexes: name -> index\r\n    const columnNames = {};\r\n\r\n    // Union of all columns\r\n    const columns = data.reduce((acc, series) => {\r\n      series.columns.forEach(col => {\r\n        const { text } = col;\r\n        if (columnNames[text] === undefined) {\r\n          columnNames[text] = acc.length;\r\n          acc.push(col);\r\n        }\r\n      });\r\n      return acc;\r\n    }, []);\r\n\r\n    return columns;\r\n  },\r\n  transform: function(data, panel, model) {\r\n    if (!data || data.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const noTableIndex = _.findIndex(data, d => d.type !== 'table');\r\n    if (noTableIndex > -1) {\r\n      throw {\r\n        message: `Result of query #${String.fromCharCode(\r\n          65 + noTableIndex\r\n        )} is not in table format, try using another transform.`,\r\n      };\r\n    }\r\n\r\n    // Single query returns data columns and rows as is\r\n    if (data.length === 1) {\r\n      model.columns = [...data[0].columns];\r\n      model.rows = [...data[0].rows];\r\n      return;\r\n    }\r\n\r\n    // Track column indexes of union: name -> index\r\n    const columnNames = {};\r\n\r\n    // Union of all non-value columns\r\n    const columnsUnion = data.reduce((acc, series) => {\r\n      series.columns.forEach(col => {\r\n        const { text } = col;\r\n        if (columnNames[text] === undefined) {\r\n          columnNames[text] = acc.length;\r\n          acc.push(col);\r\n        }\r\n      });\r\n      return acc;\r\n    }, []);\r\n\r\n    // Map old column index to union index per series, e.g.,\r\n    // given columnNames {A: 0, B: 1} and\r\n    // data [{columns: [{ text: 'A' }]}, {columns: [{ text: 'B' }]}] => [[0], [1]]\r\n    const columnIndexMapper = data.map(series => series.columns.map(col => columnNames[col.text]));\r\n\r\n    // Flatten rows of all series and adjust new column indexes\r\n    const flattenedRows = data.reduce((acc, series, seriesIndex) => {\r\n      const mapper = columnIndexMapper[seriesIndex];\r\n      series.rows.forEach(row => {\r\n        const alteredRow = [];\r\n        // Shifting entries according to index mapper\r\n        mapper.forEach((to, from) => {\r\n          alteredRow[to] = row[from];\r\n        });\r\n        acc.push(alteredRow);\r\n      });\r\n      return acc;\r\n    }, []);\r\n\r\n    // Returns true if both rows have matching non-empty fields as well as matching\r\n    // indexes where one field is empty and the other is not\r\n    function areRowsMatching(columns, row, otherRow) {\r\n      let foundFieldToMatch = false;\r\n      for (let columnIndex = 0; columnIndex < columns.length; columnIndex++) {\r\n        if (row[columnIndex] !== undefined && otherRow[columnIndex] !== undefined) {\r\n          if (row[columnIndex] !== otherRow[columnIndex]) {\r\n            return false;\r\n          }\r\n        } else if (row[columnIndex] === undefined || otherRow[columnIndex] === undefined) {\r\n          foundFieldToMatch = true;\r\n        }\r\n      }\r\n      return foundFieldToMatch;\r\n    }\r\n\r\n    // Merge rows that have same values for columns\r\n    const mergedRows = {};\r\n    const compactedRows = flattenedRows.reduce((acc, row, rowIndex) => {\r\n      if (!mergedRows[rowIndex]) {\r\n        // Look from current row onwards\r\n        let offset = rowIndex + 1;\r\n        // More than one row can be merged into current row\r\n        while (offset < flattenedRows.length) {\r\n          // Find next row that could be merged\r\n          const match = _.findIndex(flattenedRows, otherRow => areRowsMatching(columnsUnion, row, otherRow), offset);\r\n          if (match > -1) {\r\n            const matchedRow = flattenedRows[match];\r\n            // Merge values from match into current row if there is a gap in the current row\r\n            for (let columnIndex = 0; columnIndex < columnsUnion.length; columnIndex++) {\r\n              if (row[columnIndex] === undefined && matchedRow[columnIndex] !== undefined) {\r\n                row[columnIndex] = matchedRow[columnIndex];\r\n              }\r\n            }\r\n            // Don't visit this row again\r\n            mergedRows[match] = matchedRow;\r\n            // Keep looking for more rows to merge\r\n            offset = match + 1;\r\n          } else {\r\n            // No match found, stop looking\r\n            break;\r\n          }\r\n        }\r\n        acc.push(row);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    model.columns = columnsUnion;\r\n    model.rows = compactedRows;\r\n  },\r\n};\r\n\r\ntransformers['json'] = {\r\n  description: 'JSON Data',\r\n  getColumns: function(data) {\r\n    if (!data || data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const names: any = {};\r\n    for (let i = 0; i < data.length; i++) {\r\n      const series = data[i];\r\n      if (series.type !== 'docs') {\r\n        continue;\r\n      }\r\n\r\n      // only look at 100 docs\r\n      const maxDocs = Math.min(series.datapoints.length, 100);\r\n      for (let y = 0; y < maxDocs; y++) {\r\n        const doc = series.datapoints[y];\r\n        const flattened = flatten(doc, null);\r\n        for (const propName in flattened) {\r\n          names[propName] = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return _.map(names, function(value, key) {\r\n      return { text: key, value: key };\r\n    });\r\n  },\r\n  transform: function(data, panel, model) {\r\n    let i, y, z;\r\n\r\n    for (const column of panel.columns) {\r\n      const tableCol: any = { text: column.text };\r\n\r\n      // if filterable data then set columns to filterable\r\n      if (data.length > 0 && data[0].filterable) {\r\n        tableCol.filterable = true;\r\n      }\r\n\r\n      model.columns.push(tableCol);\r\n    }\r\n\r\n    if (model.columns.length === 0) {\r\n      model.columns.push({ text: 'JSON' });\r\n    }\r\n\r\n    for (i = 0; i < data.length; i++) {\r\n      const series = data[i];\r\n\r\n      for (y = 0; y < series.datapoints.length; y++) {\r\n        const dp = series.datapoints[y];\r\n        const values = [];\r\n\r\n        if (_.isObject(dp) && panel.columns.length > 0) {\r\n          const flattened = flatten(dp, null);\r\n          for (z = 0; z < panel.columns.length; z++) {\r\n            values.push(flattened[panel.columns[z].value]);\r\n          }\r\n        } else {\r\n          values.push(JSON.stringify(dp));\r\n        }\r\n\r\n        model.rows.push(values);\r\n      }\r\n    }\r\n  },\r\n};\r\n\r\nfunction transformDataToTable(data, panel) {\r\n  const model = new TableModel();\r\n\r\n  if (!data || data.length === 0) {\r\n    return model;\r\n  }\r\n\r\n  const transformer = transformers[panel.transform];\r\n  if (!transformer) {\r\n    throw { message: 'Transformer ' + panel.transform + ' not found' };\r\n  }\r\n\r\n  transformer.transform(data, panel, model);\r\n  return model;\r\n}\r\n\r\nexport { transformers, transformDataToTable };\r\n","import _ from 'lodash';\r\nimport { transformers } from './transformers';\r\n\r\nexport class TablePanelEditorCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n  transformers: any;\r\n  fontSizes: any;\r\n  addColumnSegment: any;\r\n  getColumnNames: any;\r\n  canSetColumns: boolean;\r\n  columnsHelpMessage: string;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private $q, private uiSegmentSrv) {\r\n    $scope.editor = this;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.transformers = transformers;\r\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\r\n    this.addColumnSegment = uiSegmentSrv.newPlusButton();\r\n    this.updateTransformHints();\r\n  }\r\n\r\n  updateTransformHints() {\r\n    this.canSetColumns = false;\r\n    this.columnsHelpMessage = '';\r\n\r\n    switch (this.panel.transform) {\r\n      case 'timeseries_aggregations': {\r\n        this.canSetColumns = true;\r\n        break;\r\n      }\r\n      case 'json': {\r\n        this.canSetColumns = true;\r\n        break;\r\n      }\r\n      case 'table': {\r\n        this.columnsHelpMessage = 'Columns and their order are determined by the data query';\r\n      }\r\n    }\r\n  }\r\n\r\n  getColumnOptions() {\r\n    if (!this.panelCtrl.dataRaw) {\r\n      return this.$q.when([]);\r\n    }\r\n    const columns = this.transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\r\n    const segments = _.map(columns, (c: any) => this.uiSegmentSrv.newSegment({ value: c.text }));\r\n    return this.$q.when(segments);\r\n  }\r\n\r\n  addColumn() {\r\n    const columns = transformers[this.panel.transform].getColumns(this.panelCtrl.dataRaw);\r\n    const column = _.find(columns, { text: this.addColumnSegment.value });\r\n\r\n    if (column) {\r\n      this.panel.columns.push(column);\r\n      this.render();\r\n    }\r\n\r\n    const plusButton = this.uiSegmentSrv.newPlusButton();\r\n    this.addColumnSegment.html = plusButton.html;\r\n    this.addColumnSegment.value = plusButton.value;\r\n  }\r\n\r\n  transformChanged() {\r\n    this.panel.columns = [];\r\n    if (this.panel.transform === 'timeseries_aggregations') {\r\n      this.panel.columns.push({ text: 'Avg', value: 'avg' });\r\n    }\r\n\r\n    this.updateTransformHints();\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  removeColumn(column) {\r\n    this.panel.columns = _.without(this.panel.columns, column);\r\n    this.panelCtrl.render();\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function tablePanelEditor($q, uiSegmentSrv) {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/plugins/panel/table/editor.html',\r\n    controller: TablePanelEditorCtrl,\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nexport class ColumnOptionsCtrl {\r\n  panel: any;\r\n  panelCtrl: any;\r\n  colorModes: any;\r\n  columnStyles: any;\r\n  columnTypes: any;\r\n  fontSizes: any;\r\n  dateFormats: any;\r\n  addColumnSegment: any;\r\n  unitFormats: any;\r\n  getColumnNames: any;\r\n  activeStyleIndex: number;\r\n  mappingTypes: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope) {\r\n    $scope.editor = this;\r\n\r\n    this.activeStyleIndex = 0;\r\n    this.panelCtrl = $scope.ctrl;\r\n    this.panel = this.panelCtrl.panel;\r\n    this.unitFormats = kbn.getUnitFormats();\r\n    this.colorModes = [\r\n      { text: 'Disabled', value: null },\r\n      { text: 'Cell', value: 'cell' },\r\n      { text: 'Value', value: 'value' },\r\n      { text: 'Row', value: 'row' },\r\n    ];\r\n    this.columnTypes = [\r\n      { text: 'Number', value: 'number' },\r\n      { text: 'String', value: 'string' },\r\n      { text: 'Date', value: 'date' },\r\n      { text: 'Hidden', value: 'hidden' },\r\n    ];\r\n    this.fontSizes = ['80%', '90%', '100%', '110%', '120%', '130%', '150%', '160%', '180%', '200%', '220%', '250%'];\r\n    this.dateFormats = [\r\n      { text: 'YYYY-MM-DD HH:mm:ss', value: 'YYYY-MM-DD HH:mm:ss' },\r\n      { text: 'YYYY-MM-DD HH:mm:ss.SSS', value: 'YYYY-MM-DD HH:mm:ss.SSS' },\r\n      { text: 'MM/DD/YY h:mm:ss a', value: 'MM/DD/YY h:mm:ss a' },\r\n      { text: 'MMMM D, YYYY LT', value: 'MMMM D, YYYY LT' },\r\n    ];\r\n    this.mappingTypes = [{ text: 'Value to text', value: 1 }, { text: 'Range to text', value: 2 }];\r\n\r\n    this.getColumnNames = () => {\r\n      if (!this.panelCtrl.table) {\r\n        return [];\r\n      }\r\n      return _.map(this.panelCtrl.table.columns, function(col: any) {\r\n        return col.text;\r\n      });\r\n    };\r\n\r\n    this.onColorChange = this.onColorChange.bind(this);\r\n  }\r\n\r\n  render() {\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  setUnitFormat(column, subItem) {\r\n    column.unit = subItem.value;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  addColumnStyle() {\r\n    const newStyleRule = {\r\n      unit: 'short',\r\n      type: 'number',\r\n      alias: '',\r\n      decimals: 2,\r\n      colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\r\n      colorMode: null,\r\n      pattern: '',\r\n      dateFormat: 'YYYY-MM-DD HH:mm:ss',\r\n      thresholds: [],\r\n      mappingType: 1,\r\n    };\r\n\r\n    const styles = this.panel.styles;\r\n    const stylesCount = styles.length;\r\n    let indexToInsert = stylesCount;\r\n\r\n    // check if last is a catch all rule, then add it before that one\r\n    if (stylesCount > 0) {\r\n      const last = styles[stylesCount - 1];\r\n      if (last.pattern === '/.*/') {\r\n        indexToInsert = stylesCount - 1;\r\n      }\r\n    }\r\n\r\n    styles.splice(indexToInsert, 0, newStyleRule);\r\n    this.activeStyleIndex = indexToInsert;\r\n  }\r\n\r\n  removeColumnStyle(style) {\r\n    this.panel.styles = _.without(this.panel.styles, style);\r\n  }\r\n\r\n  invertColorOrder(index) {\r\n    const ref = this.panel.styles[index].colors;\r\n    const copy = ref[0];\r\n    ref[0] = ref[2];\r\n    ref[2] = copy;\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  onColorChange(styleIndex, colorIndex) {\r\n    return newColor => {\r\n      this.panel.styles[styleIndex].colors[colorIndex] = newColor;\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  addValueMap(style) {\r\n    if (!style.valueMaps) {\r\n      style.valueMaps = [];\r\n    }\r\n    style.valueMaps.push({ value: '', text: '' });\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  removeValueMap(style, index) {\r\n    style.valueMaps.splice(index, 1);\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  addRangeMap(style) {\r\n    if (!style.rangeMaps) {\r\n      style.rangeMaps = [];\r\n    }\r\n    style.rangeMaps.push({ from: '', to: '', text: '' });\r\n    this.panelCtrl.render();\r\n  }\r\n\r\n  removeRangeMap(style, index) {\r\n    style.rangeMaps.splice(index, 1);\r\n    this.panelCtrl.render();\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function columnOptionsTab($q, uiSegmentSrv) {\r\n  'use strict';\r\n  return {\r\n    restrict: 'E',\r\n    scope: true,\r\n    templateUrl: 'public/app/plugins/panel/table/column_options.html',\r\n    controller: ColumnOptionsCtrl,\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport moment from 'moment';\r\nimport kbn from 'app/core/utils/kbn';\r\n\r\nexport class TableRenderer {\r\n  formatters: any[];\r\n  colorState: any;\r\n\r\n  constructor(private panel, private table, private isUtc, private sanitize, private templateSrv) {\r\n    this.initColumns();\r\n  }\r\n\r\n  setTable(table) {\r\n    this.table = table;\r\n\r\n    this.initColumns();\r\n  }\r\n\r\n  initColumns() {\r\n    this.formatters = [];\r\n    this.colorState = {};\r\n\r\n    for (let colIndex = 0; colIndex < this.table.columns.length; colIndex++) {\r\n      const column = this.table.columns[colIndex];\r\n      column.title = column.text;\r\n\r\n      for (let i = 0; i < this.panel.styles.length; i++) {\r\n        const style = this.panel.styles[i];\r\n\r\n        const regex = kbn.stringToJsRegex(style.pattern);\r\n        if (column.text.match(regex)) {\r\n          column.style = style;\r\n\r\n          if (style.alias) {\r\n            column.title = column.text.replace(regex, style.alias);\r\n          }\r\n\r\n          break;\r\n        }\r\n      }\r\n\r\n      this.formatters[colIndex] = this.createColumnFormatter(column);\r\n    }\r\n  }\r\n\r\n  getColorForValue(value, style) {\r\n    if (!style.thresholds) {\r\n      return null;\r\n    }\r\n    for (let i = style.thresholds.length; i > 0; i--) {\r\n      if (value >= style.thresholds[i - 1]) {\r\n        return style.colors[i];\r\n      }\r\n    }\r\n    return _.first(style.colors);\r\n  }\r\n\r\n  defaultCellFormatter(v, style) {\r\n    if (v === null || v === void 0 || v === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (_.isArray(v)) {\r\n      v = v.join(', ');\r\n    }\r\n\r\n    if (style && style.sanitize) {\r\n      return this.sanitize(v);\r\n    } else {\r\n      return _.escape(v);\r\n    }\r\n  }\r\n\r\n  createColumnFormatter(column) {\r\n    if (!column.style) {\r\n      return this.defaultCellFormatter;\r\n    }\r\n\r\n    if (column.style.type === 'hidden') {\r\n      return v => {\r\n        return undefined;\r\n      };\r\n    }\r\n\r\n    if (column.style.type === 'date') {\r\n      return v => {\r\n        if (v === undefined || v === null) {\r\n          return '-';\r\n        }\r\n\r\n        if (_.isArray(v)) {\r\n          v = v[0];\r\n        }\r\n        let date = moment(v);\r\n        if (this.isUtc) {\r\n          date = date.utc();\r\n        }\r\n        return date.format(column.style.dateFormat);\r\n      };\r\n    }\r\n\r\n    if (column.style.type === 'string') {\r\n      return v => {\r\n        if (_.isArray(v)) {\r\n          v = v.join(', ');\r\n        }\r\n\r\n        const mappingType = column.style.mappingType || 0;\r\n\r\n        if (mappingType === 1 && column.style.valueMaps) {\r\n          for (let i = 0; i < column.style.valueMaps.length; i++) {\r\n            const map = column.style.valueMaps[i];\r\n\r\n            if (v === null) {\r\n              if (map.value === 'null') {\r\n                return map.text;\r\n              }\r\n              continue;\r\n            }\r\n\r\n            // Allow both numeric and string values to be mapped\r\n            if ((!_.isString(v) && Number(map.value) === Number(v)) || map.value === v) {\r\n              this.setColorState(v, column.style);\r\n              return this.defaultCellFormatter(map.text, column.style);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (mappingType === 2 && column.style.rangeMaps) {\r\n          for (let i = 0; i < column.style.rangeMaps.length; i++) {\r\n            const map = column.style.rangeMaps[i];\r\n\r\n            if (v === null) {\r\n              if (map.from === 'null' && map.to === 'null') {\r\n                return map.text;\r\n              }\r\n              continue;\r\n            }\r\n\r\n            if (Number(map.from) <= Number(v) && Number(map.to) >= Number(v)) {\r\n              this.setColorState(v, column.style);\r\n              return this.defaultCellFormatter(map.text, column.style);\r\n            }\r\n          }\r\n        }\r\n\r\n        if (v === null || v === void 0) {\r\n          return '-';\r\n        }\r\n\r\n        this.setColorState(v, column.style);\r\n        return this.defaultCellFormatter(v, column.style);\r\n      };\r\n    }\r\n\r\n    if (column.style.type === 'number') {\r\n      const valueFormatter = kbn.valueFormats[column.unit || column.style.unit];\r\n\r\n      return v => {\r\n        if (v === null || v === void 0) {\r\n          return '-';\r\n        }\r\n\r\n        if (_.isString(v) || _.isArray(v)) {\r\n          return this.defaultCellFormatter(v, column.style);\r\n        }\r\n\r\n        this.setColorState(v, column.style);\r\n        return valueFormatter(v, column.style.decimals, null);\r\n      };\r\n    }\r\n\r\n    return value => {\r\n      return this.defaultCellFormatter(value, column.style);\r\n    };\r\n  }\r\n\r\n  setColorState(value, style) {\r\n    if (!style.colorMode) {\r\n      return;\r\n    }\r\n\r\n    if (value === null || value === void 0 || _.isArray(value)) {\r\n      return;\r\n    }\r\n\r\n    const numericValue = Number(value);\r\n    if (numericValue === NaN) {\r\n      return;\r\n    }\r\n\r\n    this.colorState[style.colorMode] = this.getColorForValue(numericValue, style);\r\n  }\r\n\r\n  renderRowVariables(rowIndex) {\r\n    const scopedVars = {};\r\n    let cellVariable;\r\n    const row = this.table.rows[rowIndex];\r\n    for (let i = 0; i < row.length; i++) {\r\n      cellVariable = `__cell_${i}`;\r\n      scopedVars[cellVariable] = { value: row[i] };\r\n    }\r\n    return scopedVars;\r\n  }\r\n\r\n  formatColumnValue(colIndex, value) {\r\n    return this.formatters[colIndex] ? this.formatters[colIndex](value) : value;\r\n  }\r\n\r\n  renderCell(columnIndex, rowIndex, value, addWidthHack = false) {\r\n    value = this.formatColumnValue(columnIndex, value);\r\n\r\n    const column = this.table.columns[columnIndex];\r\n    let style = '';\r\n    const cellClasses = [];\r\n    let cellClass = '';\r\n\r\n    if (this.colorState.cell) {\r\n      style = ' style=\"background-color:' + this.colorState.cell + '\"';\r\n      cellClasses.push('table-panel-color-cell');\r\n      this.colorState.cell = null;\r\n    } else if (this.colorState.value) {\r\n      style = ' style=\"color:' + this.colorState.value + '\"';\r\n      this.colorState.value = null;\r\n    }\r\n    // because of the fixed table headers css only solution\r\n    // there is an issue if header cell is wider the cell\r\n    // this hack adds header content to cell (not visible)\r\n    let columnHtml = '';\r\n    if (addWidthHack) {\r\n      columnHtml = '<div class=\"table-panel-width-hack\">' + this.table.columns[columnIndex].title + '</div>';\r\n    }\r\n\r\n    if (value === undefined) {\r\n      style = ' style=\"display:none;\"';\r\n      column.hidden = true;\r\n    } else {\r\n      column.hidden = false;\r\n    }\r\n\r\n    if (column.hidden === true) {\r\n      return '';\r\n    }\r\n\r\n    if (column.style && column.style.preserveFormat) {\r\n      cellClasses.push('table-panel-cell-pre');\r\n    }\r\n\r\n    if (column.style && column.style.link) {\r\n      // Render cell as link\r\n      const scopedVars = this.renderRowVariables(rowIndex);\r\n      scopedVars['__cell'] = { value: value };\r\n\r\n      const cellLink = this.templateSrv.replace(column.style.linkUrl, scopedVars, encodeURIComponent);\r\n      const cellLinkTooltip = this.templateSrv.replace(column.style.linkTooltip, scopedVars);\r\n      const cellTarget = column.style.linkTargetBlank ? '_blank' : '';\r\n\r\n      cellClasses.push('table-panel-cell-link');\r\n\r\n      columnHtml += `\r\n        <a href=\"${cellLink}\" target=\"${cellTarget}\" data-link-tooltip data-original-title=\"${cellLinkTooltip}\" data-placement=\"right\"${style}>\r\n          ${value}\r\n        </a>\r\n      `;\r\n    } else {\r\n      columnHtml += value;\r\n    }\r\n\r\n    if (column.filterable) {\r\n      cellClasses.push('table-panel-cell-filterable');\r\n      columnHtml += `\r\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter out value\" data-placement=\"bottom\"\r\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"!=\">\r\n          <i class=\"fa fa-search-minus\"></i>\r\n        </a>\r\n        <a class=\"table-panel-filter-link\" data-link-tooltip data-original-title=\"Filter for value\" data-placement=\"bottom\"\r\n           data-row=\"${rowIndex}\" data-column=\"${columnIndex}\" data-operator=\"=\">\r\n          <i class=\"fa fa-search-plus\"></i>\r\n        </a>`;\r\n    }\r\n\r\n    if (cellClasses.length) {\r\n      cellClass = ' class=\"' + cellClasses.join(' ') + '\"';\r\n    }\r\n\r\n    columnHtml = '<td' + cellClass + style + '>' + columnHtml + '</td>';\r\n    return columnHtml;\r\n  }\r\n\r\n  render(page) {\r\n    const pageSize = this.panel.pageSize || 100;\r\n    const startPos = page * pageSize;\r\n    const endPos = Math.min(startPos + pageSize, this.table.rows.length);\r\n    let html = '';\r\n    const rowClasses = [];\r\n    let rowClass = '';\r\n\r\n    for (let y = startPos; y < endPos; y++) {\r\n      const row = this.table.rows[y];\r\n      let cellHtml = '';\r\n      let rowStyle = '';\r\n      for (let i = 0; i < this.table.columns.length; i++) {\r\n        cellHtml += this.renderCell(i, y, row[i], y === startPos);\r\n      }\r\n\r\n      if (this.colorState.row) {\r\n        rowStyle = ' style=\"background-color:' + this.colorState.row + '\"';\r\n        rowClasses.push('table-panel-color-row');\r\n        this.colorState.row = null;\r\n      }\r\n\r\n      if (rowClasses.length) {\r\n        rowClass = ' class=\"' + rowClasses.join(' ') + '\"';\r\n      }\r\n\r\n      html += '<tr ' + rowClass + rowStyle + '>' + cellHtml + '</tr>';\r\n    }\r\n\r\n    return html;\r\n  }\r\n\r\n  render_values() {\r\n    const rows = [];\r\n\r\n    for (let y = 0; y < this.table.rows.length; y++) {\r\n      const row = this.table.rows[y];\r\n      const newRow = [];\r\n      for (let i = 0; i < this.table.columns.length; i++) {\r\n        newRow.push(this.formatColumnValue(i, row[i]));\r\n      }\r\n      rows.push(newRow);\r\n    }\r\n    return {\r\n      columns: this.table.columns,\r\n      rows: rows,\r\n    };\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport { transformDataToTable } from './transformers';\r\nimport { tablePanelEditor } from './editor';\r\nimport { columnOptionsTab } from './column_options';\r\nimport { TableRenderer } from './renderer';\r\n\r\nclass TablePanelCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  pageIndex: number;\r\n  dataRaw: any;\r\n  table: any;\r\n  renderer: any;\r\n\r\n  panelDefaults = {\r\n    targets: [{}],\r\n    transform: 'timeseries_to_columns',\r\n    pageSize: null,\r\n    showHeader: true,\r\n    styles: [\r\n      {\r\n        type: 'date',\r\n        pattern: 'Time',\r\n        alias: 'Time',\r\n        dateFormat: 'YYYY-MM-DD HH:mm:ss',\r\n      },\r\n      {\r\n        unit: 'short',\r\n        type: 'number',\r\n        alias: '',\r\n        decimals: 2,\r\n        colors: ['rgba(245, 54, 54, 0.9)', 'rgba(237, 129, 40, 0.89)', 'rgba(50, 172, 45, 0.97)'],\r\n        colorMode: null,\r\n        pattern: '/.*/',\r\n        thresholds: [],\r\n      },\r\n    ],\r\n    columns: [],\r\n    scroll: true,\r\n    fontSize: '100%',\r\n    sort: { col: 0, desc: true },\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, templateSrv, private annotationsSrv, private $sanitize, private variableSrv) {\r\n    super($scope, $injector);\r\n\r\n    this.pageIndex = 0;\r\n\r\n    if (this.panel.styles === void 0) {\r\n      this.panel.styles = this.panel.columns;\r\n      this.panel.columns = this.panel.fields;\r\n      delete this.panel.columns;\r\n      delete this.panel.fields;\r\n    }\r\n\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n    this.events.on('init-panel-actions', this.onInitPanelActions.bind(this));\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.addEditorTab('Options', tablePanelEditor, 2);\r\n    this.addEditorTab('Column Styles', columnOptionsTab, 3);\r\n  }\r\n\r\n  onInitPanelActions(actions) {\r\n    actions.push({ text: 'Export CSV', click: 'ctrl.exportCsv()' });\r\n  }\r\n\r\n  issueQueries(datasource) {\r\n    this.pageIndex = 0;\r\n\r\n    if (this.panel.transform === 'annotations') {\r\n      this.setTimeQueryStart();\r\n      return this.annotationsSrv\r\n        .getAnnotations({\r\n          dashboard: this.dashboard,\r\n          panel: this.panel,\r\n          range: this.range,\r\n        })\r\n        .then(annotations => {\r\n          return { data: annotations };\r\n        });\r\n    }\r\n\r\n    return super.issueQueries(datasource);\r\n  }\r\n\r\n  onDataError(err) {\r\n    this.dataRaw = [];\r\n    this.render();\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    this.dataRaw = dataList;\r\n    this.pageIndex = 0;\r\n\r\n    // automatically correct transform mode based on data\r\n    if (this.dataRaw && this.dataRaw.length) {\r\n      if (this.dataRaw[0].type === 'table') {\r\n        this.panel.transform = 'table';\r\n      } else {\r\n        if (this.dataRaw[0].type === 'docs') {\r\n          this.panel.transform = 'json';\r\n        } else {\r\n          if (this.panel.transform === 'table' || this.panel.transform === 'json') {\r\n            this.panel.transform = 'timeseries_to_rows';\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.render();\r\n  }\r\n\r\n  render() {\r\n    this.table = transformDataToTable(this.dataRaw, this.panel);\r\n    this.table.sort(this.panel.sort);\r\n\r\n    this.renderer = new TableRenderer(\r\n      this.panel,\r\n      this.table,\r\n      this.dashboard.isTimezoneUtc(),\r\n      this.$sanitize,\r\n      this.templateSrv\r\n    );\r\n\r\n    return super.render(this.table);\r\n  }\r\n\r\n  toggleColumnSort(col, colIndex) {\r\n    // remove sort flag from current column\r\n    if (this.table.columns[this.panel.sort.col]) {\r\n      this.table.columns[this.panel.sort.col].sort = false;\r\n    }\r\n\r\n    if (this.panel.sort.col === colIndex) {\r\n      if (this.panel.sort.desc) {\r\n        this.panel.sort.desc = false;\r\n      } else {\r\n        this.panel.sort.col = null;\r\n      }\r\n    } else {\r\n      this.panel.sort.col = colIndex;\r\n      this.panel.sort.desc = true;\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  moveQuery(target, direction) {\r\n    super.moveQuery(target, direction);\r\n    super.refresh();\r\n  }\r\n\r\n  exportCsv() {\r\n    const scope = this.$scope.$new(true);\r\n    scope.tableData = this.renderer.render_values();\r\n    scope.panel = 'table';\r\n    this.publishAppEvent('show-modal', {\r\n      templateHtml: '<export-data-modal panel=\"panel\" data=\"tableData\"></export-data-modal>',\r\n      scope,\r\n      modalClass: 'modal--narrow',\r\n    });\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl: TablePanelCtrl) {\r\n    let data;\r\n    const panel = ctrl.panel;\r\n    let pageCount = 0;\r\n\r\n    function getTableHeight() {\r\n      let panelHeight = ctrl.height;\r\n\r\n      if (pageCount > 1) {\r\n        panelHeight -= 26;\r\n      }\r\n\r\n      return panelHeight - 31 + 'px';\r\n    }\r\n\r\n    function appendTableRows(tbodyElem) {\r\n      ctrl.renderer.setTable(data);\r\n      tbodyElem.empty();\r\n      tbodyElem.html(ctrl.renderer.render(ctrl.pageIndex));\r\n    }\r\n\r\n    function switchPage(e) {\r\n      const el = $(e.currentTarget);\r\n      ctrl.pageIndex = parseInt(el.text(), 10) - 1;\r\n      renderPanel();\r\n    }\r\n\r\n    function appendPaginationControls(footerElem) {\r\n      footerElem.empty();\r\n\r\n      const pageSize = panel.pageSize || 100;\r\n      pageCount = Math.ceil(data.rows.length / pageSize);\r\n      if (pageCount === 1) {\r\n        return;\r\n      }\r\n\r\n      const startPage = Math.max(ctrl.pageIndex - 3, 0);\r\n      const endPage = Math.min(pageCount, startPage + 9);\r\n\r\n      const paginationList = $('<ul></ul>');\r\n\r\n      for (let i = startPage; i < endPage; i++) {\r\n        const activeClass = i === ctrl.pageIndex ? 'active' : '';\r\n        const pageLinkElem = $(\r\n          '<li><a class=\"table-panel-page-link pointer ' + activeClass + '\">' + (i + 1) + '</a></li>'\r\n        );\r\n        paginationList.append(pageLinkElem);\r\n      }\r\n\r\n      footerElem.append(paginationList);\r\n    }\r\n\r\n    function renderPanel() {\r\n      const panelElem = elem.parents('.panel-content');\r\n      const rootElem = elem.find('.table-panel-scroll');\r\n      const tbodyElem = elem.find('tbody');\r\n      const footerElem = elem.find('.table-panel-footer');\r\n\r\n      elem.css({ 'font-size': panel.fontSize });\r\n      panelElem.addClass('table-panel-content');\r\n\r\n      appendTableRows(tbodyElem);\r\n      appendPaginationControls(footerElem);\r\n\r\n      rootElem.css({ 'max-height': panel.scroll ? getTableHeight() : '' });\r\n    }\r\n\r\n    // hook up link tooltips\r\n    elem.tooltip({\r\n      selector: '[data-link-tooltip]',\r\n    });\r\n\r\n    function addFilterClicked(e) {\r\n      const filterData = $(e.currentTarget).data();\r\n      const options = {\r\n        datasource: panel.datasource,\r\n        key: data.columns[filterData.column].text,\r\n        value: data.rows[filterData.row][filterData.column],\r\n        operator: filterData.operator,\r\n      };\r\n\r\n      ctrl.variableSrv.setAdhocFilter(options);\r\n    }\r\n\r\n    elem.on('click', '.table-panel-page-link', switchPage);\r\n    elem.on('click', '.table-panel-filter-link', addFilterClicked);\r\n\r\n    const unbindDestroy = scope.$on('$destroy', function() {\r\n      elem.off('click', '.table-panel-page-link');\r\n      elem.off('click', '.table-panel-filter-link');\r\n      unbindDestroy();\r\n    });\r\n\r\n    ctrl.events.on('render', function(renderData) {\r\n      data = renderData || data;\r\n      if (data) {\r\n        renderPanel();\r\n      }\r\n      ctrl.renderingCompleted();\r\n    });\r\n  }\r\n}\r\n\r\nexport { TablePanelCtrl, TablePanelCtrl as PanelCtrl };\r\n","import _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.gauge';\r\nimport 'app/features/panellinks/link_srv';\r\n\r\nimport kbn from 'app/core/utils/kbn';\r\nimport config from 'app/core/config';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport { MetricsPanelCtrl } from 'app/plugins/sdk';\r\n\r\nclass SingleStatCtrl extends MetricsPanelCtrl {\r\n  static templateUrl = 'module.html';\r\n\r\n  dataType = 'timeseries';\r\n  series: any[];\r\n  data: any;\r\n  fontSizes: any[];\r\n  unitFormats: any[];\r\n  invalidGaugeRange: boolean;\r\n  panel: any;\r\n  events: any;\r\n  valueNameOptions: any[] = [\r\n    { value: 'min', text: 'Min' },\r\n    { value: 'max', text: 'Max' },\r\n    { value: 'avg', text: 'Average' },\r\n    { value: 'current', text: 'Current' },\r\n    { value: 'total', text: 'Total' },\r\n    { value: 'name', text: 'Name' },\r\n    { value: 'first', text: 'First' },\r\n    { value: 'delta', text: 'Delta' },\r\n    { value: 'diff', text: 'Difference' },\r\n    { value: 'range', text: 'Range' },\r\n    { value: 'last_time', text: 'Time of last point' },\r\n  ];\r\n  tableColumnOptions: any;\r\n\r\n  // Set and populate defaults\r\n  panelDefaults = {\r\n    links: [],\r\n    datasource: null,\r\n    maxDataPoints: 100,\r\n    interval: null,\r\n    targets: [{}],\r\n    cacheTimeout: null,\r\n    format: 'none',\r\n    prefix: '',\r\n    postfix: '',\r\n    nullText: null,\r\n    valueMaps: [{ value: 'null', op: '=', text: 'N/A' }],\r\n    mappingTypes: [{ name: 'value to text', value: 1 }, { name: 'range to text', value: 2 }],\r\n    rangeMaps: [{ from: 'null', to: 'null', text: 'N/A' }],\r\n    mappingType: 1,\r\n    nullPointMode: 'connected',\r\n    valueName: 'avg',\r\n    prefixFontSize: '50%',\r\n    valueFontSize: '80%',\r\n    postfixFontSize: '50%',\r\n    thresholds: '',\r\n    colorBackground: false,\r\n    colorValue: false,\r\n    colors: ['#299c46', 'rgba(237, 129, 40, 0.89)', '#d44a3a'],\r\n    sparkline: {\r\n      show: false,\r\n      full: false,\r\n      lineColor: 'rgb(31, 120, 193)',\r\n      fillColor: 'rgba(31, 118, 189, 0.18)',\r\n    },\r\n    gauge: {\r\n      show: false,\r\n      minValue: 0,\r\n      maxValue: 100,\r\n      thresholdMarkers: true,\r\n      thresholdLabels: false,\r\n    },\r\n    tableColumn: '',\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private linkSrv) {\r\n    super($scope, $injector);\r\n    _.defaults(this.panel, this.panelDefaults);\r\n\r\n    this.events.on('data-received', this.onDataReceived.bind(this));\r\n    this.events.on('data-error', this.onDataError.bind(this));\r\n    this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n\r\n    this.onSparklineColorChange = this.onSparklineColorChange.bind(this);\r\n    this.onSparklineFillChange = this.onSparklineFillChange.bind(this);\r\n  }\r\n\r\n  onInitEditMode() {\r\n    this.fontSizes = ['20%', '30%', '50%', '70%', '80%', '100%', '110%', '120%', '150%', '170%', '200%'];\r\n    this.addEditorTab('Options', 'public/app/plugins/panel/singlestat/editor.html', 2);\r\n    this.addEditorTab('Value Mappings', 'public/app/plugins/panel/singlestat/mappings.html', 3);\r\n    this.unitFormats = kbn.getUnitFormats();\r\n  }\r\n\r\n  setUnitFormat(subItem) {\r\n    this.panel.format = subItem.value;\r\n    this.refresh();\r\n  }\r\n\r\n  onDataError(err) {\r\n    this.onDataReceived([]);\r\n  }\r\n\r\n  onDataReceived(dataList) {\r\n    const data: any = {};\r\n    if (dataList.length > 0 && dataList[0].type === 'table') {\r\n      this.dataType = 'table';\r\n      const tableData = dataList.map(this.tableHandler.bind(this));\r\n      this.setTableValues(tableData, data);\r\n    } else {\r\n      this.dataType = 'timeseries';\r\n      this.series = dataList.map(this.seriesHandler.bind(this));\r\n      this.setValues(data);\r\n    }\r\n    this.data = data;\r\n    this.render();\r\n  }\r\n\r\n  seriesHandler(seriesData) {\r\n    const series = new TimeSeries({\r\n      datapoints: seriesData.datapoints || [],\r\n      alias: seriesData.target,\r\n    });\r\n\r\n    series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\r\n    return series;\r\n  }\r\n\r\n  tableHandler(tableData) {\r\n    const datapoints = [];\r\n    const columnNames = {};\r\n\r\n    tableData.columns.forEach((column, columnIndex) => {\r\n      columnNames[columnIndex] = column.text;\r\n    });\r\n\r\n    this.tableColumnOptions = columnNames;\r\n    if (!_.find(tableData.columns, ['text', this.panel.tableColumn])) {\r\n      this.setTableColumnToSensibleDefault(tableData);\r\n    }\r\n\r\n    tableData.rows.forEach(row => {\r\n      const datapoint = {};\r\n\r\n      row.forEach((value, columnIndex) => {\r\n        const key = columnNames[columnIndex];\r\n        datapoint[key] = value;\r\n      });\r\n\r\n      datapoints.push(datapoint);\r\n    });\r\n\r\n    return datapoints;\r\n  }\r\n\r\n  setTableColumnToSensibleDefault(tableData) {\r\n    if (tableData.columns.length === 1) {\r\n      this.panel.tableColumn = tableData.columns[0].text;\r\n    } else {\r\n      this.panel.tableColumn = _.find(tableData.columns, col => {\r\n        return col.type !== 'time';\r\n      }).text;\r\n    }\r\n  }\r\n\r\n  setTableValues(tableData, data) {\r\n    if (!tableData || tableData.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (tableData[0].length === 0 || tableData[0][0][this.panel.tableColumn] === undefined) {\r\n      return;\r\n    }\r\n\r\n    const datapoint = tableData[0][0];\r\n    data.value = datapoint[this.panel.tableColumn];\r\n\r\n    if (_.isString(data.value)) {\r\n      data.valueFormatted = _.escape(data.value);\r\n      data.value = 0;\r\n      data.valueRounded = 0;\r\n    } else {\r\n      const decimalInfo = this.getDecimalsForValue(data.value);\r\n      const formatFunc = kbn.valueFormats[this.panel.format];\r\n      data.valueFormatted = formatFunc(\r\n        datapoint[this.panel.tableColumn],\r\n        decimalInfo.decimals,\r\n        decimalInfo.scaledDecimals\r\n      );\r\n      data.valueRounded = kbn.roundValue(data.value, this.panel.decimals || 0);\r\n    }\r\n\r\n    this.setValueMapping(data);\r\n  }\r\n\r\n  canModifyText() {\r\n    return !this.panel.gauge.show;\r\n  }\r\n\r\n  setColoring(options) {\r\n    if (options.background) {\r\n      this.panel.colorValue = false;\r\n      this.panel.colors = ['rgba(71, 212, 59, 0.4)', 'rgba(245, 150, 40, 0.73)', 'rgba(225, 40, 40, 0.59)'];\r\n    } else {\r\n      this.panel.colorBackground = false;\r\n      this.panel.colors = ['rgba(50, 172, 45, 0.97)', 'rgba(237, 129, 40, 0.89)', 'rgba(245, 54, 54, 0.9)'];\r\n    }\r\n    this.render();\r\n  }\r\n\r\n  invertColorOrder() {\r\n    const tmp = this.panel.colors[0];\r\n    this.panel.colors[0] = this.panel.colors[2];\r\n    this.panel.colors[2] = tmp;\r\n    this.render();\r\n  }\r\n\r\n  onColorChange(panelColorIndex) {\r\n    return color => {\r\n      this.panel.colors[panelColorIndex] = color;\r\n      this.render();\r\n    };\r\n  }\r\n\r\n  onSparklineColorChange(newColor) {\r\n    this.panel.sparkline.lineColor = newColor;\r\n    this.render();\r\n  }\r\n\r\n  onSparklineFillChange(newColor) {\r\n    this.panel.sparkline.fillColor = newColor;\r\n    this.render();\r\n  }\r\n\r\n  getDecimalsForValue(value) {\r\n    if (_.isNumber(this.panel.decimals)) {\r\n      return { decimals: this.panel.decimals, scaledDecimals: null };\r\n    }\r\n\r\n    const delta = value / 2;\r\n    let dec = -Math.floor(Math.log(delta) / Math.LN10);\r\n\r\n    const magn = Math.pow(10, -dec);\r\n    const norm = delta / magn; // norm is between 1.0 and 10.0\r\n    let size;\r\n\r\n    if (norm < 1.5) {\r\n      size = 1;\r\n    } else if (norm < 3) {\r\n      size = 2;\r\n      // special case for 2.5, requires an extra decimal\r\n      if (norm > 2.25) {\r\n        size = 2.5;\r\n        ++dec;\r\n      }\r\n    } else if (norm < 7.5) {\r\n      size = 5;\r\n    } else {\r\n      size = 10;\r\n    }\r\n\r\n    size *= magn;\r\n\r\n    // reduce starting decimals if not needed\r\n    if (Math.floor(value) === value) {\r\n      dec = 0;\r\n    }\r\n\r\n    const result: any = {};\r\n    result.decimals = Math.max(0, dec);\r\n    result.scaledDecimals = result.decimals - Math.floor(Math.log(size) / Math.LN10) + 2;\r\n\r\n    return result;\r\n  }\r\n\r\n  setValues(data) {\r\n    data.flotpairs = [];\r\n\r\n    if (this.series.length > 1) {\r\n      const error: any = new Error();\r\n      error.message = 'Multiple Series Error';\r\n      error.data =\r\n        'Metric query returns ' +\r\n        this.series.length +\r\n        ' series. Single Stat Panel expects a single series.\\n\\nResponse:\\n' +\r\n        JSON.stringify(this.series);\r\n      throw error;\r\n    }\r\n\r\n    if (this.series && this.series.length > 0) {\r\n      const lastPoint = _.last(this.series[0].datapoints);\r\n      const lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\r\n\r\n      if (this.panel.valueName === 'name') {\r\n        data.value = 0;\r\n        data.valueRounded = 0;\r\n        data.valueFormatted = this.series[0].alias;\r\n      } else if (_.isString(lastValue)) {\r\n        data.value = 0;\r\n        data.valueFormatted = _.escape(lastValue);\r\n        data.valueRounded = 0;\r\n      } else if (this.panel.valueName === 'last_time') {\r\n        const formatFunc = kbn.valueFormats[this.panel.format];\r\n        data.value = lastPoint[1];\r\n        data.valueRounded = data.value;\r\n        data.valueFormatted = formatFunc(data.value, this.dashboard.isTimezoneUtc());\r\n      } else {\r\n        data.value = this.series[0].stats[this.panel.valueName];\r\n        data.flotpairs = this.series[0].flotpairs;\r\n\r\n        const decimalInfo = this.getDecimalsForValue(data.value);\r\n        const formatFunc = kbn.valueFormats[this.panel.format];\r\n        data.valueFormatted = formatFunc(data.value, decimalInfo.decimals, decimalInfo.scaledDecimals);\r\n        data.valueRounded = kbn.roundValue(data.value, decimalInfo.decimals);\r\n      }\r\n\r\n      // Add $__name variable for using in prefix or postfix\r\n      data.scopedVars = _.extend({}, this.panel.scopedVars);\r\n      data.scopedVars['__name'] = { value: this.series[0].label };\r\n    }\r\n    this.setValueMapping(data);\r\n  }\r\n\r\n  setValueMapping(data) {\r\n    // check value to text mappings if its enabled\r\n    if (this.panel.mappingType === 1) {\r\n      for (let i = 0; i < this.panel.valueMaps.length; i++) {\r\n        const map = this.panel.valueMaps[i];\r\n        // special null case\r\n        if (map.value === 'null') {\r\n          if (data.value === null || data.value === void 0) {\r\n            data.valueFormatted = map.text;\r\n            return;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        // value/number to text mapping\r\n        const value = parseFloat(map.value);\r\n        if (value === data.valueRounded) {\r\n          data.valueFormatted = map.text;\r\n          return;\r\n        }\r\n      }\r\n    } else if (this.panel.mappingType === 2) {\r\n      for (let i = 0; i < this.panel.rangeMaps.length; i++) {\r\n        const map = this.panel.rangeMaps[i];\r\n        // special null case\r\n        if (map.from === 'null' && map.to === 'null') {\r\n          if (data.value === null || data.value === void 0) {\r\n            data.valueFormatted = map.text;\r\n            return;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        // value/number to range mapping\r\n        const from = parseFloat(map.from);\r\n        const to = parseFloat(map.to);\r\n        if (to >= data.valueRounded && from <= data.valueRounded) {\r\n          data.valueFormatted = map.text;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (data.value === null || data.value === void 0) {\r\n      data.valueFormatted = 'no value';\r\n    }\r\n  }\r\n\r\n  removeValueMap(map) {\r\n    const index = _.indexOf(this.panel.valueMaps, map);\r\n    this.panel.valueMaps.splice(index, 1);\r\n    this.render();\r\n  }\r\n\r\n  addValueMap() {\r\n    this.panel.valueMaps.push({ value: '', op: '=', text: '' });\r\n  }\r\n\r\n  removeRangeMap(rangeMap) {\r\n    const index = _.indexOf(this.panel.rangeMaps, rangeMap);\r\n    this.panel.rangeMaps.splice(index, 1);\r\n    this.render();\r\n  }\r\n\r\n  addRangeMap() {\r\n    this.panel.rangeMaps.push({ from: '', to: '', text: '' });\r\n  }\r\n\r\n  link(scope, elem, attrs, ctrl) {\r\n    const $location = this.$location;\r\n    const linkSrv = this.linkSrv;\r\n    const $timeout = this.$timeout;\r\n    const panel = ctrl.panel;\r\n    const templateSrv = this.templateSrv;\r\n    let data, linkInfo;\r\n    const $panelContainer = elem.find('.panel-container');\r\n    elem = elem.find('.singlestat-panel');\r\n\r\n    function applyColoringThresholds(value, valueString) {\r\n      const color = getColorForValue(data, value);\r\n      if (color) {\r\n        return '<span style=\"color:' + color + '\">' + valueString + '</span>';\r\n      }\r\n\r\n      return valueString;\r\n    }\r\n\r\n    function getSpan(className, fontSize, value) {\r\n      value = templateSrv.replace(value, data.scopedVars);\r\n      return '<span class=\"' + className + '\" style=\"font-size:' + fontSize + '\">' + value + '</span>';\r\n    }\r\n\r\n    function getBigValueHtml() {\r\n      let body = '<div class=\"singlestat-panel-value-container\">';\r\n\r\n      if (panel.prefix) {\r\n        let prefix = panel.prefix;\r\n        if (panel.colorPrefix) {\r\n          prefix = applyColoringThresholds(data.value, panel.prefix);\r\n        }\r\n        body += getSpan('singlestat-panel-prefix', panel.prefixFontSize, prefix);\r\n      }\r\n\r\n      let value = data.valueFormatted;\r\n      if (panel.colorValue) {\r\n        value = applyColoringThresholds(data.value, value);\r\n      }\r\n      body += getSpan('singlestat-panel-value', panel.valueFontSize, value);\r\n\r\n      if (panel.postfix) {\r\n        let postfix = panel.postfix;\r\n        if (panel.colorPostfix) {\r\n          postfix = applyColoringThresholds(data.value, panel.postfix);\r\n        }\r\n        body += getSpan('singlestat-panel-postfix', panel.postfixFontSize, postfix);\r\n      }\r\n\r\n      body += '</div>';\r\n\r\n      return body;\r\n    }\r\n\r\n    function getValueText() {\r\n      let result = panel.prefix ? templateSrv.replace(panel.prefix, data.scopedVars) : '';\r\n      result += data.valueFormatted;\r\n      result += panel.postfix ? templateSrv.replace(panel.postfix, data.scopedVars) : '';\r\n\r\n      return result;\r\n    }\r\n\r\n    function addGauge() {\r\n      const width = elem.width();\r\n      const height = elem.height();\r\n      // Allow to use a bit more space for wide gauges\r\n      const dimension = Math.min(width, height * 1.3);\r\n\r\n      ctrl.invalidGaugeRange = false;\r\n      if (panel.gauge.minValue > panel.gauge.maxValue) {\r\n        ctrl.invalidGaugeRange = true;\r\n        return;\r\n      }\r\n\r\n      const plotCanvas = $('<div></div>');\r\n      const plotCss = {\r\n        top: '10px',\r\n        margin: 'auto',\r\n        position: 'relative',\r\n        height: height * 0.9 + 'px',\r\n        width: dimension + 'px',\r\n      };\r\n\r\n      plotCanvas.css(plotCss);\r\n\r\n      const thresholds = [];\r\n      for (let i = 0; i < data.thresholds.length; i++) {\r\n        thresholds.push({\r\n          value: data.thresholds[i],\r\n          color: data.colorMap[i],\r\n        });\r\n      }\r\n      thresholds.push({\r\n        value: panel.gauge.maxValue,\r\n        color: data.colorMap[data.colorMap.length - 1],\r\n      });\r\n\r\n      const bgColor = config.bootData.user.lightTheme ? 'rgb(230,230,230)' : 'rgb(38,38,38)';\r\n\r\n      const fontScale = parseInt(panel.valueFontSize) / 100;\r\n      const fontSize = Math.min(dimension / 5, 100) * fontScale;\r\n      // Reduce gauge width if threshold labels enabled\r\n      const gaugeWidthReduceRatio = panel.gauge.thresholdLabels ? 1.5 : 1;\r\n      const gaugeWidth = Math.min(dimension / 6, 60) / gaugeWidthReduceRatio;\r\n      const thresholdMarkersWidth = gaugeWidth / 5;\r\n      const thresholdLabelFontSize = fontSize / 2.5;\r\n\r\n      const options = {\r\n        series: {\r\n          gauges: {\r\n            gauge: {\r\n              min: panel.gauge.minValue,\r\n              max: panel.gauge.maxValue,\r\n              background: { color: bgColor },\r\n              border: { color: null },\r\n              shadow: { show: false },\r\n              width: gaugeWidth,\r\n            },\r\n            frame: { show: false },\r\n            label: { show: false },\r\n            layout: { margin: 0, thresholdWidth: 0 },\r\n            cell: { border: { width: 0 } },\r\n            threshold: {\r\n              values: thresholds,\r\n              label: {\r\n                show: panel.gauge.thresholdLabels,\r\n                margin: thresholdMarkersWidth + 1,\r\n                font: { size: thresholdLabelFontSize },\r\n              },\r\n              show: panel.gauge.thresholdMarkers,\r\n              width: thresholdMarkersWidth,\r\n            },\r\n            value: {\r\n              color: panel.colorValue ? getColorForValue(data, data.valueRounded) : null,\r\n              formatter: function() {\r\n                return getValueText();\r\n              },\r\n              font: {\r\n                size: fontSize,\r\n                family: '\"Helvetica Neue\", Helvetica, Arial, sans-serif',\r\n              },\r\n            },\r\n            show: true,\r\n          },\r\n        },\r\n      };\r\n\r\n      elem.append(plotCanvas);\r\n\r\n      const plotSeries = {\r\n        data: [[0, data.valueRounded]],\r\n      };\r\n\r\n      $.plot(plotCanvas, [plotSeries], options);\r\n    }\r\n\r\n    function addSparkline() {\r\n      const width = elem.width() + 20;\r\n      if (width < 30) {\r\n        // element has not gotten it's width yet\r\n        // delay sparkline render\r\n        setTimeout(addSparkline, 30);\r\n        return;\r\n      }\r\n\r\n      const height = ctrl.height;\r\n      const plotCanvas = $('<div></div>');\r\n      const plotCss: any = {};\r\n      plotCss.position = 'absolute';\r\n\r\n      if (panel.sparkline.full) {\r\n        plotCss.bottom = '5px';\r\n        plotCss.left = '-5px';\r\n        plotCss.width = width - 10 + 'px';\r\n        const dynamicHeightMargin = height <= 100 ? 5 : Math.round(height / 100) * 15 + 5;\r\n        plotCss.height = height - dynamicHeightMargin + 'px';\r\n      } else {\r\n        plotCss.bottom = '0px';\r\n        plotCss.left = '-5px';\r\n        plotCss.width = width - 10 + 'px';\r\n        plotCss.height = Math.floor(height * 0.25) + 'px';\r\n      }\r\n\r\n      plotCanvas.css(plotCss);\r\n\r\n      const options = {\r\n        legend: { show: false },\r\n        series: {\r\n          lines: {\r\n            show: true,\r\n            fill: 1,\r\n            zero: false,\r\n            lineWidth: 1,\r\n            fillColor: panel.sparkline.fillColor,\r\n          },\r\n        },\r\n        yaxes: { show: false },\r\n        xaxis: {\r\n          show: false,\r\n          mode: 'time',\r\n          min: ctrl.range.from.valueOf(),\r\n          max: ctrl.range.to.valueOf(),\r\n        },\r\n        grid: { hoverable: false, show: false },\r\n      };\r\n\r\n      elem.append(plotCanvas);\r\n\r\n      const plotSeries = {\r\n        data: data.flotpairs,\r\n        color: panel.sparkline.lineColor,\r\n      };\r\n\r\n      $.plot(plotCanvas, [plotSeries], options);\r\n    }\r\n\r\n    function render() {\r\n      if (!ctrl.data) {\r\n        return;\r\n      }\r\n      data = ctrl.data;\r\n\r\n      // get thresholds\r\n      data.thresholds = panel.thresholds.split(',').map(function(strVale) {\r\n        return Number(strVale.trim());\r\n      });\r\n      data.colorMap = panel.colors;\r\n\r\n      const body = panel.gauge.show ? '' : getBigValueHtml();\r\n\r\n      if (panel.colorBackground) {\r\n        const color = getColorForValue(data, data.value);\r\n        if (color) {\r\n          $panelContainer.css('background-color', color);\r\n          if (scope.fullscreen) {\r\n            elem.css('background-color', color);\r\n          } else {\r\n            elem.css('background-color', '');\r\n          }\r\n        }\r\n      } else {\r\n        $panelContainer.css('background-color', '');\r\n        elem.css('background-color', '');\r\n      }\r\n\r\n      elem.html(body);\r\n\r\n      if (panel.sparkline.show) {\r\n        addSparkline();\r\n      }\r\n\r\n      if (panel.gauge.show) {\r\n        addGauge();\r\n      }\r\n\r\n      elem.toggleClass('pointer', panel.links.length > 0);\r\n\r\n      if (panel.links.length > 0) {\r\n        linkInfo = linkSrv.getPanelLinkAnchorInfo(panel.links[0], data.scopedVars);\r\n      } else {\r\n        linkInfo = null;\r\n      }\r\n    }\r\n\r\n    function hookupDrilldownLinkTooltip() {\r\n      // drilldown link tooltip\r\n      const drilldownTooltip = $('<div id=\"tooltip\" class=\"\">hello</div>\"');\r\n\r\n      elem.mouseleave(function() {\r\n        if (panel.links.length === 0) {\r\n          return;\r\n        }\r\n        $timeout(function() {\r\n          drilldownTooltip.detach();\r\n        });\r\n      });\r\n\r\n      elem.click(function(evt) {\r\n        if (!linkInfo) {\r\n          return;\r\n        }\r\n        // ignore title clicks in title\r\n        if ($(evt).parents('.panel-header').length > 0) {\r\n          return;\r\n        }\r\n\r\n        if (linkInfo.target === '_blank') {\r\n          window.open(linkInfo.href, '_blank');\r\n          return;\r\n        }\r\n\r\n        if (linkInfo.href.indexOf('http') === 0) {\r\n          window.location.href = linkInfo.href;\r\n        } else {\r\n          $timeout(function() {\r\n            $location.url(linkInfo.href);\r\n          });\r\n        }\r\n\r\n        drilldownTooltip.detach();\r\n      });\r\n\r\n      elem.mousemove(function(e) {\r\n        if (!linkInfo) {\r\n          return;\r\n        }\r\n\r\n        drilldownTooltip.text('click to go to: ' + linkInfo.title);\r\n        drilldownTooltip.place_tt(e.pageX, e.pageY - 50);\r\n      });\r\n    }\r\n\r\n    hookupDrilldownLinkTooltip();\r\n\r\n    this.events.on('render', function() {\r\n      render();\r\n      ctrl.renderingCompleted();\r\n    });\r\n  }\r\n}\r\n\r\nfunction getColorForValue(data, value) {\r\n  if (!_.isFinite(value)) {\r\n    return null;\r\n  }\r\n\r\n  for (let i = data.thresholds.length; i > 0; i--) {\r\n    if (value >= data.thresholds[i - 1]) {\r\n      return data.colorMap[i];\r\n    }\r\n  }\r\n\r\n  return _.first(data.colorMap);\r\n}\r\n\r\nexport { SingleStatCtrl, SingleStatCtrl as PanelCtrl, getColorForValue };\r\n","import { PanelCtrl } from 'app/plugins/sdk';\r\n\r\nimport { contextSrv } from 'app/core/core';\r\n\r\nclass GettingStartedPanelCtrl extends PanelCtrl {\r\n  static templateUrl = 'public/app/plugins/panel/gettingstarted/module.html';\r\n  checksDone: boolean;\r\n  stepIndex: number;\r\n  steps: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector, private backendSrv, datasourceSrv, private $q) {\r\n    super($scope, $injector);\r\n\r\n    this.stepIndex = 0;\r\n    this.steps = [];\r\n\r\n    this.steps.push({\r\n      title: 'Install Grafana',\r\n      icon: 'icon-gf icon-gf-check',\r\n      href: 'http://docs.grafana.org/',\r\n      target: '_blank',\r\n      note: 'Review the installation docs',\r\n      check: () => $q.when(true),\r\n    });\r\n\r\n    this.steps.push({\r\n      title: 'Create your first data source',\r\n      cta: 'Add data source',\r\n      icon: 'icon-gf icon-gf-datasources',\r\n      href: 'datasources/new?gettingstarted',\r\n      check: () => {\r\n        return $q.when(\r\n          datasourceSrv.getMetricSources().filter(item => {\r\n            return item.meta.builtIn !== true;\r\n          }).length > 0\r\n        );\r\n      },\r\n    });\r\n\r\n    this.steps.push({\r\n      title: 'Create your first dashboard',\r\n      cta: 'New dashboard',\r\n      icon: 'icon-gf icon-gf-dashboard',\r\n      href: 'dashboard/new?gettingstarted',\r\n      check: () => {\r\n        return this.backendSrv.search({ limit: 1 }).then(result => {\r\n          return result.length > 0;\r\n        });\r\n      },\r\n    });\r\n\r\n    this.steps.push({\r\n      title: 'Invite your team',\r\n      cta: 'Add Users',\r\n      icon: 'icon-gf icon-gf-users',\r\n      href: 'org/users?gettingstarted',\r\n      check: () => {\r\n        return this.backendSrv.get('/api/org/users').then(res => {\r\n          return res.length > 1;\r\n        });\r\n      },\r\n    });\r\n\r\n    this.steps.push({\r\n      title: 'Install apps & plugins',\r\n      cta: 'Explore plugin repository',\r\n      icon: 'icon-gf icon-gf-apps',\r\n      href: 'https://grafana.com/plugins?utm_source=grafana_getting_started',\r\n      check: () => {\r\n        return this.backendSrv.get('/api/plugins', { embedded: 0, core: 0 }).then(plugins => {\r\n          return plugins.length > 0;\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  $onInit() {\r\n    this.stepIndex = -1;\r\n    return this.nextStep().then(res => {\r\n      this.checksDone = true;\r\n    });\r\n  }\r\n\r\n  nextStep() {\r\n    if (this.stepIndex === this.steps.length - 1) {\r\n      return this.$q.when();\r\n    }\r\n\r\n    this.stepIndex += 1;\r\n    const currentStep = this.steps[this.stepIndex];\r\n    return currentStep.check().then(passed => {\r\n      if (passed) {\r\n        currentStep.cssClass = 'completed';\r\n        return this.nextStep();\r\n      }\r\n\r\n      currentStep.cssClass = 'active';\r\n      return this.$q.when();\r\n    });\r\n  }\r\n\r\n  dismiss() {\r\n    this.dashboard.removePanel(this.panel, false);\r\n\r\n    this.backendSrv\r\n      .request({\r\n        method: 'PUT',\r\n        url: '/api/user/helpflags/1',\r\n        showSuccessAlert: false,\r\n      })\r\n      .then(res => {\r\n        contextSrv.user.helpFlags1 = res.helpFlags1;\r\n      });\r\n  }\r\n}\r\n\r\nexport { GettingStartedPanelCtrl, GettingStartedPanelCtrl as PanelCtrl };\r\n","import * as graphitePlugin from 'app/plugins/datasource/graphite/module';\r\nimport * as cloudwatchPlugin from 'app/plugins/datasource/cloudwatch/module';\r\nimport * as elasticsearchPlugin from 'app/plugins/datasource/elasticsearch/module';\r\nimport * as opentsdbPlugin from 'app/plugins/datasource/opentsdb/module';\r\nimport * as grafanaPlugin from 'app/plugins/datasource/grafana/module';\r\nimport * as influxdbPlugin from 'app/plugins/datasource/influxdb/module';\r\nimport * as loggingPlugin from 'app/plugins/datasource/logging/module';\r\nimport * as mixedPlugin from 'app/plugins/datasource/mixed/module';\r\nimport * as mysqlPlugin from 'app/plugins/datasource/mysql/module';\r\nimport * as postgresPlugin from 'app/plugins/datasource/postgres/module';\r\nimport * as prometheusPlugin from 'app/plugins/datasource/prometheus/module';\r\nimport * as mssqlPlugin from 'app/plugins/datasource/mssql/module';\r\nimport * as testDataDSPlugin from 'app/plugins/datasource/testdata/module';\r\n\r\nimport * as textPanel from 'app/plugins/panel/text/module';\r\nimport * as graphPanel from 'app/plugins/panel/graph/module';\r\nimport * as dashListPanel from 'app/plugins/panel/dashlist/module';\r\nimport * as pluginsListPanel from 'app/plugins/panel/pluginlist/module';\r\nimport * as alertListPanel from 'app/plugins/panel/alertlist/module';\r\nimport * as heatmapPanel from 'app/plugins/panel/heatmap/module';\r\nimport * as tablePanel from 'app/plugins/panel/table/module';\r\nimport * as singlestatPanel from 'app/plugins/panel/singlestat/module';\r\nimport * as gettingStartedPanel from 'app/plugins/panel/gettingstarted/module';\r\n\r\nconst builtInPlugins = {\r\n  'app/plugins/datasource/graphite/module': graphitePlugin,\r\n  'app/plugins/datasource/cloudwatch/module': cloudwatchPlugin,\r\n  'app/plugins/datasource/elasticsearch/module': elasticsearchPlugin,\r\n  'app/plugins/datasource/opentsdb/module': opentsdbPlugin,\r\n  'app/plugins/datasource/grafana/module': grafanaPlugin,\r\n  'app/plugins/datasource/influxdb/module': influxdbPlugin,\r\n  'app/plugins/datasource/logging/module': loggingPlugin,\r\n  'app/plugins/datasource/mixed/module': mixedPlugin,\r\n  'app/plugins/datasource/mysql/module': mysqlPlugin,\r\n  'app/plugins/datasource/postgres/module': postgresPlugin,\r\n  'app/plugins/datasource/mssql/module': mssqlPlugin,\r\n  'app/plugins/datasource/prometheus/module': prometheusPlugin,\r\n  'app/plugins/datasource/testdata/module': testDataDSPlugin,\r\n\r\n  'app/plugins/panel/text/module': textPanel,\r\n  'app/plugins/panel/graph/module': graphPanel,\r\n  'app/plugins/panel/dashlist/module': dashListPanel,\r\n  'app/plugins/panel/pluginlist/module': pluginsListPanel,\r\n  'app/plugins/panel/alertlist/module': alertListPanel,\r\n  'app/plugins/panel/heatmap/module': heatmapPanel,\r\n  'app/plugins/panel/table/module': tablePanel,\r\n  'app/plugins/panel/singlestat/module': singlestatPanel,\r\n  'app/plugins/panel/gettingstarted/module': gettingStartedPanel,\r\n};\r\n\r\nexport default builtInPlugins;\r\n","import System from 'systemjs/dist/system.js';\r\nimport _ from 'lodash';\r\nimport * as sdk from 'app/plugins/sdk';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport moment from 'moment';\r\nimport angular from 'angular';\r\nimport jquery from 'jquery';\r\n\r\n// Experimental module exports\r\nimport prismjs from 'prismjs';\r\nimport slate from 'slate';\r\nimport slateReact from 'slate-react';\r\nimport slatePlain from 'slate-plain-serializer';\r\nimport react from 'react';\r\nimport reactDom from 'react-dom';\r\n\r\nimport config from 'app/core/config';\r\nimport TimeSeries from 'app/core/time_series2';\r\nimport TableModel from 'app/core/table_model';\r\nimport { coreModule, appEvents, contextSrv } from 'app/core/core';\r\nimport * as datemath from 'app/core/utils/datemath';\r\nimport * as fileExport from 'app/core/utils/file_export';\r\nimport * as flatten from 'app/core/utils/flatten';\r\nimport * as ticks from 'app/core/utils/ticks';\r\nimport impressionSrv from 'app/core/services/impression_srv';\r\nimport builtInPlugins from './built_in_plugins';\r\nimport * as d3 from 'd3';\r\n\r\n// rxjs\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { Subject } from 'rxjs/Subject';\r\n\r\n// these imports add functions to Observable\r\nimport 'rxjs/add/observable/empty';\r\nimport 'rxjs/add/observable/from';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/combineAll';\r\n\r\n// add cache busting\r\nconst bust = `?_cache=${Date.now()}`;\r\nfunction locate(load) {\r\n  return load.address + bust;\r\n}\r\nSystem.registry.set('plugin-loader', System.newModule({ locate: locate }));\r\n\r\nSystem.config({\r\n  baseURL: 'public',\r\n  defaultExtension: 'js',\r\n  packages: {\r\n    plugins: {\r\n      defaultExtension: 'js',\r\n    },\r\n  },\r\n  map: {\r\n    text: 'vendor/plugin-text/text.js',\r\n    css: 'vendor/plugin-css/css.js',\r\n  },\r\n  meta: {\r\n    '/*': {\r\n      esModule: true,\r\n      authorization: true,\r\n      loader: 'plugin-loader',\r\n    },\r\n  },\r\n});\r\n\r\nfunction exposeToPlugin(name: string, component: any) {\r\n  System.registerDynamic(name, [], true, function(require, exports, module) {\r\n    module.exports = component;\r\n  });\r\n}\r\n\r\nexposeToPlugin('lodash', _);\r\nexposeToPlugin('moment', moment);\r\nexposeToPlugin('jquery', jquery);\r\nexposeToPlugin('angular', angular);\r\nexposeToPlugin('d3', d3);\r\nexposeToPlugin('rxjs/Subject', Subject);\r\nexposeToPlugin('rxjs/Observable', Observable);\r\n\r\n// Experimental modules\r\nexposeToPlugin('prismjs', prismjs);\r\nexposeToPlugin('slate', slate);\r\nexposeToPlugin('slate-react', slateReact);\r\nexposeToPlugin('slate-plain-serializer', slatePlain);\r\nexposeToPlugin('react', react);\r\nexposeToPlugin('react-dom', reactDom);\r\n\r\n// backward compatible path\r\nexposeToPlugin('vendor/npm/rxjs/Rx', {\r\n  Subject: Subject,\r\n  Observable: Observable,\r\n});\r\n\r\nexposeToPlugin('app/features/dashboard/impression_store', {\r\n  impressions: impressionSrv,\r\n  __esModule: true,\r\n});\r\n\r\nexposeToPlugin('app/plugins/sdk', sdk);\r\nexposeToPlugin('app/core/utils/datemath', datemath);\r\nexposeToPlugin('app/core/utils/file_export', fileExport);\r\nexposeToPlugin('app/core/utils/flatten', flatten);\r\nexposeToPlugin('app/core/utils/kbn', kbn);\r\nexposeToPlugin('app/core/utils/ticks', ticks);\r\n\r\nexposeToPlugin('app/core/config', config);\r\nexposeToPlugin('app/core/time_series', TimeSeries);\r\nexposeToPlugin('app/core/time_series2', TimeSeries);\r\nexposeToPlugin('app/core/table_model', TableModel);\r\nexposeToPlugin('app/core/app_events', appEvents);\r\nexposeToPlugin('app/core/core_module', coreModule);\r\nexposeToPlugin('app/core/core', {\r\n  coreModule: coreModule,\r\n  appEvents: appEvents,\r\n  contextSrv: contextSrv,\r\n  __esModule: true,\r\n});\r\n\r\nimport 'vendor/flot/jquery.flot';\r\nimport 'vendor/flot/jquery.flot.selection';\r\nimport 'vendor/flot/jquery.flot.time';\r\nimport 'vendor/flot/jquery.flot.stack';\r\nimport 'vendor/flot/jquery.flot.pie';\r\nimport 'vendor/flot/jquery.flot.stackpercent';\r\nimport 'vendor/flot/jquery.flot.fillbelow';\r\nimport 'vendor/flot/jquery.flot.crosshair';\r\nimport 'vendor/flot/jquery.flot.dashes';\r\nimport 'vendor/flot/jquery.flot.gauge';\r\n\r\nconst flotDeps = [\r\n  'jquery.flot',\r\n  'jquery.flot.pie',\r\n  'jquery.flot.time',\r\n  'jquery.flot.fillbelow',\r\n  'jquery.flot.crosshair',\r\n  'jquery.flot.stack',\r\n  'jquery.flot.selection',\r\n  'jquery.flot.stackpercent',\r\n  'jquery.flot.events',\r\n  'jquery.flot.gauge',\r\n];\r\nfor (const flotDep of flotDeps) {\r\n  exposeToPlugin(flotDep, { fakeDep: 1 });\r\n}\r\n\r\nexport function importPluginModule(path: string): Promise<any> {\r\n  const builtIn = builtInPlugins[path];\r\n  if (builtIn) {\r\n    return Promise.resolve(builtIn);\r\n  }\r\n  return System.import(path);\r\n}\r\n\r\nexport function loadPluginCss(options) {\r\n  if (config.bootData.user.lightTheme) {\r\n    System.import(options.light + '!css');\r\n  } else {\r\n    System.import(options.dark + '!css');\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport config from 'app/core/config';\r\nimport { importPluginModule } from './plugin_loader';\r\n\r\nexport class DatasourceSrv {\r\n  datasources: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $q, private $injector, private $rootScope, private templateSrv) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.datasources = {};\r\n  }\r\n\r\n  get(name?) {\r\n    if (!name) {\r\n      return this.get(config.defaultDatasource);\r\n    }\r\n\r\n    name = this.templateSrv.replace(name);\r\n\r\n    if (name === 'default') {\r\n      return this.get(config.defaultDatasource);\r\n    }\r\n\r\n    if (this.datasources[name]) {\r\n      return this.$q.when(this.datasources[name]);\r\n    }\r\n\r\n    return this.loadDatasource(name);\r\n  }\r\n\r\n  loadDatasource(name) {\r\n    const dsConfig = config.datasources[name];\r\n    if (!dsConfig) {\r\n      return this.$q.reject({ message: 'Datasource named ' + name + ' was not found' });\r\n    }\r\n\r\n    const deferred = this.$q.defer();\r\n    const pluginDef = dsConfig.meta;\r\n\r\n    importPluginModule(pluginDef.module)\r\n      .then(plugin => {\r\n        // check if its in cache now\r\n        if (this.datasources[name]) {\r\n          deferred.resolve(this.datasources[name]);\r\n          return;\r\n        }\r\n\r\n        // plugin module needs to export a constructor function named Datasource\r\n        if (!plugin.Datasource) {\r\n          throw new Error('Plugin module is missing Datasource constructor');\r\n        }\r\n\r\n        const instance = this.$injector.instantiate(plugin.Datasource, { instanceSettings: dsConfig });\r\n        instance.meta = pluginDef;\r\n        instance.name = name;\r\n        this.datasources[name] = instance;\r\n        deferred.resolve(instance);\r\n      })\r\n      .catch(err => {\r\n        this.$rootScope.appEvent('alert-error', [dsConfig.name + ' plugin failed', err.toString()]);\r\n      });\r\n\r\n    return deferred.promise;\r\n  }\r\n\r\n  getAll() {\r\n    return config.datasources;\r\n  }\r\n\r\n  getAnnotationSources() {\r\n    const sources = [];\r\n\r\n    this.addDataSourceVariables(sources);\r\n\r\n    _.each(config.datasources, function(value) {\r\n      if (value.meta && value.meta.annotations) {\r\n        sources.push(value);\r\n      }\r\n    });\r\n\r\n    return sources;\r\n  }\r\n\r\n  getExploreSources() {\r\n    const { datasources } = config;\r\n    const es = Object.keys(datasources)\r\n      .map(name => datasources[name])\r\n      .filter(ds => ds.meta && ds.meta.explore);\r\n    return _.sortBy(es, ['name']);\r\n  }\r\n\r\n  getMetricSources(options) {\r\n    const metricSources = [];\r\n\r\n    _.each(config.datasources, function(value, key) {\r\n      if (value.meta && value.meta.metrics) {\r\n        let metricSource = { value: key, name: key, meta: value.meta, sort: key };\r\n\r\n        //Make sure grafana and mixed are sorted at the bottom\r\n        if (value.meta.id === 'grafana') {\r\n          metricSource.sort = String.fromCharCode(253);\r\n        } else if (value.meta.id === 'mixed') {\r\n          metricSource.sort = String.fromCharCode(254);\r\n        }\r\n\r\n        metricSources.push(metricSource);\r\n\r\n        if (key === config.defaultDatasource) {\r\n          metricSource = { value: null, name: 'default', meta: value.meta, sort: key };\r\n          metricSources.push(metricSource);\r\n        }\r\n      }\r\n    });\r\n\r\n    if (!options || !options.skipVariables) {\r\n      this.addDataSourceVariables(metricSources);\r\n    }\r\n\r\n    metricSources.sort(function(a, b) {\r\n      if (a.sort.toLowerCase() > b.sort.toLowerCase()) {\r\n        return 1;\r\n      }\r\n      if (a.sort.toLowerCase() < b.sort.toLowerCase()) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n\r\n    return metricSources;\r\n  }\r\n\r\n  addDataSourceVariables(list) {\r\n    // look for data source variables\r\n    for (let i = 0; i < this.templateSrv.variables.length; i++) {\r\n      const variable = this.templateSrv.variables[i];\r\n      if (variable.type !== 'datasource') {\r\n        continue;\r\n      }\r\n\r\n      let first = variable.current.value;\r\n      if (first === 'default') {\r\n        first = config.defaultDatasource;\r\n      }\r\n\r\n      const ds = config.datasources[first];\r\n\r\n      if (ds) {\r\n        const key = `$${variable.name}`;\r\n        list.push({\r\n          name: key,\r\n          value: key,\r\n          meta: ds.meta,\r\n          sort: key,\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ncoreModule.service('datasourceSrv', DatasourceSrv);\r\nexport default DatasourceSrv;\r\n","import { PanelCtrl } from 'app/features/panel/panel_ctrl';\r\n\r\nexport class UnknownPanelCtrl extends PanelCtrl {\r\n  static templateUrl = 'public/app/plugins/panel/unknown/module.html';\r\n\r\n  /** @ngInject */\r\n  constructor($scope, $injector) {\r\n    super($scope, $injector);\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nimport config from 'app/core/config';\r\nimport coreModule from 'app/core/core_module';\r\nimport { importPluginModule } from './plugin_loader';\r\n\r\nimport { UnknownPanelCtrl } from 'app/plugins/panel/unknown/module';\r\n\r\n/** @ngInject */\r\nfunction pluginDirectiveLoader($compile, datasourceSrv, $rootScope, $q, $http, $templateCache) {\r\n  function getTemplate(component) {\r\n    if (component.template) {\r\n      return $q.when(component.template);\r\n    }\r\n    const cached = $templateCache.get(component.templateUrl);\r\n    if (cached) {\r\n      return $q.when(cached);\r\n    }\r\n    return $http.get(component.templateUrl).then(res => {\r\n      return res.data;\r\n    });\r\n  }\r\n\r\n  function relativeTemplateUrlToAbs(templateUrl, baseUrl) {\r\n    if (!templateUrl) {\r\n      return undefined;\r\n    }\r\n    if (templateUrl.indexOf('public') === 0) {\r\n      return templateUrl;\r\n    }\r\n    return baseUrl + '/' + templateUrl;\r\n  }\r\n\r\n  function getPluginComponentDirective(options) {\r\n    // handle relative template urls for plugin templates\r\n    options.Component.templateUrl = relativeTemplateUrlToAbs(options.Component.templateUrl, options.baseUrl);\r\n\r\n    return function() {\r\n      return {\r\n        templateUrl: options.Component.templateUrl,\r\n        template: options.Component.template,\r\n        restrict: 'E',\r\n        controller: options.Component,\r\n        controllerAs: 'ctrl',\r\n        bindToController: true,\r\n        scope: options.bindings,\r\n        link: (scope, elem, attrs, ctrl) => {\r\n          if (ctrl.link) {\r\n            ctrl.link(scope, elem, attrs, ctrl);\r\n          }\r\n          if (ctrl.init) {\r\n            ctrl.init();\r\n          }\r\n        },\r\n      };\r\n    };\r\n  }\r\n\r\n  function loadPanelComponentInfo(scope, attrs) {\r\n    const componentInfo: any = {\r\n      name: 'panel-plugin-' + scope.panel.type,\r\n      bindings: { dashboard: '=', panel: '=', row: '=' },\r\n      attrs: {\r\n        dashboard: 'dashboard',\r\n        panel: 'panel',\r\n        class: 'panel-height-helper',\r\n      },\r\n    };\r\n\r\n    const panelInfo = config.panels[scope.panel.type];\r\n    let panelCtrlPromise = Promise.resolve(UnknownPanelCtrl);\r\n    if (panelInfo) {\r\n      panelCtrlPromise = importPluginModule(panelInfo.module).then(function(panelModule) {\r\n        return panelModule.PanelCtrl;\r\n      });\r\n    }\r\n\r\n    return panelCtrlPromise.then(function(PanelCtrl: any) {\r\n      componentInfo.Component = PanelCtrl;\r\n\r\n      if (!PanelCtrl || PanelCtrl.registered) {\r\n        return componentInfo;\r\n      }\r\n\r\n      if (PanelCtrl.templatePromise) {\r\n        return PanelCtrl.templatePromise.then(res => {\r\n          return componentInfo;\r\n        });\r\n      }\r\n\r\n      if (panelInfo) {\r\n        PanelCtrl.templateUrl = relativeTemplateUrlToAbs(PanelCtrl.templateUrl, panelInfo.baseUrl);\r\n      }\r\n\r\n      PanelCtrl.templatePromise = getTemplate(PanelCtrl).then(template => {\r\n        PanelCtrl.templateUrl = null;\r\n        PanelCtrl.template = `<grafana-panel ctrl=\"ctrl\" class=\"panel-height-helper\">${template}</grafana-panel>`;\r\n        return componentInfo;\r\n      });\r\n\r\n      return PanelCtrl.templatePromise;\r\n    });\r\n  }\r\n\r\n  function getModule(scope, attrs) {\r\n    switch (attrs.type) {\r\n      // QueryCtrl\r\n      case 'query-ctrl': {\r\n        const datasource = scope.target.datasource || scope.ctrl.panel.datasource;\r\n        return datasourceSrv.get(datasource).then(ds => {\r\n          scope.datasource = ds;\r\n\r\n          return importPluginModule(ds.meta.module).then(dsModule => {\r\n            return {\r\n              baseUrl: ds.meta.baseUrl,\r\n              name: 'query-ctrl-' + ds.meta.id,\r\n              bindings: { target: '=', panelCtrl: '=', datasource: '=' },\r\n              attrs: {\r\n                target: 'target',\r\n                'panel-ctrl': 'ctrl.panelCtrl',\r\n                datasource: 'datasource',\r\n              },\r\n              Component: dsModule.QueryCtrl,\r\n            };\r\n          });\r\n        });\r\n      }\r\n      // Annotations\r\n      case 'annotations-query-ctrl': {\r\n        return importPluginModule(scope.ctrl.currentDatasource.meta.module).then(function(dsModule) {\r\n          return {\r\n            baseUrl: scope.ctrl.currentDatasource.meta.baseUrl,\r\n            name: 'annotations-query-ctrl-' + scope.ctrl.currentDatasource.meta.id,\r\n            bindings: { annotation: '=', datasource: '=' },\r\n            attrs: {\r\n              annotation: 'ctrl.currentAnnotation',\r\n              datasource: 'ctrl.currentDatasource',\r\n            },\r\n            Component: dsModule.AnnotationsQueryCtrl,\r\n          };\r\n        });\r\n      }\r\n      // Datasource ConfigCtrl\r\n      case 'datasource-config-ctrl': {\r\n        const dsMeta = scope.ctrl.datasourceMeta;\r\n        return importPluginModule(dsMeta.module).then(function(dsModule): any {\r\n          if (!dsModule.ConfigCtrl) {\r\n            return { notFound: true };\r\n          }\r\n\r\n          return {\r\n            baseUrl: dsMeta.baseUrl,\r\n            name: 'ds-config-' + dsMeta.id,\r\n            bindings: { meta: '=', current: '=' },\r\n            attrs: { meta: 'ctrl.datasourceMeta', current: 'ctrl.current' },\r\n            Component: dsModule.ConfigCtrl,\r\n          };\r\n        });\r\n      }\r\n      // AppConfigCtrl\r\n      case 'app-config-ctrl': {\r\n        const model = scope.ctrl.model;\r\n        return importPluginModule(model.module).then(function(appModule) {\r\n          return {\r\n            baseUrl: model.baseUrl,\r\n            name: 'app-config-' + model.id,\r\n            bindings: { appModel: '=', appEditCtrl: '=' },\r\n            attrs: { 'app-model': 'ctrl.model', 'app-edit-ctrl': 'ctrl' },\r\n            Component: appModule.ConfigCtrl,\r\n          };\r\n        });\r\n      }\r\n      // App Page\r\n      case 'app-page': {\r\n        const appModel = scope.ctrl.appModel;\r\n        return importPluginModule(appModel.module).then(function(appModule) {\r\n          return {\r\n            baseUrl: appModel.baseUrl,\r\n            name: 'app-page-' + appModel.id + '-' + scope.ctrl.page.slug,\r\n            bindings: { appModel: '=' },\r\n            attrs: { 'app-model': 'ctrl.appModel' },\r\n            Component: appModule[scope.ctrl.page.component],\r\n          };\r\n        });\r\n      }\r\n      // Panel\r\n      case 'panel': {\r\n        return loadPanelComponentInfo(scope, attrs);\r\n      }\r\n      default: {\r\n        return $q.reject({\r\n          message: 'Could not find component type: ' + attrs.type,\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  function appendAndCompile(scope, elem, componentInfo) {\r\n    const child = angular.element(document.createElement(componentInfo.name));\r\n    _.each(componentInfo.attrs, (value, key) => {\r\n      child.attr(key, value);\r\n    });\r\n\r\n    $compile(child)(scope);\r\n    elem.empty();\r\n\r\n    // let a binding digest cycle complete before adding to dom\r\n    setTimeout(function() {\r\n      elem.append(child);\r\n      scope.$applyAsync(function() {\r\n        scope.$broadcast('component-did-mount');\r\n        scope.$broadcast('refresh');\r\n      });\r\n    });\r\n  }\r\n\r\n  function registerPluginComponent(scope, elem, attrs, componentInfo) {\r\n    if (componentInfo.notFound) {\r\n      elem.empty();\r\n      return;\r\n    }\r\n\r\n    if (!componentInfo.Component) {\r\n      throw {\r\n        message: 'Failed to find exported plugin component for ' + componentInfo.name,\r\n      };\r\n    }\r\n\r\n    if (!componentInfo.Component.registered) {\r\n      const directiveName = attrs.$normalize(componentInfo.name);\r\n      const directiveFn = getPluginComponentDirective(componentInfo);\r\n      coreModule.directive(directiveName, directiveFn);\r\n      componentInfo.Component.registered = true;\r\n    }\r\n\r\n    appendAndCompile(scope, elem, componentInfo);\r\n  }\r\n\r\n  return {\r\n    restrict: 'E',\r\n    link: function(scope, elem, attrs) {\r\n      getModule(scope, attrs)\r\n        .then(function(componentInfo) {\r\n          registerPluginComponent(scope, elem, attrs, componentInfo);\r\n        })\r\n        .catch(err => {\r\n          $rootScope.appEvent('alert-error', ['Plugin Error', err.message || err]);\r\n          console.log('Plugin component error', err);\r\n        });\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('pluginComponent', pluginDirectiveLoader);\r\n","import config from 'app/core/config';\r\n\r\nimport coreModule from 'app/core/core_module';\r\nimport { PanelContainer } from './dashgrid/PanelContainer';\r\nimport { DashboardModel } from './dashboard_model';\r\nimport { PanelModel } from './panel_model';\r\n\r\nexport class DashboardCtrl implements PanelContainer {\r\n  dashboard: DashboardModel;\r\n  dashboardViewState: any;\r\n  loadedFallbackDashboard: boolean;\r\n  editTab: number;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private $scope,\r\n    private $rootScope,\r\n    private keybindingSrv,\r\n    private timeSrv,\r\n    private variableSrv,\r\n    private alertingSrv,\r\n    private dashboardSrv,\r\n    private unsavedChangesSrv,\r\n    private dashboardViewStateSrv,\r\n    public playlistSrv,\r\n    private panelLoader\r\n  ) {\r\n    // temp hack due to way dashboards are loaded\r\n    // can't use controllerAs on route yet\r\n    $scope.ctrl = this;\r\n\r\n    // TODO: break out settings view to separate view & controller\r\n    this.editTab = 0;\r\n\r\n    // funcs called from React component bindings and needs this binding\r\n    this.getPanelContainer = this.getPanelContainer.bind(this);\r\n  }\r\n\r\n  setupDashboard(data) {\r\n    try {\r\n      this.setupDashboardInternal(data);\r\n    } catch (err) {\r\n      this.onInitFailed(err, 'Dashboard init failed', true);\r\n    }\r\n  }\r\n\r\n  setupDashboardInternal(data) {\r\n    const dashboard = this.dashboardSrv.create(data.dashboard, data.meta);\r\n    this.dashboardSrv.setCurrent(dashboard);\r\n\r\n    // init services\r\n    this.timeSrv.init(dashboard);\r\n    this.alertingSrv.init(dashboard, data.alerts);\r\n\r\n    // template values service needs to initialize completely before\r\n    // the rest of the dashboard can load\r\n    this.variableSrv\r\n      .init(dashboard)\r\n      // template values failes are non fatal\r\n      .catch(this.onInitFailed.bind(this, 'Templating init failed', false))\r\n      // continue\r\n      .finally(() => {\r\n        this.dashboard = dashboard;\r\n        this.dashboard.processRepeats();\r\n        this.dashboard.updateSubmenuVisibility();\r\n        this.dashboard.autoFitPanels(window.innerHeight);\r\n\r\n        this.unsavedChangesSrv.init(dashboard, this.$scope);\r\n\r\n        // TODO refactor ViewStateSrv\r\n        this.$scope.dashboard = dashboard;\r\n        this.dashboardViewState = this.dashboardViewStateSrv.create(this.$scope);\r\n\r\n        this.keybindingSrv.setupDashboardBindings(this.$scope, dashboard);\r\n        this.setWindowTitleAndTheme();\r\n\r\n        this.$scope.appEvent('dashboard-initialized', dashboard);\r\n      })\r\n      .catch(this.onInitFailed.bind(this, 'Dashboard init failed', true));\r\n  }\r\n\r\n  onInitFailed(msg, fatal, err) {\r\n    console.log(msg, err);\r\n\r\n    if (err.data && err.data.message) {\r\n      err.message = err.data.message;\r\n    } else if (!err.message) {\r\n      err = { message: err.toString() };\r\n    }\r\n\r\n    this.$scope.appEvent('alert-error', [msg, err.message]);\r\n\r\n    // protect against  recursive fallbacks\r\n    if (fatal && !this.loadedFallbackDashboard) {\r\n      this.loadedFallbackDashboard = true;\r\n      this.setupDashboard({ dashboard: { title: 'Dashboard Init failed' } });\r\n    }\r\n  }\r\n\r\n  templateVariableUpdated() {\r\n    this.dashboard.processRepeats();\r\n  }\r\n\r\n  setWindowTitleAndTheme() {\r\n    window.document.title = config.windowTitlePrefix + this.dashboard.title;\r\n  }\r\n\r\n  showJsonEditor(evt, options) {\r\n    const editScope = this.$rootScope.$new();\r\n    editScope.object = options.object;\r\n    editScope.updateHandler = options.updateHandler;\r\n    this.$scope.appEvent('show-dash-editor', {\r\n      src: 'public/app/partials/edit_json.html',\r\n      scope: editScope,\r\n    });\r\n  }\r\n\r\n  getDashboard() {\r\n    return this.dashboard;\r\n  }\r\n\r\n  getPanelLoader() {\r\n    return this.panelLoader;\r\n  }\r\n\r\n  timezoneChanged() {\r\n    this.$rootScope.$broadcast('refresh');\r\n  }\r\n\r\n  getPanelContainer() {\r\n    return this;\r\n  }\r\n\r\n  onRemovingPanel(evt, options) {\r\n    options = options || {};\r\n    if (!options.panelId) {\r\n      return;\r\n    }\r\n\r\n    const panelInfo = this.dashboard.getPanelInfoById(options.panelId);\r\n    this.removePanel(panelInfo.panel, true);\r\n  }\r\n\r\n  removePanel(panel: PanelModel, ask: boolean) {\r\n    // confirm deletion\r\n    if (ask !== false) {\r\n      let text2, confirmText;\r\n\r\n      if (panel.alert) {\r\n        text2 = 'Panel includes an alert rule, removing panel will also remove alert rule';\r\n        confirmText = 'YES';\r\n      }\r\n\r\n      this.$scope.appEvent('confirm-modal', {\r\n        title: 'Remove Panel',\r\n        text: 'Are you sure you want to remove this panel?',\r\n        text2: text2,\r\n        icon: 'fa-trash',\r\n        confirmText: confirmText,\r\n        yesText: 'Remove',\r\n        onConfirm: () => {\r\n          this.removePanel(panel, false);\r\n        },\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.dashboard.removePanel(panel);\r\n  }\r\n\r\n  init(dashboard) {\r\n    this.$scope.onAppEvent('show-json-editor', this.showJsonEditor.bind(this));\r\n    this.$scope.onAppEvent('template-variable-value-updated', this.templateVariableUpdated.bind(this));\r\n    this.$scope.onAppEvent('panel-remove', this.onRemovingPanel.bind(this));\r\n    this.setupDashboard(dashboard);\r\n  }\r\n}\r\n\r\ncoreModule.controller('DashboardCtrl', DashboardCtrl);\r\n","import './plugin_edit_ctrl';\r\nimport './plugin_page_ctrl';\r\nimport './plugin_list_ctrl';\r\nimport './import_list/import_list';\r\nimport './ds_edit_ctrl';\r\nimport './ds_dashboards_ctrl';\r\nimport './ds_list_ctrl';\r\nimport './datasource_srv';\r\nimport './plugin_component';\r\n","import coreModule from 'app/core/core_module';\r\n\r\nexport class AlertingSrv {\r\n  dashboard: any;\r\n  alerts: any[];\r\n\r\n  init(dashboard, alerts) {\r\n    this.dashboard = dashboard;\r\n    this.alerts = alerts || [];\r\n  }\r\n}\r\n\r\ncoreModule.service('alertingSrv', AlertingSrv);\r\n","import _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport { DashboardModel } from '../dashboard_model';\r\n\r\nexport interface HistoryListOpts {\r\n  limit: number;\r\n  start: number;\r\n}\r\n\r\nexport interface RevisionsModel {\r\n  id: number;\r\n  checked: boolean;\r\n  dashboardId: number;\r\n  parentVersion: number;\r\n  version: number;\r\n  created: Date;\r\n  createdBy: string;\r\n  message: string;\r\n}\r\n\r\nexport interface CalculateDiffOptions {\r\n  new: DiffTarget;\r\n  base: DiffTarget;\r\n  diffType: string;\r\n}\r\n\r\nexport interface DiffTarget {\r\n  dashboardId: number;\r\n  version: number;\r\n  unsavedDashboard?: DashboardModel; // when doing diffs against unsaved dashboard version\r\n}\r\n\r\nexport class HistorySrv {\r\n  /** @ngInject */\r\n  constructor(private backendSrv) {}\r\n\r\n  getHistoryList(dashboard: DashboardModel, options: HistoryListOpts) {\r\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\r\n    return id ? this.backendSrv.get(`api/dashboards/id/${id}/versions`, options) : Promise.resolve([]);\r\n  }\r\n\r\n  calculateDiff(options: CalculateDiffOptions) {\r\n    return this.backendSrv.post('api/dashboards/calculate-diff', options);\r\n  }\r\n\r\n  restoreDashboard(dashboard: DashboardModel, version: number) {\r\n    const id = dashboard && dashboard.id ? dashboard.id : void 0;\r\n    const url = `api/dashboards/id/${id}/restore`;\r\n\r\n    return id && _.isNumber(version) ? this.backendSrv.post(url, { version }) : Promise.resolve({});\r\n  }\r\n}\r\n\r\ncoreModule.service('historySrv', HistorySrv);\r\n","import './history_srv';\r\n\r\nimport _ from 'lodash';\r\nimport angular from 'angular';\r\nimport moment from 'moment';\r\n\r\nimport locationUtil from 'app/core/utils/location_util';\r\nimport { DashboardModel } from '../dashboard_model';\r\nimport { HistoryListOpts, RevisionsModel, CalculateDiffOptions, HistorySrv } from './history_srv';\r\n\r\nexport class HistoryListCtrl {\r\n  appending: boolean;\r\n  dashboard: DashboardModel;\r\n  delta: { basic: string; json: string };\r\n  diff: string;\r\n  limit: number;\r\n  loading: boolean;\r\n  max: number;\r\n  mode: string;\r\n  revisions: RevisionsModel[];\r\n  start: number;\r\n  newInfo: RevisionsModel;\r\n  baseInfo: RevisionsModel;\r\n  canCompare: boolean;\r\n  isNewLatest: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private $route,\r\n    private $rootScope,\r\n    private $location,\r\n    private $q,\r\n    private historySrv: HistorySrv,\r\n    public $scope\r\n  ) {\r\n    this.appending = false;\r\n    this.diff = 'basic';\r\n    this.limit = 10;\r\n    this.loading = false;\r\n    this.max = 2;\r\n    this.mode = 'list';\r\n    this.start = 0;\r\n    this.canCompare = false;\r\n\r\n    this.$rootScope.onAppEvent('dashboard-saved', this.onDashboardSaved.bind(this), $scope);\r\n    this.resetFromSource();\r\n  }\r\n\r\n  onDashboardSaved() {\r\n    this.resetFromSource();\r\n  }\r\n\r\n  switchMode(mode: string) {\r\n    this.mode = mode;\r\n    if (this.mode === 'list') {\r\n      this.reset();\r\n    }\r\n  }\r\n\r\n  dismiss() {\r\n    this.$rootScope.appEvent('hide-dash-editor');\r\n  }\r\n\r\n  addToLog() {\r\n    this.start = this.start + this.limit;\r\n    this.getLog(true);\r\n  }\r\n\r\n  revisionSelectionChanged() {\r\n    const selected = _.filter(this.revisions, { checked: true }).length;\r\n    this.canCompare = selected === 2;\r\n  }\r\n\r\n  formatDate(date) {\r\n    return this.dashboard.formatDate(date);\r\n  }\r\n\r\n  formatBasicDate(date) {\r\n    const now = this.dashboard.timezone === 'browser' ? moment() : moment.utc();\r\n    const then = this.dashboard.timezone === 'browser' ? moment(date) : moment.utc(date);\r\n    return then.from(now);\r\n  }\r\n\r\n  getDiff(diff: string) {\r\n    this.diff = diff;\r\n    this.mode = 'compare';\r\n\r\n    // have it already been fetched?\r\n    if (this.delta[this.diff]) {\r\n      return this.$q.when(this.delta[this.diff]);\r\n    }\r\n\r\n    const selected = _.filter(this.revisions, { checked: true });\r\n\r\n    this.newInfo = selected[0];\r\n    this.baseInfo = selected[1];\r\n    this.isNewLatest = this.newInfo.version === this.dashboard.version;\r\n\r\n    this.loading = true;\r\n    const options: CalculateDiffOptions = {\r\n      new: {\r\n        dashboardId: this.dashboard.id,\r\n        version: this.newInfo.version,\r\n      },\r\n      base: {\r\n        dashboardId: this.dashboard.id,\r\n        version: this.baseInfo.version,\r\n      },\r\n      diffType: diff,\r\n    };\r\n\r\n    return this.historySrv\r\n      .calculateDiff(options)\r\n      .then(response => {\r\n        this.delta[this.diff] = response;\r\n      })\r\n      .catch(() => {\r\n        this.mode = 'list';\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n      });\r\n  }\r\n\r\n  getLog(append = false) {\r\n    this.loading = !append;\r\n    this.appending = append;\r\n    const options: HistoryListOpts = {\r\n      limit: this.limit,\r\n      start: this.start,\r\n    };\r\n\r\n    return this.historySrv\r\n      .getHistoryList(this.dashboard, options)\r\n      .then(revisions => {\r\n        // set formatted dates & default values\r\n        for (const rev of revisions) {\r\n          rev.createdDateString = this.formatDate(rev.created);\r\n          rev.ageString = this.formatBasicDate(rev.created);\r\n          rev.checked = false;\r\n        }\r\n\r\n        this.revisions = append ? this.revisions.concat(revisions) : revisions;\r\n      })\r\n      .catch(err => {\r\n        this.loading = false;\r\n      })\r\n      .finally(() => {\r\n        this.loading = false;\r\n        this.appending = false;\r\n      });\r\n  }\r\n\r\n  isLastPage() {\r\n    return _.find(this.revisions, rev => rev.version === 1);\r\n  }\r\n\r\n  reset() {\r\n    this.delta = { basic: '', json: '' };\r\n    this.diff = 'basic';\r\n    this.mode = 'list';\r\n    this.revisions = _.map(this.revisions, rev => _.extend({}, rev, { checked: false }));\r\n    this.canCompare = false;\r\n    this.start = 0;\r\n    this.isNewLatest = false;\r\n  }\r\n\r\n  resetFromSource() {\r\n    this.revisions = [];\r\n    return this.getLog().then(this.reset.bind(this));\r\n  }\r\n\r\n  restore(version: number) {\r\n    this.$rootScope.appEvent('confirm-modal', {\r\n      title: 'Restore version',\r\n      text: '',\r\n      text2: `Are you sure you want to restore the dashboard to version ${version}? All unsaved changes will be lost.`,\r\n      icon: 'fa-history',\r\n      yesText: `Yes, restore to version ${version}`,\r\n      onConfirm: this.restoreConfirm.bind(this, version),\r\n    });\r\n  }\r\n\r\n  restoreConfirm(version: number) {\r\n    this.loading = true;\r\n    return this.historySrv\r\n      .restoreDashboard(this.dashboard, version)\r\n      .then(response => {\r\n        this.$location.url(locationUtil.stripBaseFromUrl(response.url)).replace();\r\n        this.$route.reload();\r\n        this.$rootScope.appEvent('alert-success', ['Dashboard restored', 'Restored from version ' + version]);\r\n      })\r\n      .catch(() => {\r\n        this.mode = 'list';\r\n        this.loading = false;\r\n      });\r\n  }\r\n}\r\n\r\nexport function dashboardHistoryDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/history/history.html',\r\n    controller: HistoryListCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dashboard: '=',\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('gfDashboardHistory', dashboardHistoryDirective);\r\n","import angular from 'angular';\r\nimport moment from 'moment';\r\nimport _ from 'lodash';\r\nimport $ from 'jquery';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\nimport impressionSrv from 'app/core/services/impression_srv';\r\n\r\nexport class DashboardLoaderSrv {\r\n  /** @ngInject */\r\n  constructor(\r\n    private backendSrv,\r\n    private dashboardSrv,\r\n    private datasourceSrv,\r\n    private $http,\r\n    private $q,\r\n    private $timeout,\r\n    contextSrv,\r\n    private $routeParams,\r\n    private $rootScope\r\n  ) {}\r\n\r\n  _dashboardLoadFailed(title, snapshot?) {\r\n    snapshot = snapshot || false;\r\n    return {\r\n      meta: {\r\n        canStar: false,\r\n        isSnapshot: snapshot,\r\n        canDelete: false,\r\n        canSave: false,\r\n        canEdit: false,\r\n        dashboardNotFound: true,\r\n      },\r\n      dashboard: { title: title },\r\n    };\r\n  }\r\n\r\n  loadDashboard(type, slug, uid) {\r\n    let promise;\r\n\r\n    if (type === 'script') {\r\n      promise = this._loadScriptedDashboard(slug);\r\n    } else if (type === 'snapshot') {\r\n      promise = this.backendSrv.get('/api/snapshots/' + slug).catch(() => {\r\n        return this._dashboardLoadFailed('Snapshot not found', true);\r\n      });\r\n    } else {\r\n      promise = this.backendSrv\r\n        .getDashboardByUid(uid)\r\n        .then(result => {\r\n          if (result.meta.isFolder) {\r\n            this.$rootScope.appEvent('alert-error', ['Dashboard not found']);\r\n            throw new Error('Dashboard not found');\r\n          }\r\n          return result;\r\n        })\r\n        .catch(() => {\r\n          return this._dashboardLoadFailed('Not found', true);\r\n        });\r\n    }\r\n\r\n    promise.then(function(result) {\r\n      if (result.meta.dashboardNotFound !== true) {\r\n        impressionSrv.addDashboardImpression(result.dashboard.id);\r\n      }\r\n\r\n      return result;\r\n    });\r\n\r\n    return promise;\r\n  }\r\n\r\n  _loadScriptedDashboard(file) {\r\n    const url = 'public/dashboards/' + file.replace(/\\.(?!js)/, '/') + '?' + new Date().getTime();\r\n\r\n    return this.$http({ url: url, method: 'GET' })\r\n      .then(this._executeScript.bind(this))\r\n      .then(\r\n        result => {\r\n          return {\r\n            meta: {\r\n              fromScript: true,\r\n              canDelete: false,\r\n              canSave: false,\r\n              canStar: false,\r\n            },\r\n            dashboard: result.data,\r\n          };\r\n        },\r\n        err => {\r\n          console.log('Script dashboard error ' + err);\r\n          this.$rootScope.appEvent('alert-error', [\r\n            'Script Error',\r\n            'Please make sure it exists and returns a valid dashboard',\r\n          ]);\r\n          return this._dashboardLoadFailed('Scripted dashboard');\r\n        }\r\n      );\r\n  }\r\n\r\n  _executeScript(result) {\r\n    const services = {\r\n      dashboardSrv: this.dashboardSrv,\r\n      datasourceSrv: this.datasourceSrv,\r\n      $q: this.$q,\r\n    };\r\n\r\n    /*jshint -W054 */\r\n    const scriptFunc = new Function(\r\n      'ARGS',\r\n      'kbn',\r\n      'dateMath',\r\n      '_',\r\n      'moment',\r\n      'window',\r\n      'document',\r\n      '$',\r\n      'jQuery',\r\n      'services',\r\n      result.data\r\n    );\r\n    const scriptResult = scriptFunc(this.$routeParams, kbn, dateMath, _, moment, window, document, $, $, services);\r\n\r\n    // Handle async dashboard scripts\r\n    if (_.isFunction(scriptResult)) {\r\n      const deferred = this.$q.defer();\r\n      scriptResult(dashboard => {\r\n        this.$timeout(() => {\r\n          deferred.resolve({ data: dashboard });\r\n        });\r\n      });\r\n      return deferred.promise;\r\n    }\r\n\r\n    return { data: scriptResult };\r\n  }\r\n}\r\n\r\nangular.module('grafana.services').service('dashboardLoaderSrv', DashboardLoaderSrv);\r\n","import moment from 'moment';\r\nimport angular from 'angular';\r\nimport { appEvents, NavModel } from 'app/core/core';\r\nimport { DashboardModel } from '../dashboard_model';\r\n\r\nexport class DashNavCtrl {\r\n  dashboard: DashboardModel;\r\n  navModel: NavModel;\r\n  titleTooltip: string;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private dashboardSrv, private $location, public playlistSrv) {\r\n    appEvents.on('save-dashboard', this.saveDashboard.bind(this), $scope);\r\n\r\n    if (this.dashboard.meta.isSnapshot) {\r\n      const meta = this.dashboard.meta;\r\n      this.titleTooltip = 'Created: &nbsp;' + moment(meta.created).calendar();\r\n      if (meta.expires) {\r\n        this.titleTooltip += '<br>Expires: &nbsp;' + moment(meta.expires).fromNow() + '<br>';\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleSettings() {\r\n    const search = this.$location.search();\r\n    if (search.editview) {\r\n      delete search.editview;\r\n    } else {\r\n      search.editview = 'settings';\r\n    }\r\n    this.$location.search(search);\r\n  }\r\n\r\n  toggleViewMode() {\r\n    appEvents.emit('toggle-kiosk-mode');\r\n  }\r\n\r\n  close() {\r\n    const search = this.$location.search();\r\n    if (search.editview) {\r\n      delete search.editview;\r\n    } else if (search.fullscreen) {\r\n      delete search.fullscreen;\r\n      delete search.edit;\r\n    }\r\n    this.$location.search(search);\r\n  }\r\n\r\n  starDashboard() {\r\n    this.dashboardSrv.starDashboard(this.dashboard.id, this.dashboard.meta.isStarred).then(newState => {\r\n      this.dashboard.meta.isStarred = newState;\r\n    });\r\n  }\r\n\r\n  shareDashboard(tabIndex) {\r\n    const modalScope = this.$scope.$new();\r\n    modalScope.tabIndex = tabIndex;\r\n    modalScope.dashboard = this.dashboard;\r\n\r\n    appEvents.emit('show-modal', {\r\n      src: 'public/app/features/dashboard/partials/shareModal.html',\r\n      scope: modalScope,\r\n    });\r\n  }\r\n\r\n  hideTooltip(evt) {\r\n    angular.element(evt.currentTarget).tooltip('hide');\r\n  }\r\n\r\n  saveDashboard() {\r\n    return this.dashboardSrv.saveDashboard();\r\n  }\r\n\r\n  showSearch() {\r\n    appEvents.emit('show-dash-search');\r\n  }\r\n\r\n  addPanel() {\r\n    appEvents.emit('dash-scroll', { animate: true, evt: 0 });\r\n\r\n    if (this.dashboard.panels.length > 0 && this.dashboard.panels[0].type === 'add-panel') {\r\n      return; // Return if the \"Add panel\" exists already\r\n    }\r\n\r\n    this.dashboard.addPanel({\r\n      type: 'add-panel',\r\n      gridPos: { x: 0, y: 0, w: 12, h: 9 },\r\n      title: 'Panel Title',\r\n    });\r\n  }\r\n\r\n  navItemClicked(navItem, evt) {\r\n    if (navItem.clickHandler) {\r\n      navItem.clickHandler();\r\n      evt.preventDefault();\r\n    }\r\n  }\r\n}\r\n\r\nexport function dashNavDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/dashnav/dashnav.html',\r\n    controller: DashNavCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    transclude: true,\r\n    scope: { dashboard: '=' },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('dashnav', dashNavDirective);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class SubmenuCtrl {\r\n  annotations: any;\r\n  variables: any;\r\n  dashboard: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $rootScope, private variableSrv, private $location) {\r\n    this.annotations = this.dashboard.templating.list;\r\n    this.variables = this.variableSrv.variables;\r\n  }\r\n\r\n  annotationStateChanged() {\r\n    this.$rootScope.$broadcast('refresh');\r\n  }\r\n\r\n  variableUpdated(variable) {\r\n    this.variableSrv.variableUpdated(variable, true);\r\n  }\r\n\r\n  openEditView(editview) {\r\n    const search = _.extend(this.$location.search(), { editview: editview });\r\n    this.$location.search(search);\r\n  }\r\n}\r\n\r\nexport function submenuDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/submenu/submenu.html',\r\n    controller: SubmenuCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dashboard: '=',\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('dashboardSubmenu', submenuDirective);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nconst template = `\r\n<div class=\"modal-body\">\r\n\t<div class=\"modal-header\">\r\n\t\t<h2 class=\"modal-header-title\">\r\n\t\t\t<i class=\"fa fa-copy\"></i>\r\n\t\t\t<span class=\"p-l-1\">Save As...</span>\r\n\t\t</h2>\r\n\r\n\t\t<a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\r\n\t\t\t<i class=\"fa fa-remove\"></i>\r\n\t\t</a>\r\n\t</div>\r\n\r\n\t<form name=\"ctrl.saveForm\" class=\"modal-content\" novalidate>\r\n\t\t<div class=\"p-t-2\">\r\n\t\t\t<div class=\"gf-form\">\r\n\t\t\t\t<label class=\"gf-form-label width-7\">New name</label>\r\n\t\t\t\t<input type=\"text\" class=\"gf-form-input\" ng-model=\"ctrl.clone.title\" give-focus=\"true\" required>\r\n\t\t\t</div>\r\n      <div class=\"gf-form\">\r\n        <folder-picker initial-folder-id=\"ctrl.folderId\"\r\n                       on-change=\"ctrl.onFolderChange($folder)\"\r\n                       enter-folder-creation=\"ctrl.onEnterFolderCreation()\"\r\n                       exit-folder-creation=\"ctrl.onExitFolderCreation()\"\r\n                       enable-create-new=\"true\"\r\n                       label-class=\"width-7\">\r\n        </folder-picker>\r\n      </div>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"gf-form-button-row text-center\">\r\n\t\t\t<button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.save()\" ng-disabled=\"!ctrl.isValidFolderSelection\">Save</button>\r\n\t\t\t<a class=\"btn-text\" ng-click=\"ctrl.dismiss();\">Cancel</a>\r\n\t\t</div>\r\n\t</form>\r\n</div>\r\n`;\r\n\r\nexport class SaveDashboardAsModalCtrl {\r\n  clone: any;\r\n  folderId: any;\r\n  dismiss: () => void;\r\n  isValidFolderSelection = true;\r\n\r\n  /** @ngInject */\r\n  constructor(private dashboardSrv) {\r\n    const dashboard = this.dashboardSrv.getCurrent();\r\n    this.clone = dashboard.getSaveModelClone();\r\n    this.clone.id = null;\r\n    this.clone.uid = '';\r\n    this.clone.title += ' Copy';\r\n    this.clone.editable = true;\r\n    this.clone.hideControls = false;\r\n    this.folderId = dashboard.meta.folderId;\r\n\r\n    // remove alerts if source dashboard is already persisted\r\n    // do not want to create alert dupes\r\n    if (dashboard.id > 0) {\r\n      this.clone.panels.forEach(panel => {\r\n        if (panel.type === 'graph' && panel.alert) {\r\n          delete panel.thresholds;\r\n        }\r\n        delete panel.alert;\r\n      });\r\n    }\r\n\r\n    delete this.clone.autoUpdate;\r\n  }\r\n\r\n  save() {\r\n    return this.dashboardSrv.save(this.clone, { folderId: this.folderId }).then(this.dismiss);\r\n  }\r\n\r\n  keyDown(evt) {\r\n    if (evt.keyCode === 13) {\r\n      this.save();\r\n    }\r\n  }\r\n\r\n  onFolderChange(folder) {\r\n    this.folderId = folder.id;\r\n  }\r\n\r\n  onEnterFolderCreation() {\r\n    this.isValidFolderSelection = false;\r\n  }\r\n\r\n  onExitFolderCreation() {\r\n    this.isValidFolderSelection = true;\r\n  }\r\n}\r\n\r\nexport function saveDashboardAsDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: SaveDashboardAsModalCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: { dismiss: '&' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('saveDashboardAsModal', saveDashboardAsDirective);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nconst template = `\r\n<div class=\"modal-body\">\r\n  <div class=\"modal-header\">\r\n    <h2 class=\"modal-header-title\">\r\n      <i class=\"fa fa-save\"></i>\r\n      <span class=\"p-l-1\">Save changes</span>\r\n    </h2>\r\n\r\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\r\n      <i class=\"fa fa-remove\"></i>\r\n    </a>\r\n  </div>\r\n\r\n  <form name=\"ctrl.saveForm\" ng-submit=\"ctrl.save()\" class=\"modal-content\" novalidate>\r\n    <div class=\"p-t-1\">\r\n      <div class=\"gf-form-group\" ng-if=\"ctrl.timeChange || ctrl.variableValueChange\">\r\n\t\t    <gf-form-switch class=\"gf-form\"\r\n\t\t\t    label=\"Save current time range\" ng-if=\"ctrl.timeChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\r\n\t\t\t    checked=\"ctrl.saveTimerange\" on-change=\"buildUrl()\">\r\n\t\t    </gf-form-switch>\r\n\t\t    <gf-form-switch class=\"gf-form\"\r\n\t\t\t    label=\"Save current variables\" ng-if=\"ctrl.variableValueChange\" label-class=\"width-12\" switch-class=\"max-width-6\"\r\n\t\t\t    checked=\"ctrl.saveVariables\" on-change=\"buildUrl()\">\r\n\t\t    </gf-form-switch>\r\n\t    </div>\r\n      <div class=\"gf-form\">\r\n        <label class=\"gf-form-hint\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"message\"\r\n            class=\"gf-form-input\"\r\n            placeholder=\"Add a note to describe your changes &hellip;\"\r\n            give-focus=\"true\"\r\n            ng-model=\"ctrl.message\"\r\n            ng-model-options=\"{allowInvalid: true}\"\r\n            ng-maxlength=\"this.max\"\r\n            maxlength=\"64\"\r\n            autocomplete=\"off\" />\r\n          <small class=\"gf-form-hint-text muted\" ng-cloak>\r\n            <span ng-class=\"{'text-error': ctrl.saveForm.message.$invalid && ctrl.saveForm.message.$dirty }\">\r\n              {{ctrl.message.length || 0}}\r\n            </span>\r\n            / {{ctrl.max}} characters\r\n          </small>\r\n        </label>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"gf-form-button-row text-center\">\r\n      <button\r\n        id=\"saveBtn\"\r\n        type=\"submit\"\r\n        class=\"btn btn-success\"\r\n        ng-class=\"{'btn-success--processing': ctrl.isSaving}\"\r\n        ng-disabled=\"ctrl.saveForm.$invalid || ctrl.isSaving\"\r\n      >\r\n        <span ng-if=\"!ctrl.isSaving\">Save</span>\r\n        <span ng-if=\"ctrl.isSaving === true\">Saving...</span>\r\n      </button>\r\n      <button class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss();\">Cancel</button>\r\n    </div>\r\n  </form>\r\n</div>\r\n`;\r\n\r\nexport class SaveDashboardModalCtrl {\r\n  message: string;\r\n  saveVariables = false;\r\n  saveTimerange = false;\r\n  time: any;\r\n  originalTime: any;\r\n  current = [];\r\n  originalCurrent = [];\r\n  max: number;\r\n  saveForm: any;\r\n  isSaving: boolean;\r\n  dismiss: () => void;\r\n  timeChange = false;\r\n  variableValueChange = false;\r\n\r\n  /** @ngInject */\r\n  constructor(private dashboardSrv) {\r\n    this.message = '';\r\n    this.max = 64;\r\n    this.isSaving = false;\r\n    this.timeChange = this.dashboardSrv.getCurrent().hasTimeChanged();\r\n    this.variableValueChange = this.dashboardSrv.getCurrent().hasVariableValuesChanged();\r\n  }\r\n\r\n  save() {\r\n    if (!this.saveForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    const options = {\r\n      saveVariables: this.saveVariables,\r\n      saveTimerange: this.saveTimerange,\r\n      message: this.message,\r\n    };\r\n\r\n    const dashboard = this.dashboardSrv.getCurrent();\r\n    const saveModel = dashboard.getSaveModelClone(options);\r\n\r\n    this.isSaving = true;\r\n\r\n    return this.dashboardSrv.save(saveModel, options).then(this.postSave.bind(this, options));\r\n  }\r\n\r\n  postSave(options) {\r\n    if (options.saveVariables) {\r\n      this.dashboardSrv.getCurrent().resetOriginalVariables();\r\n    }\r\n\r\n    if (options.saveTimerange) {\r\n      this.dashboardSrv.getCurrent().resetOriginalTime();\r\n    }\r\n\r\n    this.dismiss();\r\n  }\r\n}\r\n\r\nexport function saveDashboardModalDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: SaveDashboardModalCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: { dismiss: '&' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('saveDashboardModal', saveDashboardModalDirective);\r\n","import angular from 'angular';\r\nimport { saveAs } from 'file-saver';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nconst template = `\r\n<div class=\"modal-body\">\r\n  <div class=\"modal-header\">\r\n    <h2 class=\"modal-header-title\">\r\n      <i class=\"fa fa-save\"></i><span class=\"p-l-1\">Cannot save provisioned dashboard</span>\r\n    </h2>\r\n\r\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\r\n      <i class=\"fa fa-remove\"></i>\r\n    </a>\r\n  </div>\r\n\r\n  <div class=\"modal-content\">\r\n    <small>\r\n      This dashboard cannot be saved from Grafana's UI since it has been provisioned from another source.\r\n      Copy the JSON or save it to a file below. Then you can update your dashboard in corresponding provisioning source.<br/>\r\n      <i>See <a class=\"external-link\" href=\"http://docs.grafana.org/administration/provisioning/#dashboards\" target=\"_blank\">\r\n      documentation</a> for more information about provisioning.</i>\r\n    </small>\r\n    <div class=\"p-t-2\">\r\n      <div class=\"gf-form\">\r\n        <code-editor content=\"ctrl.dashboardJson\" data-mode=\"json\" data-max-lines=15></code-editor>\r\n      </div>\r\n      <div class=\"gf-form-button-row\">\r\n        <button class=\"btn btn-success\" clipboard-button=\"ctrl.getJsonForClipboard()\">\r\n          <i class=\"fa fa-clipboard\"></i>&nbsp;Copy JSON to Clipboard\r\n        </button>\r\n        <button class=\"btn btn-secondary\" clipboard-button=\"ctrl.save()\">\r\n          <i class=\"fa fa-save\"></i>&nbsp;Save JSON to file\r\n        </button>\r\n        <a class=\"btn btn-link\" ng-click=\"ctrl.dismiss();\">Cancel</a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport class SaveProvisionedDashboardModalCtrl {\r\n  dash: any;\r\n  dashboardJson: string;\r\n  dismiss: () => void;\r\n\r\n  /** @ngInject */\r\n  constructor(dashboardSrv) {\r\n    this.dash = dashboardSrv.getCurrent().getSaveModelClone();\r\n    delete this.dash.id;\r\n    this.dashboardJson = angular.toJson(this.dash, true);\r\n  }\r\n\r\n  save() {\r\n    const blob = new Blob([angular.toJson(this.dash, true)], {\r\n      type: 'application/json;charset=utf-8',\r\n    });\r\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\r\n  }\r\n\r\n  getJsonForClipboard() {\r\n    return this.dashboardJson;\r\n  }\r\n}\r\n\r\nexport function saveProvisionedDashboardModalDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: SaveProvisionedDashboardModalCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: { dismiss: '&' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('saveProvisionedDashboardModal', saveProvisionedDashboardModalDirective);\r\n","import angular from 'angular';\r\nimport config from 'app/core/config';\r\nimport moment from 'moment';\r\n\r\n/** @ngInject */\r\nexport function ShareModalCtrl($scope, $rootScope, $location, $timeout, timeSrv, templateSrv, linkSrv) {\r\n  $scope.options = {\r\n    forCurrent: true,\r\n    includeTemplateVars: true,\r\n    theme: 'current',\r\n  };\r\n  $scope.editor = { index: $scope.tabIndex || 0 };\r\n\r\n  $scope.init = function() {\r\n    $scope.modeSharePanel = $scope.panel ? true : false;\r\n\r\n    $scope.tabs = [{ title: 'Link', src: 'shareLink.html' }];\r\n\r\n    if ($scope.modeSharePanel) {\r\n      $scope.modalTitle = 'Share Panel';\r\n      $scope.tabs.push({ title: 'Embed', src: 'shareEmbed.html' });\r\n    } else {\r\n      $scope.modalTitle = 'Share';\r\n    }\r\n\r\n    if (!$scope.dashboard.meta.isSnapshot) {\r\n      $scope.tabs.push({ title: 'Snapshot', src: 'shareSnapshot.html' });\r\n    }\r\n\r\n    if (!$scope.dashboard.meta.isSnapshot && !$scope.modeSharePanel) {\r\n      $scope.tabs.push({ title: 'Export', src: 'shareExport.html' });\r\n    }\r\n\r\n    $scope.buildUrl();\r\n  };\r\n\r\n  $scope.buildUrl = function() {\r\n    let baseUrl = $location.absUrl();\r\n    const queryStart = baseUrl.indexOf('?');\r\n\r\n    if (queryStart !== -1) {\r\n      baseUrl = baseUrl.substring(0, queryStart);\r\n    }\r\n\r\n    const params = angular.copy($location.search());\r\n\r\n    const range = timeSrv.timeRange();\r\n    params.from = range.from.valueOf();\r\n    params.to = range.to.valueOf();\r\n    params.orgId = config.bootData.user.orgId;\r\n\r\n    if ($scope.options.includeTemplateVars) {\r\n      templateSrv.fillVariableValuesForUrl(params);\r\n    }\r\n\r\n    if (!$scope.options.forCurrent) {\r\n      delete params.from;\r\n      delete params.to;\r\n    }\r\n\r\n    if ($scope.options.theme !== 'current') {\r\n      params.theme = $scope.options.theme;\r\n    }\r\n\r\n    if ($scope.modeSharePanel) {\r\n      params.panelId = $scope.panel.id;\r\n      params.fullscreen = true;\r\n    } else {\r\n      delete params.panelId;\r\n      delete params.fullscreen;\r\n    }\r\n\r\n    $scope.shareUrl = linkSrv.addParamsToUrl(baseUrl, params);\r\n\r\n    let soloUrl = baseUrl.replace(config.appSubUrl + '/dashboard/', config.appSubUrl + '/dashboard-solo/');\r\n    soloUrl = soloUrl.replace(config.appSubUrl + '/d/', config.appSubUrl + '/d-solo/');\r\n    delete params.fullscreen;\r\n    delete params.edit;\r\n    soloUrl = linkSrv.addParamsToUrl(soloUrl, params);\r\n\r\n    $scope.iframeHtml = '<iframe src=\"' + soloUrl + '\" width=\"450\" height=\"200\" frameborder=\"0\"></iframe>';\r\n\r\n    $scope.imageUrl = soloUrl.replace(\r\n      config.appSubUrl + '/dashboard-solo/',\r\n      config.appSubUrl + '/render/dashboard-solo/'\r\n    );\r\n    $scope.imageUrl = $scope.imageUrl.replace(config.appSubUrl + '/d-solo/', config.appSubUrl + '/render/d-solo/');\r\n    $scope.imageUrl += '&width=1000&height=500' + $scope.getLocalTimeZone();\r\n  };\r\n\r\n  // This function will try to return the proper full name of the local timezone\r\n  // Chrome does not handle the timezone offset (but phantomjs does)\r\n  $scope.getLocalTimeZone = function() {\r\n    const utcOffset = '&tz=UTC' + encodeURIComponent(moment().format('Z'));\r\n\r\n    // Older browser does not the internationalization API\r\n    if (!(window as any).Intl) {\r\n      return utcOffset;\r\n    }\r\n\r\n    const dateFormat = (window as any).Intl.DateTimeFormat();\r\n    if (!dateFormat.resolvedOptions) {\r\n      return utcOffset;\r\n    }\r\n\r\n    const options = dateFormat.resolvedOptions();\r\n    if (!options.timeZone) {\r\n      return utcOffset;\r\n    }\r\n\r\n    return '&tz=' + encodeURIComponent(options.timeZone);\r\n  };\r\n\r\n  $scope.getShareUrl = function() {\r\n    return $scope.shareUrl;\r\n  };\r\n}\r\n\r\nangular.module('grafana.controllers').controller('ShareModalCtrl', ShareModalCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class ShareSnapshotCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $rootScope, $location, backendSrv, $timeout, timeSrv) {\r\n    $scope.snapshot = {\r\n      name: $scope.dashboard.title,\r\n      expires: 0,\r\n      timeoutSeconds: 4,\r\n    };\r\n\r\n    $scope.step = 1;\r\n\r\n    $scope.expireOptions = [\r\n      { text: '1 Hour', value: 60 * 60 },\r\n      { text: '1 Day', value: 60 * 60 * 24 },\r\n      { text: '7 Days', value: 60 * 60 * 24 * 7 },\r\n      { text: 'Never', value: 0 },\r\n    ];\r\n\r\n    $scope.accessOptions = [\r\n      { text: 'Anyone with the link', value: 1 },\r\n      { text: 'Organization users', value: 2 },\r\n      { text: 'Public on the web', value: 3 },\r\n    ];\r\n\r\n    $scope.init = function() {\r\n      backendSrv.get('/api/snapshot/shared-options').then(function(options) {\r\n        $scope.externalUrl = options['externalSnapshotURL'];\r\n        $scope.sharingButtonText = options['externalSnapshotName'];\r\n        $scope.externalEnabled = options['externalEnabled'];\r\n      });\r\n    };\r\n\r\n    $scope.apiUrl = '/api/snapshots';\r\n\r\n    $scope.createSnapshot = function(external) {\r\n      $scope.dashboard.snapshot = {\r\n        timestamp: new Date(),\r\n      };\r\n\r\n      if (!external) {\r\n        $scope.dashboard.snapshot.originalUrl = $location.absUrl();\r\n      }\r\n\r\n      $scope.loading = true;\r\n      $scope.snapshot.external = external;\r\n\r\n      $rootScope.$broadcast('refresh');\r\n\r\n      $timeout(function() {\r\n        $scope.saveSnapshot(external);\r\n      }, $scope.snapshot.timeoutSeconds * 1000);\r\n    };\r\n\r\n    $scope.saveSnapshot = function(external) {\r\n      const dash = $scope.dashboard.getSaveModelClone();\r\n      $scope.scrubDashboard(dash);\r\n\r\n      const cmdData = {\r\n        dashboard: dash,\r\n        name: dash.title,\r\n        expires: $scope.snapshot.expires,\r\n      };\r\n\r\n      const postUrl = external ? $scope.externalUrl + $scope.apiUrl : $scope.apiUrl;\r\n\r\n      backendSrv.post(postUrl, cmdData).then(\r\n        function(results) {\r\n          $scope.loading = false;\r\n\r\n          if (external) {\r\n            $scope.deleteUrl = results.deleteUrl;\r\n            $scope.snapshotUrl = results.url;\r\n            $scope.saveExternalSnapshotRef(cmdData, results);\r\n          } else {\r\n            const url = $location.url();\r\n            let baseUrl = $location.absUrl();\r\n\r\n            if (url !== '/') {\r\n              baseUrl = baseUrl.replace(url, '') + '/';\r\n            }\r\n\r\n            $scope.snapshotUrl = baseUrl + 'dashboard/snapshot/' + results.key;\r\n            $scope.deleteUrl = baseUrl + 'api/snapshots-delete/' + results.deleteKey;\r\n          }\r\n\r\n          $scope.step = 2;\r\n        },\r\n        function() {\r\n          $scope.loading = false;\r\n        }\r\n      );\r\n    };\r\n\r\n    $scope.getSnapshotUrl = function() {\r\n      return $scope.snapshotUrl;\r\n    };\r\n\r\n    $scope.scrubDashboard = function(dash) {\r\n      // change title\r\n      dash.title = $scope.snapshot.name;\r\n\r\n      // make relative times absolute\r\n      dash.time = timeSrv.timeRange();\r\n\r\n      // remove panel queries & links\r\n      _.each(dash.panels, function(panel) {\r\n        panel.targets = [];\r\n        panel.links = [];\r\n        panel.datasource = null;\r\n      });\r\n\r\n      // remove annotation queries\r\n      dash.annotations.list = _.chain(dash.annotations.list)\r\n        .filter(function(annotation) {\r\n          return annotation.enable;\r\n        })\r\n        .map(function(annotation) {\r\n          return {\r\n            name: annotation.name,\r\n            enable: annotation.enable,\r\n            iconColor: annotation.iconColor,\r\n            snapshotData: annotation.snapshotData,\r\n            type: annotation.type,\r\n            builtIn: annotation.builtIn,\r\n            hide: annotation.hide,\r\n          };\r\n        })\r\n        .value();\r\n\r\n      // remove template queries\r\n      _.each(dash.templating.list, function(variable) {\r\n        variable.query = '';\r\n        variable.options = variable.current;\r\n        variable.refresh = false;\r\n      });\r\n\r\n      // snapshot single panel\r\n      if ($scope.modeSharePanel) {\r\n        const singlePanel = $scope.panel.getSaveModel();\r\n        singlePanel.gridPos.w = 24;\r\n        singlePanel.gridPos.x = 0;\r\n        singlePanel.gridPos.y = 0;\r\n        singlePanel.gridPos.h = 20;\r\n        dash.panels = [singlePanel];\r\n      }\r\n\r\n      // cleanup snapshotData\r\n      delete $scope.dashboard.snapshot;\r\n      $scope.dashboard.forEachPanel(function(panel) {\r\n        delete panel.snapshotData;\r\n      });\r\n      _.each($scope.dashboard.annotations.list, function(annotation) {\r\n        delete annotation.snapshotData;\r\n      });\r\n    };\r\n\r\n    $scope.deleteSnapshot = function() {\r\n      backendSrv.get($scope.deleteUrl).then(function() {\r\n        $scope.step = 3;\r\n      });\r\n    };\r\n\r\n    $scope.saveExternalSnapshotRef = function(cmdData, results) {\r\n      // save external in local instance as well\r\n      cmdData.external = true;\r\n      cmdData.key = results.key;\r\n      cmdData.deleteKey = results.deleteKey;\r\n      backendSrv.post('/api/snapshots/', cmdData);\r\n    };\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('ShareSnapshotCtrl', ShareSnapshotCtrl);\r\n","import coreModule from 'app/core/core_module';\r\nimport { DashboardModel } from './dashboard_model';\r\nimport locationUtil from 'app/core/utils/location_util';\r\n\r\nexport class DashboardSrv {\r\n  dash: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $rootScope, private $location) {}\r\n\r\n  create(dashboard, meta) {\r\n    return new DashboardModel(dashboard, meta);\r\n  }\r\n\r\n  setCurrent(dashboard) {\r\n    this.dash = dashboard;\r\n  }\r\n\r\n  getCurrent() {\r\n    return this.dash;\r\n  }\r\n\r\n  handleSaveDashboardError(clone, options, err) {\r\n    options = options || {};\r\n    options.overwrite = true;\r\n\r\n    if (err.data && err.data.status === 'version-mismatch') {\r\n      err.isHandled = true;\r\n\r\n      this.$rootScope.appEvent('confirm-modal', {\r\n        title: 'Conflict',\r\n        text: 'Someone else has updated this dashboard.',\r\n        text2: 'Would you still like to save this dashboard?',\r\n        yesText: 'Save & Overwrite',\r\n        icon: 'fa-warning',\r\n        onConfirm: () => {\r\n          this.save(clone, options);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (err.data && err.data.status === 'name-exists') {\r\n      err.isHandled = true;\r\n\r\n      this.$rootScope.appEvent('confirm-modal', {\r\n        title: 'Conflict',\r\n        text: 'A dashboard with the same name in selected folder already exists.',\r\n        text2: 'Would you still like to save this dashboard?',\r\n        yesText: 'Save & Overwrite',\r\n        icon: 'fa-warning',\r\n        onConfirm: () => {\r\n          this.save(clone, options);\r\n        },\r\n      });\r\n    }\r\n\r\n    if (err.data && err.data.status === 'plugin-dashboard') {\r\n      err.isHandled = true;\r\n\r\n      this.$rootScope.appEvent('confirm-modal', {\r\n        title: 'Plugin Dashboard',\r\n        text: err.data.message,\r\n        text2: 'Your changes will be lost when you update the plugin. Use Save As to create custom version.',\r\n        yesText: 'Overwrite',\r\n        icon: 'fa-warning',\r\n        altActionText: 'Save As',\r\n        onAltAction: () => {\r\n          this.showSaveAsModal();\r\n        },\r\n        onConfirm: () => {\r\n          this.save(clone, { overwrite: true });\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  postSave(clone, data) {\r\n    this.dash.version = data.version;\r\n\r\n    const newUrl = locationUtil.stripBaseFromUrl(data.url);\r\n    const currentPath = this.$location.path();\r\n\r\n    if (newUrl !== currentPath) {\r\n      this.$location.url(newUrl).replace();\r\n    }\r\n\r\n    this.$rootScope.appEvent('dashboard-saved', this.dash);\r\n    this.$rootScope.appEvent('alert-success', ['Dashboard saved']);\r\n\r\n    return this.dash;\r\n  }\r\n\r\n  save(clone, options) {\r\n    options = options || {};\r\n    options.folderId = options.folderId >= 0 ? options.folderId : this.dash.meta.folderId || clone.folderId;\r\n\r\n    return this.backendSrv\r\n      .saveDashboard(clone, options)\r\n      .then(this.postSave.bind(this, clone))\r\n      .catch(this.handleSaveDashboardError.bind(this, clone, options));\r\n  }\r\n\r\n  saveDashboard(options?, clone?) {\r\n    if (clone) {\r\n      this.setCurrent(this.create(clone, this.dash.meta));\r\n    }\r\n\r\n    if (this.dash.meta.provisioned) {\r\n      return this.showDashboardProvisionedModal();\r\n    }\r\n\r\n    if (!this.dash.meta.canSave && options.makeEditable !== true) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (this.dash.title === 'New dashboard') {\r\n      return this.showSaveAsModal();\r\n    }\r\n\r\n    if (this.dash.version > 0) {\r\n      return this.showSaveModal();\r\n    }\r\n\r\n    return this.save(this.dash.getSaveModelClone(), options);\r\n  }\r\n\r\n  saveJSONDashboard(json: string) {\r\n    return this.save(JSON.parse(json), {});\r\n  }\r\n\r\n  showDashboardProvisionedModal() {\r\n    this.$rootScope.appEvent('show-modal', {\r\n      templateHtml: '<save-provisioned-dashboard-modal dismiss=\"dismiss()\"></save-provisioned-dashboard-modal>',\r\n    });\r\n  }\r\n\r\n  showSaveAsModal() {\r\n    this.$rootScope.appEvent('show-modal', {\r\n      templateHtml: '<save-dashboard-as-modal dismiss=\"dismiss()\"></save-dashboard-as-modal>',\r\n      modalClass: 'modal--narrow',\r\n    });\r\n  }\r\n\r\n  showSaveModal() {\r\n    this.$rootScope.appEvent('show-modal', {\r\n      templateHtml: '<save-dashboard-modal dismiss=\"dismiss()\"></save-dashboard-modal>',\r\n      modalClass: 'modal--narrow',\r\n    });\r\n  }\r\n\r\n  starDashboard(dashboardId, isStarred) {\r\n    let promise;\r\n\r\n    if (isStarred) {\r\n      promise = this.backendSrv.delete('/api/user/stars/dashboard/' + dashboardId).then(() => {\r\n        return false;\r\n      });\r\n    } else {\r\n      promise = this.backendSrv.post('/api/user/stars/dashboard/' + dashboardId).then(() => {\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return promise.then(res => {\r\n      if (this.dash && this.dash.id === dashboardId) {\r\n        this.dash.meta.isStarred = res;\r\n      }\r\n      return res;\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.service('dashboardSrv', DashboardSrv);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport config from 'app/core/config';\r\nimport { DashboardModel } from './dashboard_model';\r\n\r\n// represents the transient view state\r\n// like fullscreen panel & edit\r\nexport class DashboardViewState {\r\n  state: any;\r\n  panelScopes: any;\r\n  $scope: any;\r\n  dashboard: DashboardModel;\r\n  editStateChanged: any;\r\n  fullscreenPanel: any;\r\n  oldTimeRange: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private $location, private $timeout, private $rootScope) {\r\n    const self = this;\r\n    self.state = {};\r\n    self.panelScopes = [];\r\n    self.$scope = $scope;\r\n    self.dashboard = $scope.dashboard;\r\n\r\n    $scope.onAppEvent('$routeUpdate', function() {\r\n      const urlState = self.getQueryStringState();\r\n      if (self.needsSync(urlState)) {\r\n        self.update(urlState, true);\r\n      }\r\n    });\r\n\r\n    $scope.onAppEvent('panel-change-view', function(evt, payload) {\r\n      self.update(payload);\r\n    });\r\n\r\n    $scope.onAppEvent('panel-initialized', function(evt, payload) {\r\n      self.registerPanel(payload.scope);\r\n    });\r\n\r\n    // this marks changes to location during this digest cycle as not to add history item\r\n    // don't want url changes like adding orgId to add browser history\r\n    $location.replace();\r\n    this.update(this.getQueryStringState());\r\n  }\r\n\r\n  needsSync(urlState) {\r\n    return _.isEqual(this.state, urlState) === false;\r\n  }\r\n\r\n  getQueryStringState() {\r\n    const state = this.$location.search();\r\n    state.panelId = parseInt(state.panelId) || null;\r\n    state.fullscreen = state.fullscreen ? true : null;\r\n    state.edit = state.edit === 'true' || state.edit === true || null;\r\n    state.editview = state.editview || null;\r\n    state.orgId = config.bootData.user.orgId;\r\n    return state;\r\n  }\r\n\r\n  serializeToUrl() {\r\n    const urlState = _.clone(this.state);\r\n    urlState.fullscreen = this.state.fullscreen ? true : null;\r\n    urlState.edit = this.state.edit ? true : null;\r\n    return urlState;\r\n  }\r\n\r\n  update(state, fromRouteUpdated?) {\r\n    // implement toggle logic\r\n    if (state.toggle) {\r\n      delete state.toggle;\r\n      if (this.state.fullscreen && state.fullscreen) {\r\n        if (this.state.edit === state.edit) {\r\n          state.fullscreen = !state.fullscreen;\r\n        }\r\n      }\r\n    }\r\n\r\n    // remember if editStateChanged\r\n    this.editStateChanged = (state.edit || false) !== (this.state.edit || false);\r\n\r\n    _.extend(this.state, state);\r\n    this.dashboard.meta.fullscreen = this.state.fullscreen;\r\n\r\n    if (!this.state.fullscreen) {\r\n      this.state.fullscreen = null;\r\n      this.state.edit = null;\r\n      // clear panel id unless in solo mode\r\n      if (!this.dashboard.meta.soloMode) {\r\n        this.state.panelId = null;\r\n      }\r\n    }\r\n\r\n    if ((this.state.fullscreen || this.dashboard.meta.soloMode) && this.state.panelId) {\r\n      // Trying to render panel in fullscreen when it's in the collapsed row causes an issue.\r\n      // So in this case expand collapsed row first.\r\n      this.toggleCollapsedPanelRow(this.state.panelId);\r\n    }\r\n\r\n    // if no edit state cleanup tab parm\r\n    if (!this.state.edit) {\r\n      delete this.state.tab;\r\n    }\r\n\r\n    // do not update url params if we are here\r\n    // from routeUpdated event\r\n    if (fromRouteUpdated !== true) {\r\n      this.$location.search(this.serializeToUrl());\r\n    }\r\n\r\n    this.syncState();\r\n  }\r\n\r\n  toggleCollapsedPanelRow(panelId) {\r\n    for (const panel of this.dashboard.panels) {\r\n      if (panel.collapsed) {\r\n        for (const rowPanel of panel.panels) {\r\n          if (rowPanel.id === panelId) {\r\n            this.dashboard.toggleRow(panel);\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  syncState() {\r\n    if (this.panelScopes.length === 0) {\r\n      return;\r\n    }\r\n\r\n    if (this.dashboard.meta.fullscreen) {\r\n      const panelScope = this.getPanelScope(this.state.panelId);\r\n      if (!panelScope) {\r\n        return;\r\n      }\r\n\r\n      if (this.fullscreenPanel) {\r\n        // if already fullscreen\r\n        if (this.fullscreenPanel === panelScope && this.editStateChanged === false) {\r\n          return;\r\n        } else {\r\n          this.leaveFullscreen(false);\r\n        }\r\n      }\r\n\r\n      if (!panelScope.ctrl.editModeInitiated) {\r\n        panelScope.ctrl.initEditMode();\r\n      }\r\n\r\n      if (!panelScope.ctrl.fullscreen) {\r\n        this.enterFullscreen(panelScope);\r\n      }\r\n    } else if (this.fullscreenPanel) {\r\n      this.leaveFullscreen(true);\r\n    }\r\n  }\r\n\r\n  getPanelScope(id) {\r\n    return _.find(this.panelScopes, function(panelScope) {\r\n      return panelScope.ctrl.panel.id === id;\r\n    });\r\n  }\r\n\r\n  leaveFullscreen(render) {\r\n    const self = this;\r\n    const ctrl = self.fullscreenPanel.ctrl;\r\n\r\n    ctrl.editMode = false;\r\n    ctrl.fullscreen = false;\r\n\r\n    this.dashboard.setViewMode(ctrl.panel, false, false);\r\n    this.$scope.appEvent('panel-fullscreen-exit', { panelId: ctrl.panel.id });\r\n    this.$scope.appEvent('dash-scroll', { restore: true });\r\n\r\n    if (!render) {\r\n      return false;\r\n    }\r\n\r\n    this.$timeout(function() {\r\n      if (self.oldTimeRange !== ctrl.range) {\r\n        self.$rootScope.$broadcast('refresh');\r\n      } else {\r\n        self.$rootScope.$broadcast('render');\r\n      }\r\n      delete self.fullscreenPanel;\r\n    });\r\n    return true;\r\n  }\r\n\r\n  enterFullscreen(panelScope) {\r\n    const ctrl = panelScope.ctrl;\r\n\r\n    ctrl.editMode = this.state.edit && this.dashboard.meta.canEdit;\r\n    ctrl.fullscreen = true;\r\n\r\n    this.oldTimeRange = ctrl.range;\r\n    this.fullscreenPanel = panelScope;\r\n\r\n    // Firefox doesn't return scrollTop position properly if 'dash-scroll' is emitted after setViewMode()\r\n    this.$scope.appEvent('dash-scroll', { animate: false, pos: 0 });\r\n    this.dashboard.setViewMode(ctrl.panel, true, ctrl.editMode);\r\n    this.$scope.appEvent('panel-fullscreen-enter', { panelId: ctrl.panel.id });\r\n  }\r\n\r\n  registerPanel(panelScope) {\r\n    const self = this;\r\n    self.panelScopes.push(panelScope);\r\n\r\n    if (!self.dashboard.meta.soloMode) {\r\n      if (self.state.panelId === panelScope.ctrl.panel.id) {\r\n        if (self.state.edit) {\r\n          panelScope.ctrl.editPanel();\r\n        } else {\r\n          panelScope.ctrl.viewPanel();\r\n        }\r\n      }\r\n    }\r\n\r\n    const unbind = panelScope.$on('$destroy', function() {\r\n      self.panelScopes = _.without(self.panelScopes, panelScope);\r\n      unbind();\r\n    });\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nexport function dashboardViewStateSrv($location, $timeout, $rootScope) {\r\n  return {\r\n    create: function($scope) {\r\n      return new DashboardViewState($scope, $location, $timeout, $rootScope);\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.services').factory('dashboardViewStateSrv', dashboardViewStateSrv);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nconst hitTypes = {\r\n  FOLDER: 'dash-folder',\r\n  DASHBOARD: 'dash-db',\r\n};\r\n\r\nexport class ValidationSrv {\r\n  rootName = 'general';\r\n\r\n  /** @ngInject */\r\n  constructor(private $q, private backendSrv) {}\r\n\r\n  validateNewDashboardName(folderId, name) {\r\n    return this.validate(folderId, name, 'A dashboard in this folder with the same name already exists');\r\n  }\r\n\r\n  validateNewFolderName(name) {\r\n    return this.validate(0, name, 'A folder or dashboard in the general folder with the same name already exists');\r\n  }\r\n\r\n  private validate(folderId, name, existingErrorMessage) {\r\n    name = (name || '').trim();\r\n    const nameLowerCased = name.toLowerCase();\r\n\r\n    if (name.length === 0) {\r\n      return this.$q.reject({\r\n        type: 'REQUIRED',\r\n        message: 'Name is required',\r\n      });\r\n    }\r\n\r\n    if (folderId === 0 && nameLowerCased === this.rootName) {\r\n      return this.$q.reject({\r\n        type: 'EXISTING',\r\n        message: 'This is a reserved name and cannot be used for a folder.',\r\n      });\r\n    }\r\n\r\n    const deferred = this.$q.defer();\r\n\r\n    const promises = [];\r\n    promises.push(this.backendSrv.search({ type: hitTypes.FOLDER, folderIds: [folderId], query: name }));\r\n    promises.push(this.backendSrv.search({ type: hitTypes.DASHBOARD, folderIds: [folderId], query: name }));\r\n\r\n    this.$q.all(promises).then(res => {\r\n      let hits = [];\r\n\r\n      if (res.length > 0 && res[0].length > 0) {\r\n        hits = res[0];\r\n      }\r\n\r\n      if (res.length > 1 && res[1].length > 0) {\r\n        hits = hits.concat(res[1]);\r\n      }\r\n\r\n      for (const hit of hits) {\r\n        if (nameLowerCased === hit.title.toLowerCase()) {\r\n          deferred.reject({\r\n            type: 'EXISTING',\r\n            message: existingErrorMessage,\r\n          });\r\n          break;\r\n        }\r\n      }\r\n\r\n      deferred.resolve();\r\n    });\r\n\r\n    return deferred.promise;\r\n  }\r\n}\r\n\r\ncoreModule.service('validationSrv', ValidationSrv);\r\n","import moment from 'moment';\r\nimport _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\n\r\nexport class TimeSrv {\r\n  time: any;\r\n  refreshTimer: any;\r\n  refresh: boolean;\r\n  oldRefresh: boolean;\r\n  dashboard: any;\r\n  timeAtLoad: any;\r\n  private autoRefreshBlocked: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private $rootScope, private $timeout, private $location, private timer, private contextSrv) {\r\n    // default time\r\n    this.time = { from: '6h', to: 'now' };\r\n\r\n    $rootScope.$on('zoom-out', this.zoomOut.bind(this));\r\n    $rootScope.$on('$routeUpdate', this.routeUpdated.bind(this));\r\n\r\n    document.addEventListener('visibilitychange', () => {\r\n      if (this.autoRefreshBlocked && document.visibilityState === 'visible') {\r\n        this.autoRefreshBlocked = false;\r\n\r\n        this.refreshDashboard();\r\n      }\r\n    });\r\n  }\r\n\r\n  init(dashboard) {\r\n    this.timer.cancelAll();\r\n\r\n    this.dashboard = dashboard;\r\n    this.time = dashboard.time;\r\n    this.refresh = dashboard.refresh;\r\n\r\n    this.initTimeFromUrl();\r\n    this.parseTime();\r\n\r\n    // remember time at load so we can go back to it\r\n    this.timeAtLoad = _.cloneDeep(this.time);\r\n\r\n    if (this.refresh) {\r\n      this.setAutoRefresh(this.refresh);\r\n    }\r\n  }\r\n\r\n  private parseTime() {\r\n    // when absolute time is saved in json it is turned to a string\r\n    if (_.isString(this.time.from) && this.time.from.indexOf('Z') >= 0) {\r\n      this.time.from = moment(this.time.from).utc();\r\n    }\r\n    if (_.isString(this.time.to) && this.time.to.indexOf('Z') >= 0) {\r\n      this.time.to = moment(this.time.to).utc();\r\n    }\r\n  }\r\n\r\n  private parseUrlParam(value) {\r\n    if (value.indexOf('now') !== -1) {\r\n      return value;\r\n    }\r\n    if (value.length === 8) {\r\n      return moment.utc(value, 'YYYYMMDD');\r\n    }\r\n    if (value.length === 15) {\r\n      return moment.utc(value, 'YYYYMMDDTHHmmss');\r\n    }\r\n\r\n    if (!isNaN(value)) {\r\n      const epoch = parseInt(value);\r\n      return moment.utc(epoch);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private initTimeFromUrl() {\r\n    const params = this.$location.search();\r\n    if (params.from) {\r\n      this.time.from = this.parseUrlParam(params.from) || this.time.from;\r\n    }\r\n    if (params.to) {\r\n      this.time.to = this.parseUrlParam(params.to) || this.time.to;\r\n    }\r\n    if (params.refresh) {\r\n      this.refresh = params.refresh || this.refresh;\r\n    }\r\n  }\r\n\r\n  private routeUpdated() {\r\n    const params = this.$location.search();\r\n    const urlRange = this.timeRangeForUrl();\r\n    // check if url has time range\r\n    if (params.from && params.to) {\r\n      // is it different from what our current time range?\r\n      if (params.from !== urlRange.from || params.to !== urlRange.to) {\r\n        // issue update\r\n        this.initTimeFromUrl();\r\n        this.setTime(this.time, true);\r\n      }\r\n    } else if (this.timeHasChangedSinceLoad()) {\r\n      this.setTime(this.timeAtLoad, true);\r\n    }\r\n  }\r\n\r\n  private timeHasChangedSinceLoad() {\r\n    return this.timeAtLoad.from !== this.time.from || this.timeAtLoad.to !== this.time.to;\r\n  }\r\n\r\n  setAutoRefresh(interval) {\r\n    this.dashboard.refresh = interval;\r\n    this.cancelNextRefresh();\r\n    if (interval) {\r\n      const intervalMs = kbn.interval_to_ms(interval);\r\n\r\n      this.refreshTimer = this.timer.register(\r\n        this.$timeout(() => {\r\n          this.startNextRefreshTimer(intervalMs);\r\n          this.refreshDashboard();\r\n        }, intervalMs)\r\n      );\r\n    }\r\n\r\n    // update url\r\n    const params = this.$location.search();\r\n    if (interval) {\r\n      params.refresh = interval;\r\n      this.$location.search(params);\r\n    } else if (params.refresh) {\r\n      delete params.refresh;\r\n      this.$location.search(params);\r\n    }\r\n  }\r\n\r\n  refreshDashboard() {\r\n    this.$rootScope.$broadcast('refresh');\r\n  }\r\n\r\n  private startNextRefreshTimer(afterMs) {\r\n    this.cancelNextRefresh();\r\n    this.refreshTimer = this.timer.register(\r\n      this.$timeout(() => {\r\n        this.startNextRefreshTimer(afterMs);\r\n        if (this.contextSrv.isGrafanaVisible()) {\r\n          this.refreshDashboard();\r\n        } else {\r\n          this.autoRefreshBlocked = true;\r\n        }\r\n      }, afterMs)\r\n    );\r\n  }\r\n\r\n  private cancelNextRefresh() {\r\n    this.timer.cancel(this.refreshTimer);\r\n  }\r\n\r\n  setTime(time, fromRouteUpdate?) {\r\n    _.extend(this.time, time);\r\n\r\n    // disable refresh if zoom in or zoom out\r\n    if (moment.isMoment(time.to)) {\r\n      this.oldRefresh = this.dashboard.refresh || this.oldRefresh;\r\n      this.setAutoRefresh(false);\r\n    } else if (this.oldRefresh && this.oldRefresh !== this.dashboard.refresh) {\r\n      this.setAutoRefresh(this.oldRefresh);\r\n      this.oldRefresh = null;\r\n    }\r\n\r\n    // update url\r\n    if (fromRouteUpdate !== true) {\r\n      const urlRange = this.timeRangeForUrl();\r\n      const urlParams = this.$location.search();\r\n      urlParams.from = urlRange.from;\r\n      urlParams.to = urlRange.to;\r\n      this.$location.search(urlParams);\r\n    }\r\n\r\n    this.$rootScope.appEvent('time-range-changed', this.time);\r\n    this.$timeout(this.refreshDashboard.bind(this), 0);\r\n  }\r\n\r\n  timeRangeForUrl() {\r\n    const range = this.timeRange().raw;\r\n\r\n    if (moment.isMoment(range.from)) {\r\n      range.from = range.from.valueOf().toString();\r\n    }\r\n    if (moment.isMoment(range.to)) {\r\n      range.to = range.to.valueOf().toString();\r\n    }\r\n\r\n    return range;\r\n  }\r\n\r\n  timeRange() {\r\n    // make copies if they are moment  (do not want to return out internal moment, because they are mutable!)\r\n    const raw = {\r\n      from: moment.isMoment(this.time.from) ? moment(this.time.from) : this.time.from,\r\n      to: moment.isMoment(this.time.to) ? moment(this.time.to) : this.time.to,\r\n    };\r\n\r\n    const timezone = this.dashboard && this.dashboard.getTimezone();\r\n\r\n    return {\r\n      from: dateMath.parse(raw.from, false, timezone),\r\n      to: dateMath.parse(raw.to, true, timezone),\r\n      raw: raw,\r\n    };\r\n  }\r\n\r\n  zoomOut(e, factor) {\r\n    const range = this.timeRange();\r\n\r\n    const timespan = range.to.valueOf() - range.from.valueOf();\r\n    const center = range.to.valueOf() - timespan / 2;\r\n\r\n    let to = center + timespan * factor / 2;\r\n    let from = center - timespan * factor / 2;\r\n\r\n    if (to > Date.now() && range.to <= Date.now()) {\r\n      const offset = to - Date.now();\r\n      from = from - offset;\r\n      to = Date.now();\r\n    }\r\n\r\n    this.setTime({ from: moment.utc(from), to: moment.utc(to) });\r\n  }\r\n}\r\n\r\ncoreModule.service('timeSrv', TimeSrv);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\nimport { DashboardModel } from './dashboard_model';\r\n\r\nexport class ChangeTracker {\r\n  current: any;\r\n  originalPath: any;\r\n  scope: any;\r\n  original: any;\r\n  next: any;\r\n  $window: any;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    dashboard,\r\n    scope,\r\n    originalCopyDelay,\r\n    private $location,\r\n    $window,\r\n    private $timeout,\r\n    private contextSrv,\r\n    private $rootScope\r\n  ) {\r\n    this.$location = $location;\r\n    this.$window = $window;\r\n\r\n    this.current = dashboard;\r\n    this.originalPath = $location.path();\r\n    this.scope = scope;\r\n\r\n    // register events\r\n    scope.onAppEvent('dashboard-saved', () => {\r\n      this.original = this.current.getSaveModelClone();\r\n      this.originalPath = $location.path();\r\n    });\r\n\r\n    $window.onbeforeunload = () => {\r\n      if (this.ignoreChanges()) {\r\n        return undefined;\r\n      }\r\n      if (this.hasChanges()) {\r\n        return 'There are unsaved changes to this dashboard';\r\n      }\r\n      return undefined;\r\n    };\r\n\r\n    scope.$on('$locationChangeStart', (event, next) => {\r\n      // check if we should look for changes\r\n      if (this.originalPath === $location.path()) {\r\n        return true;\r\n      }\r\n      if (this.ignoreChanges()) {\r\n        return true;\r\n      }\r\n\r\n      if (this.hasChanges()) {\r\n        event.preventDefault();\r\n        this.next = next;\r\n\r\n        this.$timeout(() => {\r\n          this.open_modal();\r\n        });\r\n      }\r\n      return false;\r\n    });\r\n\r\n    if (originalCopyDelay) {\r\n      this.$timeout(() => {\r\n        // wait for different services to patch the dashboard (missing properties)\r\n        this.original = dashboard.getSaveModelClone();\r\n      }, originalCopyDelay);\r\n    } else {\r\n      this.original = dashboard.getSaveModelClone();\r\n    }\r\n  }\r\n\r\n  // for some dashboards and users\r\n  // changes should be ignored\r\n  ignoreChanges() {\r\n    if (!this.original) {\r\n      return true;\r\n    }\r\n    if (!this.contextSrv.isEditor) {\r\n      return true;\r\n    }\r\n    if (!this.current || !this.current.meta) {\r\n      return true;\r\n    }\r\n\r\n    const meta = this.current.meta;\r\n    return !meta.canSave || meta.fromScript || meta.fromFile;\r\n  }\r\n\r\n  // remove stuff that should not count in diff\r\n  cleanDashboardFromIgnoredChanges(dashData) {\r\n    // need to new up the domain model class to get access to expand / collapse row logic\r\n    const model = new DashboardModel(dashData);\r\n\r\n    // Expand all rows before making comparison. This is required because row expand / collapse\r\n    // change order of panel array and panel positions.\r\n    model.expandRows();\r\n\r\n    const dash = model.getSaveModelClone();\r\n\r\n    // ignore time and refresh\r\n    dash.time = 0;\r\n    dash.refresh = 0;\r\n    dash.schemaVersion = 0;\r\n\r\n    // ignore iteration property\r\n    delete dash.iteration;\r\n\r\n    dash.panels = _.filter(dash.panels, panel => {\r\n      if (panel.repeatPanelId) {\r\n        return false;\r\n      }\r\n\r\n      // remove scopedVars\r\n      panel.scopedVars = null;\r\n\r\n      // ignore panel legend sort\r\n      if (panel.legend) {\r\n        delete panel.legend.sort;\r\n        delete panel.legend.sortDesc;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    // ignore template variable values\r\n    _.each(dash.templating.list, function(value) {\r\n      value.current = null;\r\n      value.options = null;\r\n      value.filters = null;\r\n    });\r\n\r\n    return dash;\r\n  }\r\n\r\n  hasChanges() {\r\n    const current = this.cleanDashboardFromIgnoredChanges(this.current.getSaveModelClone());\r\n    const original = this.cleanDashboardFromIgnoredChanges(this.original);\r\n\r\n    const currentTimepicker = _.find(current.nav, { type: 'timepicker' });\r\n    const originalTimepicker = _.find(original.nav, { type: 'timepicker' });\r\n\r\n    if (currentTimepicker && originalTimepicker) {\r\n      currentTimepicker.now = originalTimepicker.now;\r\n    }\r\n\r\n    const currentJson = angular.toJson(current, true);\r\n    const originalJson = angular.toJson(original, true);\r\n\r\n    return currentJson !== originalJson;\r\n  }\r\n\r\n  discardChanges() {\r\n    this.original = null;\r\n    this.gotoNext();\r\n  }\r\n\r\n  open_modal() {\r\n    this.$rootScope.appEvent('show-modal', {\r\n      templateHtml: '<unsaved-changes-modal dismiss=\"dismiss()\"></unsaved-changes-modal>',\r\n      modalClass: 'modal--narrow confirm-modal',\r\n    });\r\n  }\r\n\r\n  saveChanges() {\r\n    const self = this;\r\n    const cancel = this.$rootScope.$on('dashboard-saved', () => {\r\n      cancel();\r\n      this.$timeout(() => {\r\n        self.gotoNext();\r\n      });\r\n    });\r\n\r\n    this.$rootScope.appEvent('save-dashboard');\r\n  }\r\n\r\n  gotoNext() {\r\n    const baseLen = this.$location.absUrl().length - this.$location.url().length;\r\n    const nextUrl = this.next.substring(baseLen);\r\n    this.$location.url(nextUrl);\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport { ChangeTracker } from './change_tracker';\r\n\r\n/** @ngInject */\r\nexport function unsavedChangesSrv(this: any, $rootScope, $q, $location, $timeout, contextSrv, dashboardSrv, $window) {\r\n  this.init = function(dashboard, scope) {\r\n    this.tracker = new ChangeTracker(dashboard, scope, 1000, $location, $window, $timeout, contextSrv, $rootScope);\r\n    return this.tracker;\r\n  };\r\n}\r\n\r\nangular.module('grafana.services').service('unsavedChangesSrv', unsavedChangesSrv);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nconst template = `\r\n<div class=\"modal-body\">\r\n  <div class=\"modal-header\">\r\n    <h2 class=\"modal-header-title\">\r\n      <i class=\"fa fa-exclamation\"></i>\r\n      <span class=\"p-l-1\">Unsaved changes</span>\r\n    </h2>\r\n\r\n    <a class=\"modal-header-close\" ng-click=\"ctrl.dismiss();\">\r\n      <i class=\"fa fa-remove\"></i>\r\n    </a>\r\n  </div>\r\n\r\n  <div class=\"modal-content text-center\">\r\n\r\n    <div class=\"confirm-modal-text\">\r\n      Do you want to save your changes?\r\n    </div>\r\n\r\n    <div class=\"confirm-modal-buttons\">\r\n      <button type=\"button\" class=\"btn btn-success\" ng-click=\"ctrl.save()\">Save</button>\r\n      <button type=\"button\" class=\"btn btn-danger\" ng-click=\"ctrl.discard()\">Discard</button>\r\n      <button type=\"button\" class=\"btn btn-inverse\" ng-click=\"ctrl.dismiss()\">Cancel</button>\r\n    </div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport class UnsavedChangesModalCtrl {\r\n  clone: any;\r\n  dismiss: () => void;\r\n\r\n  /** @ngInject */\r\n  constructor(private unsavedChangesSrv) {}\r\n\r\n  discard() {\r\n    this.dismiss();\r\n    this.unsavedChangesSrv.tracker.discardChanges();\r\n  }\r\n\r\n  save() {\r\n    this.dismiss();\r\n    this.unsavedChangesSrv.tracker.saveChanges();\r\n  }\r\n}\r\n\r\nexport function unsavedChangesModalDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: UnsavedChangesModalCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: { dismiss: '&' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('unsavedChangesModal', unsavedChangesModalDirective);\r\n","import moment from 'moment';\r\nimport * as dateMath from 'app/core/utils/datemath';\r\n\r\nexport function inputDateDirective() {\r\n  return {\r\n    restrict: 'A',\r\n    require: 'ngModel',\r\n    link: function($scope, $elem, attrs, ngModel) {\r\n      const format = 'YYYY-MM-DD HH:mm:ss';\r\n\r\n      const fromUser = function(text) {\r\n        if (text.indexOf('now') !== -1) {\r\n          if (!dateMath.isValid(text)) {\r\n            ngModel.$setValidity('error', false);\r\n            return undefined;\r\n          }\r\n          ngModel.$setValidity('error', true);\r\n          return text;\r\n        }\r\n\r\n        let parsed;\r\n        if ($scope.ctrl.isUtc) {\r\n          parsed = moment.utc(text, format);\r\n        } else {\r\n          parsed = moment(text, format);\r\n        }\r\n\r\n        if (!parsed.isValid()) {\r\n          ngModel.$setValidity('error', false);\r\n          return undefined;\r\n        }\r\n\r\n        ngModel.$setValidity('error', true);\r\n        return parsed;\r\n      };\r\n\r\n      const toUser = function(currentValue) {\r\n        if (moment.isMoment(currentValue)) {\r\n          return currentValue.format(format);\r\n        } else {\r\n          return currentValue;\r\n        }\r\n      };\r\n\r\n      ngModel.$parsers.push(fromUser);\r\n      ngModel.$formatters.push(toUser);\r\n    },\r\n  };\r\n}\r\n","import _ from 'lodash';\r\nimport angular from 'angular';\r\nimport moment from 'moment';\r\n\r\nimport * as rangeUtil from 'app/core/utils/rangeutil';\r\n\r\nexport class TimePickerCtrl {\r\n  static tooltipFormat = 'MMM D, YYYY HH:mm:ss';\r\n  static defaults = {\r\n    time_options: ['5m', '15m', '1h', '6h', '12h', '24h', '2d', '7d', '30d'],\r\n    refresh_intervals: ['5s', '10s', '30s', '1m', '5m', '15m', '30m', '1h', '2h', '1d'],\r\n  };\r\n\r\n  dashboard: any;\r\n  panel: any;\r\n  absolute: any;\r\n  timeRaw: any;\r\n  editTimeRaw: any;\r\n  tooltip: string;\r\n  rangeString: string;\r\n  timeOptions: any;\r\n  refresh: any;\r\n  isUtc: boolean;\r\n  firstDayOfWeek: number;\r\n  isOpen: boolean;\r\n  isAbsolute: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private $rootScope, private timeSrv) {\r\n    this.$scope.ctrl = this;\r\n\r\n    $rootScope.onAppEvent('shift-time-forward', () => this.move(1), $scope);\r\n    $rootScope.onAppEvent('shift-time-backward', () => this.move(-1), $scope);\r\n    $rootScope.onAppEvent('refresh', this.onRefresh.bind(this), $scope);\r\n    $rootScope.onAppEvent('closeTimepicker', this.openDropdown.bind(this), $scope);\r\n\r\n    // init options\r\n    this.panel = this.dashboard.timepicker;\r\n    _.defaults(this.panel, TimePickerCtrl.defaults);\r\n    this.firstDayOfWeek = moment.localeData().firstDayOfWeek();\r\n\r\n    // init time stuff\r\n    this.onRefresh();\r\n  }\r\n\r\n  onRefresh() {\r\n    const time = angular.copy(this.timeSrv.timeRange());\r\n    const timeRaw = angular.copy(time.raw);\r\n\r\n    if (!this.dashboard.isTimezoneUtc()) {\r\n      time.from.local();\r\n      time.to.local();\r\n      if (moment.isMoment(timeRaw.from)) {\r\n        timeRaw.from.local();\r\n      }\r\n      if (moment.isMoment(timeRaw.to)) {\r\n        timeRaw.to.local();\r\n      }\r\n      this.isUtc = false;\r\n    } else {\r\n      this.isUtc = true;\r\n    }\r\n\r\n    this.rangeString = rangeUtil.describeTimeRange(timeRaw);\r\n    this.absolute = { fromJs: time.from.toDate(), toJs: time.to.toDate() };\r\n    this.tooltip = this.dashboard.formatDate(time.from) + ' <br>to<br>';\r\n    this.tooltip += this.dashboard.formatDate(time.to);\r\n    this.timeRaw = timeRaw;\r\n    this.isAbsolute = moment.isMoment(this.timeRaw.to);\r\n  }\r\n\r\n  zoom(factor) {\r\n    this.$rootScope.appEvent('zoom-out', 2);\r\n  }\r\n\r\n  move(direction) {\r\n    const range = this.timeSrv.timeRange();\r\n\r\n    const timespan = (range.to.valueOf() - range.from.valueOf()) / 2;\r\n    let to, from;\r\n    if (direction === -1) {\r\n      to = range.to.valueOf() - timespan;\r\n      from = range.from.valueOf() - timespan;\r\n    } else if (direction === 1) {\r\n      to = range.to.valueOf() + timespan;\r\n      from = range.from.valueOf() + timespan;\r\n      if (to > Date.now() && range.to < Date.now()) {\r\n        to = Date.now();\r\n        from = range.from.valueOf();\r\n      }\r\n    } else {\r\n      to = range.to.valueOf();\r\n      from = range.from.valueOf();\r\n    }\r\n\r\n    this.timeSrv.setTime({ from: moment.utc(from), to: moment.utc(to) });\r\n  }\r\n\r\n  openDropdown() {\r\n    if (this.isOpen) {\r\n      this.closeDropdown();\r\n      return;\r\n    }\r\n\r\n    this.onRefresh();\r\n    this.editTimeRaw = this.timeRaw;\r\n    this.timeOptions = rangeUtil.getRelativeTimesList(this.panel, this.rangeString);\r\n    this.refresh = {\r\n      value: this.dashboard.refresh,\r\n      options: _.map(this.panel.refresh_intervals, (interval: any) => {\r\n        return { text: interval, value: interval };\r\n      }),\r\n    };\r\n\r\n    this.refresh.options.unshift({ text: 'off' });\r\n    this.isOpen = true;\r\n    this.$rootScope.appEvent('timepickerOpen');\r\n  }\r\n\r\n  closeDropdown() {\r\n    this.isOpen = false;\r\n    this.$rootScope.appEvent('timepickerClosed');\r\n  }\r\n\r\n  applyCustom() {\r\n    if (this.refresh.value !== this.dashboard.refresh) {\r\n      this.timeSrv.setAutoRefresh(this.refresh.value);\r\n    }\r\n\r\n    this.timeSrv.setTime(this.editTimeRaw);\r\n    this.closeDropdown();\r\n  }\r\n\r\n  absoluteFromChanged() {\r\n    this.editTimeRaw.from = this.getAbsoluteMomentForTimezone(this.absolute.fromJs);\r\n  }\r\n\r\n  absoluteToChanged() {\r\n    this.editTimeRaw.to = this.getAbsoluteMomentForTimezone(this.absolute.toJs);\r\n  }\r\n\r\n  getAbsoluteMomentForTimezone(jsDate) {\r\n    return this.dashboard.isTimezoneUtc() ? moment(jsDate).utc() : moment(jsDate);\r\n  }\r\n\r\n  setRelativeFilter(timespan) {\r\n    const range = { from: timespan.from, to: timespan.to };\r\n\r\n    if (this.panel.nowDelay && range.to === 'now') {\r\n      range.to = 'now-' + this.panel.nowDelay;\r\n    }\r\n\r\n    this.timeSrv.setTime(range);\r\n    this.closeDropdown();\r\n  }\r\n}\r\n\r\nexport function settingsDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/timepicker/settings.html',\r\n    controller: TimePickerCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dashboard: '=',\r\n    },\r\n  };\r\n}\r\n\r\nexport function timePickerDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/timepicker/timepicker.html',\r\n    controller: TimePickerCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dashboard: '=',\r\n    },\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('gfTimePickerSettings', settingsDirective);\r\nangular.module('grafana.directives').directive('gfTimePicker', timePickerDirective);\r\n\r\nimport { inputDateDirective } from './input_date';\r\nangular.module('grafana.directives').directive('inputDatetime', inputDateDirective);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nconst template = `\r\n<input type=\"file\" id=\"dashupload\" name=\"dashupload\" class=\"hide\"/>\r\n<label class=\"btn btn-success\" for=\"dashupload\">\r\n  <i class=\"fa fa-upload\"></i>\r\n  Upload .json File\r\n</label>\r\n`;\r\n\r\n/** @ngInject */\r\nfunction uploadDashboardDirective(timer, alertSrv, $location) {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    scope: {\r\n      onUpload: '&',\r\n    },\r\n    link: function(scope) {\r\n      function file_selected(evt) {\r\n        const files = evt.target.files; // FileList object\r\n        const readerOnload = function() {\r\n          return function(e) {\r\n            let dash;\r\n            try {\r\n              dash = JSON.parse(e.target.result);\r\n            } catch (err) {\r\n              console.log(err);\r\n              scope.appEvent('alert-error', ['Import failed', 'JSON -> JS Serialization failed: ' + err.message]);\r\n              return;\r\n            }\r\n\r\n            scope.$apply(function() {\r\n              scope.onUpload({ dash: dash });\r\n            });\r\n          };\r\n        };\r\n\r\n        for (let i = 0, f; (f = files[i]); i++) {\r\n          const reader = new FileReader();\r\n          reader.onload = readerOnload();\r\n          reader.readAsText(f);\r\n        }\r\n      }\r\n\r\n      const wnd: any = window;\r\n      // Check for the various File API support.\r\n      if (wnd.File && wnd.FileReader && wnd.FileList && wnd.Blob) {\r\n        // Something\r\n        document.getElementById('dashupload').addEventListener('change', file_selected, false);\r\n      } else {\r\n        alertSrv.set('Oops', 'Sorry, the HTML5 File APIs are not fully supported in this browser.', 'error');\r\n      }\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('dashUpload', uploadDashboardDirective);\r\n","import config from 'app/core/config';\r\nimport _ from 'lodash';\r\nimport { DashboardModel } from '../dashboard_model';\r\n\r\nexport class DashboardExporter {\r\n  constructor(private datasourceSrv) {}\r\n\r\n  makeExportable(dashboard: DashboardModel) {\r\n    // clean up repeated rows and panels,\r\n    // this is done on the live real dashboard instance, not on a clone\r\n    // so we need to undo this\r\n    // this is pretty hacky and needs to be changed\r\n    dashboard.cleanUpRepeats();\r\n\r\n    const saveModel = dashboard.getSaveModelClone();\r\n    saveModel.id = null;\r\n\r\n    // undo repeat cleanup\r\n    dashboard.processRepeats();\r\n\r\n    const inputs = [];\r\n    const requires = {};\r\n    const datasources = {};\r\n    const promises = [];\r\n    const variableLookup: any = {};\r\n\r\n    for (const variable of saveModel.templating.list) {\r\n      variableLookup[variable.name] = variable;\r\n    }\r\n\r\n    const templateizeDatasourceUsage = obj => {\r\n      // ignore data source properties that contain a variable\r\n      if (obj.datasource && obj.datasource.indexOf('$') === 0) {\r\n        if (variableLookup[obj.datasource.substring(1)]) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      promises.push(\r\n        this.datasourceSrv.get(obj.datasource).then(ds => {\r\n          if (ds.meta.builtIn) {\r\n            return;\r\n          }\r\n\r\n          const refName = 'DS_' + ds.name.replace(' ', '_').toUpperCase();\r\n          datasources[refName] = {\r\n            name: refName,\r\n            label: ds.name,\r\n            description: '',\r\n            type: 'datasource',\r\n            pluginId: ds.meta.id,\r\n            pluginName: ds.meta.name,\r\n          };\r\n          obj.datasource = '${' + refName + '}';\r\n\r\n          requires['datasource' + ds.meta.id] = {\r\n            type: 'datasource',\r\n            id: ds.meta.id,\r\n            name: ds.meta.name,\r\n            version: ds.meta.info.version || '1.0.0',\r\n          };\r\n        })\r\n      );\r\n    };\r\n\r\n    const processPanel = panel => {\r\n      if (panel.datasource !== undefined) {\r\n        templateizeDatasourceUsage(panel);\r\n      }\r\n\r\n      if (panel.targets) {\r\n        for (const target of panel.targets) {\r\n          if (target.datasource !== undefined) {\r\n            templateizeDatasourceUsage(target);\r\n          }\r\n        }\r\n      }\r\n\r\n      const panelDef = config.panels[panel.type];\r\n      if (panelDef) {\r\n        requires['panel' + panelDef.id] = {\r\n          type: 'panel',\r\n          id: panelDef.id,\r\n          name: panelDef.name,\r\n          version: panelDef.info.version,\r\n        };\r\n      }\r\n    };\r\n\r\n    // check up panel data sources\r\n    for (const panel of saveModel.panels) {\r\n      processPanel(panel);\r\n\r\n      // handle collapsed rows\r\n      if (panel.collapsed !== undefined && panel.collapsed === true && panel.panels) {\r\n        for (const rowPanel of panel.panels) {\r\n          processPanel(rowPanel);\r\n        }\r\n      }\r\n    }\r\n\r\n    // templatize template vars\r\n    for (const variable of saveModel.templating.list) {\r\n      if (variable.type === 'query') {\r\n        templateizeDatasourceUsage(variable);\r\n        variable.options = [];\r\n        variable.current = {};\r\n        variable.refresh = variable.refresh > 0 ? variable.refresh : 1;\r\n      }\r\n    }\r\n\r\n    // templatize annotations vars\r\n    for (const annotationDef of saveModel.annotations.list) {\r\n      templateizeDatasourceUsage(annotationDef);\r\n    }\r\n\r\n    // add grafana version\r\n    requires['grafana'] = {\r\n      type: 'grafana',\r\n      id: 'grafana',\r\n      name: 'Grafana',\r\n      version: config.buildInfo.version,\r\n    };\r\n\r\n    return Promise.all(promises)\r\n      .then(() => {\r\n        _.each(datasources, (value, key) => {\r\n          inputs.push(value);\r\n        });\r\n\r\n        // templatize constants\r\n        for (const variable of saveModel.templating.list) {\r\n          if (variable.type === 'constant') {\r\n            const refName = 'VAR_' + variable.name.replace(' ', '_').toUpperCase();\r\n            inputs.push({\r\n              name: refName,\r\n              type: 'constant',\r\n              label: variable.label || variable.name,\r\n              value: variable.current.value,\r\n              description: '',\r\n            });\r\n            // update current and option\r\n            variable.query = '${' + refName + '}';\r\n            variable.options[0] = variable.current = {\r\n              value: variable.query,\r\n              text: variable.query,\r\n            };\r\n          }\r\n        }\r\n\r\n        // make inputs and requires a top thing\r\n        const newObj = {};\r\n        newObj['__inputs'] = inputs;\r\n        newObj['__requires'] = _.sortBy(requires, ['id']);\r\n\r\n        _.defaults(newObj, saveModel);\r\n        return newObj;\r\n      })\r\n      .catch(err => {\r\n        console.log('Export failed:', err);\r\n        return {\r\n          error: err,\r\n        };\r\n      });\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport { saveAs } from 'file-saver';\r\n\r\nimport coreModule from 'app/core/core_module';\r\nimport { DashboardExporter } from './exporter';\r\n\r\nexport class DashExportCtrl {\r\n  dash: any;\r\n  exporter: DashboardExporter;\r\n  dismiss: () => void;\r\n\r\n  /** @ngInject */\r\n  constructor(private dashboardSrv, datasourceSrv, private $scope, private $rootScope) {\r\n    this.exporter = new DashboardExporter(datasourceSrv);\r\n\r\n    this.exporter.makeExportable(this.dashboardSrv.getCurrent()).then(dash => {\r\n      this.$scope.$apply(() => {\r\n        this.dash = dash;\r\n      });\r\n    });\r\n  }\r\n\r\n  save() {\r\n    const blob = new Blob([angular.toJson(this.dash, true)], {\r\n      type: 'application/json;charset=utf-8',\r\n    });\r\n    saveAs(blob, this.dash.title + '-' + new Date().getTime() + '.json');\r\n  }\r\n\r\n  saveJson() {\r\n    const clone = this.dash;\r\n    const editScope = this.$rootScope.$new();\r\n    editScope.object = clone;\r\n    editScope.enableCopy = true;\r\n\r\n    this.$rootScope.appEvent('show-modal', {\r\n      src: 'public/app/partials/edit_json.html',\r\n      scope: editScope,\r\n    });\r\n\r\n    this.dismiss();\r\n  }\r\n}\r\n\r\nexport function dashExportDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/export/export_modal.html',\r\n    controller: DashExportCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: { dismiss: '&' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('dashExportModal', dashExportDirective);\r\n","import angular from 'angular';\r\nimport * as fileExport from 'app/core/utils/file_export';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class ExportDataModalCtrl {\r\n  private data: any[];\r\n  private panel: string;\r\n  asRows = true;\r\n  dateTimeFormat = 'YYYY-MM-DDTHH:mm:ssZ';\r\n  excel = false;\r\n\r\n  export() {\r\n    if (this.panel === 'table') {\r\n      fileExport.exportTableDataToCsv(this.data, this.excel);\r\n    } else {\r\n      if (this.asRows) {\r\n        fileExport.exportSeriesListToCsv(this.data, this.dateTimeFormat, this.excel);\r\n      } else {\r\n        fileExport.exportSeriesListToCsvColumns(this.data, this.dateTimeFormat, this.excel);\r\n      }\r\n    }\r\n\r\n    this.dismiss();\r\n  }\r\n\r\n  dismiss() {\r\n    appEvents.emit('hide-modal');\r\n  }\r\n}\r\n\r\nexport function exportDataModal() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/export_data/export_data_modal.html',\r\n    controller: ExportDataModalCtrl,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      panel: '<',\r\n      data: '<', // The difference to '=' is that the bound properties are not watched\r\n    },\r\n    bindToController: true,\r\n  };\r\n}\r\n\r\nangular.module('grafana.directives').directive('exportDataModal', exportDataModal);\r\n","import _ from 'lodash';\r\nimport angular from 'angular';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nexport class AdHocFiltersCtrl {\r\n  segments: any;\r\n  variable: any;\r\n  removeTagFilterSegment: any;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private uiSegmentSrv,\r\n    private datasourceSrv,\r\n    private $q,\r\n    private variableSrv,\r\n    $scope,\r\n    private $rootScope\r\n  ) {\r\n    this.removeTagFilterSegment = uiSegmentSrv.newSegment({\r\n      fake: true,\r\n      value: '-- remove filter --',\r\n    });\r\n    this.buildSegmentModel();\r\n    this.$rootScope.onAppEvent('template-variable-value-updated', this.buildSegmentModel.bind(this), $scope);\r\n  }\r\n\r\n  buildSegmentModel() {\r\n    this.segments = [];\r\n\r\n    if (this.variable.value && !_.isArray(this.variable.value)) {\r\n    }\r\n\r\n    for (const tag of this.variable.filters) {\r\n      if (this.segments.length > 0) {\r\n        this.segments.push(this.uiSegmentSrv.newCondition('AND'));\r\n      }\r\n\r\n      if (tag.key !== undefined && tag.value !== undefined) {\r\n        this.segments.push(this.uiSegmentSrv.newKey(tag.key));\r\n        this.segments.push(this.uiSegmentSrv.newOperator(tag.operator));\r\n        this.segments.push(this.uiSegmentSrv.newKeyValue(tag.value));\r\n      }\r\n    }\r\n\r\n    this.segments.push(this.uiSegmentSrv.newPlusButton());\r\n  }\r\n\r\n  getOptions(segment, index) {\r\n    if (segment.type === 'operator') {\r\n      return this.$q.when(this.uiSegmentSrv.newOperators(['=', '!=', '<', '>', '=~', '!~']));\r\n    }\r\n\r\n    if (segment.type === 'condition') {\r\n      return this.$q.when([this.uiSegmentSrv.newSegment('AND')]);\r\n    }\r\n\r\n    return this.datasourceSrv.get(this.variable.datasource).then(ds => {\r\n      const options: any = {};\r\n      let promise = null;\r\n\r\n      if (segment.type !== 'value') {\r\n        promise = ds.getTagKeys();\r\n      } else {\r\n        options.key = this.segments[index - 2].value;\r\n        promise = ds.getTagValues(options);\r\n      }\r\n\r\n      return promise.then(results => {\r\n        results = _.map(results, segment => {\r\n          return this.uiSegmentSrv.newSegment({ value: segment.text });\r\n        });\r\n\r\n        // add remove option for keys\r\n        if (segment.type === 'key') {\r\n          results.splice(0, 0, angular.copy(this.removeTagFilterSegment));\r\n        }\r\n        return results;\r\n      });\r\n    });\r\n  }\r\n\r\n  segmentChanged(segment, index) {\r\n    this.segments[index] = segment;\r\n\r\n    // handle remove tag condition\r\n    if (segment.value === this.removeTagFilterSegment.value) {\r\n      this.segments.splice(index, 3);\r\n      if (this.segments.length === 0) {\r\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\r\n      } else if (this.segments.length > 2) {\r\n        this.segments.splice(Math.max(index - 1, 0), 1);\r\n        if (this.segments[this.segments.length - 1].type !== 'plus-button') {\r\n          this.segments.push(this.uiSegmentSrv.newPlusButton());\r\n        }\r\n      }\r\n    } else {\r\n      if (segment.type === 'plus-button') {\r\n        if (index > 2) {\r\n          this.segments.splice(index, 0, this.uiSegmentSrv.newCondition('AND'));\r\n        }\r\n        this.segments.push(this.uiSegmentSrv.newOperator('='));\r\n        this.segments.push(this.uiSegmentSrv.newFake('select tag value', 'value', 'query-segment-value'));\r\n        segment.type = 'key';\r\n        segment.cssClass = 'query-segment-key';\r\n      }\r\n\r\n      if (index + 1 === this.segments.length) {\r\n        this.segments.push(this.uiSegmentSrv.newPlusButton());\r\n      }\r\n    }\r\n\r\n    this.updateVariableModel();\r\n  }\r\n\r\n  updateVariableModel() {\r\n    const filters = [];\r\n    let filterIndex = -1;\r\n    let hasFakes = false;\r\n\r\n    this.segments.forEach(segment => {\r\n      if (segment.type === 'value' && segment.fake) {\r\n        hasFakes = true;\r\n        return;\r\n      }\r\n\r\n      switch (segment.type) {\r\n        case 'key': {\r\n          filters.push({ key: segment.value });\r\n          filterIndex += 1;\r\n          break;\r\n        }\r\n        case 'value': {\r\n          filters[filterIndex].value = segment.value;\r\n          break;\r\n        }\r\n        case 'operator': {\r\n          filters[filterIndex].operator = segment.value;\r\n          break;\r\n        }\r\n        case 'condition': {\r\n          filters[filterIndex].condition = segment.value;\r\n          break;\r\n        }\r\n      }\r\n    });\r\n\r\n    if (hasFakes) {\r\n      return;\r\n    }\r\n\r\n    this.variable.setFilters(filters);\r\n    this.variableSrv.variableUpdated(this.variable, true);\r\n  }\r\n}\r\n\r\nconst template = `\r\n<div class=\"gf-form-inline\">\r\n  <div class=\"gf-form\" ng-repeat=\"segment in ctrl.segments\">\r\n    <metric-segment segment=\"segment\" get-options=\"ctrl.getOptions(segment, $index)\"\r\n                    on-change=\"ctrl.segmentChanged(segment, $index)\"></metric-segment>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport function adHocFiltersComponent() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: AdHocFiltersCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      variable: '=',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('adHocFilters', adHocFiltersComponent);\r\n","import { coreModule } from 'app/core/core';\r\n\r\nconst template = `\r\n<div class=\"gf-form-select-wrapper max-width-18\">\r\n  <select class=\"gf-form-input\" ng-model=\"panel.repeat\" ng-options=\"f.value as f.text for f in variables\" ng-change=\"optionChanged()\">\r\n  <option value=\"\"></option>\r\n</div>\r\n`;\r\n\r\n/** @ngInject */\r\nfunction dashRepeatOptionDirective(variableSrv) {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    scope: {\r\n      panel: '=',\r\n    },\r\n    link: function(scope, element) {\r\n      element.css({ display: 'block', width: '100%' });\r\n\r\n      scope.variables = variableSrv.variables.map(item => {\r\n        return { text: item.name, value: item.name };\r\n      });\r\n\r\n      if (scope.variables.length === 0) {\r\n        scope.variables.unshift({\r\n          text: 'No template variables found',\r\n          value: null,\r\n        });\r\n      }\r\n\r\n      scope.variables.unshift({ text: 'Disabled', value: null });\r\n\r\n      // if repeat is set and no direction set to horizontal\r\n      if (scope.panel.repeat && !scope.panel.repeatDirection) {\r\n        scope.panel.repeatDirection = 'h';\r\n      }\r\n\r\n      scope.optionChanged = function() {\r\n        if (scope.panel.repeat) {\r\n          scope.panel.repeatDirection = 'h';\r\n        }\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('dashRepeatOption', dashRepeatOptionDirective);\r\n","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport { PanelModel } from '../panel_model';\r\nimport { PanelContainer } from './PanelContainer';\r\nimport templateSrv from 'app/features/templating/template_srv';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport interface DashboardRowProps {\r\n  panel: PanelModel;\r\n  getPanelContainer: () => PanelContainer;\r\n}\r\n\r\nexport class DashboardRow extends React.Component<DashboardRowProps, any> {\r\n  dashboard: any;\r\n  panelContainer: any;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      collapsed: this.props.panel.collapsed,\r\n    };\r\n\r\n    this.panelContainer = this.props.getPanelContainer();\r\n    this.dashboard = this.panelContainer.getDashboard();\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.openSettings = this.openSettings.bind(this);\r\n    this.delete = this.delete.bind(this);\r\n    this.update = this.update.bind(this);\r\n  }\r\n\r\n  toggle() {\r\n    this.dashboard.toggleRow(this.props.panel);\r\n\r\n    this.setState(prevState => {\r\n      return { collapsed: !prevState.collapsed };\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.dashboard.processRepeats();\r\n    this.forceUpdate();\r\n  }\r\n\r\n  openSettings() {\r\n    appEvents.emit('show-modal', {\r\n      templateHtml: `<row-options row=\"model.row\" on-updated=\"model.onUpdated()\" dismiss=\"dismiss()\"></row-options>`,\r\n      modalClass: 'modal--narrow',\r\n      model: {\r\n        row: this.props.panel,\r\n        onUpdated: this.update.bind(this),\r\n      },\r\n    });\r\n  }\r\n\r\n  delete() {\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete Row',\r\n      text: 'Are you sure you want to remove this row and all its panels?',\r\n      altActionText: 'Delete row only',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        const panelContainer = this.props.getPanelContainer();\r\n        const dashboard = panelContainer.getDashboard();\r\n        dashboard.removeRow(this.props.panel, true);\r\n      },\r\n      onAltAction: () => {\r\n        const panelContainer = this.props.getPanelContainer();\r\n        const dashboard = panelContainer.getDashboard();\r\n        dashboard.removeRow(this.props.panel, false);\r\n      },\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const classes = classNames({\r\n      'dashboard-row': true,\r\n      'dashboard-row--collapsed': this.state.collapsed,\r\n    });\r\n    const chevronClass = classNames({\r\n      fa: true,\r\n      'fa-chevron-down': !this.state.collapsed,\r\n      'fa-chevron-right': this.state.collapsed,\r\n    });\r\n\r\n    const title = templateSrv.replaceWithText(this.props.panel.title, this.props.panel.scopedVars);\r\n    const count = this.props.panel.panels ? this.props.panel.panels.length : 0;\r\n    const panels = count === 1 ? 'panel' : 'panels';\r\n\r\n    return (\r\n      <div className={classes}>\r\n        <a className=\"dashboard-row__title pointer\" onClick={this.toggle}>\r\n          <i className={chevronClass} />\r\n          {title}\r\n          <span className=\"dashboard-row__panel_count\">\r\n            ({count} {panels})\r\n          </span>\r\n        </a>\r\n        {this.dashboard.meta.canEdit === true && (\r\n          <div className=\"dashboard-row__actions\">\r\n            <a className=\"pointer\" onClick={this.openSettings}>\r\n              <i className=\"fa fa-cog\" />\r\n            </a>\r\n            <a className=\"pointer\" onClick={this.delete}>\r\n              <i className=\"fa fa-trash\" />\r\n            </a>\r\n          </div>\r\n        )}\r\n        {this.state.collapsed === true && (\r\n          <div className=\"dashboard-row__toggle-target\" onClick={this.toggle}>\r\n            &nbsp;\r\n          </div>\r\n        )}\r\n        <div className=\"dashboard-row__drag grid-drag-handle\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport baron from 'baron';\r\n\r\nexport interface Props {\r\n  children: any;\r\n  className: string;\r\n}\r\n\r\nexport default class ScrollBar extends React.Component<Props, any> {\r\n  private container: any;\r\n  private scrollbar: baron;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollbar = baron({\r\n      root: this.container.parentElement,\r\n      scroller: this.container,\r\n      bar: '.baron__bar',\r\n      barOnCls: '_scrollbar',\r\n      scrollingCls: '_scrolling',\r\n      track: '.baron__track',\r\n    });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.scrollbar.update();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.scrollbar.dispose();\r\n  }\r\n\r\n  // methods can be invoked by outside\r\n  setScrollTop(top) {\r\n    if (this.container) {\r\n      this.container.scrollTop = top;\r\n      this.scrollbar.update();\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  setScrollLeft(left) {\r\n    if (this.container) {\r\n      this.container.scrollLeft = left;\r\n      this.scrollbar.update();\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  update() {\r\n    this.scrollbar.update();\r\n  }\r\n\r\n  handleRef = ref => {\r\n    this.container = ref;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"baron baron__root baron__clipper\">\r\n        <div className={this.props.className + ' baron__scroller'} ref={this.handleRef}>\r\n          {this.props.children}\r\n        </div>\r\n\r\n        <div className=\"baron__track\">\r\n          <div className=\"baron__bar\" />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport _ from 'lodash';\r\nimport classNames from 'classnames';\r\nimport config from 'app/core/config';\r\nimport { PanelModel } from '../panel_model';\r\nimport { PanelContainer } from './PanelContainer';\r\nimport ScrollBar from 'app/core/components/ScrollBar/ScrollBar';\r\nimport store from 'app/core/store';\r\nimport { LS_PANEL_COPY_KEY } from 'app/core/constants';\r\nimport Highlighter from 'react-highlight-words';\r\n\r\nexport interface AddPanelPanelProps {\r\n  panel: PanelModel;\r\n  getPanelContainer: () => PanelContainer;\r\n}\r\n\r\nexport interface AddPanelPanelState {\r\n  filter: string;\r\n  panelPlugins: any[];\r\n  copiedPanelPlugins: any[];\r\n  tab: string;\r\n}\r\n\r\nexport class AddPanelPanel extends React.Component<AddPanelPanelProps, AddPanelPanelState> {\r\n  private scrollbar: ScrollBar;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleCloseAddPanel = this.handleCloseAddPanel.bind(this);\r\n    this.renderPanelItem = this.renderPanelItem.bind(this);\r\n    this.panelSizeChanged = this.panelSizeChanged.bind(this);\r\n\r\n    this.state = {\r\n      panelPlugins: this.getPanelPlugins(''),\r\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\r\n      filter: '',\r\n      tab: 'Add',\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.panel.events.on('panel-size-changed', this.panelSizeChanged);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.panel.events.off('panel-size-changed', this.panelSizeChanged);\r\n  }\r\n\r\n  panelSizeChanged() {\r\n    setTimeout(() => {\r\n      this.scrollbar.update();\r\n    });\r\n  }\r\n\r\n  getPanelPlugins(filter) {\r\n    let panels = _.chain(config.panels)\r\n      .filter({ hideFromList: false })\r\n      .map(item => item)\r\n      .value();\r\n\r\n    // add special row type\r\n    panels.push({ id: 'row', name: 'Row', sort: 8, info: { logos: { small: 'public/img/icn-row.svg' } } });\r\n\r\n    panels = this.filterPanels(panels, filter);\r\n\r\n    // add sort by sort property\r\n    return _.sortBy(panels, 'sort');\r\n  }\r\n\r\n  getCopiedPanelPlugins(filter) {\r\n    const panels = _.chain(config.panels)\r\n      .filter({ hideFromList: false })\r\n      .map(item => item)\r\n      .value();\r\n    let copiedPanels = [];\r\n\r\n    const copiedPanelJson = store.get(LS_PANEL_COPY_KEY);\r\n    if (copiedPanelJson) {\r\n      const copiedPanel = JSON.parse(copiedPanelJson);\r\n      const pluginInfo = _.find(panels, { id: copiedPanel.type });\r\n      if (pluginInfo) {\r\n        const pluginCopy = _.cloneDeep(pluginInfo);\r\n        pluginCopy.name = copiedPanel.title;\r\n        pluginCopy.sort = -1;\r\n        pluginCopy.defaults = copiedPanel;\r\n        copiedPanels.push(pluginCopy);\r\n      }\r\n    }\r\n\r\n    copiedPanels = this.filterPanels(copiedPanels, filter);\r\n\r\n    return _.sortBy(copiedPanels, 'sort');\r\n  }\r\n\r\n  onAddPanel = panelPluginInfo => {\r\n    const panelContainer = this.props.getPanelContainer();\r\n    const dashboard = panelContainer.getDashboard();\r\n    const { gridPos } = this.props.panel;\r\n\r\n    const newPanel: any = {\r\n      type: panelPluginInfo.id,\r\n      title: 'Panel Title',\r\n      gridPos: { x: gridPos.x, y: gridPos.y, w: gridPos.w, h: gridPos.h },\r\n    };\r\n\r\n    if (panelPluginInfo.id === 'row') {\r\n      newPanel.title = 'Row title';\r\n      newPanel.gridPos = { x: 0, y: 0 };\r\n    }\r\n\r\n    // apply panel template / defaults\r\n    if (panelPluginInfo.defaults) {\r\n      _.defaults(newPanel, panelPluginInfo.defaults);\r\n      newPanel.gridPos.w = panelPluginInfo.defaults.gridPos.w;\r\n      newPanel.gridPos.h = panelPluginInfo.defaults.gridPos.h;\r\n      newPanel.title = panelPluginInfo.defaults.title;\r\n      store.delete(LS_PANEL_COPY_KEY);\r\n    }\r\n\r\n    dashboard.addPanel(newPanel);\r\n    dashboard.removePanel(this.props.panel);\r\n  };\r\n\r\n  handleCloseAddPanel(evt) {\r\n    evt.preventDefault();\r\n    const panelContainer = this.props.getPanelContainer();\r\n    const dashboard = panelContainer.getDashboard();\r\n    dashboard.removePanel(dashboard.panels[0]);\r\n  }\r\n\r\n  renderText(text: string) {\r\n    const searchWords = this.state.filter.split('');\r\n    return <Highlighter highlightClassName=\"highlight-search-match\" textToHighlight={text} searchWords={searchWords} />;\r\n  }\r\n\r\n  renderPanelItem(panel, index) {\r\n    return (\r\n      <div key={index} className=\"add-panel__item\" onClick={() => this.onAddPanel(panel)} title={panel.name}>\r\n        <img className=\"add-panel__item-img\" src={panel.info.logos.small} />\r\n        <div className=\"add-panel__item-name\">{this.renderText(panel.name)}</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  noCopiedPanelPlugins() {\r\n    return <div className=\"add-panel__no-panels\">No copied panels yet.</div>;\r\n  }\r\n\r\n  filterChange(evt) {\r\n    this.setState({\r\n      filter: evt.target.value,\r\n      panelPlugins: this.getPanelPlugins(evt.target.value),\r\n      copiedPanelPlugins: this.getCopiedPanelPlugins(evt.target.value),\r\n    });\r\n  }\r\n\r\n  filterKeyPress(evt) {\r\n    if (evt.key === 'Enter') {\r\n      const panel = _.head(this.state.panelPlugins);\r\n      if (panel) {\r\n        this.onAddPanel(panel);\r\n      }\r\n    }\r\n  }\r\n\r\n  filterPanels(panels, filter) {\r\n    const regex = new RegExp(filter, 'i');\r\n    return panels.filter(panel => {\r\n      return regex.test(panel.name);\r\n    });\r\n  }\r\n\r\n  openCopy() {\r\n    this.setState({\r\n      tab: 'Copy',\r\n      filter: '',\r\n      panelPlugins: this.getPanelPlugins(''),\r\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\r\n    });\r\n  }\r\n\r\n  openAdd() {\r\n    this.setState({\r\n      tab: 'Add',\r\n      filter: '',\r\n      panelPlugins: this.getPanelPlugins(''),\r\n      copiedPanelPlugins: this.getCopiedPanelPlugins(''),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const addClass = classNames({\r\n      'active active--panel': this.state.tab === 'Add',\r\n      '': this.state.tab === 'Copy',\r\n    });\r\n\r\n    const copyClass = classNames({\r\n      '': this.state.tab === 'Add',\r\n      'active active--panel': this.state.tab === 'Copy',\r\n    });\r\n\r\n    let panelTab;\r\n\r\n    if (this.state.tab === 'Add') {\r\n      panelTab = this.state.panelPlugins.map(this.renderPanelItem);\r\n    } else if (this.state.tab === 'Copy') {\r\n      if (this.state.copiedPanelPlugins.length > 0) {\r\n        panelTab = this.state.copiedPanelPlugins.map(this.renderPanelItem);\r\n      } else {\r\n        panelTab = this.noCopiedPanelPlugins();\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"panel-container add-panel-container\">\r\n        <div className=\"add-panel\">\r\n          <div className=\"add-panel__header\">\r\n            <i className=\"gicon gicon-add-panel\" />\r\n            <span className=\"add-panel__title\">New Panel</span>\r\n            <ul className=\"gf-tabs\">\r\n              <li className=\"gf-tabs-item\">\r\n                <div className={'gf-tabs-link pointer ' + addClass} onClick={this.openAdd.bind(this)}>\r\n                  Add\r\n                </div>\r\n              </li>\r\n              <li className=\"gf-tabs-item\">\r\n                <div className={'gf-tabs-link pointer ' + copyClass} onClick={this.openCopy.bind(this)}>\r\n                  Paste\r\n                </div>\r\n              </li>\r\n            </ul>\r\n            <button className=\"add-panel__close\" onClick={this.handleCloseAddPanel}>\r\n              <i className=\"fa fa-close\" />\r\n            </button>\r\n          </div>\r\n          <ScrollBar ref={element => (this.scrollbar = element)} className=\"add-panel__items\">\r\n            <div className=\"add-panel__searchbar\">\r\n              <label className=\"gf-form gf-form--grow gf-form--has-input-icon\">\r\n                <input\r\n                  type=\"text\"\r\n                  autoFocus\r\n                  className=\"gf-form-input gf-form--grow\"\r\n                  placeholder=\"Panel Search Filter\"\r\n                  value={this.state.filter}\r\n                  onChange={this.filterChange.bind(this)}\r\n                  onKeyPress={this.filterKeyPress.bind(this)}\r\n                />\r\n                <i className=\"gf-form-input-icon fa fa-search\" />\r\n              </label>\r\n            </div>\r\n            {panelTab}\r\n          </ScrollBar>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {PanelModel} from '../panel_model';\r\nimport {PanelContainer} from './PanelContainer';\r\nimport {AttachedPanel} from './PanelLoader';\r\nimport {DashboardRow} from './DashboardRow';\r\nimport {AddPanelPanel} from './AddPanelPanel';\r\n\r\nexport interface DashboardPanelProps {\r\n  panel: PanelModel;\r\n  getPanelContainer: () => PanelContainer;\r\n}\r\n\r\nexport class DashboardPanel extends React.Component<DashboardPanelProps, any> {\r\n  element: any;\r\n  attachedPanel: AttachedPanel;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.element) {\r\n      return;\r\n    }\r\n\r\n    const panelContainer = this.props.getPanelContainer();\r\n    const dashboard = panelContainer.getDashboard();\r\n    const loader = panelContainer.getPanelLoader();\r\n    this.attachedPanel = loader.load(this.element, this.props.panel, dashboard);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.attachedPanel) {\r\n      this.attachedPanel.destroy();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    // special handling for rows\r\n    if (this.props.panel.type === 'row') {\r\n      return <DashboardRow panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\r\n    }\r\n\r\n    if (this.props.panel.type === 'add-panel') {\r\n      return <AddPanelPanel panel={this.props.panel} getPanelContainer={this.props.getPanelContainer} />;\r\n    }\r\n\r\n    return (\r\n      <div ref={element => this.element = element} className=\"panel-height-helper\" />\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\nimport ReactGridLayout from 'react-grid-layout';\r\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\r\nimport { DashboardPanel } from './DashboardPanel';\r\nimport { DashboardModel } from '../dashboard_model';\r\nimport { PanelContainer } from './PanelContainer';\r\nimport { PanelModel } from '../panel_model';\r\nimport classNames from 'classnames';\r\nimport sizeMe from 'react-sizeme';\r\n\r\nlet lastGridWidth = 1200;\r\n\r\nfunction GridWrapper({\r\n  size,\r\n  layout,\r\n  onLayoutChange,\r\n  children,\r\n  onDragStop,\r\n  onResize,\r\n  onResizeStop,\r\n  onWidthChange,\r\n  className,\r\n  isResizable,\r\n  isDraggable,\r\n}) {\r\n  if (size.width === 0) {\r\n    console.log('size is zero!');\r\n  }\r\n\r\n  const width = size.width > 0 ? size.width : lastGridWidth;\r\n  if (width !== lastGridWidth) {\r\n    onWidthChange();\r\n    lastGridWidth = width;\r\n  }\r\n\r\n  return (\r\n    <ReactGridLayout\r\n      width={lastGridWidth}\r\n      className={className}\r\n      isDraggable={isDraggable}\r\n      isResizable={isResizable}\r\n      measureBeforeMount={false}\r\n      containerPadding={[0, 0]}\r\n      useCSSTransforms={true}\r\n      margin={[GRID_CELL_VMARGIN, GRID_CELL_VMARGIN]}\r\n      cols={GRID_COLUMN_COUNT}\r\n      rowHeight={GRID_CELL_HEIGHT}\r\n      draggableHandle=\".grid-drag-handle\"\r\n      layout={layout}\r\n      onResize={onResize}\r\n      onResizeStop={onResizeStop}\r\n      onDragStop={onDragStop}\r\n      onLayoutChange={onLayoutChange}\r\n    >\r\n      {children}\r\n    </ReactGridLayout>\r\n  );\r\n}\r\n\r\nconst SizedReactLayoutGrid = sizeMe({ monitorWidth: true })(GridWrapper);\r\n\r\nexport interface DashboardGridProps {\r\n  getPanelContainer: () => PanelContainer;\r\n}\r\n\r\nexport class DashboardGrid extends React.Component<DashboardGridProps, any> {\r\n  gridToPanelMap: any;\r\n  panelContainer: PanelContainer;\r\n  dashboard: DashboardModel;\r\n  panelMap: { [id: string]: PanelModel };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.panelContainer = this.props.getPanelContainer();\r\n    this.onLayoutChange = this.onLayoutChange.bind(this);\r\n    this.onResize = this.onResize.bind(this);\r\n    this.onResizeStop = this.onResizeStop.bind(this);\r\n    this.onDragStop = this.onDragStop.bind(this);\r\n    this.onWidthChange = this.onWidthChange.bind(this);\r\n\r\n    this.state = { animated: false };\r\n\r\n    // subscribe to dashboard events\r\n    this.dashboard = this.panelContainer.getDashboard();\r\n    this.dashboard.on('panel-added', this.triggerForceUpdate.bind(this));\r\n    this.dashboard.on('panel-removed', this.triggerForceUpdate.bind(this));\r\n    this.dashboard.on('repeats-processed', this.triggerForceUpdate.bind(this));\r\n    this.dashboard.on('view-mode-changed', this.triggerForceUpdate.bind(this));\r\n    this.dashboard.on('row-collapsed', this.triggerForceUpdate.bind(this));\r\n    this.dashboard.on('row-expanded', this.triggerForceUpdate.bind(this));\r\n  }\r\n\r\n  buildLayout() {\r\n    const layout = [];\r\n    this.panelMap = {};\r\n\r\n    for (const panel of this.dashboard.panels) {\r\n      const stringId = panel.id.toString();\r\n      this.panelMap[stringId] = panel;\r\n\r\n      if (!panel.gridPos) {\r\n        console.log('panel without gridpos');\r\n        continue;\r\n      }\r\n\r\n      const panelPos: any = {\r\n        i: stringId,\r\n        x: panel.gridPos.x,\r\n        y: panel.gridPos.y,\r\n        w: panel.gridPos.w,\r\n        h: panel.gridPos.h,\r\n      };\r\n\r\n      if (panel.type === 'row') {\r\n        panelPos.w = GRID_COLUMN_COUNT;\r\n        panelPos.h = 1;\r\n        panelPos.isResizable = false;\r\n        panelPos.isDraggable = panel.collapsed;\r\n      }\r\n\r\n      layout.push(panelPos);\r\n    }\r\n\r\n    return layout;\r\n  }\r\n\r\n  onLayoutChange(newLayout) {\r\n    for (const newPos of newLayout) {\r\n      this.panelMap[newPos.i].updateGridPos(newPos);\r\n    }\r\n\r\n    this.dashboard.sortPanelsByGridPos();\r\n  }\r\n\r\n  triggerForceUpdate() {\r\n    this.forceUpdate();\r\n  }\r\n\r\n  onWidthChange() {\r\n    for (const panel of this.dashboard.panels) {\r\n      panel.resizeDone();\r\n    }\r\n  }\r\n\r\n  updateGridPos(item, layout) {\r\n    this.panelMap[item.i].updateGridPos(item);\r\n\r\n    // react-grid-layout has a bug (#670), and onLayoutChange() is only called when the component is mounted.\r\n    // So it's required to call it explicitly when panel resized or moved to save layout changes.\r\n    this.onLayoutChange(layout);\r\n  }\r\n\r\n  onResize(layout, oldItem, newItem) {\r\n    this.panelMap[newItem.i].updateGridPos(newItem);\r\n  }\r\n\r\n  onResizeStop(layout, oldItem, newItem) {\r\n    this.updateGridPos(newItem, layout);\r\n    this.panelMap[newItem.i].resizeDone();\r\n  }\r\n\r\n  onDragStop(layout, oldItem, newItem) {\r\n    this.updateGridPos(newItem, layout);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setTimeout(() => {\r\n      this.setState(() => {\r\n        return { animated: true };\r\n      });\r\n    });\r\n  }\r\n\r\n  renderPanels() {\r\n    const panelElements = [];\r\n\r\n    for (const panel of this.dashboard.panels) {\r\n      const panelClasses = classNames({ panel: true, 'panel--fullscreen': panel.fullscreen });\r\n      panelElements.push(\r\n        <div key={panel.id.toString()} className={panelClasses}>\r\n          <DashboardPanel panel={panel} getPanelContainer={this.props.getPanelContainer} />\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return panelElements;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <SizedReactLayoutGrid\r\n        className={classNames({ layout: true, animated: this.state.animated })}\r\n        layout={this.buildLayout()}\r\n        isResizable={this.dashboard.meta.canEdit}\r\n        isDraggable={this.dashboard.meta.canEdit}\r\n        onLayoutChange={this.onLayoutChange}\r\n        onWidthChange={this.onWidthChange}\r\n        onDragStop={this.onDragStop}\r\n        onResize={this.onResize}\r\n        onResizeStop={this.onResizeStop}\r\n      >\r\n        {this.renderPanels()}\r\n      </SizedReactLayoutGrid>\r\n    );\r\n  }\r\n}\r\n","import angular from 'angular';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nexport interface AttachedPanel {\r\n  destroy();\r\n}\r\n\r\nexport class PanelLoader {\r\n  /** @ngInject */\r\n  constructor(private $compile, private $rootScope) {}\r\n\r\n  load(elem, panel, dashboard): AttachedPanel {\r\n    const template = '<plugin-component type=\"panel\" class=\"panel-height-helper\"></plugin-component>';\r\n    const panelScope = this.$rootScope.$new();\r\n    panelScope.panel = panel;\r\n    panelScope.dashboard = dashboard;\r\n\r\n    const compiledElem = this.$compile(template)(panelScope);\r\n    const rootNode = angular.element(elem);\r\n    rootNode.append(compiledElem);\r\n\r\n    return {\r\n      destroy: () => {\r\n        panelScope.$destroy();\r\n        compiledElem.remove();\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\ncoreModule.service('panelLoader', PanelLoader);\r\n","import { react2AngularDirective } from 'app/core/utils/react2angular';\r\nimport { DashboardGrid } from './DashboardGrid';\r\n\r\nreact2AngularDirective('dashboardGrid', DashboardGrid, [\r\n  ['getPanelContainer', { watchDepth: 'reference', wrapApply: false }],\r\n]);\r\n","import { coreModule } from 'app/core/core';\r\n\r\nexport class RowOptionsCtrl {\r\n  row: any;\r\n  source: any;\r\n  dismiss: any;\r\n  onUpdated: any;\r\n  showDelete: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor() {\r\n    this.source = this.row;\r\n    this.row = this.row.getSaveModel();\r\n  }\r\n\r\n  update() {\r\n    this.source.title = this.row.title;\r\n    this.source.repeat = this.row.repeat;\r\n    this.onUpdated();\r\n    this.dismiss();\r\n  }\r\n}\r\n\r\nexport function rowOptionsDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/partials/row_options.html',\r\n    controller: RowOptionsCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      row: '=',\r\n      dismiss: '&',\r\n      onUpdated: '&',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('rowOptions', rowOptionsDirective);\r\n","import _ from 'lodash';\r\nimport coreModule from 'app/core/core_module';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class FolderPickerCtrl {\r\n  initialTitle: string;\r\n  initialFolderId?: number;\r\n  labelClass: string;\r\n  onChange: any;\r\n  onLoad: any;\r\n  onCreateFolder: any;\r\n  enterFolderCreation: any;\r\n  exitFolderCreation: any;\r\n  enableCreateNew: boolean;\r\n  enableReset: boolean;\r\n  rootName = 'General';\r\n  folder: any;\r\n  createNewFolder: boolean;\r\n  newFolderName: string;\r\n  newFolderNameTouched: boolean;\r\n  hasValidationError: boolean;\r\n  validationError: any;\r\n  isEditor: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private validationSrv, private contextSrv) {\r\n    this.isEditor = this.contextSrv.isEditor;\r\n\r\n    if (!this.labelClass) {\r\n      this.labelClass = 'width-7';\r\n    }\r\n\r\n    this.loadInitialValue();\r\n  }\r\n\r\n  getOptions(query) {\r\n    const params = {\r\n      query: query,\r\n      type: 'dash-folder',\r\n      permission: 'Edit',\r\n    };\r\n\r\n    return this.backendSrv.get('api/search', params).then(result => {\r\n      if (\r\n        this.isEditor &&\r\n        (query === '' ||\r\n          query.toLowerCase() === 'g' ||\r\n          query.toLowerCase() === 'ge' ||\r\n          query.toLowerCase() === 'gen' ||\r\n          query.toLowerCase() === 'gene' ||\r\n          query.toLowerCase() === 'gener' ||\r\n          query.toLowerCase() === 'genera' ||\r\n          query.toLowerCase() === 'general')\r\n      ) {\r\n        result.unshift({ title: this.rootName, id: 0 });\r\n      }\r\n\r\n      if (this.isEditor && this.enableCreateNew && query === '') {\r\n        result.unshift({ title: '-- New Folder --', id: -1 });\r\n      }\r\n\r\n      if (this.enableReset && query === '' && this.initialTitle !== '') {\r\n        result.unshift({ title: this.initialTitle, id: null });\r\n      }\r\n\r\n      return _.map(result, item => {\r\n        return { text: item.title, value: item.id };\r\n      });\r\n    });\r\n  }\r\n\r\n  onFolderChange(option) {\r\n    if (!option) {\r\n      option = { value: 0, text: this.rootName };\r\n    } else if (option.value === -1) {\r\n      this.createNewFolder = true;\r\n      this.enterFolderCreation();\r\n      return;\r\n    }\r\n    this.onChange({ $folder: { id: option.value, title: option.text } });\r\n  }\r\n\r\n  newFolderNameChanged() {\r\n    this.newFolderNameTouched = true;\r\n\r\n    this.validationSrv\r\n      .validateNewFolderName(this.newFolderName)\r\n      .then(() => {\r\n        this.hasValidationError = false;\r\n      })\r\n      .catch(err => {\r\n        this.hasValidationError = true;\r\n        this.validationError = err.message;\r\n      });\r\n  }\r\n\r\n  createFolder(evt) {\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n\r\n    return this.backendSrv.createFolder({ title: this.newFolderName }).then(result => {\r\n      appEvents.emit('alert-success', ['Folder Created', 'OK']);\r\n\r\n      this.closeCreateFolder();\r\n      this.folder = { text: result.title, value: result.id };\r\n      this.onFolderChange(this.folder);\r\n    });\r\n  }\r\n\r\n  cancelCreateFolder(evt) {\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n\r\n    this.closeCreateFolder();\r\n    this.loadInitialValue();\r\n  }\r\n\r\n  private closeCreateFolder() {\r\n    this.exitFolderCreation();\r\n    this.createNewFolder = false;\r\n    this.hasValidationError = false;\r\n    this.validationError = null;\r\n    this.newFolderName = '';\r\n    this.newFolderNameTouched = false;\r\n  }\r\n\r\n  private loadInitialValue() {\r\n    const resetFolder = { text: this.initialTitle, value: null };\r\n    const rootFolder = { text: this.rootName, value: 0 };\r\n    this.getOptions('').then(result => {\r\n      let folder;\r\n      if (this.initialFolderId) {\r\n        folder = _.find(result, { value: this.initialFolderId });\r\n      } else if (this.enableReset && this.initialTitle && this.initialFolderId === null) {\r\n        folder = resetFolder;\r\n      }\r\n\r\n      if (!folder) {\r\n        if (this.isEditor) {\r\n          folder = rootFolder;\r\n        } else {\r\n          folder = result.length > 0 ? result[0] : resetFolder;\r\n        }\r\n      }\r\n\r\n      this.folder = folder;\r\n\r\n      // if this is not the same as our initial value notify parent\r\n      if (this.folder.id !== this.initialFolderId) {\r\n        this.onChange({ $folder: { id: this.folder.value, title: this.folder.text } });\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function folderPicker() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/folder_picker/folder_picker.html',\r\n    controller: FolderPickerCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      initialTitle: '<',\r\n      initialFolderId: '<',\r\n      labelClass: '@',\r\n      rootName: '@',\r\n      onChange: '&',\r\n      onCreateFolder: '&',\r\n      enterFolderCreation: '&',\r\n      exitFolderCreation: '&',\r\n      enableCreateNew: '@',\r\n      enableReset: '@',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('folderPicker', folderPicker);\r\n","import coreModule from 'app/core/core_module';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class MoveToFolderCtrl {\r\n  dashboards: any;\r\n  folder: any;\r\n  dismiss: any;\r\n  afterSave: any;\r\n  isValidFolderSelection = true;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv) {}\r\n\r\n  onFolderChange(folder) {\r\n    this.folder = folder;\r\n  }\r\n\r\n  save() {\r\n    return this.backendSrv.moveDashboards(this.dashboards, this.folder).then(result => {\r\n      if (result.successCount > 0) {\r\n        const header = `Dashboard${result.successCount === 1 ? '' : 's'} Moved`;\r\n        const msg = `${result.successCount} dashboard${result.successCount === 1 ? '' : 's'} moved to ${\r\n          this.folder.title\r\n        }`;\r\n        appEvents.emit('alert-success', [header, msg]);\r\n      }\r\n\r\n      if (result.totalCount === result.alreadyInFolderCount) {\r\n        appEvents.emit('alert-error', ['Error', `Dashboards already belongs to folder ${this.folder.title}`]);\r\n      }\r\n\r\n      this.dismiss();\r\n      return this.afterSave();\r\n    });\r\n  }\r\n\r\n  onEnterFolderCreation() {\r\n    this.isValidFolderSelection = false;\r\n  }\r\n\r\n  onExitFolderCreation() {\r\n    this.isValidFolderSelection = true;\r\n  }\r\n}\r\n\r\nexport function moveToFolderModal() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/move_to_folder_modal/move_to_folder.html',\r\n    controller: MoveToFolderCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      dismiss: '&',\r\n      dashboards: '=',\r\n      afterSave: '&',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('moveToFolderModal', moveToFolderModal);\r\n","import { coreModule, appEvents, contextSrv } from 'app/core/core';\r\nimport { DashboardModel } from '../dashboard_model';\r\nimport $ from 'jquery';\r\nimport _ from 'lodash';\r\nimport angular from 'angular';\r\nimport config from 'app/core/config';\r\n\r\nexport class SettingsCtrl {\r\n  dashboard: DashboardModel;\r\n  isOpen: boolean;\r\n  viewId: string;\r\n  json: string;\r\n  alertCount: number;\r\n  canSaveAs: boolean;\r\n  canSave: boolean;\r\n  canDelete: boolean;\r\n  sections: any[];\r\n  hasUnsavedFolderChange: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(\r\n    private $scope,\r\n    private $route,\r\n    private $location,\r\n    private $rootScope,\r\n    private backendSrv,\r\n    private dashboardSrv\r\n  ) {\r\n    // temp hack for annotations and variables editors\r\n    // that rely on inherited scope\r\n    $scope.dashboard = this.dashboard;\r\n\r\n    this.$scope.$on('$destroy', () => {\r\n      this.dashboard.updateSubmenuVisibility();\r\n      this.$rootScope.$broadcast('refresh');\r\n      setTimeout(() => {\r\n        this.$rootScope.appEvent('dash-scroll', { restore: true });\r\n      });\r\n    });\r\n\r\n    this.canSaveAs = this.dashboard.meta.canEdit && contextSrv.hasEditPermissionInFolders;\r\n    this.canSave = this.dashboard.meta.canSave;\r\n    this.canDelete = this.dashboard.meta.canSave;\r\n\r\n    this.buildSectionList();\r\n    this.onRouteUpdated();\r\n\r\n    this.$rootScope.onAppEvent('$routeUpdate', this.onRouteUpdated.bind(this), $scope);\r\n    this.$rootScope.appEvent('dash-scroll', { animate: false, pos: 0 });\r\n    this.$rootScope.onAppEvent('dashboard-saved', this.onPostSave.bind(this), $scope);\r\n  }\r\n\r\n  buildSectionList() {\r\n    this.sections = [];\r\n\r\n    if (this.dashboard.meta.canEdit) {\r\n      this.sections.push({\r\n        title: 'General',\r\n        id: 'settings',\r\n        icon: 'gicon gicon-preferences',\r\n      });\r\n      this.sections.push({\r\n        title: 'Annotations',\r\n        id: 'annotations',\r\n        icon: 'gicon gicon-annotation',\r\n      });\r\n      this.sections.push({\r\n        title: 'Variables',\r\n        id: 'templating',\r\n        icon: 'gicon gicon-variable',\r\n      });\r\n      this.sections.push({\r\n        title: 'Links',\r\n        id: 'links',\r\n        icon: 'gicon gicon-link',\r\n      });\r\n    }\r\n\r\n    if (this.dashboard.id && this.dashboard.meta.canSave) {\r\n      this.sections.push({\r\n        title: 'Versions',\r\n        id: 'versions',\r\n        icon: 'fa fa-fw fa-history',\r\n      });\r\n    }\r\n\r\n    if (this.dashboard.id && this.dashboard.meta.canAdmin) {\r\n      this.sections.push({\r\n        title: 'Permissions',\r\n        id: 'permissions',\r\n        icon: 'fa fa-fw fa-lock',\r\n      });\r\n    }\r\n\r\n    if (this.dashboard.meta.canMakeEditable) {\r\n      this.sections.push({\r\n        title: 'General',\r\n        icon: 'gicon gicon-preferences',\r\n        id: 'make_editable',\r\n      });\r\n    }\r\n\r\n    this.sections.push({\r\n      title: 'JSON Model',\r\n      id: 'dashboard_json',\r\n      icon: 'gicon gicon-json',\r\n    });\r\n\r\n    const params = this.$location.search();\r\n    const url = this.$location.path();\r\n\r\n    for (const section of this.sections) {\r\n      const sectionParams = _.defaults({ editview: section.id }, params);\r\n      section.url = config.appSubUrl + url + '?' + $.param(sectionParams);\r\n    }\r\n  }\r\n\r\n  onRouteUpdated() {\r\n    this.viewId = this.$location.search().editview;\r\n\r\n    if (this.viewId) {\r\n      this.json = angular.toJson(this.dashboard.getSaveModelClone(), true);\r\n    }\r\n\r\n    if (this.viewId === 'settings' && this.dashboard.meta.canMakeEditable) {\r\n      this.viewId = 'make_editable';\r\n    }\r\n\r\n    const currentSection = _.find(this.sections, { id: this.viewId });\r\n    if (!currentSection) {\r\n      this.sections.unshift({\r\n        title: 'Not found',\r\n        id: '404',\r\n        icon: 'fa fa-fw fa-warning',\r\n      });\r\n      this.viewId = '404';\r\n    }\r\n  }\r\n\r\n  openSaveAsModal() {\r\n    this.dashboardSrv.showSaveAsModal();\r\n  }\r\n\r\n  saveDashboard() {\r\n    this.dashboardSrv.saveDashboard();\r\n  }\r\n\r\n  saveDashboardJson() {\r\n    this.dashboardSrv.saveJSONDashboard(this.json).then(() => {\r\n      this.$route.reload();\r\n    });\r\n  }\r\n\r\n  onPostSave() {\r\n    this.hasUnsavedFolderChange = false;\r\n  }\r\n\r\n  hideSettings() {\r\n    const urlParams = this.$location.search();\r\n    delete urlParams.editview;\r\n    setTimeout(() => {\r\n      this.$rootScope.$apply(() => {\r\n        this.$location.search(urlParams);\r\n      });\r\n    });\r\n  }\r\n\r\n  makeEditable() {\r\n    this.dashboard.editable = true;\r\n    this.dashboard.meta.canMakeEditable = false;\r\n    this.dashboard.meta.canEdit = true;\r\n    this.dashboard.meta.canSave = true;\r\n    this.canDelete = true;\r\n    this.viewId = 'settings';\r\n    this.buildSectionList();\r\n\r\n    const currentSection = _.find(this.sections, { id: this.viewId });\r\n    this.$location.url(currentSection.url);\r\n  }\r\n\r\n  deleteDashboard() {\r\n    let confirmText = '';\r\n    let text2 = this.dashboard.title;\r\n\r\n    const alerts = _.sumBy(this.dashboard.panels, panel => {\r\n      return panel.alert ? 1 : 0;\r\n    });\r\n\r\n    if (alerts > 0) {\r\n      confirmText = 'DELETE';\r\n      text2 = `This dashboard contains ${alerts} alerts. Deleting this dashboard will also delete those alerts`;\r\n    }\r\n\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Do you want to delete this dashboard?',\r\n      text2: text2,\r\n      icon: 'fa-trash',\r\n      confirmText: confirmText,\r\n      yesText: 'Delete',\r\n      onConfirm: () => {\r\n        this.dashboard.meta.canSave = false;\r\n        this.deleteDashboardConfirmed();\r\n      },\r\n    });\r\n  }\r\n\r\n  deleteDashboardConfirmed() {\r\n    this.backendSrv.deleteDashboard(this.dashboard.uid).then(() => {\r\n      appEvents.emit('alert-success', ['Dashboard Deleted', this.dashboard.title + ' has been deleted']);\r\n      this.$location.url('/');\r\n    });\r\n  }\r\n\r\n  onFolderChange(folder) {\r\n    this.dashboard.meta.folderId = folder.id;\r\n    this.dashboard.meta.folderTitle = folder.title;\r\n    this.hasUnsavedFolderChange = true;\r\n  }\r\n\r\n  getFolder() {\r\n    return {\r\n      id: this.dashboard.meta.folderId,\r\n      title: this.dashboard.meta.folderTitle,\r\n      url: this.dashboard.meta.folderUrl,\r\n    };\r\n  }\r\n}\r\n\r\nexport function dashboardSettings() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/dashboard/settings/settings.html',\r\n    controller: SettingsCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    transclude: true,\r\n    scope: { dashboard: '=' },\r\n  };\r\n}\r\n\r\ncoreModule.directive('dashboardSettings', dashboardSettings);\r\n","export class DashboardListCtrl {\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\r\n  }\r\n}\r\n","export class FolderPageLoader {\r\n  constructor(private backendSrv) {}\r\n\r\n  load(ctrl, uid, activeChildId) {\r\n    ctrl.navModel = {\r\n      main: {\r\n        icon: 'fa fa-folder-open',\r\n        id: 'manage-folder',\r\n        subTitle: 'Manage folder dashboards & permissions',\r\n        url: '',\r\n        text: '',\r\n        breadcrumbs: [{ title: 'Dashboards', url: 'dashboards' }],\r\n        children: [\r\n          {\r\n            active: activeChildId === 'manage-folder-dashboards',\r\n            icon: 'fa fa-fw fa-th-large',\r\n            id: 'manage-folder-dashboards',\r\n            text: 'Dashboards',\r\n            url: 'dashboards',\r\n          },\r\n          {\r\n            active: activeChildId === 'manage-folder-permissions',\r\n            icon: 'fa fa-fw fa-lock',\r\n            id: 'manage-folder-permissions',\r\n            text: 'Permissions',\r\n            url: 'dashboards/permissions',\r\n          },\r\n          {\r\n            active: activeChildId === 'manage-folder-settings',\r\n            icon: 'fa fa-fw fa-cog',\r\n            id: 'manage-folder-settings',\r\n            text: 'Settings',\r\n            url: 'dashboards/settings',\r\n          },\r\n        ],\r\n      },\r\n    };\r\n\r\n    return this.backendSrv.getFolderByUid(uid).then(folder => {\r\n      ctrl.folderId = folder.id;\r\n      const folderTitle = folder.title;\r\n      const folderUrl = folder.url;\r\n      ctrl.navModel.main.text = folderTitle;\r\n\r\n      const dashTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-dashboards');\r\n      dashTab.url = folderUrl;\r\n\r\n      if (folder.canAdmin) {\r\n        const permTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-permissions');\r\n        permTab.url = folderUrl + '/permissions';\r\n\r\n        const settingsTab = ctrl.navModel.main.children.find(child => child.id === 'manage-folder-settings');\r\n        settingsTab.url = folderUrl + '/settings';\r\n      } else {\r\n        ctrl.navModel.main.children = [dashTab];\r\n      }\r\n\r\n      return folder;\r\n    });\r\n  }\r\n}\r\n","import { FolderPageLoader } from './folder_page_loader';\r\nimport locationUtil from 'app/core/utils/location_util';\r\n\r\nexport class FolderDashboardsCtrl {\r\n  navModel: any;\r\n  folderId: number;\r\n  uid: string;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, navModelSrv, private $routeParams, $location) {\r\n    if (this.$routeParams.uid) {\r\n      this.uid = $routeParams.uid;\r\n\r\n      const loader = new FolderPageLoader(this.backendSrv);\r\n\r\n      loader.load(this, this.uid, 'manage-folder-dashboards').then(folder => {\r\n        const url = locationUtil.stripBaseFromUrl(folder.url);\r\n\r\n        if (url !== $location.path()) {\r\n          $location.path(url).replace();\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { FolderPageLoader } from './folder_page_loader';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class FolderSettingsCtrl {\r\n  folderPageLoader: FolderPageLoader;\r\n  navModel: any;\r\n  folderId: number;\r\n  uid: string;\r\n  canSave = false;\r\n  folder: any;\r\n  title: string;\r\n  hasChanged: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, navModelSrv, private $routeParams, private $location) {\r\n    if (this.$routeParams.uid) {\r\n      this.uid = $routeParams.uid;\r\n\r\n      this.folderPageLoader = new FolderPageLoader(this.backendSrv);\r\n      this.folderPageLoader.load(this, this.uid, 'manage-folder-settings').then(folder => {\r\n        if ($location.path() !== folder.meta.url) {\r\n          $location.path(`${folder.meta.url}/settings`).replace();\r\n        }\r\n\r\n        this.folder = folder;\r\n        this.canSave = this.folder.canSave;\r\n        this.title = this.folder.title;\r\n      });\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.titleChanged();\r\n\r\n    if (!this.hasChanged) {\r\n      return;\r\n    }\r\n\r\n    this.folder.title = this.title.trim();\r\n\r\n    return this.backendSrv\r\n      .updateFolder(this.folder)\r\n      .then(result => {\r\n        if (result.url !== this.$location.path()) {\r\n          this.$location.url(result.url + '/settings');\r\n        }\r\n\r\n        appEvents.emit('dashboard-saved');\r\n        appEvents.emit('alert-success', ['Folder saved']);\r\n      })\r\n      .catch(this.handleSaveFolderError);\r\n  }\r\n\r\n  titleChanged() {\r\n    this.hasChanged = this.folder.title.toLowerCase() !== this.title.trim().toLowerCase();\r\n  }\r\n\r\n  delete(evt) {\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n\r\n    appEvents.emit('confirm-modal', {\r\n      title: 'Delete',\r\n      text: `Do you want to delete this folder and all its dashboards?`,\r\n      icon: 'fa-trash',\r\n      yesText: 'Delete',\r\n      onConfirm: () => {\r\n        return this.backendSrv.deleteFolder(this.uid).then(() => {\r\n          appEvents.emit('alert-success', ['Folder Deleted', `${this.folder.title} has been deleted`]);\r\n          this.$location.url('dashboards');\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  handleSaveFolderError(err) {\r\n    if (err.data && err.data.status === 'version-mismatch') {\r\n      err.isHandled = true;\r\n\r\n      appEvents.emit('confirm-modal', {\r\n        title: 'Conflict',\r\n        text: 'Someone else has updated this folder.',\r\n        text2: 'Would you still like to save this folder?',\r\n        yesText: 'Save & Overwrite',\r\n        icon: 'fa-warning',\r\n        onConfirm: () => {\r\n          this.backendSrv.updateFolder(this.folder, { overwrite: true });\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport config from 'app/core/config';\r\n\r\nexport class DashboardImportCtrl {\r\n  navModel: any;\r\n  step: number;\r\n  jsonText: string;\r\n  parseError: string;\r\n  nameExists: boolean;\r\n  uidExists: boolean;\r\n  dash: any;\r\n  inputs: any[];\r\n  inputsValid: boolean;\r\n  gnetUrl: string;\r\n  gnetError: string;\r\n  gnetInfo: any;\r\n  titleTouched: boolean;\r\n  hasNameValidationError: boolean;\r\n  nameValidationError: any;\r\n  hasUidValidationError: boolean;\r\n  uidValidationError: any;\r\n  autoGenerateUid: boolean;\r\n  autoGenerateUidValue: string;\r\n  folderId: number;\r\n  initialFolderTitle: string;\r\n  isValidFolderSelection: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private validationSrv, navModelSrv, private $location, $routeParams) {\r\n    this.navModel = navModelSrv.getNav('create', 'import');\r\n\r\n    this.step = 1;\r\n    this.nameExists = false;\r\n    this.uidExists = false;\r\n    this.autoGenerateUid = true;\r\n    this.autoGenerateUidValue = 'auto-generated';\r\n    this.folderId = $routeParams.folderId ? Number($routeParams.folderId) || 0 : null;\r\n    this.initialFolderTitle = 'Select a folder';\r\n\r\n    // check gnetId in url\r\n    if ($routeParams.gnetId) {\r\n      this.gnetUrl = $routeParams.gnetId;\r\n      this.checkGnetDashboard();\r\n    }\r\n  }\r\n\r\n  onUpload(dash) {\r\n    this.dash = dash;\r\n    this.dash.id = null;\r\n    this.step = 2;\r\n    this.inputs = [];\r\n\r\n    if (this.dash.__inputs) {\r\n      for (const input of this.dash.__inputs) {\r\n        const inputModel = {\r\n          name: input.name,\r\n          label: input.label,\r\n          info: input.description,\r\n          value: input.value,\r\n          type: input.type,\r\n          pluginId: input.pluginId,\r\n          options: [],\r\n        };\r\n\r\n        if (input.type === 'datasource') {\r\n          this.setDatasourceOptions(input, inputModel);\r\n        } else if (!inputModel.info) {\r\n          inputModel.info = 'Specify a string constant';\r\n        }\r\n\r\n        this.inputs.push(inputModel);\r\n      }\r\n    }\r\n\r\n    this.inputsValid = this.inputs.length === 0;\r\n    this.titleChanged();\r\n    this.uidChanged(true);\r\n  }\r\n\r\n  setDatasourceOptions(input, inputModel) {\r\n    const sources = _.filter(config.datasources, val => {\r\n      return val.type === input.pluginId;\r\n    });\r\n\r\n    if (sources.length === 0) {\r\n      inputModel.info = 'No data sources of type ' + input.pluginName + ' found';\r\n    } else if (!inputModel.info) {\r\n      inputModel.info = 'Select a ' + input.pluginName + ' data source';\r\n    }\r\n\r\n    inputModel.options = sources.map(val => {\r\n      return { text: val.name, value: val.name };\r\n    });\r\n  }\r\n\r\n  inputValueChanged() {\r\n    this.inputsValid = true;\r\n    for (const input of this.inputs) {\r\n      if (!input.value) {\r\n        this.inputsValid = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  titleChanged() {\r\n    this.titleTouched = true;\r\n    this.nameExists = false;\r\n\r\n    this.validationSrv\r\n      .validateNewDashboardName(this.folderId, this.dash.title)\r\n      .then(() => {\r\n        this.nameExists = false;\r\n        this.hasNameValidationError = false;\r\n      })\r\n      .catch(err => {\r\n        if (err.type === 'EXISTING') {\r\n          this.nameExists = true;\r\n        }\r\n\r\n        this.hasNameValidationError = true;\r\n        this.nameValidationError = err.message;\r\n      });\r\n  }\r\n\r\n  uidChanged(initial) {\r\n    this.uidExists = false;\r\n    this.hasUidValidationError = false;\r\n\r\n    if (initial === true && this.dash.uid) {\r\n      this.autoGenerateUidValue = 'value set';\r\n    }\r\n\r\n    this.backendSrv\r\n      .getDashboardByUid(this.dash.uid)\r\n      .then(res => {\r\n        this.uidExists = true;\r\n        this.hasUidValidationError = true;\r\n        this.uidValidationError = `Dashboard named '${res.dashboard.title}' in folder '${\r\n          res.meta.folderTitle\r\n        }' has the same uid`;\r\n      })\r\n      .catch(err => {\r\n        err.isHandled = true;\r\n      });\r\n  }\r\n\r\n  onFolderChange(folder) {\r\n    this.folderId = folder.id;\r\n    this.titleChanged();\r\n  }\r\n\r\n  onEnterFolderCreation() {\r\n    this.inputsValid = false;\r\n  }\r\n\r\n  onExitFolderCreation() {\r\n    this.inputValueChanged();\r\n  }\r\n\r\n  isValid() {\r\n    return this.inputsValid && this.folderId !== null;\r\n  }\r\n\r\n  saveDashboard() {\r\n    const inputs = this.inputs.map(input => {\r\n      return {\r\n        name: input.name,\r\n        type: input.type,\r\n        pluginId: input.pluginId,\r\n        value: input.value,\r\n      };\r\n    });\r\n\r\n    return this.backendSrv\r\n      .post('api/dashboards/import', {\r\n        dashboard: this.dash,\r\n        overwrite: true,\r\n        inputs: inputs,\r\n        folderId: this.folderId,\r\n      })\r\n      .then(res => {\r\n        this.$location.url(res.importedUrl);\r\n      });\r\n  }\r\n\r\n  loadJsonText() {\r\n    try {\r\n      this.parseError = '';\r\n      const dash = JSON.parse(this.jsonText);\r\n      this.onUpload(dash);\r\n    } catch (err) {\r\n      console.log(err);\r\n      this.parseError = err.message;\r\n      return;\r\n    }\r\n  }\r\n\r\n  checkGnetDashboard() {\r\n    this.gnetError = '';\r\n\r\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(this.gnetUrl);\r\n    let dashboardId;\r\n\r\n    if (match && match[1]) {\r\n      dashboardId = match[1];\r\n    } else if (match && match[2]) {\r\n      dashboardId = match[2];\r\n    } else {\r\n      this.gnetError = 'Could not find dashboard';\r\n    }\r\n\r\n    return this.backendSrv\r\n      .get('api/gnet/dashboards/' + dashboardId)\r\n      .then(res => {\r\n        this.gnetInfo = res;\r\n        // store reference to grafana.com\r\n        res.json.gnetId = res.id;\r\n        this.onUpload(res.json);\r\n      })\r\n      .catch(err => {\r\n        err.isHandled = true;\r\n        this.gnetError = err.data.message || err;\r\n      });\r\n  }\r\n\r\n  back() {\r\n    this.gnetUrl = '';\r\n    this.step = 1;\r\n    this.gnetError = '';\r\n    this.gnetInfo = '';\r\n  }\r\n}\r\n","import _ from 'lodash';\r\nimport coreModule from '../../core/core_module';\r\n\r\nexport class PlaylistsCtrl {\r\n  playlists: any;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private backendSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\r\n\r\n    backendSrv.get('/api/playlists').then(result => {\r\n      this.playlists = result.map(item => {\r\n        item.startUrl = `playlists/play/${item.id}`;\r\n        return item;\r\n      });\r\n    });\r\n  }\r\n\r\n  removePlaylistConfirmed(playlist) {\r\n    _.remove(this.playlists, { id: playlist.id });\r\n\r\n    this.backendSrv.delete('/api/playlists/' + playlist.id).then(\r\n      () => {\r\n        this.$scope.appEvent('alert-success', ['Playlist deleted', '']);\r\n      },\r\n      () => {\r\n        this.$scope.appEvent('alert-error', ['Unable to delete playlist', '']);\r\n        this.playlists.push(playlist);\r\n      }\r\n    );\r\n  }\r\n\r\n  removePlaylist(playlist) {\r\n    this.$scope.appEvent('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete playlist ' + playlist.name + '?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        this.removePlaylistConfirmed(playlist);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('PlaylistsCtrl', PlaylistsCtrl);\r\n","import appEvents from 'app/core/app_events';\r\nimport locationUtil from 'app/core/utils/location_util';\r\n\r\nexport class CreateFolderCtrl {\r\n  title = '';\r\n  navModel: any;\r\n  titleTouched = false;\r\n  hasValidationError: boolean;\r\n  validationError: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $location, private validationSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('dashboards', 'manage-dashboards', 0);\r\n  }\r\n\r\n  create() {\r\n    if (this.hasValidationError) {\r\n      return;\r\n    }\r\n\r\n    return this.backendSrv.createFolder({ title: this.title }).then(result => {\r\n      appEvents.emit('alert-success', ['Folder Created', 'OK']);\r\n      this.$location.url(locationUtil.stripBaseFromUrl(result.url));\r\n    });\r\n  }\r\n\r\n  titleChanged() {\r\n    this.titleTouched = true;\r\n\r\n    this.validationSrv\r\n      .validateNewFolderName(this.title)\r\n      .then(() => {\r\n        this.hasValidationError = false;\r\n      })\r\n      .catch(err => {\r\n        this.hasValidationError = true;\r\n        this.validationError = err.message;\r\n      });\r\n  }\r\n}\r\n","import './dashboard_ctrl';\r\nimport './alerting_srv';\r\nimport './history/history';\r\nimport './dashboard_loader_srv';\r\nimport './dashnav/dashnav';\r\nimport './submenu/submenu';\r\nimport './save_as_modal';\r\nimport './save_modal';\r\nimport './save_provisioned_modal';\r\nimport './shareModalCtrl';\r\nimport './share_snapshot_ctrl';\r\nimport './dashboard_srv';\r\nimport './view_state_srv';\r\nimport './validation_srv';\r\nimport './time_srv';\r\nimport './unsaved_changes_srv';\r\nimport './unsaved_changes_modal';\r\nimport './timepicker/timepicker';\r\nimport './upload';\r\nimport './export/export_modal';\r\nimport './export_data/export_data_modal';\r\nimport './ad_hoc_filters';\r\nimport './repeat_option/repeat_option';\r\nimport './dashgrid/DashboardGridDirective';\r\nimport './dashgrid/PanelLoader';\r\nimport './dashgrid/RowOptions';\r\nimport './folder_picker/folder_picker';\r\nimport './move_to_folder_modal/move_to_folder';\r\nimport './settings/settings';\r\n\r\nimport coreModule from 'app/core/core_module';\r\nimport { DashboardListCtrl } from './dashboard_list_ctrl';\r\nimport { FolderDashboardsCtrl } from './folder_dashboards_ctrl';\r\nimport { FolderSettingsCtrl } from './folder_settings_ctrl';\r\nimport { DashboardImportCtrl } from './dashboard_import_ctrl';\r\nimport { CreateFolderCtrl } from './create_folder_ctrl';\r\n\r\ncoreModule.controller('DashboardListCtrl', DashboardListCtrl);\r\ncoreModule.controller('FolderDashboardsCtrl', FolderDashboardsCtrl);\r\ncoreModule.controller('FolderSettingsCtrl', FolderSettingsCtrl);\r\ncoreModule.controller('DashboardImportCtrl', DashboardImportCtrl);\r\ncoreModule.controller('CreateFolderCtrl', CreateFolderCtrl);\r\n","import coreModule from '../../core/core_module';\r\n\r\nexport class PlaylistSearchCtrl {\r\n  query: any;\r\n  tagsMode: boolean;\r\n\r\n  searchStarted: any;\r\n\r\n  /** @ngInject */\r\n  constructor($timeout, private backendSrv) {\r\n    this.query = { query: '', tag: [], starred: false, limit: 20 };\r\n\r\n    $timeout(() => {\r\n      this.query.query = '';\r\n      this.query.type = 'dash-db';\r\n      this.searchDashboards();\r\n    }, 100);\r\n  }\r\n\r\n  searchDashboards() {\r\n    this.tagsMode = false;\r\n    const prom: any = {};\r\n\r\n    prom.promise = this.backendSrv.search(this.query).then(result => {\r\n      return {\r\n        dashboardResult: result,\r\n        tagResult: [],\r\n      };\r\n    });\r\n\r\n    this.searchStarted(prom);\r\n  }\r\n\r\n  showStarred() {\r\n    this.query.starred = !this.query.starred;\r\n    this.searchDashboards();\r\n  }\r\n\r\n  queryHasNoFilters() {\r\n    return this.query.query === '' && this.query.starred === false && this.query.tag.length === 0;\r\n  }\r\n\r\n  filterByTag(tag, evt) {\r\n    this.query.tag.push(tag);\r\n    this.searchDashboards();\r\n    if (evt) {\r\n      evt.stopPropagation();\r\n      evt.preventDefault();\r\n    }\r\n  }\r\n\r\n  getTags() {\r\n    const prom: any = {};\r\n    prom.promise = this.backendSrv.get('/api/dashboards/tags').then(result => {\r\n      return {\r\n        dashboardResult: [],\r\n        tagResult: result,\r\n      };\r\n    });\r\n\r\n    this.searchStarted(prom);\r\n  }\r\n}\r\n\r\nexport function playlistSearchDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'public/app/features/playlist/partials/playlist_search.html',\r\n    controller: PlaylistSearchCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      searchStarted: '&',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('playlistSearch', playlistSearchDirective);\r\n","import coreModule from '../../core/core_module';\r\nimport kbn from 'app/core/utils/kbn';\r\nimport appEvents from 'app/core/app_events';\r\nimport _ from 'lodash';\r\nimport { toUrlParams } from 'app/core/utils/url';\r\n\r\nclass PlaylistSrv {\r\n  private cancelPromise: any;\r\n  private dashboards: any;\r\n  private index: number;\r\n  private interval: any;\r\n  private startUrl: string;\r\n  isPlaying: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private $location: any, private $timeout: any, private backendSrv: any) {}\r\n\r\n  next() {\r\n    this.$timeout.cancel(this.cancelPromise);\r\n\r\n    const playedAllDashboards = this.index > this.dashboards.length - 1;\r\n    if (playedAllDashboards) {\r\n      window.location.href = this.startUrl;\r\n      return;\r\n    }\r\n\r\n    const dash = this.dashboards[this.index];\r\n    const queryParams = this.$location.search();\r\n    const filteredParams = _.pickBy(queryParams, value => value !== null);\r\n\r\n    this.$location.url('dashboard/' + dash.uri + '?' + toUrlParams(filteredParams));\r\n\r\n    this.index++;\r\n    this.cancelPromise = this.$timeout(() => this.next(), this.interval);\r\n  }\r\n\r\n  prev() {\r\n    this.index = Math.max(this.index - 2, 0);\r\n    this.next();\r\n  }\r\n\r\n  start(playlistId) {\r\n    this.stop();\r\n\r\n    this.startUrl = window.location.href;\r\n    this.index = 0;\r\n    this.isPlaying = true;\r\n\r\n    this.backendSrv.get(`/api/playlists/${playlistId}`).then(playlist => {\r\n      this.backendSrv.get(`/api/playlists/${playlistId}/dashboards`).then(dashboards => {\r\n        this.dashboards = dashboards;\r\n        this.interval = kbn.interval_to_ms(playlist.interval);\r\n        this.next();\r\n      });\r\n    });\r\n  }\r\n\r\n  stop() {\r\n    if (this.isPlaying) {\r\n      const queryParams = this.$location.search();\r\n      if (queryParams.kiosk) {\r\n        appEvents.emit('toggle-kiosk-mode', { exit: true });\r\n      }\r\n    }\r\n\r\n    this.index = 0;\r\n    this.isPlaying = false;\r\n\r\n    if (this.cancelPromise) {\r\n      this.$timeout.cancel(this.cancelPromise);\r\n    }\r\n  }\r\n}\r\n\r\ncoreModule.service('playlistSrv', PlaylistSrv);\r\n","import _ from 'lodash';\r\nimport coreModule from '../../core/core_module';\r\n\r\nexport class PlaylistEditCtrl {\r\n  filteredDashboards: any = [];\r\n  filteredTags: any = [];\r\n  searchQuery = '';\r\n  loading = false;\r\n  playlist: any = {\r\n    interval: '5m',\r\n  };\r\n\r\n  playlistItems: any = [];\r\n  dashboardresult: any = [];\r\n  tagresult: any = [];\r\n  navModel: any;\r\n  isNew: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private backendSrv, private $location, $route, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('dashboards', 'playlists', 0);\r\n    this.isNew = !$route.current.params.id;\r\n\r\n    if ($route.current.params.id) {\r\n      const playlistId = $route.current.params.id;\r\n\r\n      backendSrv.get('/api/playlists/' + playlistId).then(result => {\r\n        this.playlist = result;\r\n      });\r\n\r\n      backendSrv.get('/api/playlists/' + playlistId + '/items').then(result => {\r\n        this.playlistItems = result;\r\n      });\r\n    }\r\n  }\r\n\r\n  filterFoundPlaylistItems() {\r\n    this.filteredDashboards = _.reject(this.dashboardresult, playlistItem => {\r\n      return _.find(this.playlistItems, listPlaylistItem => {\r\n        return parseInt(listPlaylistItem.value) === playlistItem.id;\r\n      });\r\n    });\r\n\r\n    this.filteredTags = _.reject(this.tagresult, tag => {\r\n      return _.find(this.playlistItems, listPlaylistItem => {\r\n        return listPlaylistItem.value === tag.term;\r\n      });\r\n    });\r\n  }\r\n\r\n  addPlaylistItem(playlistItem) {\r\n    playlistItem.value = playlistItem.id.toString();\r\n    playlistItem.type = 'dashboard_by_id';\r\n    playlistItem.order = this.playlistItems.length + 1;\r\n\r\n    this.playlistItems.push(playlistItem);\r\n    this.filterFoundPlaylistItems();\r\n  }\r\n\r\n  addTagPlaylistItem(tag) {\r\n    const playlistItem: any = {\r\n      value: tag.term,\r\n      type: 'dashboard_by_tag',\r\n      order: this.playlistItems.length + 1,\r\n      title: tag.term,\r\n    };\r\n\r\n    this.playlistItems.push(playlistItem);\r\n    this.filterFoundPlaylistItems();\r\n  }\r\n\r\n  removePlaylistItem(playlistItem) {\r\n    _.remove(this.playlistItems, listedPlaylistItem => {\r\n      return playlistItem === listedPlaylistItem;\r\n    });\r\n    this.filterFoundPlaylistItems();\r\n  }\r\n\r\n  savePlaylist(playlist, playlistItems) {\r\n    let savePromise;\r\n\r\n    playlist.items = playlistItems;\r\n\r\n    savePromise = playlist.id\r\n      ? this.backendSrv.put('/api/playlists/' + playlist.id, playlist)\r\n      : this.backendSrv.post('/api/playlists', playlist);\r\n\r\n    savePromise.then(\r\n      () => {\r\n        this.$scope.appEvent('alert-success', ['Playlist saved', '']);\r\n        this.$location.path('/playlists');\r\n      },\r\n      () => {\r\n        this.$scope.appEvent('alert-error', ['Unable to save playlist', '']);\r\n      }\r\n    );\r\n  }\r\n\r\n  isPlaylistEmpty() {\r\n    return !this.playlistItems.length;\r\n  }\r\n\r\n  backToList() {\r\n    this.$location.path('/playlists');\r\n  }\r\n\r\n  searchStarted(promise) {\r\n    promise.then(data => {\r\n      this.dashboardresult = data.dashboardResult;\r\n      this.tagresult = data.tagResult;\r\n      this.filterFoundPlaylistItems();\r\n    });\r\n  }\r\n\r\n  movePlaylistItem(playlistItem, offset) {\r\n    const currentPosition = this.playlistItems.indexOf(playlistItem);\r\n    const newPosition = currentPosition + offset;\r\n\r\n    if (newPosition >= 0 && newPosition < this.playlistItems.length) {\r\n      this.playlistItems.splice(currentPosition, 1);\r\n      this.playlistItems.splice(newPosition, 0, playlistItem);\r\n    }\r\n  }\r\n\r\n  movePlaylistItemUp(playlistItem) {\r\n    this.movePlaylistItem(playlistItem, -1);\r\n  }\r\n\r\n  movePlaylistItemDown(playlistItem) {\r\n    this.movePlaylistItem(playlistItem, 1);\r\n  }\r\n}\r\n\r\ncoreModule.controller('PlaylistEditCtrl', PlaylistEditCtrl);\r\n","import angular from 'angular';\r\n\r\n/** @ngInject */\r\nfunction grafanaRoutes($routeProvider) {\r\n  $routeProvider\r\n    .when('/playlists', {\r\n      templateUrl: 'public/app/features/playlist/partials/playlists.html',\r\n      controllerAs: 'ctrl',\r\n      controller: 'PlaylistsCtrl',\r\n    })\r\n    .when('/playlists/create', {\r\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\r\n      controllerAs: 'ctrl',\r\n      controller: 'PlaylistEditCtrl',\r\n    })\r\n    .when('/playlists/edit/:id', {\r\n      templateUrl: 'public/app/features/playlist/partials/playlist.html',\r\n      controllerAs: 'ctrl',\r\n      controller: 'PlaylistEditCtrl',\r\n    })\r\n    .when('/playlists/play/:id', {\r\n      template: '',\r\n      resolve: {\r\n        init: function(playlistSrv, $route) {\r\n          const playlistId = $route.current.params.id;\r\n          playlistSrv.start(playlistId);\r\n        },\r\n      },\r\n    });\r\n}\r\n\r\nangular.module('grafana.routes').config(grafanaRoutes);\r\n","import './playlists_ctrl';\r\nimport './playlist_search';\r\nimport './playlist_srv';\r\nimport './playlist_edit_ctrl';\r\nimport './playlist_routes';\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class SnapshotsCtrl {\r\n  navModel: any;\r\n  snapshots: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $rootScope, private backendSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('dashboards', 'snapshots', 0);\r\n    this.backendSrv.get('/api/dashboard/snapshots').then(result => {\r\n      this.snapshots = result;\r\n    });\r\n  }\r\n\r\n  removeSnapshotConfirmed(snapshot) {\r\n    _.remove(this.snapshots, { key: snapshot.key });\r\n    this.backendSrv.delete('/api/snapshots/' + snapshot.key).then(\r\n      () => {},\r\n      () => {\r\n        this.snapshots.push(snapshot);\r\n      }\r\n    );\r\n  }\r\n\r\n  removeSnapshot(snapshot) {\r\n    this.$rootScope.appEvent('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete snapshot ' + snapshot.name + '?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-trash',\r\n      onConfirm: () => {\r\n        this.removeSnapshotConfirmed(snapshot);\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('SnapshotsCtrl', SnapshotsCtrl);\r\n","import $ from 'jquery';\r\nimport { coreModule } from 'app/core/core';\r\n\r\nconst template = `\r\n<span class=\"panel-title\">\r\n  <span class=\"icon-gf panel-alert-icon\"></span>\r\n  <span class=\"panel-title-text\">{{ctrl.panel.title | interpolateTemplateVars:this}}</span>\r\n  <span class=\"panel-menu-container dropdown\">\r\n    <span class=\"fa fa-caret-down panel-menu-toggle\" data-toggle=\"dropdown\"></span>\r\n    <ul class=\"dropdown-menu dropdown-menu--menu panel-menu\" role=\"menu\">\r\n      <li>\r\n        <a ng-click=\"ctrl.addDataQuery(datasource);\">\r\n          <i class=\"fa fa-cog\"></i> Edit <span class=\"dropdown-menu-item-shortcut\">e</span>\r\n        </a>\r\n      </li>\r\n      <li class=\"dropdown-submenu\">\r\n        <a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-cube\"></i> Actions</a>\r\n        <ul class=\"dropdown-menu panel-menu\">\r\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-flash\"></i> Add Annotation</a></li>\r\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-bullseye\"></i> Toggle Legend</a></li>\r\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-download\"></i> Export to CSV</a></li>\r\n          <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-eye\"></i> View JSON</a></li>\r\n        </ul>\r\n      </li>\r\n      <li><a ng-click=\"ctrl.addDataQuery(datasource);\"><i class=\"fa fa-trash\"></i> Remove</a></li>\r\n    </ul>\r\n  </span>\r\n  <span class=\"panel-time-info\" ng-if=\"ctrl.timeInfo\"><i class=\"fa fa-clock-o\"></i> {{ctrl.timeInfo}}</span>\r\n</span>`;\r\n\r\nfunction renderMenuItem(item, ctrl) {\r\n  let html = '';\r\n  let listItemClass = '';\r\n\r\n  if (item.divider) {\r\n    return '<li class=\"divider\"></li>';\r\n  }\r\n\r\n  if (item.submenu) {\r\n    listItemClass = 'dropdown-submenu';\r\n  }\r\n\r\n  html += `<li class=\"${listItemClass}\"><a `;\r\n\r\n  if (item.click) {\r\n    html += ` ng-click=\"${item.click}\"`;\r\n  }\r\n  if (item.href) {\r\n    html += ` href=\"${item.href}\"`;\r\n  }\r\n\r\n  html += `><i class=\"${item.icon}\"></i>`;\r\n  html += `<span class=\"dropdown-item-text\">${item.text}</span>`;\r\n\r\n  if (item.shortcut) {\r\n    html += `<span class=\"dropdown-menu-item-shortcut\">${item.shortcut}</span>`;\r\n  }\r\n\r\n  html += `</a>`;\r\n\r\n  if (item.submenu) {\r\n    html += '<ul class=\"dropdown-menu dropdown-menu--menu panel-menu\">';\r\n    for (const subitem of item.submenu) {\r\n      html += renderMenuItem(subitem, ctrl);\r\n    }\r\n    html += '</ul>';\r\n  }\r\n\r\n  html += `</li>`;\r\n  return html;\r\n}\r\n\r\nfunction createMenuTemplate(ctrl) {\r\n  let html = '';\r\n\r\n  for (const item of ctrl.getMenu()) {\r\n    html += renderMenuItem(item, ctrl);\r\n  }\r\n\r\n  return html;\r\n}\r\n\r\n/** @ngInject */\r\nfunction panelHeader($compile) {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    link: function(scope, elem, attrs) {\r\n      const menuElem = elem.find('.panel-menu');\r\n      let menuScope;\r\n      let isDragged;\r\n\r\n      elem.click(function(evt) {\r\n        const targetClass = evt.target.className;\r\n\r\n        // remove existing scope\r\n        if (menuScope) {\r\n          menuScope.$destroy();\r\n        }\r\n\r\n        menuScope = scope.$new();\r\n        const menuHtml = createMenuTemplate(scope.ctrl);\r\n        menuElem.html(menuHtml);\r\n        $compile(menuElem)(menuScope);\r\n\r\n        if (targetClass.indexOf('panel-title-text') >= 0 || targetClass.indexOf('panel-title') >= 0) {\r\n          togglePanelMenu(evt);\r\n        }\r\n      });\r\n\r\n      elem.find('.panel-menu-toggle').click(() => {\r\n        togglePanelStackPosition();\r\n      });\r\n\r\n      function togglePanelMenu(e) {\r\n        if (!isDragged) {\r\n          e.stopPropagation();\r\n          togglePanelStackPosition();\r\n          elem.find('[data-toggle=dropdown]').dropdown('toggle');\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Hack for adding special class 'dropdown-menu-open' to the panel.\r\n       * This class sets z-index for panel and prevents menu overlapping.\r\n       */\r\n      function togglePanelStackPosition() {\r\n        const menuOpenClass = 'dropdown-menu-open';\r\n        const panelGridClass = '.react-grid-item.panel';\r\n\r\n        let panelElem = elem\r\n          .find('[data-toggle=dropdown]')\r\n          .parentsUntil('.panel')\r\n          .parent();\r\n        const menuElem = elem.find('[data-toggle=dropdown]').parent();\r\n        panelElem = panelElem && panelElem.length ? panelElem[0] : undefined;\r\n        if (panelElem) {\r\n          panelElem = $(panelElem);\r\n          $(panelGridClass).removeClass(menuOpenClass);\r\n          const state = !menuElem.hasClass('open');\r\n          panelElem.toggleClass(menuOpenClass, state);\r\n        }\r\n      }\r\n\r\n      let mouseX, mouseY;\r\n      elem.mousedown(e => {\r\n        mouseX = e.pageX;\r\n        mouseY = e.pageY;\r\n      });\r\n\r\n      elem.mouseup(e => {\r\n        if (mouseX === e.pageX && mouseY === e.pageY) {\r\n          isDragged = false;\r\n        } else {\r\n          isDragged = true;\r\n        }\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('panelHeader', panelHeader);\r\n","import './snapshot_ctrl';\r\n","import angular from 'angular';\r\nimport $ from 'jquery';\r\nimport Drop from 'tether-drop';\r\nimport baron from 'baron';\r\n\r\nconst module = angular.module('grafana.directives');\r\n\r\nconst panelTemplate = `\r\n  <div class=\"panel-container\">\r\n    <div class=\"panel-header\" ng-class=\"{'grid-drag-handle': !ctrl.fullscreen}\">\r\n      <span class=\"panel-info-corner\">\r\n        <i class=\"fa\"></i>\r\n        <span class=\"panel-info-corner-inner\"></span>\r\n      </span>\r\n\r\n      <span class=\"panel-loading\" ng-show=\"ctrl.loading\">\r\n        <i class=\"fa fa-spinner fa-spin\"></i>\r\n      </span>\r\n\r\n      <panel-header class=\"panel-title-container\" panel-ctrl=\"ctrl\"></panel-header>\r\n    </div>\r\n\r\n    <div class=\"panel-content\">\r\n      <ng-transclude class=\"panel-height-helper\"></ng-transclude>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"panel-full-edit\" ng-if=\"ctrl.editMode\">\r\n    <div class=\"tabbed-view tabbed-view--panel-edit\">\r\n      <div class=\"tabbed-view-header\">\r\n        <h3 class=\"tabbed-view-panel-title\">\r\n          {{ctrl.pluginName}}\r\n        </h3>\r\n\r\n        <ul class=\"gf-tabs\">\r\n          <li class=\"gf-tabs-item\" ng-repeat=\"tab in ::ctrl.editorTabs\">\r\n            <a class=\"gf-tabs-link\" ng-click=\"ctrl.changeTab($index)\" ng-class=\"{active: ctrl.editorTabIndex === $index}\">\r\n              {{::tab.title}}\r\n            </a>\r\n          </li>\r\n        </ul>\r\n\r\n        <button class=\"tabbed-view-close-btn\" ng-click=\"ctrl.exitFullscreen();\">\r\n          <i class=\"fa fa-remove\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"tabbed-view-body\">\r\n        <div ng-repeat=\"tab in ctrl.editorTabs\" ng-if=\"ctrl.editorTabIndex === $index\">\r\n          <panel-editor-tab editor-tab=\"tab\" ctrl=\"ctrl\" index=\"$index\"></panel-editor-tab>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n`;\r\n\r\nmodule.directive('grafanaPanel', function($rootScope, $document, $timeout) {\r\n  return {\r\n    restrict: 'E',\r\n    template: panelTemplate,\r\n    transclude: true,\r\n    scope: { ctrl: '=' },\r\n    link: function(scope, elem) {\r\n      const panelContainer = elem.find('.panel-container');\r\n      const panelContent = elem.find('.panel-content');\r\n      const cornerInfoElem = elem.find('.panel-info-corner');\r\n      const ctrl = scope.ctrl;\r\n      let infoDrop;\r\n      let panelScrollbar;\r\n\r\n      // the reason for handling these classes this way is for performance\r\n      // limit the watchers on panels etc\r\n      let transparentLastState = false;\r\n      let lastHasAlertRule = false;\r\n      let lastAlertState;\r\n      let hasAlertRule;\r\n\r\n      function mouseEnter() {\r\n        panelContainer.toggleClass('panel-hover-highlight', true);\r\n        ctrl.dashboard.setPanelFocus(ctrl.panel.id);\r\n      }\r\n\r\n      function mouseLeave() {\r\n        panelContainer.toggleClass('panel-hover-highlight', false);\r\n        ctrl.dashboard.setPanelFocus(0);\r\n      }\r\n\r\n      function panelHeightUpdated() {\r\n        panelContent.css({ height: ctrl.height + 'px' });\r\n      }\r\n\r\n      function resizeScrollableContent() {\r\n        if (panelScrollbar) {\r\n          panelScrollbar.update();\r\n        }\r\n      }\r\n\r\n      // set initial transparency\r\n      if (ctrl.panel.transparent) {\r\n        transparentLastState = true;\r\n        panelContainer.addClass('panel-transparent', true);\r\n      }\r\n\r\n      // update scrollbar after mounting\r\n      ctrl.events.on('component-did-mount', () => {\r\n        if (ctrl.__proto__.constructor.scrollable) {\r\n          const scrollRootClass = 'baron baron__root baron__clipper panel-content--scrollable';\r\n          const scrollerClass = 'baron__scroller';\r\n          const scrollBarHTML = `\r\n            <div class=\"baron__track\">\r\n              <div class=\"baron__bar\"></div>\r\n            </div>\r\n          `;\r\n\r\n          const scrollRoot = panelContent;\r\n          const scroller = panelContent.find(':first').find(':first');\r\n\r\n          scrollRoot.addClass(scrollRootClass);\r\n          $(scrollBarHTML).appendTo(scrollRoot);\r\n          scroller.addClass(scrollerClass);\r\n\r\n          panelScrollbar = baron({\r\n            root: scrollRoot[0],\r\n            scroller: scroller[0],\r\n            bar: '.baron__bar',\r\n            barOnCls: '_scrollbar',\r\n            scrollingCls: '_scrolling',\r\n          });\r\n\r\n          panelScrollbar.scroll();\r\n        }\r\n      });\r\n\r\n      ctrl.events.on('panel-size-changed', () => {\r\n        ctrl.calculatePanelHeight();\r\n        panelHeightUpdated();\r\n        $timeout(() => {\r\n          resizeScrollableContent();\r\n          ctrl.render();\r\n        });\r\n      });\r\n\r\n      // set initial height\r\n      ctrl.calculatePanelHeight();\r\n      panelHeightUpdated();\r\n\r\n      ctrl.events.on('render', () => {\r\n        if (transparentLastState !== ctrl.panel.transparent) {\r\n          panelContainer.toggleClass('panel-transparent', ctrl.panel.transparent === true);\r\n          transparentLastState = ctrl.panel.transparent;\r\n        }\r\n\r\n        hasAlertRule = ctrl.panel.alert !== undefined;\r\n        if (lastHasAlertRule !== hasAlertRule) {\r\n          panelContainer.toggleClass('panel-has-alert', hasAlertRule);\r\n\r\n          lastHasAlertRule = hasAlertRule;\r\n        }\r\n\r\n        if (ctrl.alertState) {\r\n          if (lastAlertState) {\r\n            panelContainer.removeClass('panel-alert-state--' + lastAlertState);\r\n          }\r\n\r\n          if (ctrl.alertState.state === 'ok' || ctrl.alertState.state === 'alerting') {\r\n            panelContainer.addClass('panel-alert-state--' + ctrl.alertState.state);\r\n          }\r\n\r\n          lastAlertState = ctrl.alertState.state;\r\n        } else if (lastAlertState) {\r\n          panelContainer.removeClass('panel-alert-state--' + lastAlertState);\r\n          lastAlertState = null;\r\n        }\r\n      });\r\n\r\n      function updatePanelCornerInfo() {\r\n        const cornerMode = ctrl.getInfoMode();\r\n        cornerInfoElem[0].className = 'panel-info-corner panel-info-corner--' + cornerMode;\r\n\r\n        if (cornerMode) {\r\n          if (infoDrop) {\r\n            infoDrop.destroy();\r\n          }\r\n\r\n          infoDrop = new Drop({\r\n            target: cornerInfoElem[0],\r\n            content: function() {\r\n              return ctrl.getInfoContent({ mode: 'tooltip' });\r\n            },\r\n            classes: ctrl.error ? 'drop-error' : 'drop-help',\r\n            openOn: 'hover',\r\n            hoverOpenDelay: 100,\r\n            tetherOptions: {\r\n              attachment: 'bottom left',\r\n              targetAttachment: 'top left',\r\n              constraints: [\r\n                {\r\n                  to: 'window',\r\n                  attachment: 'together',\r\n                  pin: true,\r\n                },\r\n              ],\r\n            },\r\n          });\r\n        }\r\n      }\r\n\r\n      scope.$watchGroup(['ctrl.error', 'ctrl.panel.description'], updatePanelCornerInfo);\r\n      scope.$watchCollection('ctrl.panel.links', updatePanelCornerInfo);\r\n\r\n      cornerInfoElem.on('click', function() {\r\n        infoDrop.close();\r\n        scope.$apply(ctrl.openInspector.bind(ctrl));\r\n      });\r\n\r\n      elem.on('mouseenter', mouseEnter);\r\n      elem.on('mouseleave', mouseLeave);\r\n\r\n      scope.$on('$destroy', function() {\r\n        elem.off();\r\n        cornerInfoElem.off();\r\n\r\n        if (infoDrop) {\r\n          infoDrop.destroy();\r\n        }\r\n\r\n        if (panelScrollbar) {\r\n          panelScrollbar.dispose();\r\n        }\r\n      });\r\n    },\r\n  };\r\n});\r\n\r\nmodule.directive('panelHelpCorner', function($rootScope) {\r\n  return {\r\n    restrict: 'E',\r\n    template: `\r\n    <span class=\"alert-error panel-error small pointer\" ng-if=\"ctrl.error\" ng-click=\"ctrl.openInspector()\">\r\n    <span data-placement=\"top\" bs-tooltip=\"ctrl.error\">\r\n    <i class=\"fa fa-exclamation\"></i><span class=\"panel-error-arrow\"></span>\r\n    </span>\r\n    </span>\r\n    `,\r\n    link: function(scope, elem) {},\r\n  };\r\n});\r\n","import angular from 'angular';\r\nimport locationUtil from 'app/core/utils/location_util';\r\nimport appEvents from 'app/core/app_events';\r\n\r\nexport class SoloPanelCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $routeParams, $location, dashboardLoaderSrv, contextSrv, backendSrv) {\r\n    let panelId;\r\n\r\n    $scope.init = function() {\r\n      contextSrv.sidemenu = false;\r\n      appEvents.emit('toggle-sidemenu-hidden');\r\n\r\n      const params = $location.search();\r\n      panelId = parseInt(params.panelId);\r\n\r\n      $scope.onAppEvent('dashboard-initialized', $scope.initPanelScope);\r\n\r\n      // if no uid, redirect to new route based on slug\r\n      if (!($routeParams.type === 'script' || $routeParams.type === 'snapshot') && !$routeParams.uid) {\r\n        backendSrv.getDashboardBySlug($routeParams.slug).then(res => {\r\n          if (res) {\r\n            const url = locationUtil.stripBaseFromUrl(res.meta.url.replace('/d/', '/d-solo/'));\r\n            $location.path(url).replace();\r\n          }\r\n        });\r\n        return;\r\n      }\r\n\r\n      dashboardLoaderSrv.loadDashboard($routeParams.type, $routeParams.slug, $routeParams.uid).then(function(result) {\r\n        result.meta.soloMode = true;\r\n        $scope.initDashboard(result, $scope);\r\n      });\r\n    };\r\n\r\n    $scope.initPanelScope = function() {\r\n      const panelInfo = $scope.dashboard.getPanelInfoById(panelId);\r\n\r\n      // fake row ctrl scope\r\n      $scope.ctrl = {\r\n        dashboard: $scope.dashboard,\r\n      };\r\n\r\n      $scope.panel = panelInfo.panel;\r\n      $scope.panel.soloMode = true;\r\n      $scope.$index = 0;\r\n\r\n      if (!$scope.panel) {\r\n        $scope.appEvent('alert-error', ['Panel not found', '']);\r\n        return;\r\n      }\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.routes').controller('SoloPanelCtrl', SoloPanelCtrl);\r\n","import angular from 'angular';\r\n\r\nconst directiveModule = angular.module('grafana.directives');\r\n\r\n/** @ngInject */\r\nfunction panelEditorTab(dynamicDirectiveSrv) {\r\n  return dynamicDirectiveSrv.create({\r\n    scope: {\r\n      ctrl: '=',\r\n      editorTab: '=',\r\n      index: '=',\r\n    },\r\n    directive: scope => {\r\n      const pluginId = scope.ctrl.pluginId;\r\n      const tabIndex = scope.index;\r\n      // create a wrapper for directiveFn\r\n      // required for metrics tab directive\r\n      // that is the same for many panels but\r\n      // given different names in this function\r\n      const fn = () => scope.editorTab.directiveFn();\r\n\r\n      return Promise.resolve({\r\n        name: `panel-editor-tab-${pluginId}${tabIndex}`,\r\n        fn: fn,\r\n      });\r\n    },\r\n  });\r\n}\r\n\r\ndirectiveModule.directive('panelEditorTab', panelEditorTab);\r\n","import angular from 'angular';\r\n\r\nconst module = angular.module('grafana.directives');\r\n\r\nexport class QueryRowCtrl {\r\n  collapsedText: string;\r\n  canCollapse: boolean;\r\n  getCollapsedText: any;\r\n  target: any;\r\n  queryCtrl: any;\r\n  panelCtrl: any;\r\n  panel: any;\r\n  collapsed: any;\r\n\r\n  constructor() {\r\n    this.panelCtrl = this.queryCtrl.panelCtrl;\r\n    this.target = this.queryCtrl.target;\r\n    this.panel = this.panelCtrl.panel;\r\n\r\n    if (!this.target.refId) {\r\n      this.target.refId = this.panelCtrl.dashboard.getNextQueryLetter(this.panel);\r\n    }\r\n\r\n    this.toggleCollapse(true);\r\n    if (this.target.isNew) {\r\n      delete this.target.isNew;\r\n      this.toggleCollapse(false);\r\n    }\r\n\r\n    if (this.panel.targets.length < 4) {\r\n      this.collapsed = false;\r\n    }\r\n  }\r\n\r\n  toggleHideQuery() {\r\n    this.target.hide = !this.target.hide;\r\n    this.panelCtrl.refresh();\r\n  }\r\n\r\n  toggleCollapse(init) {\r\n    if (!this.canCollapse) {\r\n      return;\r\n    }\r\n\r\n    if (!this.panelCtrl.__collapsedQueryCache) {\r\n      this.panelCtrl.__collapsedQueryCache = {};\r\n    }\r\n\r\n    if (init) {\r\n      this.collapsed = this.panelCtrl.__collapsedQueryCache[this.target.refId] !== false;\r\n    } else {\r\n      this.collapsed = !this.collapsed;\r\n      this.panelCtrl.__collapsedQueryCache[this.target.refId] = this.collapsed;\r\n    }\r\n\r\n    try {\r\n      this.collapsedText = this.queryCtrl.getCollapsedText();\r\n    } catch (e) {\r\n      const err = e.message || e.toString();\r\n      this.collapsedText = 'Error: ' + err;\r\n    }\r\n  }\r\n\r\n  toggleEditorMode() {\r\n    if (this.canCollapse && this.collapsed) {\r\n      this.collapsed = false;\r\n    }\r\n\r\n    this.queryCtrl.toggleEditorMode();\r\n  }\r\n\r\n  removeQuery() {\r\n    if (this.panelCtrl.__collapsedQueryCache) {\r\n      delete this.panelCtrl.__collapsedQueryCache[this.target.refId];\r\n    }\r\n\r\n    this.panelCtrl.removeQuery(this.target);\r\n  }\r\n\r\n  duplicateQuery() {\r\n    const clone = angular.copy(this.target);\r\n    this.panelCtrl.addQuery(clone);\r\n  }\r\n\r\n  moveQuery(direction) {\r\n    this.panelCtrl.moveQuery(this.target, direction);\r\n  }\r\n}\r\n\r\n/** @ngInject */\r\nfunction queryEditorRowDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    controller: QueryRowCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    templateUrl: 'public/app/features/panel/partials/query_editor_row.html',\r\n    transclude: true,\r\n    scope: {\r\n      queryCtrl: '=',\r\n      canCollapse: '=',\r\n      hasTextEditMode: '=',\r\n    },\r\n  };\r\n}\r\n\r\nmodule.directive('queryEditorRow', queryEditorRowDirective);\r\n","import _ from 'lodash';\r\nimport appEvents from 'app/core/app_events';\r\nimport { coreModule, JsonExplorer } from 'app/core/core';\r\n\r\nconst template = `\r\n<div class=\"query-troubleshooter\" ng-if=\"ctrl.isOpen\">\r\n  <div class=\"query-troubleshooter__header\">\r\n    <a class=\"pointer\" ng-click=\"ctrl.toggleMocking()\">Mock Response</a>\r\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-hide=\"ctrl.allNodesExpanded\">\r\n      <i class=\"fa fa-plus-square-o\"></i> Expand All\r\n    </a>\r\n    <a class=\"pointer\" ng-click=\"ctrl.toggleExpand()\" ng-show=\"ctrl.allNodesExpanded\">\r\n      <i class=\"fa fa-minus-square-o\"></i> Collapse All\r\n    </a>\r\n    <a class=\"pointer\" clipboard-button=\"ctrl.getClipboardText()\"><i class=\"fa fa-clipboard\"></i> Copy to Clipboard</a>\r\n  </div>\r\n  <div class=\"query-troubleshooter__body\" ng-hide=\"ctrl.isMocking\">\r\n    <i class=\"fa fa-spinner fa-spin\" ng-show=\"ctrl.isLoading\"></i>\r\n    <div class=\"query-troubleshooter-json\"></div>\r\n  </div>\r\n  <div class=\"query-troubleshooter__body\" ng-show=\"ctrl.isMocking\">\r\n    <div class=\"gf-form p-l-1 gf-form--v-stretch\">\r\n\t\t\t<textarea class=\"gf-form-input\" style=\"width: 95%\" rows=\"10\" ng-model=\"ctrl.mockedResponse\"  placeholder=\"JSON\"></textarea>\r\n    </div>\r\n  </div>\r\n</div>\r\n`;\r\n\r\nexport class QueryTroubleshooterCtrl {\r\n  isOpen: any;\r\n  isLoading: boolean;\r\n  showResponse: boolean;\r\n  panelCtrl: any;\r\n  renderJsonExplorer: (data) => void;\r\n  onRequestErrorEventListener: any;\r\n  onRequestResponseEventListener: any;\r\n  hasError: boolean;\r\n  allNodesExpanded: boolean;\r\n  isMocking: boolean;\r\n  mockedResponse: string;\r\n  jsonExplorer: JsonExplorer;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, private $timeout) {\r\n    this.onRequestErrorEventListener = this.onRequestError.bind(this);\r\n    this.onRequestResponseEventListener = this.onRequestResponse.bind(this);\r\n\r\n    appEvents.on('ds-request-response', this.onRequestResponseEventListener);\r\n    appEvents.on('ds-request-error', this.onRequestErrorEventListener);\r\n\r\n    $scope.$on('$destroy', this.removeEventsListeners.bind(this));\r\n    $scope.$watch('ctrl.isOpen', this.stateChanged.bind(this));\r\n  }\r\n\r\n  removeEventsListeners() {\r\n    appEvents.off('ds-request-response', this.onRequestResponseEventListener);\r\n    appEvents.off('ds-request-error', this.onRequestErrorEventListener);\r\n  }\r\n\r\n  toggleMocking() {\r\n    this.isMocking = !this.isMocking;\r\n  }\r\n\r\n  onRequestError(err) {\r\n    // ignore if closed\r\n    if (!this.isOpen) {\r\n      return;\r\n    }\r\n\r\n    this.isOpen = true;\r\n    this.hasError = true;\r\n    this.onRequestResponse(err);\r\n  }\r\n\r\n  stateChanged() {\r\n    if (this.isOpen) {\r\n      this.panelCtrl.refresh();\r\n      this.isLoading = true;\r\n    }\r\n  }\r\n\r\n  getClipboardText(): string {\r\n    if (this.jsonExplorer) {\r\n      return JSON.stringify(this.jsonExplorer.json, null, 2);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  handleMocking(data) {\r\n    let mockedData;\r\n    try {\r\n      mockedData = JSON.parse(this.mockedResponse);\r\n    } catch (err) {\r\n      appEvents.emit('alert-error', ['Failed to parse mocked response']);\r\n      return;\r\n    }\r\n\r\n    data.data = mockedData;\r\n  }\r\n\r\n  onRequestResponse(data) {\r\n    // ignore if closed\r\n    if (!this.isOpen) {\r\n      return;\r\n    }\r\n\r\n    if (this.isMocking) {\r\n      this.handleMocking(data);\r\n      return;\r\n    }\r\n\r\n    this.isLoading = false;\r\n    data = _.cloneDeep(data);\r\n\r\n    if (data.headers) {\r\n      delete data.headers;\r\n    }\r\n\r\n    if (data.config) {\r\n      data.request = data.config;\r\n      delete data.config;\r\n      delete data.request.transformRequest;\r\n      delete data.request.transformResponse;\r\n      delete data.request.paramSerializer;\r\n      delete data.request.jsonpCallbackParam;\r\n      delete data.request.headers;\r\n      delete data.request.requestId;\r\n      delete data.request.inspect;\r\n      delete data.request.retry;\r\n      delete data.request.timeout;\r\n    }\r\n\r\n    if (data.data) {\r\n      data.response = data.data;\r\n\r\n      if (data.status === 200) {\r\n        // if we are in error state, assume we automatically opened\r\n        // and auto close it again\r\n        if (this.hasError) {\r\n          this.hasError = false;\r\n          this.isOpen = false;\r\n        }\r\n      }\r\n\r\n      delete data.data;\r\n      delete data.status;\r\n      delete data.statusText;\r\n      delete data.$$config;\r\n    }\r\n\r\n    this.$timeout(_.partial(this.renderJsonExplorer, data));\r\n  }\r\n\r\n  toggleExpand(depth) {\r\n    if (this.jsonExplorer) {\r\n      this.allNodesExpanded = !this.allNodesExpanded;\r\n      this.jsonExplorer.openAtDepth(this.allNodesExpanded ? 20 : 1);\r\n    }\r\n  }\r\n}\r\n\r\nexport function queryTroubleshooter() {\r\n  return {\r\n    restrict: 'E',\r\n    template: template,\r\n    controller: QueryTroubleshooterCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    scope: {\r\n      panelCtrl: '=',\r\n      isOpen: '=',\r\n    },\r\n    link: function(scope, elem, attrs, ctrl) {\r\n      ctrl.renderJsonExplorer = function(data) {\r\n        const jsonElem = elem.find('.query-troubleshooter-json');\r\n\r\n        ctrl.jsonExplorer = new JsonExplorer(data, 3, {\r\n          animateOpen: true,\r\n        });\r\n\r\n        const html = ctrl.jsonExplorer.render(true);\r\n        jsonElem.html(html);\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('queryTroubleshooter', queryTroubleshooter);\r\n","import './panel_header';\r\nimport './panel_directive';\r\nimport './solo_panel_ctrl';\r\nimport './query_ctrl';\r\nimport './panel_editor_tab';\r\nimport './query_editor_row';\r\nimport './query_troubleshooter';\r\n","import config from 'app/core/config';\r\nimport coreModule from 'app/core/core_module';\r\nimport Remarkable from 'remarkable';\r\nimport _ from 'lodash';\r\n\r\nexport class OrgUsersCtrl {\r\n  unfiltered: any;\r\n  users: any;\r\n  pendingInvites: any;\r\n  editor: any;\r\n  navModel: any;\r\n  externalUserMngLinkUrl: string;\r\n  externalUserMngLinkName: string;\r\n  externalUserMngInfo: string;\r\n  canInvite: boolean;\r\n  searchQuery: string;\r\n  showInvites: boolean;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private backendSrv, navModelSrv, $sce) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\r\n\r\n    this.get();\r\n    this.externalUserMngLinkUrl = config.externalUserMngLinkUrl;\r\n    this.externalUserMngLinkName = config.externalUserMngLinkName;\r\n    this.canInvite = !config.disableLoginForm && !config.externalUserMngLinkName;\r\n\r\n    // render external user management info markdown\r\n    if (config.externalUserMngInfo) {\r\n      this.externalUserMngInfo = new Remarkable({\r\n        linkTarget: '__blank',\r\n      }).render(config.externalUserMngInfo);\r\n    }\r\n  }\r\n\r\n  get() {\r\n    this.backendSrv.get('/api/org/users').then(users => {\r\n      this.users = users;\r\n      this.unfiltered = users;\r\n    });\r\n    this.backendSrv.get('/api/org/invites').then(pendingInvites => {\r\n      this.pendingInvites = pendingInvites;\r\n    });\r\n  }\r\n\r\n  onQueryUpdated() {\r\n    const regex = new RegExp(this.searchQuery, 'ig');\r\n    this.users = _.filter(this.unfiltered, item => {\r\n      return regex.test(item.email) || regex.test(item.login);\r\n    });\r\n  }\r\n\r\n  updateOrgUser(user) {\r\n    this.backendSrv.patch('/api/org/users/' + user.userId, user);\r\n  }\r\n\r\n  removeUser(user) {\r\n    this.$scope.appEvent('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Are you sure you want to delete user ' + user.login + '?',\r\n      yesText: 'Delete',\r\n      icon: 'fa-warning',\r\n      onConfirm: () => {\r\n        this.removeUserConfirmed(user);\r\n      },\r\n    });\r\n  }\r\n\r\n  removeUserConfirmed(user) {\r\n    this.backendSrv.delete('/api/org/users/' + user.userId).then(this.get.bind(this));\r\n  }\r\n\r\n  revokeInvite(invite, evt) {\r\n    evt.stopPropagation();\r\n    this.backendSrv.patch('/api/org/invites/' + invite.code + '/revoke').then(this.get.bind(this));\r\n  }\r\n\r\n  copyInviteToClipboard(evt) {\r\n    evt.stopPropagation();\r\n  }\r\n\r\n  getInviteUrl(invite) {\r\n    return invite.url;\r\n  }\r\n}\r\n\r\ncoreModule.controller('OrgUsersCtrl', OrgUsersCtrl);\r\n","import config from 'app/core/config';\r\nimport { coreModule } from 'app/core/core';\r\n\r\nexport class ProfileCtrl {\r\n  user: any;\r\n  oldTheme: any;\r\n  teams: any = [];\r\n  orgs: any = [];\r\n  userForm: any;\r\n  showTeamsList = false;\r\n  showOrgsList = false;\r\n  readonlyLoginFields = config.disableLoginForm;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private contextSrv, private $location, navModelSrv) {\r\n    this.getUser();\r\n    this.getUserTeams();\r\n    this.getUserOrgs();\r\n    this.navModel = navModelSrv.getNav('profile', 'profile-settings', 0);\r\n  }\r\n\r\n  getUser() {\r\n    this.backendSrv.get('/api/user').then(user => {\r\n      this.user = user;\r\n      this.user.theme = user.theme || 'dark';\r\n    });\r\n  }\r\n\r\n  getUserTeams() {\r\n    this.backendSrv.get('/api/user/teams').then(teams => {\r\n      this.teams = teams;\r\n      this.showTeamsList = this.teams.length > 0;\r\n    });\r\n  }\r\n\r\n  getUserOrgs() {\r\n    this.backendSrv.get('/api/user/orgs').then(orgs => {\r\n      this.orgs = orgs;\r\n      this.showOrgsList = orgs.length > 1;\r\n    });\r\n  }\r\n\r\n  setUsingOrg(org) {\r\n    this.backendSrv.post('/api/user/using/' + org.orgId).then(() => {\r\n      window.location.href = config.appSubUrl + '/profile';\r\n    });\r\n  }\r\n\r\n  update() {\r\n    if (!this.userForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    this.backendSrv.put('/api/user/', this.user).then(() => {\r\n      this.contextSrv.user.name = this.user.name || this.user.login;\r\n      if (this.oldTheme !== this.user.theme) {\r\n        window.location.href = config.appSubUrl + this.$location.path();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('ProfileCtrl', ProfileCtrl);\r\n","import angular from 'angular';\r\nimport config from 'app/core/config';\r\n\r\nexport class SelectOrgCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, backendSrv, contextSrv) {\r\n    contextSrv.sidemenu = false;\r\n\r\n    $scope.navModel = {\r\n      main: {\r\n        icon: 'gicon gicon-branding',\r\n        subTitle: 'Preferences',\r\n        text: 'Select active organization',\r\n      },\r\n    };\r\n\r\n    $scope.init = function() {\r\n      $scope.getUserOrgs();\r\n    };\r\n\r\n    $scope.getUserOrgs = function() {\r\n      backendSrv.get('/api/user/orgs').then(function(orgs) {\r\n        $scope.orgs = orgs;\r\n      });\r\n    };\r\n\r\n    $scope.setUsingOrg = function(org) {\r\n      backendSrv.post('/api/user/using/' + org.orgId).then(function() {\r\n        window.location.href = config.appSubUrl + '/';\r\n      });\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('SelectOrgCtrl', SelectOrgCtrl);\r\n","import angular from 'angular';\r\nimport config from 'app/core/config';\r\n\r\nexport class NewOrgCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $http, backendSrv, navModelSrv) {\r\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\r\n    $scope.newOrg = { name: '' };\r\n\r\n    $scope.createOrg = function() {\r\n      backendSrv.post('/api/orgs/', $scope.newOrg).then(function(result) {\r\n        backendSrv.post('/api/user/using/' + result.orgId).then(function() {\r\n          window.location.href = config.appSubUrl + '/org';\r\n        });\r\n      });\r\n    };\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('NewOrgCtrl', NewOrgCtrl);\r\n","import angular from 'angular';\r\nimport config from 'app/core/config';\r\n\r\nexport class ChangePasswordCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, backendSrv, $location, navModelSrv) {\r\n    $scope.command = {};\r\n    $scope.authProxyEnabled = config.authProxyEnabled;\r\n    $scope.ldapEnabled = config.ldapEnabled;\r\n    $scope.navModel = navModelSrv.getNav('profile', 'change-password', 0);\r\n\r\n    $scope.changePassword = function() {\r\n      if (!$scope.userForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      if ($scope.command.newPassword !== $scope.command.confirmNew) {\r\n        $scope.appEvent('alert-warning', ['New passwords do not match', '']);\r\n        return;\r\n      }\r\n\r\n      backendSrv.put('/api/user/password', $scope.command).then(function() {\r\n        $location.path('profile');\r\n      });\r\n    };\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('ChangePasswordCtrl', ChangePasswordCtrl);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nexport class UserInviteCtrl {\r\n  navModel: any;\r\n  invite: any;\r\n  inviteForm: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, navModelSrv, private $location) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'users', 0);\r\n\r\n    this.invite = {\r\n      name: '',\r\n      email: '',\r\n      role: 'Editor',\r\n      sendEmail: true,\r\n    };\r\n  }\r\n\r\n  sendInvite() {\r\n    if (!this.inviteForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    return this.backendSrv.post('/api/org/invites', this.invite).then(() => {\r\n      this.$location.path('org/users/');\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('UserInviteCtrl', UserInviteCtrl);\r\n","import coreModule from 'app/core/core_module';\r\n\r\nexport default class CreateTeamCtrl {\r\n  name: string;\r\n  email: string;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $location, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'teams', 0);\r\n  }\r\n\r\n  create() {\r\n    const payload = {\r\n      name: this.name,\r\n      email: this.email,\r\n    };\r\n    this.backendSrv.post('/api/teams', payload).then(result => {\r\n      if (result.teamId) {\r\n        this.$location.path('/org/teams/edit/' + result.teamId);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('CreateTeamCtrl', CreateTeamCtrl);\r\n","import angular from 'angular';\r\n\r\nexport class OrgApiKeysCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $http, backendSrv, navModelSrv) {\r\n    $scope.navModel = navModelSrv.getNav('cfg', 'apikeys', 0);\r\n\r\n    $scope.roleTypes = ['Viewer', 'Editor', 'Admin'];\r\n    $scope.token = { role: 'Viewer' };\r\n\r\n    $scope.init = function() {\r\n      $scope.getTokens();\r\n    };\r\n\r\n    $scope.getTokens = function() {\r\n      backendSrv.get('/api/auth/keys').then(function(tokens) {\r\n        $scope.tokens = tokens;\r\n      });\r\n    };\r\n\r\n    $scope.removeToken = function(id) {\r\n      backendSrv.delete('/api/auth/keys/' + id).then($scope.getTokens);\r\n    };\r\n\r\n    $scope.addToken = function() {\r\n      backendSrv.post('/api/auth/keys', $scope.token).then(function(result) {\r\n        const modalScope = $scope.$new(true);\r\n        modalScope.key = result.key;\r\n        modalScope.rootPath = window.location.origin + $scope.$root.appSubUrl;\r\n\r\n        $scope.appEvent('show-modal', {\r\n          src: 'public/app/features/org/partials/apikeyModal.html',\r\n          scope: modalScope,\r\n        });\r\n\r\n        $scope.getTokens();\r\n      });\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('OrgApiKeysCtrl', OrgApiKeysCtrl);\r\n","import angular from 'angular';\r\n\r\nexport class OrgDetailsCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $http, backendSrv, contextSrv, navModelSrv) {\r\n    $scope.init = function() {\r\n      $scope.getOrgInfo();\r\n      $scope.navModel = navModelSrv.getNav('cfg', 'org-settings', 0);\r\n    };\r\n\r\n    $scope.getOrgInfo = function() {\r\n      backendSrv.get('/api/org').then(function(org) {\r\n        $scope.org = org;\r\n        $scope.address = org.address;\r\n        contextSrv.user.orgName = org.name;\r\n      });\r\n    };\r\n\r\n    $scope.update = function() {\r\n      if (!$scope.orgForm.$valid) {\r\n        return;\r\n      }\r\n      const data = { name: $scope.org.name };\r\n      backendSrv.put('/api/org', data).then($scope.getOrgInfo);\r\n    };\r\n\r\n    $scope.updateAddress = function() {\r\n      if (!$scope.addressForm.$valid) {\r\n        return;\r\n      }\r\n      backendSrv.put('/api/org/address', $scope.address).then($scope.getOrgInfo);\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('OrgDetailsCtrl', OrgDetailsCtrl);\r\n","import config from 'app/core/config';\r\nimport coreModule from 'app/core/core_module';\r\n\r\nexport class PrefsControlCtrl {\r\n  prefs: any;\r\n  oldTheme: any;\r\n  prefsForm: any;\r\n  mode: string;\r\n\r\n  timezones: any = [\r\n    { value: '', text: 'Default' },\r\n    { value: 'browser', text: 'Local browser time' },\r\n    { value: 'utc', text: 'UTC' },\r\n  ];\r\n  themes: any = [{ value: '', text: 'Default' }, { value: 'dark', text: 'Dark' }, { value: 'light', text: 'Light' }];\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, private $location) {}\r\n\r\n  $onInit() {\r\n    return this.backendSrv.get(`/api/${this.mode}/preferences`).then(prefs => {\r\n      this.prefs = prefs;\r\n      this.oldTheme = prefs.theme;\r\n    });\r\n  }\r\n\r\n  updatePrefs() {\r\n    if (!this.prefsForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    const cmd = {\r\n      theme: this.prefs.theme,\r\n      timezone: this.prefs.timezone,\r\n      homeDashboardId: this.prefs.homeDashboardId,\r\n    };\r\n\r\n    this.backendSrv.put(`/api/${this.mode}/preferences`, cmd).then(() => {\r\n      window.location.href = config.appSubUrl + this.$location.path();\r\n    });\r\n  }\r\n}\r\n\r\nconst template = `\r\n<form name=\"ctrl.prefsForm\" class=\"section gf-form-group\">\r\n  <h3 class=\"page-heading\">Preferences</h3>\r\n\r\n  <div class=\"gf-form\">\r\n    <span class=\"gf-form-label width-11\">UI Theme</span>\r\n    <div class=\"gf-form-select-wrapper max-width-20\">\r\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.theme\" ng-options=\"f.value as f.text for f in ctrl.themes\"></select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"gf-form\">\r\n    <span class=\"gf-form-label width-11\">\r\n      Home Dashboard\r\n      <info-popover mode=\"right-normal\">\r\n        Not finding dashboard you want? Star it first, then it should appear in this select box.\r\n      </info-popover>\r\n    </span>\r\n    <dashboard-selector class=\"gf-form-select-wrapper max-width-20\" model=\"ctrl.prefs.homeDashboardId\">\r\n    </dashboard-selector>\r\n  </div>\r\n\r\n  <div class=\"gf-form\">\r\n    <label class=\"gf-form-label width-11\">Timezone</label>\r\n    <div class=\"gf-form-select-wrapper max-width-20\">\r\n      <select class=\"gf-form-input\" ng-model=\"ctrl.prefs.timezone\" ng-options=\"f.value as f.text for f in ctrl.timezones\"></select>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"gf-form-button-row\">\r\n    <button type=\"submit\" class=\"btn btn-success\" ng-click=\"ctrl.updatePrefs()\">Save</button>\r\n  </div>\r\n</form>\r\n`;\r\n\r\nexport function prefsControlDirective() {\r\n  return {\r\n    restrict: 'E',\r\n    controller: PrefsControlCtrl,\r\n    bindToController: true,\r\n    controllerAs: 'ctrl',\r\n    template: template,\r\n    scope: {\r\n      mode: '@',\r\n    },\r\n  };\r\n}\r\n\r\ncoreModule.directive('prefsControl', prefsControlDirective);\r\n","import './org_users_ctrl';\r\nimport './profile_ctrl';\r\nimport './org_users_ctrl';\r\nimport './select_org_ctrl';\r\nimport './change_password_ctrl';\r\nimport './new_org_ctrl';\r\nimport './user_invite_ctrl';\r\nimport './create_team_ctrl';\r\nimport './org_api_keys_ctrl';\r\nimport './org_details_ctrl';\r\nimport './prefs_control';\r\n","export default class AdminListUsersCtrl {\r\n  users: any;\r\n  pages = [];\r\n  perPage = 50;\r\n  page = 1;\r\n  totalPages: number;\r\n  showPaging = false;\r\n  query: any;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $scope, private backendSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\r\n    this.query = '';\r\n    this.getUsers();\r\n  }\r\n\r\n  getUsers() {\r\n    this.backendSrv\r\n      .get(`/api/users/search?perpage=${this.perPage}&page=${this.page}&query=${this.query}`)\r\n      .then(result => {\r\n        this.users = result.users;\r\n        this.page = result.page;\r\n        this.perPage = result.perPage;\r\n        this.totalPages = Math.ceil(result.totalCount / result.perPage);\r\n        this.showPaging = this.totalPages > 1;\r\n        this.pages = [];\r\n\r\n        for (let i = 1; i < this.totalPages + 1; i++) {\r\n          this.pages.push({ page: i, current: i === this.page });\r\n        }\r\n      });\r\n  }\r\n\r\n  navigateToPage(page) {\r\n    this.page = page.page;\r\n    this.getUsers();\r\n  }\r\n\r\n  deleteUser(user) {\r\n    this.$scope.appEvent('confirm-modal', {\r\n      title: 'Delete',\r\n      text: 'Do you want to delete ' + user.login + '?',\r\n      icon: 'fa-trash',\r\n      yesText: 'Delete',\r\n      onConfirm: () => {\r\n        this.backendSrv.delete('/api/admin/users/' + user.id).then(() => {\r\n          this.getUsers();\r\n        });\r\n      },\r\n    });\r\n  }\r\n}\r\n","import angular from 'angular';\r\n\r\nexport class AdminListOrgsCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, backendSrv, navModelSrv) {\r\n    $scope.init = function() {\r\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\r\n      $scope.getOrgs();\r\n    };\r\n\r\n    $scope.getOrgs = function() {\r\n      backendSrv.get('/api/orgs').then(function(orgs) {\r\n        $scope.orgs = orgs;\r\n      });\r\n    };\r\n\r\n    $scope.deleteOrg = function(org) {\r\n      $scope.appEvent('confirm-modal', {\r\n        title: 'Delete',\r\n        text: 'Do you want to delete organization ' + org.name + '?',\r\n        text2: 'All dashboards for this organization will be removed!',\r\n        icon: 'fa-trash',\r\n        yesText: 'Delete',\r\n        onConfirm: function() {\r\n          backendSrv.delete('/api/orgs/' + org.id).then(function() {\r\n            $scope.getOrgs();\r\n          });\r\n        },\r\n      });\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('AdminListOrgsCtrl', AdminListOrgsCtrl);\r\n","import angular from 'angular';\r\n\r\nexport class AdminEditOrgCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\r\n    $scope.init = function() {\r\n      $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-orgs', 1);\r\n\r\n      if ($routeParams.id) {\r\n        $scope.getOrg($routeParams.id);\r\n        $scope.getOrgUsers($routeParams.id);\r\n      }\r\n    };\r\n\r\n    $scope.getOrg = function(id) {\r\n      backendSrv.get('/api/orgs/' + id).then(function(org) {\r\n        $scope.org = org;\r\n      });\r\n    };\r\n\r\n    $scope.getOrgUsers = function(id) {\r\n      backendSrv.get('/api/orgs/' + id + '/users').then(function(orgUsers) {\r\n        $scope.orgUsers = orgUsers;\r\n      });\r\n    };\r\n\r\n    $scope.update = function() {\r\n      if (!$scope.orgDetailsForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      backendSrv.put('/api/orgs/' + $scope.org.id, $scope.org).then(function() {\r\n        $location.path('/admin/orgs');\r\n      });\r\n    };\r\n\r\n    $scope.updateOrgUser = function(orgUser) {\r\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId, orgUser);\r\n    };\r\n\r\n    $scope.removeOrgUser = function(orgUser) {\r\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + orgUser.userId).then(function() {\r\n        $scope.getOrgUsers($scope.org.id);\r\n      });\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('AdminEditOrgCtrl', AdminEditOrgCtrl);\r\n","import angular from 'angular';\r\nimport _ from 'lodash';\r\n\r\nexport class AdminEditUserCtrl {\r\n  /** @ngInject */\r\n  constructor($scope, $routeParams, backendSrv, $location, navModelSrv) {\r\n    $scope.user = {};\r\n    $scope.newOrg = { name: '', role: 'Editor' };\r\n    $scope.permissions = {};\r\n    $scope.navModel = navModelSrv.getNav('cfg', 'admin', 'global-users', 1);\r\n\r\n    $scope.init = function() {\r\n      if ($routeParams.id) {\r\n        $scope.getUser($routeParams.id);\r\n        $scope.getUserOrgs($routeParams.id);\r\n      }\r\n    };\r\n\r\n    $scope.getUser = function(id) {\r\n      backendSrv.get('/api/users/' + id).then(function(user) {\r\n        $scope.user = user;\r\n        $scope.user_id = id;\r\n        $scope.permissions.isGrafanaAdmin = user.isGrafanaAdmin;\r\n      });\r\n    };\r\n\r\n    $scope.setPassword = function() {\r\n      if (!$scope.passwordForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      const payload = { password: $scope.password };\r\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/password', payload).then(function() {\r\n        $location.path('/admin/users');\r\n      });\r\n    };\r\n\r\n    $scope.updatePermissions = function() {\r\n      const payload = $scope.permissions;\r\n\r\n      backendSrv.put('/api/admin/users/' + $scope.user_id + '/permissions', payload).then(function() {\r\n        $location.path('/admin/users');\r\n      });\r\n    };\r\n\r\n    $scope.create = function() {\r\n      if (!$scope.userForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      backendSrv.post('/api/admin/users', $scope.user).then(function() {\r\n        $location.path('/admin/users');\r\n      });\r\n    };\r\n\r\n    $scope.getUserOrgs = function(id) {\r\n      backendSrv.get('/api/users/' + id + '/orgs').then(function(orgs) {\r\n        $scope.orgs = orgs;\r\n      });\r\n    };\r\n\r\n    $scope.update = function() {\r\n      if (!$scope.userForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      backendSrv.put('/api/users/' + $scope.user_id, $scope.user).then(function() {\r\n        $location.path('/admin/users');\r\n      });\r\n    };\r\n\r\n    $scope.updateOrgUser = function(orgUser) {\r\n      backendSrv.patch('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id, orgUser).then(function() {});\r\n    };\r\n\r\n    $scope.removeOrgUser = function(orgUser) {\r\n      backendSrv.delete('/api/orgs/' + orgUser.orgId + '/users/' + $scope.user_id).then(function() {\r\n        $scope.getUser($scope.user_id);\r\n        $scope.getUserOrgs($scope.user_id);\r\n      });\r\n    };\r\n\r\n    $scope.orgsSearchCache = [];\r\n\r\n    $scope.searchOrgs = function(queryStr, callback) {\r\n      if ($scope.orgsSearchCache.length > 0) {\r\n        callback(_.map($scope.orgsSearchCache, 'name'));\r\n        return;\r\n      }\r\n\r\n      backendSrv.get('/api/orgs', { query: '' }).then(function(result) {\r\n        $scope.orgsSearchCache = result;\r\n        callback(_.map(result, 'name'));\r\n      });\r\n    };\r\n\r\n    $scope.addOrgUser = function() {\r\n      if (!$scope.addOrgForm.$valid) {\r\n        return;\r\n      }\r\n\r\n      const orgInfo = _.find($scope.orgsSearchCache, {\r\n        name: $scope.newOrg.name,\r\n      });\r\n      if (!orgInfo) {\r\n        return;\r\n      }\r\n\r\n      $scope.newOrg.loginOrEmail = $scope.user.login;\r\n\r\n      backendSrv.post('/api/orgs/' + orgInfo.id + '/users/', $scope.newOrg).then(function() {\r\n        $scope.getUser($scope.user_id);\r\n        $scope.getUserOrgs($scope.user_id);\r\n      });\r\n    };\r\n\r\n    $scope.init();\r\n  }\r\n}\r\n\r\nangular.module('grafana.controllers').controller('AdminEditUserCtrl', AdminEditUserCtrl);\r\n","import AdminListUsersCtrl from './admin_list_users_ctrl';\r\nimport './admin_list_orgs_ctrl';\r\nimport './admin_edit_org_ctrl';\r\nimport './admin_edit_user_ctrl';\r\n\r\nimport coreModule from 'app/core/core_module';\r\n\r\nclass AdminSettingsCtrl {\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor($scope, backendSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-settings', 1);\r\n\r\n    backendSrv.get('/api/admin/settings').then(function(settings) {\r\n      $scope.settings = settings;\r\n    });\r\n  }\r\n}\r\n\r\nclass AdminHomeCtrl {\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 1);\r\n  }\r\n}\r\n\r\nexport class AdminStatsCtrl {\r\n  stats: any;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(backendSrv: any, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'server-stats', 1);\r\n\r\n    backendSrv.get('/api/admin/stats').then(stats => {\r\n      this.stats = stats;\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('AdminSettingsCtrl', AdminSettingsCtrl);\r\ncoreModule.controller('AdminHomeCtrl', AdminHomeCtrl);\r\ncoreModule.controller('AdminStatsCtrl', AdminStatsCtrl);\r\ncoreModule.controller('AdminListUsersCtrl', AdminListUsersCtrl);\r\n","import { coreModule } from 'app/core/core';\r\n\r\nexport class AlertNotificationsListCtrl {\r\n  notifications: any;\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private backendSrv, navModelSrv) {\r\n    this.loadNotifications();\r\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\r\n  }\r\n\r\n  loadNotifications() {\r\n    this.backendSrv.get(`/api/alert-notifications`).then(result => {\r\n      this.notifications = result;\r\n    });\r\n  }\r\n\r\n  deleteNotification(id) {\r\n    this.backendSrv.delete(`/api/alert-notifications/${id}`).then(() => {\r\n      this.notifications = this.notifications.filter(notification => {\r\n        return notification.id !== id;\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('AlertNotificationsListCtrl', AlertNotificationsListCtrl);\r\n","import _ from 'lodash';\r\nimport { appEvents, coreModule } from 'app/core/core';\r\n\r\nexport class AlertNotificationEditCtrl {\r\n  theForm: any;\r\n  navModel: any;\r\n  testSeverity = 'critical';\r\n  notifiers: any;\r\n  notifierTemplateId: string;\r\n  isNew: boolean;\r\n  model: any;\r\n  defaults: any = {\r\n    type: 'email',\r\n    settings: {\r\n      httpMethod: 'POST',\r\n      autoResolve: true,\r\n      uploadImage: true,\r\n    },\r\n    isDefault: false,\r\n  };\r\n\r\n  /** @ngInject */\r\n  constructor(private $routeParams, private backendSrv, private $location, private $templateCache, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('alerting', 'channels', 0);\r\n    this.isNew = !this.$routeParams.id;\r\n\r\n    this.backendSrv\r\n      .get(`/api/alert-notifiers`)\r\n      .then(notifiers => {\r\n        this.notifiers = notifiers;\r\n\r\n        // add option templates\r\n        for (const notifier of this.notifiers) {\r\n          this.$templateCache.put(this.getNotifierTemplateId(notifier.type), notifier.optionsTemplate);\r\n        }\r\n\r\n        if (!this.$routeParams.id) {\r\n          this.navModel.breadcrumbs.push({ text: 'New channel' });\r\n          this.navModel.node = { text: 'New channel' };\r\n          return _.defaults(this.model, this.defaults);\r\n        }\r\n\r\n        return this.backendSrv.get(`/api/alert-notifications/${this.$routeParams.id}`).then(result => {\r\n          this.navModel.breadcrumbs.push({ text: result.name });\r\n          this.navModel.node = { text: result.name };\r\n          result.settings = _.defaults(result.settings, this.defaults.settings);\r\n          return result;\r\n        });\r\n      })\r\n      .then(model => {\r\n        this.model = model;\r\n        this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (!this.theForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    if (this.model.id) {\r\n      this.backendSrv\r\n        .put(`/api/alert-notifications/${this.model.id}`, this.model)\r\n        .then(res => {\r\n          this.model = res;\r\n          appEvents.emit('alert-success', ['Notification updated', '']);\r\n        })\r\n        .catch(err => {\r\n          if (err.data && err.data.error) {\r\n            appEvents.emit('alert-error', [err.data.error]);\r\n          }\r\n        });\r\n    } else {\r\n      this.backendSrv\r\n        .post(`/api/alert-notifications`, this.model)\r\n        .then(res => {\r\n          appEvents.emit('alert-success', ['Notification created', '']);\r\n          this.$location.path('alerting/notifications');\r\n        })\r\n        .catch(err => {\r\n          if (err.data && err.data.error) {\r\n            appEvents.emit('alert-error', [err.data.error]);\r\n          }\r\n        });\r\n    }\r\n  }\r\n\r\n  getNotifierTemplateId(type) {\r\n    return `notifier-options-${type}`;\r\n  }\r\n\r\n  typeChanged() {\r\n    this.model.settings = _.defaults({}, this.defaults.settings);\r\n    this.notifierTemplateId = this.getNotifierTemplateId(this.model.type);\r\n  }\r\n\r\n  testNotification() {\r\n    if (!this.theForm.$valid) {\r\n      return;\r\n    }\r\n\r\n    const payload = {\r\n      name: this.model.name,\r\n      type: this.model.type,\r\n      settings: this.model.settings,\r\n    };\r\n\r\n    this.backendSrv.post(`/api/alert-notifications/test`, payload).then(res => {\r\n      appEvents.emit('alert-success', ['Test notification sent', '']);\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('AlertNotificationEditCtrl', AlertNotificationEditCtrl);\r\n","import './notifications_list_ctrl';\r\nimport './notification_edit_ctrl';\r\n","import coreModule from 'app/core/core_module';\r\nimport config from 'app/core/config';\r\n\r\nclass StyleGuideCtrl {\r\n  theme: string;\r\n  buttonNames = ['primary', 'secondary', 'inverse', 'success', 'warning', 'danger'];\r\n  buttonSizes = ['btn-small', '', 'btn-large'];\r\n  buttonVariants = ['-'];\r\n  navModel: any;\r\n\r\n  /** @ngInject */\r\n  constructor(private $routeParams, private backendSrv, navModelSrv) {\r\n    this.navModel = navModelSrv.getNav('cfg', 'admin', 'styleguide', 1);\r\n    this.theme = config.bootData.user.lightTheme ? 'light' : 'dark';\r\n  }\r\n\r\n  switchTheme() {\r\n    this.$routeParams.theme = this.theme === 'dark' ? 'light' : 'dark';\r\n\r\n    const cmd = {\r\n      theme: this.$routeParams.theme,\r\n    };\r\n\r\n    this.backendSrv.put('/api/user/preferences', cmd).then(() => {\r\n      window.location.href = window.location.href;\r\n    });\r\n  }\r\n}\r\n\r\ncoreModule.controller('StyleGuideCtrl', StyleGuideCtrl);\r\n","import './panellinks/module';\r\nimport './dashlinks/module';\r\nimport './annotations/all';\r\nimport './templating/all';\r\nimport './plugins/all';\r\nimport './dashboard/all';\r\nimport './playlist/all';\r\nimport './snapshot/all';\r\nimport './panel/all';\r\nimport './org/all';\r\nimport './admin/admin';\r\nimport './alerting/all';\r\nimport './styleguide/styleguide';\r\n"],"sourceRoot":""}